import { o as vg, e as Yt, l as ke, r as Mc, s as yg, a as _g, p as Qt, b as Tg, c as bg, U as xg, d as Sg } from "./parameters-bundle.css-D8cwbzFi.js";
import { c as Bc, d as Eg, I as Cg } from "./Icon-DMcPBkxp.js";
const wg = "play", Fc = "M176 153l181 109-181 109V153zM448 32q13 0 22.5 9.5T480 64v384q0 14-9.5 23t-22.5 9H64q-14 0-23-9t-9-23V64q0-13 9-22.5T64 32h384zm0 32H64v384h384V64z", Ag = !0, Dg = "SAP-icons-v4", kg = "@ui5/webcomponents-icons";
Bc(wg, { pathData: Fc, ltr: Ag, collection: Dg, packageName: kg });
const Ig = "play", Uc = "M256 0q53 0 100 20t81.5 54.5T492 156t20 100-20 100-54.5 81.5T356 492t-100 20-100-20-81.5-54.5T20 356 0 256t20-100 54.5-81.5T156 20 256 0zm0 461q43 0 80.5-16t65-44 43.5-65 16-80-16-80.5-43.5-65-65-43.5T256 51t-80 16-65 43.5-44 65T51 256t16 80 44 65 65 44 80 16zm85-226q11 8 11 21t-11 21l-109 77q-5 4-14 4-11 0-18.5-7t-7.5-18V179q0-11 7.5-18.5T218 153q7 0 14 5z", Pg = !0, Lg = "SAP-icons-v5", Og = "@ui5/webcomponents-icons";
Bc(Ig, { pathData: Uc, ltr: Pg, collection: Lg, packageName: Og });
vg();
var Vr = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Jt(i) {
  return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i;
}
function qc(i) {
  if (i.__esModule)
    return i;
  var e = i.default;
  if (typeof e == "function") {
    var t = function s() {
      return this instanceof s ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else
    t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(i).forEach(function(s) {
    var r = Object.getOwnPropertyDescriptor(i, s);
    Object.defineProperty(t, s, r.get ? r : {
      enumerable: !0,
      get: function() {
        return i[s];
      }
    });
  }), t;
}
var Ds;
typeof window < "u" ? Ds = window : typeof Vr < "u" ? Ds = Vr : typeof self < "u" ? Ds = self : Ds = {};
var pn = Ds;
const E = /* @__PURE__ */ Jt(pn), jg = {}, Rg = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: jg
}, Symbol.toStringTag, { value: "Module" })), Ng = /* @__PURE__ */ qc(Rg);
var cu = typeof Vr < "u" ? Vr : typeof window < "u" ? window : {}, Mg = Ng, ks;
typeof document < "u" ? ks = document : (ks = cu["__GLOBAL_DOCUMENT_CACHE@4"], ks || (ks = cu["__GLOBAL_DOCUMENT_CACHE@4"] = Mg));
var $c = ks;
const B = /* @__PURE__ */ Jt($c);
var La = { exports: {} };
(function(i, e) {
  function t(u) {
    if (u && typeof u == "object") {
      var f = u.which || u.keyCode || u.charCode;
      f && (u = f);
    }
    if (typeof u == "number")
      return a[u];
    var m = String(u), v = s[m.toLowerCase()];
    if (v)
      return v;
    var v = r[m.toLowerCase()];
    if (v)
      return v;
    if (m.length === 1)
      return m.charCodeAt(0);
  }
  t.isEventKey = function(f, m) {
    if (f && typeof f == "object") {
      var v = f.which || f.keyCode || f.charCode;
      if (v == null)
        return !1;
      if (typeof m == "string") {
        var b = s[m.toLowerCase()];
        if (b)
          return b === v;
        var b = r[m.toLowerCase()];
        if (b)
          return b === v;
      } else if (typeof m == "number")
        return m === v;
      return !1;
    }
  }, e = i.exports = t;
  var s = e.code = e.codes = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    ctrl: 17,
    alt: 18,
    "pause/break": 19,
    "caps lock": 20,
    esc: 27,
    space: 32,
    "page up": 33,
    "page down": 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    insert: 45,
    delete: 46,
    command: 91,
    "left command": 91,
    "right command": 93,
    "numpad *": 106,
    "numpad +": 107,
    "numpad -": 109,
    "numpad .": 110,
    "numpad /": 111,
    "num lock": 144,
    "scroll lock": 145,
    "my computer": 182,
    "my calculator": 183,
    ";": 186,
    "=": 187,
    ",": 188,
    "-": 189,
    ".": 190,
    "/": 191,
    "`": 192,
    "[": 219,
    "\\": 220,
    "]": 221,
    "'": 222
  }, r = e.aliases = {
    windows: 91,
    "⇧": 16,
    "⌥": 18,
    "⌃": 17,
    "⌘": 91,
    ctl: 17,
    control: 17,
    option: 18,
    pause: 19,
    break: 19,
    caps: 20,
    return: 13,
    escape: 27,
    spc: 32,
    spacebar: 32,
    pgup: 33,
    pgdn: 34,
    ins: 45,
    del: 46,
    cmd: 91
  };
  /*!
   * Programatically add the following
   */
  for (n = 97; n < 123; n++)
    s[String.fromCharCode(n)] = n - 32;
  for (var n = 48; n < 58; n++)
    s[n - 48] = n;
  for (n = 1; n < 13; n++)
    s["f" + n] = n + 111;
  for (n = 0; n < 10; n++)
    s["numpad " + n] = n + 96;
  var a = e.names = e.title = {};
  for (n in s)
    a[s[n]] = n;
  for (var l in r)
    s[l] = r[l];
})(La, La.exports);
var Bg = La.exports;
const W = /* @__PURE__ */ Jt(Bg);
var Fg = Ug;
function Ug(i, e) {
  var t, s = null;
  try {
    t = JSON.parse(i, e);
  } catch (r) {
    s = r;
  }
  return [s, t];
}
const qg = /* @__PURE__ */ Jt(Fg);
var ho = { exports: {} };
function it() {
  return it = Object.assign ? Object.assign.bind() : function(i) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var s in t)
        Object.prototype.hasOwnProperty.call(t, s) && (i[s] = t[s]);
    }
    return i;
  }, it.apply(this, arguments);
}
const $g = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: it
}, Symbol.toStringTag, { value: "Module" })), Vg = /* @__PURE__ */ qc($g);
var Hg = Gg, zg = Object.prototype.toString;
function Gg(i) {
  if (!i)
    return !1;
  var e = zg.call(i);
  return e === "[object Function]" || typeof i == "function" && e !== "[object RegExp]" || typeof window < "u" && // IE8 and below
  (i === window.setTimeout || i === window.alert || i === window.confirm || i === window.prompt);
}
var Wg = pn, Xg = function(e, t) {
  return t === void 0 && (t = !1), function(s, r, n) {
    if (s) {
      e(s);
      return;
    }
    if (r.statusCode >= 400 && r.statusCode <= 599) {
      var a = n;
      if (t)
        if (Wg.TextDecoder) {
          var l = Kg(r.headers && r.headers["content-type"]);
          try {
            a = new TextDecoder(l).decode(n);
          } catch {
          }
        } else
          a = String.fromCharCode.apply(null, new Uint8Array(n));
      e({
        cause: a
      });
      return;
    }
    e(null, n);
  };
};
function Kg(i) {
  return i === void 0 && (i = ""), i.toLowerCase().split(";").reduce(function(e, t) {
    var s = t.split("="), r = s[0], n = s[1];
    return r.trim() === "charset" ? n.trim() : e;
  }, "utf-8");
}
var Yg = Xg, Vc = pn, Qg = Vg, Jg = Hg;
bt.httpHandler = Yg;
/**
 * @license
 * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>
 * Copyright (c) 2014 David Björklund
 * Available under the MIT license
 * <https://github.com/kesla/parse-headers/blob/master/LICENCE>
 */
var Zg = function(e) {
  var t = {};
  return e && e.trim().split(`
`).forEach(function(s) {
    var r = s.indexOf(":"), n = s.slice(0, r).trim().toLowerCase(), a = s.slice(r + 1).trim();
    typeof t[n] > "u" ? t[n] = a : Array.isArray(t[n]) ? t[n].push(a) : t[n] = [t[n], a];
  }), t;
};
ho.exports = bt;
ho.exports.default = bt;
bt.XMLHttpRequest = Vc.XMLHttpRequest || s0;
bt.XDomainRequest = "withCredentials" in new bt.XMLHttpRequest() ? bt.XMLHttpRequest : Vc.XDomainRequest;
e0(["get", "put", "post", "patch", "head", "delete"], function(i) {
  bt[i === "delete" ? "del" : i] = function(e, t, s) {
    return t = Hc(e, t, s), t.method = i.toUpperCase(), zc(t);
  };
});
function e0(i, e) {
  for (var t = 0; t < i.length; t++)
    e(i[t]);
}
function t0(i) {
  for (var e in i)
    if (i.hasOwnProperty(e))
      return !1;
  return !0;
}
function Hc(i, e, t) {
  var s = i;
  return Jg(e) ? (t = e, typeof i == "string" && (s = {
    uri: i
  })) : s = Qg({}, e, {
    uri: i
  }), s.callback = t, s;
}
function bt(i, e, t) {
  return e = Hc(i, e, t), zc(e);
}
function zc(i) {
  if (typeof i.callback > "u")
    throw new Error("callback argument missing");
  var e = !1, t = function(R, j, P) {
    e || (e = !0, i.callback(R, j, P));
  };
  function s() {
    l.readyState === 4 && setTimeout(a, 0);
  }
  function r() {
    var D = void 0;
    if (l.response ? D = l.response : D = l.responseText || i0(l), A)
      try {
        D = JSON.parse(D);
      } catch {
      }
    return D;
  }
  function n(D) {
    return clearTimeout(w), D instanceof Error || (D = new Error("" + (D || "Unknown XMLHttpRequest Error"))), D.statusCode = 0, t(D, k);
  }
  function a() {
    if (!f) {
      var D;
      clearTimeout(w), i.useXDR && l.status === void 0 ? D = 200 : D = l.status === 1223 ? 204 : l.status;
      var R = k, j = null;
      return D !== 0 ? (R = {
        body: r(),
        statusCode: D,
        method: v,
        headers: {},
        url: m,
        rawRequest: l
      }, l.getAllResponseHeaders && (R.headers = Zg(l.getAllResponseHeaders()))) : j = new Error("Internal XMLHttpRequest Error"), t(j, R, R.body);
    }
  }
  var l = i.xhr || null;
  l || (i.cors || i.useXDR ? l = new bt.XDomainRequest() : l = new bt.XMLHttpRequest());
  var u, f, m = l.url = i.uri || i.url, v = l.method = i.method || "GET", b = i.body || i.data, S = l.headers = i.headers || {}, y = !!i.sync, A = !1, w, k = {
    body: void 0,
    headers: {},
    statusCode: 0,
    method: v,
    url: m,
    rawRequest: l
  };
  if ("json" in i && i.json !== !1 && (A = !0, S.accept || S.Accept || (S.Accept = "application/json"), v !== "GET" && v !== "HEAD" && (S["content-type"] || S["Content-Type"] || (S["Content-Type"] = "application/json"), b = JSON.stringify(i.json === !0 ? b : i.json))), l.onreadystatechange = s, l.onload = a, l.onerror = n, l.onprogress = function() {
  }, l.onabort = function() {
    f = !0;
  }, l.ontimeout = n, l.open(v, m, !y, i.username, i.password), y || (l.withCredentials = !!i.withCredentials), !y && i.timeout > 0 && (w = setTimeout(function() {
    if (!f) {
      f = !0, l.abort("timeout");
      var D = new Error("XMLHttpRequest timeout");
      D.code = "ETIMEDOUT", n(D);
    }
  }, i.timeout)), l.setRequestHeader)
    for (u in S)
      S.hasOwnProperty(u) && l.setRequestHeader(u, S[u]);
  else if (i.headers && !t0(i.headers))
    throw new Error("Headers cannot be set on an XDomainRequest object");
  return "responseType" in i && (l.responseType = i.responseType), "beforeSend" in i && typeof i.beforeSend == "function" && i.beforeSend(l), l.send(b || null), l;
}
function i0(i) {
  try {
    if (i.responseType === "document")
      return i.responseXML;
    var e = i.responseXML && i.responseXML.documentElement.nodeName === "parsererror";
    if (i.responseType === "" && !e)
      return i.responseXML;
  } catch {
  }
  return null;
}
function s0() {
}
var r0 = ho.exports;
const Gc = /* @__PURE__ */ Jt(r0);
var Wc = { exports: {} }, du = $c, fo = Object.create || /* @__PURE__ */ function() {
  function i() {
  }
  return function(e) {
    if (arguments.length !== 1)
      throw new Error("Object.create shim only accepts one parameter.");
    return i.prototype = e, new i();
  };
}();
function Qe(i, e) {
  this.name = "ParsingError", this.code = i.code, this.message = e || i.message;
}
Qe.prototype = fo(Error.prototype);
Qe.prototype.constructor = Qe;
Qe.Errors = {
  BadSignature: {
    code: 0,
    message: "Malformed WebVTT signature."
  },
  BadTimeStamp: {
    code: 1,
    message: "Malformed time stamp."
  }
};
function po(i) {
  function e(s, r, n, a) {
    return (s | 0) * 3600 + (r | 0) * 60 + (n | 0) + (a | 0) / 1e3;
  }
  var t = i.match(/^(\d+):(\d{1,2})(:\d{1,2})?\.(\d{3})/);
  return t ? t[3] ? e(t[1], t[2], t[3].replace(":", ""), t[4]) : t[1] > 59 ? e(t[1], t[2], 0, t[4]) : e(0, t[1], t[2], t[4]) : null;
}
function js() {
  this.values = fo(null);
}
js.prototype = {
  // Only accept the first assignment to any key.
  set: function(i, e) {
    !this.get(i) && e !== "" && (this.values[i] = e);
  },
  // Return the value for a key, or a default value.
  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
  // a number of possible default values as properties where 'defaultKey' is
  // the key of the property that will be chosen; otherwise it's assumed to be
  // a single value.
  get: function(i, e, t) {
    return t ? this.has(i) ? this.values[i] : e[t] : this.has(i) ? this.values[i] : e;
  },
  // Check whether we have a value for a key.
  has: function(i) {
    return i in this.values;
  },
  // Accept a setting if its one of the given alternatives.
  alt: function(i, e, t) {
    for (var s = 0; s < t.length; ++s)
      if (e === t[s]) {
        this.set(i, e);
        break;
      }
  },
  // Accept a setting if its a valid (signed) integer.
  integer: function(i, e) {
    /^-?\d+$/.test(e) && this.set(i, parseInt(e, 10));
  },
  // Accept a setting if its a valid percentage.
  percent: function(i, e) {
    return e.match(/^([\d]{1,3})(\.[\d]*)?%$/) && (e = parseFloat(e), e >= 0 && e <= 100) ? (this.set(i, e), !0) : !1;
  }
};
function Is(i, e, t, s) {
  var r = s ? i.split(s) : [i];
  for (var n in r)
    if (typeof r[n] == "string") {
      var a = r[n].split(t);
      if (a.length === 2) {
        var l = a[0].trim(), u = a[1].trim();
        e(l, u);
      }
    }
}
function n0(i, e, t) {
  var s = i;
  function r() {
    var l = po(i);
    if (l === null)
      throw new Qe(
        Qe.Errors.BadTimeStamp,
        "Malformed timestamp: " + s
      );
    return i = i.replace(/^[^\sa-zA-Z-]+/, ""), l;
  }
  function n(l, u) {
    var f = new js();
    Is(l, function(m, v) {
      switch (m) {
        case "region":
          for (var b = t.length - 1; b >= 0; b--)
            if (t[b].id === v) {
              f.set(m, t[b].region);
              break;
            }
          break;
        case "vertical":
          f.alt(m, v, ["rl", "lr"]);
          break;
        case "line":
          var S = v.split(","), y = S[0];
          f.integer(m, y), f.percent(m, y) && f.set("snapToLines", !1), f.alt(m, y, ["auto"]), S.length === 2 && f.alt("lineAlign", S[1], ["start", "center", "end"]);
          break;
        case "position":
          S = v.split(","), f.percent(m, S[0]), S.length === 2 && f.alt("positionAlign", S[1], ["start", "center", "end"]);
          break;
        case "size":
          f.percent(m, v);
          break;
        case "align":
          f.alt(m, v, ["start", "center", "end", "left", "right"]);
          break;
      }
    }, /:/, /\s/), u.region = f.get("region", null), u.vertical = f.get("vertical", "");
    try {
      u.line = f.get("line", "auto");
    } catch {
    }
    u.lineAlign = f.get("lineAlign", "start"), u.snapToLines = f.get("snapToLines", !0), u.size = f.get("size", 100);
    try {
      u.align = f.get("align", "center");
    } catch {
      u.align = f.get("align", "middle");
    }
    try {
      u.position = f.get("position", "auto");
    } catch {
      u.position = f.get("position", {
        start: 0,
        left: 0,
        center: 50,
        middle: 50,
        end: 100,
        right: 100
      }, u.align);
    }
    u.positionAlign = f.get("positionAlign", {
      start: "start",
      left: "start",
      center: "center",
      middle: "center",
      end: "end",
      right: "end"
    }, u.align);
  }
  function a() {
    i = i.replace(/^\s+/, "");
  }
  if (a(), e.startTime = r(), a(), i.substr(0, 3) !== "-->")
    throw new Qe(
      Qe.Errors.BadTimeStamp,
      "Malformed time stamp (time stamps must be separated by '-->'): " + s
    );
  i = i.substr(3), a(), e.endTime = r(), a(), n(i, e);
}
var ua = du.createElement && du.createElement("textarea"), a0 = {
  c: "span",
  i: "i",
  b: "b",
  u: "u",
  ruby: "ruby",
  rt: "rt",
  v: "span",
  lang: "span"
}, hu = {
  white: "rgba(255,255,255,1)",
  lime: "rgba(0,255,0,1)",
  cyan: "rgba(0,255,255,1)",
  red: "rgba(255,0,0,1)",
  yellow: "rgba(255,255,0,1)",
  magenta: "rgba(255,0,255,1)",
  blue: "rgba(0,0,255,1)",
  black: "rgba(0,0,0,1)"
}, o0 = {
  v: "title",
  lang: "lang"
}, fu = {
  rt: "ruby"
};
function Xc(i, e) {
  function t() {
    if (!e)
      return null;
    function y(w) {
      return e = e.substr(w.length), w;
    }
    var A = e.match(/^([^<]*)(<[^>]*>?)?/);
    return y(A[1] ? A[1] : A[2]);
  }
  function s(y) {
    return ua.innerHTML = y, y = ua.textContent, ua.textContent = "", y;
  }
  function r(y, A) {
    return !fu[A.localName] || fu[A.localName] === y.localName;
  }
  function n(y, A) {
    var w = a0[y];
    if (!w)
      return null;
    var k = i.document.createElement(w), D = o0[y];
    return D && A && (k[D] = A.trim()), k;
  }
  for (var a = i.document.createElement("div"), l = a, u, f = []; (u = t()) !== null; ) {
    if (u[0] === "<") {
      if (u[1] === "/") {
        f.length && f[f.length - 1] === u.substr(2).replace(">", "") && (f.pop(), l = l.parentNode);
        continue;
      }
      var m = po(u.substr(1, u.length - 2)), v;
      if (m) {
        v = i.document.createProcessingInstruction("timestamp", m), l.appendChild(v);
        continue;
      }
      var b = u.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
      if (!b || (v = n(b[1], b[3]), !v) || !r(l, v))
        continue;
      if (b[2]) {
        var S = b[2].split(".");
        S.forEach(function(y) {
          var A = /^bg_/.test(y), w = A ? y.slice(3) : y;
          if (hu.hasOwnProperty(w)) {
            var k = A ? "background-color" : "color", D = hu[w];
            v.style[k] = D;
          }
        }), v.className = S.join(" ");
      }
      f.push(b[1]), l.appendChild(v), l = v;
      continue;
    }
    l.appendChild(i.document.createTextNode(s(u)));
  }
  return a;
}
var pu = [
  [1470, 1470],
  [1472, 1472],
  [1475, 1475],
  [1478, 1478],
  [1488, 1514],
  [1520, 1524],
  [1544, 1544],
  [1547, 1547],
  [1549, 1549],
  [1563, 1563],
  [1566, 1610],
  [1645, 1647],
  [1649, 1749],
  [1765, 1766],
  [1774, 1775],
  [1786, 1805],
  [1807, 1808],
  [1810, 1839],
  [1869, 1957],
  [1969, 1969],
  [1984, 2026],
  [2036, 2037],
  [2042, 2042],
  [2048, 2069],
  [2074, 2074],
  [2084, 2084],
  [2088, 2088],
  [2096, 2110],
  [2112, 2136],
  [2142, 2142],
  [2208, 2208],
  [2210, 2220],
  [8207, 8207],
  [64285, 64285],
  [64287, 64296],
  [64298, 64310],
  [64312, 64316],
  [64318, 64318],
  [64320, 64321],
  [64323, 64324],
  [64326, 64449],
  [64467, 64829],
  [64848, 64911],
  [64914, 64967],
  [65008, 65020],
  [65136, 65140],
  [65142, 65276],
  [67584, 67589],
  [67592, 67592],
  [67594, 67637],
  [67639, 67640],
  [67644, 67644],
  [67647, 67669],
  [67671, 67679],
  [67840, 67867],
  [67872, 67897],
  [67903, 67903],
  [67968, 68023],
  [68030, 68031],
  [68096, 68096],
  [68112, 68115],
  [68117, 68119],
  [68121, 68147],
  [68160, 68167],
  [68176, 68184],
  [68192, 68223],
  [68352, 68405],
  [68416, 68437],
  [68440, 68466],
  [68472, 68479],
  [68608, 68680],
  [126464, 126467],
  [126469, 126495],
  [126497, 126498],
  [126500, 126500],
  [126503, 126503],
  [126505, 126514],
  [126516, 126519],
  [126521, 126521],
  [126523, 126523],
  [126530, 126530],
  [126535, 126535],
  [126537, 126537],
  [126539, 126539],
  [126541, 126543],
  [126545, 126546],
  [126548, 126548],
  [126551, 126551],
  [126553, 126553],
  [126555, 126555],
  [126557, 126557],
  [126559, 126559],
  [126561, 126562],
  [126564, 126564],
  [126567, 126570],
  [126572, 126578],
  [126580, 126583],
  [126585, 126588],
  [126590, 126590],
  [126592, 126601],
  [126603, 126619],
  [126625, 126627],
  [126629, 126633],
  [126635, 126651],
  [1114109, 1114109]
];
function l0(i) {
  for (var e = 0; e < pu.length; e++) {
    var t = pu[e];
    if (i >= t[0] && i <= t[1])
      return !0;
  }
  return !1;
}
function u0(i) {
  var e = [], t = "", s;
  if (!i || !i.childNodes)
    return "ltr";
  function r(l, u) {
    for (var f = u.childNodes.length - 1; f >= 0; f--)
      l.push(u.childNodes[f]);
  }
  function n(l) {
    if (!l || !l.length)
      return null;
    var u = l.pop(), f = u.textContent || u.innerText;
    if (f) {
      var m = f.match(/^.*(\n|\r)/);
      return m ? (l.length = 0, m[0]) : f;
    }
    if (u.tagName === "ruby")
      return n(l);
    if (u.childNodes)
      return r(l, u), n(l);
  }
  for (r(e, i); t = n(e); )
    for (var a = 0; a < t.length; a++)
      if (s = t.charCodeAt(a), l0(s))
        return "rtl";
  return "ltr";
}
function c0(i) {
  if (typeof i.line == "number" && (i.snapToLines || i.line >= 0 && i.line <= 100))
    return i.line;
  if (!i.track || !i.track.textTrackList || !i.track.textTrackList.mediaElement)
    return -1;
  for (var e = i.track, t = e.textTrackList, s = 0, r = 0; r < t.length && t[r] !== e; r++)
    t[r].mode === "showing" && s++;
  return ++s * -1;
}
function mn() {
}
mn.prototype.applyStyles = function(i, e) {
  e = e || this.div;
  for (var t in i)
    i.hasOwnProperty(t) && (e.style[t] = i[t]);
};
mn.prototype.formatStyle = function(i, e) {
  return i === 0 ? 0 : i + e;
};
function Hr(i, e, t) {
  mn.call(this), this.cue = e, this.cueDiv = Xc(i, e.text);
  var s = {
    color: "rgba(255, 255, 255, 1)",
    backgroundColor: "rgba(0, 0, 0, 0.8)",
    position: "relative",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    display: "inline",
    writingMode: e.vertical === "" ? "horizontal-tb" : e.vertical === "lr" ? "vertical-lr" : "vertical-rl",
    unicodeBidi: "plaintext"
  };
  this.applyStyles(s, this.cueDiv), this.div = i.document.createElement("div"), s = {
    direction: u0(this.cueDiv),
    writingMode: e.vertical === "" ? "horizontal-tb" : e.vertical === "lr" ? "vertical-lr" : "vertical-rl",
    unicodeBidi: "plaintext",
    textAlign: e.align === "middle" ? "center" : e.align,
    font: t.font,
    whiteSpace: "pre-line",
    position: "absolute"
  }, this.applyStyles(s), this.div.appendChild(this.cueDiv);
  var r = 0;
  switch (e.positionAlign) {
    case "start":
    case "line-left":
      r = e.position;
      break;
    case "center":
      r = e.position - e.size / 2;
      break;
    case "end":
    case "line-right":
      r = e.position - e.size;
      break;
  }
  e.vertical === "" ? this.applyStyles({
    left: this.formatStyle(r, "%"),
    width: this.formatStyle(e.size, "%")
  }) : this.applyStyles({
    top: this.formatStyle(r, "%"),
    height: this.formatStyle(e.size, "%")
  }), this.move = function(n) {
    this.applyStyles({
      top: this.formatStyle(n.top, "px"),
      bottom: this.formatStyle(n.bottom, "px"),
      left: this.formatStyle(n.left, "px"),
      right: this.formatStyle(n.right, "px"),
      height: this.formatStyle(n.height, "px"),
      width: this.formatStyle(n.width, "px")
    });
  };
}
Hr.prototype = fo(mn.prototype);
Hr.prototype.constructor = Hr;
function Ne(i) {
  var e, t, s, r;
  if (i.div) {
    t = i.div.offsetHeight, s = i.div.offsetWidth, r = i.div.offsetTop;
    var n = (n = i.div.childNodes) && (n = n[0]) && n.getClientRects && n.getClientRects();
    i = i.div.getBoundingClientRect(), e = n ? Math.max(n[0] && n[0].height || 0, i.height / n.length) : 0;
  }
  this.left = i.left, this.right = i.right, this.top = i.top || r, this.height = i.height || t, this.bottom = i.bottom || r + (i.height || t), this.width = i.width || s, this.lineHeight = e !== void 0 ? e : i.lineHeight;
}
Ne.prototype.move = function(i, e) {
  switch (e = e !== void 0 ? e : this.lineHeight, i) {
    case "+x":
      this.left += e, this.right += e;
      break;
    case "-x":
      this.left -= e, this.right -= e;
      break;
    case "+y":
      this.top += e, this.bottom += e;
      break;
    case "-y":
      this.top -= e, this.bottom -= e;
      break;
  }
};
Ne.prototype.overlaps = function(i) {
  return this.left < i.right && this.right > i.left && this.top < i.bottom && this.bottom > i.top;
};
Ne.prototype.overlapsAny = function(i) {
  for (var e = 0; e < i.length; e++)
    if (this.overlaps(i[e]))
      return !0;
  return !1;
};
Ne.prototype.within = function(i) {
  return this.top >= i.top && this.bottom <= i.bottom && this.left >= i.left && this.right <= i.right;
};
Ne.prototype.overlapsOppositeAxis = function(i, e) {
  switch (e) {
    case "+x":
      return this.left < i.left;
    case "-x":
      return this.right > i.right;
    case "+y":
      return this.top < i.top;
    case "-y":
      return this.bottom > i.bottom;
  }
};
Ne.prototype.intersectPercentage = function(i) {
  var e = Math.max(0, Math.min(this.right, i.right) - Math.max(this.left, i.left)), t = Math.max(0, Math.min(this.bottom, i.bottom) - Math.max(this.top, i.top)), s = e * t;
  return s / (this.height * this.width);
};
Ne.prototype.toCSSCompatValues = function(i) {
  return {
    top: this.top - i.top,
    bottom: i.bottom - this.bottom,
    left: this.left - i.left,
    right: i.right - this.right,
    height: this.height,
    width: this.width
  };
};
Ne.getSimpleBoxPosition = function(i) {
  var e = i.div ? i.div.offsetHeight : i.tagName ? i.offsetHeight : 0, t = i.div ? i.div.offsetWidth : i.tagName ? i.offsetWidth : 0, s = i.div ? i.div.offsetTop : i.tagName ? i.offsetTop : 0;
  i = i.div ? i.div.getBoundingClientRect() : i.tagName ? i.getBoundingClientRect() : i;
  var r = {
    left: i.left,
    right: i.right,
    top: i.top || s,
    height: i.height || e,
    bottom: i.bottom || s + (i.height || e),
    width: i.width || t
  };
  return r;
};
function d0(i, e, t, s) {
  function r(w, k) {
    for (var D, R = new Ne(w), j = 1, P = 0; P < k.length; P++) {
      for (; w.overlapsOppositeAxis(t, k[P]) || w.within(t) && w.overlapsAny(s); )
        w.move(k[P]);
      if (w.within(t))
        return w;
      var F = w.intersectPercentage(t);
      j > F && (D = new Ne(w), j = F), w = new Ne(R);
    }
    return D || R;
  }
  var n = new Ne(e), a = e.cue, l = c0(a), u = [];
  if (a.snapToLines) {
    var f;
    switch (a.vertical) {
      case "":
        u = ["+y", "-y"], f = "height";
        break;
      case "rl":
        u = ["+x", "-x"], f = "width";
        break;
      case "lr":
        u = ["-x", "+x"], f = "width";
        break;
    }
    var m = n.lineHeight, v = m * Math.round(l), b = t[f] + m, S = u[0];
    Math.abs(v) > b && (v = v < 0 ? -1 : 1, v *= Math.ceil(b / m) * m), l < 0 && (v += a.vertical === "" ? t.height : t.width, u = u.reverse()), n.move(S, v);
  } else {
    var y = n.lineHeight / t.height * 100;
    switch (a.lineAlign) {
      case "center":
        l -= y / 2;
        break;
      case "end":
        l -= y;
        break;
    }
    switch (a.vertical) {
      case "":
        e.applyStyles({
          top: e.formatStyle(l, "%")
        });
        break;
      case "rl":
        e.applyStyles({
          left: e.formatStyle(l, "%")
        });
        break;
      case "lr":
        e.applyStyles({
          right: e.formatStyle(l, "%")
        });
        break;
    }
    u = ["+y", "-x", "+x", "-y"], n = new Ne(e);
  }
  var A = r(n, u);
  e.move(A.toCSSCompatValues(t));
}
function es() {
}
es.StringDecoder = function() {
  return {
    decode: function(i) {
      if (!i)
        return "";
      if (typeof i != "string")
        throw new Error("Error - expected string data.");
      return decodeURIComponent(encodeURIComponent(i));
    }
  };
};
es.convertCueToDOMTree = function(i, e) {
  return !i || !e ? null : Xc(i, e);
};
var h0 = 0.05, f0 = "sans-serif", p0 = "1.5%";
es.processCues = function(i, e, t) {
  if (!i || !e || !t)
    return null;
  for (; t.firstChild; )
    t.removeChild(t.firstChild);
  var s = i.document.createElement("div");
  s.style.position = "absolute", s.style.left = "0", s.style.right = "0", s.style.top = "0", s.style.bottom = "0", s.style.margin = p0, t.appendChild(s);
  function r(m) {
    for (var v = 0; v < m.length; v++)
      if (m[v].hasBeenReset || !m[v].displayState)
        return !0;
    return !1;
  }
  if (!r(e)) {
    for (var n = 0; n < e.length; n++)
      s.appendChild(e[n].displayState);
    return;
  }
  var a = [], l = Ne.getSimpleBoxPosition(s), u = Math.round(l.height * h0 * 100) / 100, f = {
    font: u + "px " + f0
  };
  (function() {
    for (var m, v, b = 0; b < e.length; b++)
      v = e[b], m = new Hr(i, v, f), s.appendChild(m.div), d0(i, m, l, a), v.displayState = m.div, a.push(Ne.getSimpleBoxPosition(m));
  })();
};
es.Parser = function(i, e, t) {
  t || (t = e, e = {}), e || (e = {}), this.window = i, this.vttjs = e, this.state = "INITIAL", this.buffer = "", this.decoder = t || new TextDecoder("utf8"), this.regionList = [];
};
es.Parser.prototype = {
  // If the error is a ParsingError then report it to the consumer if
  // possible. If it's not a ParsingError then throw it like normal.
  reportOrThrowError: function(i) {
    if (i instanceof Qe)
      this.onparsingerror && this.onparsingerror(i);
    else
      throw i;
  },
  parse: function(i) {
    var e = this;
    i && (e.buffer += e.decoder.decode(i, { stream: !0 }));
    function t() {
      for (var m = e.buffer, v = 0; v < m.length && m[v] !== "\r" && m[v] !== `
`; )
        ++v;
      var b = m.substr(0, v);
      return m[v] === "\r" && ++v, m[v] === `
` && ++v, e.buffer = m.substr(v), b;
    }
    function s(m) {
      var v = new js();
      if (Is(m, function(S, y) {
        switch (S) {
          case "id":
            v.set(S, y);
            break;
          case "width":
            v.percent(S, y);
            break;
          case "lines":
            v.integer(S, y);
            break;
          case "regionanchor":
          case "viewportanchor":
            var A = y.split(",");
            if (A.length !== 2)
              break;
            var w = new js();
            if (w.percent("x", A[0]), w.percent("y", A[1]), !w.has("x") || !w.has("y"))
              break;
            v.set(S + "X", w.get("x")), v.set(S + "Y", w.get("y"));
            break;
          case "scroll":
            v.alt(S, y, ["up"]);
            break;
        }
      }, /=/, /\s/), v.has("id")) {
        var b = new (e.vttjs.VTTRegion || e.window.VTTRegion)();
        b.width = v.get("width", 100), b.lines = v.get("lines", 3), b.regionAnchorX = v.get("regionanchorX", 0), b.regionAnchorY = v.get("regionanchorY", 100), b.viewportAnchorX = v.get("viewportanchorX", 0), b.viewportAnchorY = v.get("viewportanchorY", 100), b.scroll = v.get("scroll", ""), e.onregion && e.onregion(b), e.regionList.push({
          id: v.get("id"),
          region: b
        });
      }
    }
    function r(m) {
      var v = new js();
      Is(m, function(b, S) {
        switch (b) {
          case "MPEGT":
            v.integer(b + "S", S);
            break;
          case "LOCA":
            v.set(b + "L", po(S));
            break;
        }
      }, /[^\d]:/, /,/), e.ontimestampmap && e.ontimestampmap({
        MPEGTS: v.get("MPEGTS"),
        LOCAL: v.get("LOCAL")
      });
    }
    function n(m) {
      m.match(/X-TIMESTAMP-MAP/) ? Is(m, function(v, b) {
        switch (v) {
          case "X-TIMESTAMP-MAP":
            r(b);
            break;
        }
      }, /=/) : Is(m, function(v, b) {
        switch (v) {
          case "Region":
            s(b);
            break;
        }
      }, /:/);
    }
    try {
      var a;
      if (e.state === "INITIAL") {
        if (!/\r\n|\n/.test(e.buffer))
          return this;
        a = t();
        var l = a.match(/^WEBVTT([ \t].*)?$/);
        if (!l || !l[0])
          throw new Qe(Qe.Errors.BadSignature);
        e.state = "HEADER";
      }
      for (var u = !1; e.buffer; ) {
        if (!/\r\n|\n/.test(e.buffer))
          return this;
        switch (u ? u = !1 : a = t(), e.state) {
          case "HEADER":
            /:/.test(a) ? n(a) : a || (e.state = "ID");
            continue;
          case "NOTE":
            a || (e.state = "ID");
            continue;
          case "ID":
            if (/^NOTE($|[ \t])/.test(a)) {
              e.state = "NOTE";
              break;
            }
            if (!a)
              continue;
            e.cue = new (e.vttjs.VTTCue || e.window.VTTCue)(0, 0, "");
            try {
              e.cue.align = "center";
            } catch {
              e.cue.align = "middle";
            }
            if (e.state = "CUE", a.indexOf("-->") === -1) {
              e.cue.id = a;
              continue;
            }
          case "CUE":
            try {
              n0(a, e.cue, e.regionList);
            } catch (m) {
              e.reportOrThrowError(m), e.cue = null, e.state = "BADCUE";
              continue;
            }
            e.state = "CUETEXT";
            continue;
          case "CUETEXT":
            var f = a.indexOf("-->") !== -1;
            if (!a || f && (u = !0)) {
              e.oncue && e.oncue(e.cue), e.cue = null, e.state = "ID";
              continue;
            }
            e.cue.text && (e.cue.text += `
`), e.cue.text += a.replace(/\u2028/g, `
`).replace(/u2029/g, `
`);
            continue;
          case "BADCUE":
            a || (e.state = "ID");
            continue;
        }
      }
    } catch (m) {
      e.reportOrThrowError(m), e.state === "CUETEXT" && e.cue && e.oncue && e.oncue(e.cue), e.cue = null, e.state = e.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
    }
    return this;
  },
  flush: function() {
    var i = this;
    try {
      if (i.buffer += i.decoder.decode(), (i.cue || i.state === "HEADER") && (i.buffer += `

`, i.parse()), i.state === "INITIAL")
        throw new Qe(Qe.Errors.BadSignature);
    } catch (e) {
      i.reportOrThrowError(e);
    }
    return i.onflush && i.onflush(), this;
  }
};
var m0 = es, g0 = "auto", v0 = {
  "": 1,
  lr: 1,
  rl: 1
}, y0 = {
  start: 1,
  center: 1,
  end: 1,
  left: 1,
  right: 1,
  auto: 1,
  "line-left": 1,
  "line-right": 1
};
function _0(i) {
  if (typeof i != "string")
    return !1;
  var e = v0[i.toLowerCase()];
  return e ? i.toLowerCase() : !1;
}
function ca(i) {
  if (typeof i != "string")
    return !1;
  var e = y0[i.toLowerCase()];
  return e ? i.toLowerCase() : !1;
}
function Kc(i, e, t) {
  this.hasBeenReset = !1;
  var s = "", r = !1, n = i, a = e, l = t, u = null, f = "", m = !0, v = "auto", b = "start", S = "auto", y = "auto", A = 100, w = "center";
  Object.defineProperties(this, {
    id: {
      enumerable: !0,
      get: function() {
        return s;
      },
      set: function(k) {
        s = "" + k;
      }
    },
    pauseOnExit: {
      enumerable: !0,
      get: function() {
        return r;
      },
      set: function(k) {
        r = !!k;
      }
    },
    startTime: {
      enumerable: !0,
      get: function() {
        return n;
      },
      set: function(k) {
        if (typeof k != "number")
          throw new TypeError("Start time must be set to a number.");
        n = k, this.hasBeenReset = !0;
      }
    },
    endTime: {
      enumerable: !0,
      get: function() {
        return a;
      },
      set: function(k) {
        if (typeof k != "number")
          throw new TypeError("End time must be set to a number.");
        a = k, this.hasBeenReset = !0;
      }
    },
    text: {
      enumerable: !0,
      get: function() {
        return l;
      },
      set: function(k) {
        l = "" + k, this.hasBeenReset = !0;
      }
    },
    region: {
      enumerable: !0,
      get: function() {
        return u;
      },
      set: function(k) {
        u = k, this.hasBeenReset = !0;
      }
    },
    vertical: {
      enumerable: !0,
      get: function() {
        return f;
      },
      set: function(k) {
        var D = _0(k);
        if (D === !1)
          throw new SyntaxError("Vertical: an invalid or illegal direction string was specified.");
        f = D, this.hasBeenReset = !0;
      }
    },
    snapToLines: {
      enumerable: !0,
      get: function() {
        return m;
      },
      set: function(k) {
        m = !!k, this.hasBeenReset = !0;
      }
    },
    line: {
      enumerable: !0,
      get: function() {
        return v;
      },
      set: function(k) {
        if (typeof k != "number" && k !== g0)
          throw new SyntaxError("Line: an invalid number or illegal string was specified.");
        v = k, this.hasBeenReset = !0;
      }
    },
    lineAlign: {
      enumerable: !0,
      get: function() {
        return b;
      },
      set: function(k) {
        var D = ca(k);
        D ? (b = D, this.hasBeenReset = !0) : console.warn("lineAlign: an invalid or illegal string was specified.");
      }
    },
    position: {
      enumerable: !0,
      get: function() {
        return S;
      },
      set: function(k) {
        if (k < 0 || k > 100)
          throw new Error("Position must be between 0 and 100.");
        S = k, this.hasBeenReset = !0;
      }
    },
    positionAlign: {
      enumerable: !0,
      get: function() {
        return y;
      },
      set: function(k) {
        var D = ca(k);
        D ? (y = D, this.hasBeenReset = !0) : console.warn("positionAlign: an invalid or illegal string was specified.");
      }
    },
    size: {
      enumerable: !0,
      get: function() {
        return A;
      },
      set: function(k) {
        if (k < 0 || k > 100)
          throw new Error("Size must be between 0 and 100.");
        A = k, this.hasBeenReset = !0;
      }
    },
    align: {
      enumerable: !0,
      get: function() {
        return w;
      },
      set: function(k) {
        var D = ca(k);
        if (!D)
          throw new SyntaxError("align: an invalid or illegal alignment string was specified.");
        w = D, this.hasBeenReset = !0;
      }
    }
  }), this.displayState = void 0;
}
Kc.prototype.getCueAsHTML = function() {
  return WebVTT.convertCueToDOMTree(window, this.text);
};
var T0 = Kc, b0 = {
  "": !0,
  up: !0
};
function x0(i) {
  if (typeof i != "string")
    return !1;
  var e = b0[i.toLowerCase()];
  return e ? i.toLowerCase() : !1;
}
function Ts(i) {
  return typeof i == "number" && i >= 0 && i <= 100;
}
function S0() {
  var i = 100, e = 3, t = 0, s = 100, r = 0, n = 100, a = "";
  Object.defineProperties(this, {
    width: {
      enumerable: !0,
      get: function() {
        return i;
      },
      set: function(l) {
        if (!Ts(l))
          throw new Error("Width must be between 0 and 100.");
        i = l;
      }
    },
    lines: {
      enumerable: !0,
      get: function() {
        return e;
      },
      set: function(l) {
        if (typeof l != "number")
          throw new TypeError("Lines must be set to a number.");
        e = l;
      }
    },
    regionAnchorY: {
      enumerable: !0,
      get: function() {
        return s;
      },
      set: function(l) {
        if (!Ts(l))
          throw new Error("RegionAnchorX must be between 0 and 100.");
        s = l;
      }
    },
    regionAnchorX: {
      enumerable: !0,
      get: function() {
        return t;
      },
      set: function(l) {
        if (!Ts(l))
          throw new Error("RegionAnchorY must be between 0 and 100.");
        t = l;
      }
    },
    viewportAnchorY: {
      enumerable: !0,
      get: function() {
        return n;
      },
      set: function(l) {
        if (!Ts(l))
          throw new Error("ViewportAnchorY must be between 0 and 100.");
        n = l;
      }
    },
    viewportAnchorX: {
      enumerable: !0,
      get: function() {
        return r;
      },
      set: function(l) {
        if (!Ts(l))
          throw new Error("ViewportAnchorX must be between 0 and 100.");
        r = l;
      }
    },
    scroll: {
      enumerable: !0,
      get: function() {
        return a;
      },
      set: function(l) {
        var u = x0(l);
        u === !1 ? console.warn("Scroll: an invalid or illegal string was specified.") : a = u;
      }
    }
  });
}
var E0 = S0, Mt = pn, Ti = Wc.exports = {
  WebVTT: m0,
  VTTCue: T0,
  VTTRegion: E0
};
Mt.vttjs = Ti;
Mt.WebVTT = Ti.WebVTT;
var C0 = Ti.VTTCue, w0 = Ti.VTTRegion, A0 = Mt.VTTCue, D0 = Mt.VTTRegion;
Ti.shim = function() {
  Mt.VTTCue = C0, Mt.VTTRegion = w0;
};
Ti.restore = function() {
  Mt.VTTCue = A0, Mt.VTTRegion = D0;
};
Mt.VTTCue || Ti.shim();
var k0 = Wc.exports;
const mu = /* @__PURE__ */ Jt(k0);
var Yc = { exports: {} };
(function(i, e) {
  (function(t) {
    var s = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, r = /^(?=([^\/?#]*))\1([^]*)$/, n = /(?:\/|^)\.(?=\/)/g, a = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, l = {
      // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
      // E.g
      // With opts.alwaysNormalize = false (default, spec compliant)
      // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
      // With opts.alwaysNormalize = true (not spec compliant)
      // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
      buildAbsoluteURL: function(u, f, m) {
        if (m = m || {}, u = u.trim(), f = f.trim(), !f) {
          if (!m.alwaysNormalize)
            return u;
          var v = l.parseURL(u);
          if (!v)
            throw new Error("Error trying to parse base URL.");
          return v.path = l.normalizePath(
            v.path
          ), l.buildURLFromParts(v);
        }
        var b = l.parseURL(f);
        if (!b)
          throw new Error("Error trying to parse relative URL.");
        if (b.scheme)
          return m.alwaysNormalize ? (b.path = l.normalizePath(b.path), l.buildURLFromParts(b)) : f;
        var S = l.parseURL(u);
        if (!S)
          throw new Error("Error trying to parse base URL.");
        if (!S.netLoc && S.path && S.path[0] !== "/") {
          var y = r.exec(S.path);
          S.netLoc = y[1], S.path = y[2];
        }
        S.netLoc && !S.path && (S.path = "/");
        var A = {
          // 2c) Otherwise, the embedded URL inherits the scheme of
          // the base URL.
          scheme: S.scheme,
          netLoc: b.netLoc,
          path: null,
          params: b.params,
          query: b.query,
          fragment: b.fragment
        };
        if (!b.netLoc && (A.netLoc = S.netLoc, b.path[0] !== "/"))
          if (!b.path)
            A.path = S.path, b.params || (A.params = S.params, b.query || (A.query = S.query));
          else {
            var w = S.path, k = w.substring(0, w.lastIndexOf("/") + 1) + b.path;
            A.path = l.normalizePath(k);
          }
        return A.path === null && (A.path = m.alwaysNormalize ? l.normalizePath(b.path) : b.path), l.buildURLFromParts(A);
      },
      parseURL: function(u) {
        var f = s.exec(u);
        return f ? {
          scheme: f[1] || "",
          netLoc: f[2] || "",
          path: f[3] || "",
          params: f[4] || "",
          query: f[5] || "",
          fragment: f[6] || ""
        } : null;
      },
      normalizePath: function(u) {
        for (u = u.split("").reverse().join("").replace(n, ""); u.length !== (u = u.replace(a, "")).length; )
          ;
        return u.split("").reverse().join("");
      },
      buildURLFromParts: function(u) {
        return u.scheme + u.netLoc + u.path + u.params + u.query + u.fragment;
      }
    };
    i.exports = l;
  })();
})(Yc);
var I0 = Yc.exports;
const gu = /* @__PURE__ */ Jt(I0);
var vu = "http://example.com", gn = function(e, t) {
  if (/^[a-z]+:/i.test(t))
    return t;
  /^data:/.test(e) && (e = E.location && E.location.href || "");
  var s = typeof E.URL == "function", r = /^\/\//.test(e), n = !E.location && !/\/\//i.test(e);
  if (s ? e = new E.URL(e, E.location || vu) : /\/\//i.test(e) || (e = gu.buildAbsoluteURL(E.location && E.location.href || "", e)), s) {
    var a = new URL(t, e);
    return n ? a.href.slice(vu.length) : r ? a.href.slice(a.protocol.length) : a.href;
  }
  return gu.buildAbsoluteURL(e, t);
}, mo = /* @__PURE__ */ function() {
  function i() {
    this.listeners = {};
  }
  var e = i.prototype;
  return e.on = function(s, r) {
    this.listeners[s] || (this.listeners[s] = []), this.listeners[s].push(r);
  }, e.off = function(s, r) {
    if (!this.listeners[s])
      return !1;
    var n = this.listeners[s].indexOf(r);
    return this.listeners[s] = this.listeners[s].slice(0), this.listeners[s].splice(n, 1), n > -1;
  }, e.trigger = function(s) {
    var r = this.listeners[s];
    if (r)
      if (arguments.length === 2)
        for (var n = r.length, a = 0; a < n; ++a)
          r[a].call(this, arguments[1]);
      else
        for (var l = Array.prototype.slice.call(arguments, 1), u = r.length, f = 0; f < u; ++f)
          r[f].apply(this, l);
  }, e.dispose = function() {
    this.listeners = {};
  }, e.pipe = function(s) {
    this.on("data", function(r) {
      s.push(r);
    });
  }, i;
}(), P0 = function(e) {
  return E.atob ? E.atob(e) : Buffer.from(e, "base64").toString("binary");
};
function L0(i) {
  for (var e = P0(i), t = new Uint8Array(e.length), s = 0; s < e.length; s++)
    t[s] = e.charCodeAt(s);
  return t;
}
/*! @name m3u8-parser @version 7.1.0 @license Apache-2.0 */
class O0 extends mo {
  constructor() {
    super(), this.buffer = "";
  }
  /**
   * Add new data to be parsed.
   *
   * @param {string} data the text to process
   */
  push(e) {
    let t;
    for (this.buffer += e, t = this.buffer.indexOf(`
`); t > -1; t = this.buffer.indexOf(`
`))
      this.trigger("data", this.buffer.substring(0, t)), this.buffer = this.buffer.substring(t + 1);
  }
}
const j0 = "	", da = function(i) {
  const e = /([0-9.]*)?@?([0-9.]*)?/.exec(i || ""), t = {};
  return e[1] && (t.length = parseInt(e[1], 10)), e[2] && (t.offset = parseInt(e[2], 10)), t;
}, R0 = function() {
  const t = "(?:" + "[^=]*" + ")=(?:" + '"[^"]*"|[^,]*' + ")";
  return new RegExp("(?:^|,)(" + t + ")");
}, Xe = function(i) {
  const e = {};
  if (!i)
    return e;
  const t = i.split(R0());
  let s = t.length, r;
  for (; s--; )
    t[s] !== "" && (r = /([^=]*)=(.*)/.exec(t[s]).slice(1), r[0] = r[0].replace(/^\s+|\s+$/g, ""), r[1] = r[1].replace(/^\s+|\s+$/g, ""), r[1] = r[1].replace(/^['"](.*)['"]$/g, "$1"), e[r[0]] = r[1]);
  return e;
};
class N0 extends mo {
  constructor() {
    super(), this.customParsers = [], this.tagMappers = [];
  }
  /**
   * Parses an additional line of input.
   *
   * @param {string} line a single line of an M3U8 file to parse
   */
  push(e) {
    let t, s;
    if (e = e.trim(), e.length === 0)
      return;
    if (e[0] !== "#") {
      this.trigger("data", {
        type: "uri",
        uri: e
      });
      return;
    }
    this.tagMappers.reduce((n, a) => {
      const l = a(e);
      return l === e ? n : n.concat([l]);
    }, [e]).forEach((n) => {
      for (let a = 0; a < this.customParsers.length; a++)
        if (this.customParsers[a].call(this, n))
          return;
      if (n.indexOf("#EXT") !== 0) {
        this.trigger("data", {
          type: "comment",
          text: n.slice(1)
        });
        return;
      }
      if (n = n.replace("\r", ""), t = /^#EXTM3U/.exec(n), t) {
        this.trigger("data", {
          type: "tag",
          tagType: "m3u"
        });
        return;
      }
      if (t = /^#EXTINF:([0-9\.]*)?,?(.*)?$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "inf"
        }, t[1] && (s.duration = parseFloat(t[1])), t[2] && (s.title = t[2]), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-TARGETDURATION:([0-9.]*)?/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "targetduration"
        }, t[1] && (s.duration = parseInt(t[1], 10)), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-VERSION:([0-9.]*)?/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "version"
        }, t[1] && (s.version = parseInt(t[1], 10)), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-MEDIA-SEQUENCE:(\-?[0-9.]*)?/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "media-sequence"
        }, t[1] && (s.number = parseInt(t[1], 10)), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-DISCONTINUITY-SEQUENCE:(\-?[0-9.]*)?/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "discontinuity-sequence"
        }, t[1] && (s.number = parseInt(t[1], 10)), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-PLAYLIST-TYPE:(.*)?$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "playlist-type"
        }, t[1] && (s.playlistType = t[1]), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-BYTERANGE:(.*)?$/.exec(n), t) {
        s = it(da(t[1]), {
          type: "tag",
          tagType: "byterange"
        }), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-ALLOW-CACHE:(YES|NO)?/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "allow-cache"
        }, t[1] && (s.allowed = !/NO/.test(t[1])), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-MAP:(.*)$/.exec(n), t) {
        if (s = {
          type: "tag",
          tagType: "map"
        }, t[1]) {
          const a = Xe(t[1]);
          a.URI && (s.uri = a.URI), a.BYTERANGE && (s.byterange = da(a.BYTERANGE));
        }
        this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-STREAM-INF:(.*)$/.exec(n), t) {
        if (s = {
          type: "tag",
          tagType: "stream-inf"
        }, t[1]) {
          if (s.attributes = Xe(t[1]), s.attributes.RESOLUTION) {
            const a = s.attributes.RESOLUTION.split("x"), l = {};
            a[0] && (l.width = parseInt(a[0], 10)), a[1] && (l.height = parseInt(a[1], 10)), s.attributes.RESOLUTION = l;
          }
          s.attributes.BANDWIDTH && (s.attributes.BANDWIDTH = parseInt(s.attributes.BANDWIDTH, 10)), s.attributes["FRAME-RATE"] && (s.attributes["FRAME-RATE"] = parseFloat(s.attributes["FRAME-RATE"])), s.attributes["PROGRAM-ID"] && (s.attributes["PROGRAM-ID"] = parseInt(s.attributes["PROGRAM-ID"], 10));
        }
        this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-MEDIA:(.*)$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "media"
        }, t[1] && (s.attributes = Xe(t[1])), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-ENDLIST/.exec(n), t) {
        this.trigger("data", {
          type: "tag",
          tagType: "endlist"
        });
        return;
      }
      if (t = /^#EXT-X-DISCONTINUITY/.exec(n), t) {
        this.trigger("data", {
          type: "tag",
          tagType: "discontinuity"
        });
        return;
      }
      if (t = /^#EXT-X-PROGRAM-DATE-TIME:(.*)$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "program-date-time"
        }, t[1] && (s.dateTimeString = t[1], s.dateTimeObject = new Date(t[1])), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-KEY:(.*)$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "key"
        }, t[1] && (s.attributes = Xe(t[1]), s.attributes.IV && (s.attributes.IV.substring(0, 2).toLowerCase() === "0x" && (s.attributes.IV = s.attributes.IV.substring(2)), s.attributes.IV = s.attributes.IV.match(/.{8}/g), s.attributes.IV[0] = parseInt(s.attributes.IV[0], 16), s.attributes.IV[1] = parseInt(s.attributes.IV[1], 16), s.attributes.IV[2] = parseInt(s.attributes.IV[2], 16), s.attributes.IV[3] = parseInt(s.attributes.IV[3], 16), s.attributes.IV = new Uint32Array(s.attributes.IV))), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-START:(.*)$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "start"
        }, t[1] && (s.attributes = Xe(t[1]), s.attributes["TIME-OFFSET"] = parseFloat(s.attributes["TIME-OFFSET"]), s.attributes.PRECISE = /YES/.test(s.attributes.PRECISE)), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-CUE-OUT-CONT:(.*)?$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "cue-out-cont"
        }, t[1] ? s.data = t[1] : s.data = "", this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-CUE-OUT:(.*)?$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "cue-out"
        }, t[1] ? s.data = t[1] : s.data = "", this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-CUE-IN:(.*)?$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "cue-in"
        }, t[1] ? s.data = t[1] : s.data = "", this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-SKIP:(.*)$/.exec(n), t && t[1]) {
        s = {
          type: "tag",
          tagType: "skip"
        }, s.attributes = Xe(t[1]), s.attributes.hasOwnProperty("SKIPPED-SEGMENTS") && (s.attributes["SKIPPED-SEGMENTS"] = parseInt(s.attributes["SKIPPED-SEGMENTS"], 10)), s.attributes.hasOwnProperty("RECENTLY-REMOVED-DATERANGES") && (s.attributes["RECENTLY-REMOVED-DATERANGES"] = s.attributes["RECENTLY-REMOVED-DATERANGES"].split(j0)), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-PART:(.*)$/.exec(n), t && t[1]) {
        s = {
          type: "tag",
          tagType: "part"
        }, s.attributes = Xe(t[1]), ["DURATION"].forEach(function(a) {
          s.attributes.hasOwnProperty(a) && (s.attributes[a] = parseFloat(s.attributes[a]));
        }), ["INDEPENDENT", "GAP"].forEach(function(a) {
          s.attributes.hasOwnProperty(a) && (s.attributes[a] = /YES/.test(s.attributes[a]));
        }), s.attributes.hasOwnProperty("BYTERANGE") && (s.attributes.byterange = da(s.attributes.BYTERANGE)), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(n), t && t[1]) {
        s = {
          type: "tag",
          tagType: "server-control"
        }, s.attributes = Xe(t[1]), ["CAN-SKIP-UNTIL", "PART-HOLD-BACK", "HOLD-BACK"].forEach(function(a) {
          s.attributes.hasOwnProperty(a) && (s.attributes[a] = parseFloat(s.attributes[a]));
        }), ["CAN-SKIP-DATERANGES", "CAN-BLOCK-RELOAD"].forEach(function(a) {
          s.attributes.hasOwnProperty(a) && (s.attributes[a] = /YES/.test(s.attributes[a]));
        }), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-PART-INF:(.*)$/.exec(n), t && t[1]) {
        s = {
          type: "tag",
          tagType: "part-inf"
        }, s.attributes = Xe(t[1]), ["PART-TARGET"].forEach(function(a) {
          s.attributes.hasOwnProperty(a) && (s.attributes[a] = parseFloat(s.attributes[a]));
        }), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(n), t && t[1]) {
        s = {
          type: "tag",
          tagType: "preload-hint"
        }, s.attributes = Xe(t[1]), ["BYTERANGE-START", "BYTERANGE-LENGTH"].forEach(function(a) {
          if (s.attributes.hasOwnProperty(a)) {
            s.attributes[a] = parseInt(s.attributes[a], 10);
            const l = a === "BYTERANGE-LENGTH" ? "length" : "offset";
            s.attributes.byterange = s.attributes.byterange || {}, s.attributes.byterange[l] = s.attributes[a], delete s.attributes[a];
          }
        }), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(n), t && t[1]) {
        s = {
          type: "tag",
          tagType: "rendition-report"
        }, s.attributes = Xe(t[1]), ["LAST-MSN", "LAST-PART"].forEach(function(a) {
          s.attributes.hasOwnProperty(a) && (s.attributes[a] = parseInt(s.attributes[a], 10));
        }), this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-DATERANGE:(.*)$/.exec(n), t && t[1]) {
        s = {
          type: "tag",
          tagType: "daterange"
        }, s.attributes = Xe(t[1]), ["ID", "CLASS"].forEach(function(l) {
          s.attributes.hasOwnProperty(l) && (s.attributes[l] = String(s.attributes[l]));
        }), ["START-DATE", "END-DATE"].forEach(function(l) {
          s.attributes.hasOwnProperty(l) && (s.attributes[l] = new Date(s.attributes[l]));
        }), ["DURATION", "PLANNED-DURATION"].forEach(function(l) {
          s.attributes.hasOwnProperty(l) && (s.attributes[l] = parseFloat(s.attributes[l]));
        }), ["END-ON-NEXT"].forEach(function(l) {
          s.attributes.hasOwnProperty(l) && (s.attributes[l] = /YES/i.test(s.attributes[l]));
        }), ["SCTE35-CMD", " SCTE35-OUT", "SCTE35-IN"].forEach(function(l) {
          s.attributes.hasOwnProperty(l) && (s.attributes[l] = s.attributes[l].toString(16));
        });
        const a = /^X-([A-Z]+-)+[A-Z]+$/;
        for (const l in s.attributes) {
          if (!a.test(l))
            continue;
          const u = /[0-9A-Fa-f]{6}/g.test(s.attributes[l]), f = /^\d+(\.\d+)?$/.test(s.attributes[l]);
          s.attributes[l] = u ? s.attributes[l].toString(16) : f ? parseFloat(s.attributes[l]) : String(s.attributes[l]);
        }
        this.trigger("data", s);
        return;
      }
      if (t = /^#EXT-X-INDEPENDENT-SEGMENTS/.exec(n), t) {
        this.trigger("data", {
          type: "tag",
          tagType: "independent-segments"
        });
        return;
      }
      if (t = /^#EXT-X-CONTENT-STEERING:(.*)$/.exec(n), t) {
        s = {
          type: "tag",
          tagType: "content-steering"
        }, s.attributes = Xe(t[1]), this.trigger("data", s);
        return;
      }
      this.trigger("data", {
        type: "tag",
        data: n.slice(4)
      });
    });
  }
  /**
   * Add a parser for custom headers
   *
   * @param {Object}   options              a map of options for the added parser
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {string}   options.customType   the custom type to register to the output
   * @param {Function} [options.dataParser] function to parse the line into an object
   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
   */
  addParser({
    expression: e,
    customType: t,
    dataParser: s,
    segment: r
  }) {
    typeof s != "function" && (s = (n) => n), this.customParsers.push((n) => {
      if (e.exec(n))
        return this.trigger("data", {
          type: "custom",
          data: s(n),
          customType: t,
          segment: r
        }), !0;
    });
  }
  /**
   * Add a custom header mapper
   *
   * @param {Object}   options
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {Function} options.map          function to translate tag into a different tag
   */
  addTagMapper({
    expression: e,
    map: t
  }) {
    const s = (r) => e.test(r) ? t(r) : r;
    this.tagMappers.push(s);
  }
}
const M0 = (i) => i.toLowerCase().replace(/-(\w)/g, (e) => e[1].toUpperCase()), Ht = function(i) {
  const e = {};
  return Object.keys(i).forEach(function(t) {
    e[M0(t)] = i[t];
  }), e;
}, ha = function(i) {
  const {
    serverControl: e,
    targetDuration: t,
    partTargetDuration: s
  } = i;
  if (!e)
    return;
  const r = "#EXT-X-SERVER-CONTROL", n = "holdBack", a = "partHoldBack", l = t && t * 3, u = s && s * 2;
  t && !e.hasOwnProperty(n) && (e[n] = l, this.trigger("info", {
    message: `${r} defaulting HOLD-BACK to targetDuration * 3 (${l}).`
  })), l && e[n] < l && (this.trigger("warn", {
    message: `${r} clamping HOLD-BACK (${e[n]}) to targetDuration * 3 (${l})`
  }), e[n] = l), s && !e.hasOwnProperty(a) && (e[a] = s * 3, this.trigger("info", {
    message: `${r} defaulting PART-HOLD-BACK to partTargetDuration * 3 (${e[a]}).`
  })), s && e[a] < u && (this.trigger("warn", {
    message: `${r} clamping PART-HOLD-BACK (${e[a]}) to partTargetDuration * 2 (${u}).`
  }), e[a] = u);
};
class B0 extends mo {
  constructor() {
    super(), this.lineStream = new O0(), this.parseStream = new N0(), this.lineStream.pipe(this.parseStream), this.lastProgramDateTime = null;
    const e = this, t = [];
    let s = {}, r, n, a = !1;
    const l = function() {
    }, u = {
      AUDIO: {},
      VIDEO: {},
      "CLOSED-CAPTIONS": {},
      SUBTITLES: {}
    }, f = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
    let m = 0;
    this.manifest = {
      allowCache: !0,
      discontinuityStarts: [],
      dateRanges: [],
      segments: []
    };
    let v = 0, b = 0;
    const S = {};
    this.on("end", () => {
      s.uri || !s.parts && !s.preloadHints || (!s.map && r && (s.map = r), !s.key && n && (s.key = n), !s.timeline && typeof m == "number" && (s.timeline = m), this.manifest.preloadSegment = s);
    }), this.parseStream.on("data", function(y) {
      let A, w;
      ({
        tag() {
          ({
            version() {
              y.version && (this.manifest.version = y.version);
            },
            "allow-cache"() {
              this.manifest.allowCache = y.allowed, "allowed" in y || (this.trigger("info", {
                message: "defaulting allowCache to YES"
              }), this.manifest.allowCache = !0);
            },
            byterange() {
              const k = {};
              "length" in y && (s.byterange = k, k.length = y.length, "offset" in y || (y.offset = v)), "offset" in y && (s.byterange = k, k.offset = y.offset), v = k.offset + k.length;
            },
            endlist() {
              this.manifest.endList = !0;
            },
            inf() {
              "mediaSequence" in this.manifest || (this.manifest.mediaSequence = 0, this.trigger("info", {
                message: "defaulting media sequence to zero"
              })), "discontinuitySequence" in this.manifest || (this.manifest.discontinuitySequence = 0, this.trigger("info", {
                message: "defaulting discontinuity sequence to zero"
              })), y.title && (s.title = y.title), y.duration > 0 && (s.duration = y.duration), y.duration === 0 && (s.duration = 0.01, this.trigger("info", {
                message: "updating zero segment duration to a small value"
              })), this.manifest.segments = t;
            },
            key() {
              if (!y.attributes) {
                this.trigger("warn", {
                  message: "ignoring key declaration without attribute list"
                });
                return;
              }
              if (y.attributes.METHOD === "NONE") {
                n = null;
                return;
              }
              if (!y.attributes.URI) {
                this.trigger("warn", {
                  message: "ignoring key declaration without URI"
                });
                return;
              }
              if (y.attributes.KEYFORMAT === "com.apple.streamingkeydelivery") {
                this.manifest.contentProtection = this.manifest.contentProtection || {}, this.manifest.contentProtection["com.apple.fps.1_0"] = {
                  attributes: y.attributes
                };
                return;
              }
              if (y.attributes.KEYFORMAT === "com.microsoft.playready") {
                this.manifest.contentProtection = this.manifest.contentProtection || {}, this.manifest.contentProtection["com.microsoft.playready"] = {
                  uri: y.attributes.URI
                };
                return;
              }
              if (y.attributes.KEYFORMAT === f) {
                if (["SAMPLE-AES", "SAMPLE-AES-CTR", "SAMPLE-AES-CENC"].indexOf(y.attributes.METHOD) === -1) {
                  this.trigger("warn", {
                    message: "invalid key method provided for Widevine"
                  });
                  return;
                }
                if (y.attributes.METHOD === "SAMPLE-AES-CENC" && this.trigger("warn", {
                  message: "SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"
                }), y.attributes.URI.substring(0, 23) !== "data:text/plain;base64,") {
                  this.trigger("warn", {
                    message: "invalid key URI provided for Widevine"
                  });
                  return;
                }
                if (!(y.attributes.KEYID && y.attributes.KEYID.substring(0, 2) === "0x")) {
                  this.trigger("warn", {
                    message: "invalid key ID provided for Widevine"
                  });
                  return;
                }
                this.manifest.contentProtection = this.manifest.contentProtection || {}, this.manifest.contentProtection["com.widevine.alpha"] = {
                  attributes: {
                    schemeIdUri: y.attributes.KEYFORMAT,
                    // remove '0x' from the key id string
                    keyId: y.attributes.KEYID.substring(2)
                  },
                  // decode the base64-encoded PSSH box
                  pssh: L0(y.attributes.URI.split(",")[1])
                };
                return;
              }
              y.attributes.METHOD || this.trigger("warn", {
                message: "defaulting key method to AES-128"
              }), n = {
                method: y.attributes.METHOD || "AES-128",
                uri: y.attributes.URI
              }, typeof y.attributes.IV < "u" && (n.iv = y.attributes.IV);
            },
            "media-sequence"() {
              if (!isFinite(y.number)) {
                this.trigger("warn", {
                  message: "ignoring invalid media sequence: " + y.number
                });
                return;
              }
              this.manifest.mediaSequence = y.number;
            },
            "discontinuity-sequence"() {
              if (!isFinite(y.number)) {
                this.trigger("warn", {
                  message: "ignoring invalid discontinuity sequence: " + y.number
                });
                return;
              }
              this.manifest.discontinuitySequence = y.number, m = y.number;
            },
            "playlist-type"() {
              if (!/VOD|EVENT/.test(y.playlistType)) {
                this.trigger("warn", {
                  message: "ignoring unknown playlist type: " + y.playlist
                });
                return;
              }
              this.manifest.playlistType = y.playlistType;
            },
            map() {
              r = {}, y.uri && (r.uri = y.uri), y.byterange && (r.byterange = y.byterange), n && (r.key = n);
            },
            "stream-inf"() {
              if (this.manifest.playlists = t, this.manifest.mediaGroups = this.manifest.mediaGroups || u, !y.attributes) {
                this.trigger("warn", {
                  message: "ignoring empty stream-inf attributes"
                });
                return;
              }
              s.attributes || (s.attributes = {}), it(s.attributes, y.attributes);
            },
            media() {
              if (this.manifest.mediaGroups = this.manifest.mediaGroups || u, !(y.attributes && y.attributes.TYPE && y.attributes["GROUP-ID"] && y.attributes.NAME)) {
                this.trigger("warn", {
                  message: "ignoring incomplete or missing media group"
                });
                return;
              }
              const k = this.manifest.mediaGroups[y.attributes.TYPE];
              k[y.attributes["GROUP-ID"]] = k[y.attributes["GROUP-ID"]] || {}, A = k[y.attributes["GROUP-ID"]], w = {
                default: /yes/i.test(y.attributes.DEFAULT)
              }, w.default ? w.autoselect = !0 : w.autoselect = /yes/i.test(y.attributes.AUTOSELECT), y.attributes.LANGUAGE && (w.language = y.attributes.LANGUAGE), y.attributes.URI && (w.uri = y.attributes.URI), y.attributes["INSTREAM-ID"] && (w.instreamId = y.attributes["INSTREAM-ID"]), y.attributes.CHARACTERISTICS && (w.characteristics = y.attributes.CHARACTERISTICS), y.attributes.FORCED && (w.forced = /yes/i.test(y.attributes.FORCED)), A[y.attributes.NAME] = w;
            },
            discontinuity() {
              m += 1, s.discontinuity = !0, this.manifest.discontinuityStarts.push(t.length);
            },
            "program-date-time"() {
              typeof this.manifest.dateTimeString > "u" && (this.manifest.dateTimeString = y.dateTimeString, this.manifest.dateTimeObject = y.dateTimeObject), s.dateTimeString = y.dateTimeString, s.dateTimeObject = y.dateTimeObject;
              const {
                lastProgramDateTime: k
              } = this;
              this.lastProgramDateTime = new Date(y.dateTimeString).getTime(), k === null && this.manifest.segments.reduceRight((D, R) => (R.programDateTime = D - R.duration * 1e3, R.programDateTime), this.lastProgramDateTime);
            },
            targetduration() {
              if (!isFinite(y.duration) || y.duration < 0) {
                this.trigger("warn", {
                  message: "ignoring invalid target duration: " + y.duration
                });
                return;
              }
              this.manifest.targetDuration = y.duration, ha.call(this, this.manifest);
            },
            start() {
              if (!y.attributes || isNaN(y.attributes["TIME-OFFSET"])) {
                this.trigger("warn", {
                  message: "ignoring start declaration without appropriate attribute list"
                });
                return;
              }
              this.manifest.start = {
                timeOffset: y.attributes["TIME-OFFSET"],
                precise: y.attributes.PRECISE
              };
            },
            "cue-out"() {
              s.cueOut = y.data;
            },
            "cue-out-cont"() {
              s.cueOutCont = y.data;
            },
            "cue-in"() {
              s.cueIn = y.data;
            },
            skip() {
              this.manifest.skip = Ht(y.attributes), this.warnOnMissingAttributes_("#EXT-X-SKIP", y.attributes, ["SKIPPED-SEGMENTS"]);
            },
            part() {
              a = !0;
              const k = this.manifest.segments.length, D = Ht(y.attributes);
              s.parts = s.parts || [], s.parts.push(D), D.byterange && (D.byterange.hasOwnProperty("offset") || (D.byterange.offset = b), b = D.byterange.offset + D.byterange.length);
              const R = s.parts.length - 1;
              this.warnOnMissingAttributes_(`#EXT-X-PART #${R} for segment #${k}`, y.attributes, ["URI", "DURATION"]), this.manifest.renditionReports && this.manifest.renditionReports.forEach((j, P) => {
                j.hasOwnProperty("lastPart") || this.trigger("warn", {
                  message: `#EXT-X-RENDITION-REPORT #${P} lacks required attribute(s): LAST-PART`
                });
              });
            },
            "server-control"() {
              const k = this.manifest.serverControl = Ht(y.attributes);
              k.hasOwnProperty("canBlockReload") || (k.canBlockReload = !1, this.trigger("info", {
                message: "#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false"
              })), ha.call(this, this.manifest), k.canSkipDateranges && !k.hasOwnProperty("canSkipUntil") && this.trigger("warn", {
                message: "#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set"
              });
            },
            "preload-hint"() {
              const k = this.manifest.segments.length, D = Ht(y.attributes), R = D.type && D.type === "PART";
              s.preloadHints = s.preloadHints || [], s.preloadHints.push(D), D.byterange && (D.byterange.hasOwnProperty("offset") || (D.byterange.offset = R ? b : 0, R && (b = D.byterange.offset + D.byterange.length)));
              const j = s.preloadHints.length - 1;
              if (this.warnOnMissingAttributes_(`#EXT-X-PRELOAD-HINT #${j} for segment #${k}`, y.attributes, ["TYPE", "URI"]), !!D.type)
                for (let P = 0; P < s.preloadHints.length - 1; P++) {
                  const F = s.preloadHints[P];
                  F.type && F.type === D.type && this.trigger("warn", {
                    message: `#EXT-X-PRELOAD-HINT #${j} for segment #${k} has the same TYPE ${D.type} as preload hint #${P}`
                  });
                }
            },
            "rendition-report"() {
              const k = Ht(y.attributes);
              this.manifest.renditionReports = this.manifest.renditionReports || [], this.manifest.renditionReports.push(k);
              const D = this.manifest.renditionReports.length - 1, R = ["LAST-MSN", "URI"];
              a && R.push("LAST-PART"), this.warnOnMissingAttributes_(`#EXT-X-RENDITION-REPORT #${D}`, y.attributes, R);
            },
            "part-inf"() {
              this.manifest.partInf = Ht(y.attributes), this.warnOnMissingAttributes_("#EXT-X-PART-INF", y.attributes, ["PART-TARGET"]), this.manifest.partInf.partTarget && (this.manifest.partTargetDuration = this.manifest.partInf.partTarget), ha.call(this, this.manifest);
            },
            daterange() {
              this.manifest.dateRanges.push(Ht(y.attributes));
              const k = this.manifest.dateRanges.length - 1;
              this.warnOnMissingAttributes_(`#EXT-X-DATERANGE #${k}`, y.attributes, ["ID", "START-DATE"]);
              const D = this.manifest.dateRanges[k];
              D.endDate && D.startDate && new Date(D.endDate) < new Date(D.startDate) && this.trigger("warn", {
                message: "EXT-X-DATERANGE END-DATE must be equal to or later than the value of the START-DATE"
              }), D.duration && D.duration < 0 && this.trigger("warn", {
                message: "EXT-X-DATERANGE DURATION must not be negative"
              }), D.plannedDuration && D.plannedDuration < 0 && this.trigger("warn", {
                message: "EXT-X-DATERANGE PLANNED-DURATION must not be negative"
              });
              const R = !!D.endOnNext;
              if (R && !D.class && this.trigger("warn", {
                message: "EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must have a CLASS attribute"
              }), R && (D.duration || D.endDate) && this.trigger("warn", {
                message: "EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must not contain DURATION or END-DATE attributes"
              }), D.duration && D.endDate) {
                const P = D.startDate.getTime() + D.duration * 1e3;
                this.manifest.dateRanges[k].endDate = new Date(P);
              }
              if (!S[D.id])
                S[D.id] = D;
              else {
                for (const P in S[D.id])
                  if (D[P] && JSON.stringify(S[D.id][P]) !== JSON.stringify(D[P])) {
                    this.trigger("warn", {
                      message: "EXT-X-DATERANGE tags with the same ID in a playlist must have the same attributes values"
                    });
                    break;
                  }
                const j = this.manifest.dateRanges.findIndex((P) => P.id === D.id);
                this.manifest.dateRanges[j] = it(this.manifest.dateRanges[j], D), S[D.id] = it(S[D.id], D), this.manifest.dateRanges.pop();
              }
            },
            "independent-segments"() {
              this.manifest.independentSegments = !0;
            },
            "content-steering"() {
              this.manifest.contentSteering = Ht(y.attributes), this.warnOnMissingAttributes_("#EXT-X-CONTENT-STEERING", y.attributes, ["SERVER-URI"]);
            }
          }[y.tagType] || l).call(e);
        },
        uri() {
          s.uri = y.uri, t.push(s), this.manifest.targetDuration && !("duration" in s) && (this.trigger("warn", {
            message: "defaulting segment duration to the target duration"
          }), s.duration = this.manifest.targetDuration), n && (s.key = n), s.timeline = m, r && (s.map = r), b = 0, this.lastProgramDateTime !== null && (s.programDateTime = this.lastProgramDateTime, this.lastProgramDateTime += s.duration * 1e3), s = {};
        },
        comment() {
        },
        custom() {
          y.segment ? (s.custom = s.custom || {}, s.custom[y.customType] = y.data) : (this.manifest.custom = this.manifest.custom || {}, this.manifest.custom[y.customType] = y.data);
        }
      })[y.type].call(e);
    });
  }
  warnOnMissingAttributes_(e, t, s) {
    const r = [];
    s.forEach(function(n) {
      t.hasOwnProperty(n) || r.push(n);
    }), r.length && this.trigger("warn", {
      message: `${e} lacks required attribute(s): ${r.join(", ")}`
    });
  }
  /**
   * Parse the input string and update the manifest object.
   *
   * @param {string} chunk a potentially incomplete portion of the manifest
   */
  push(e) {
    this.lineStream.push(e);
  }
  /**
   * Flush any remaining input. This can be handy if the last line of an M3U8
   * manifest did not contain a trailing newline but the file has been
   * completely received.
   */
  end() {
    this.lineStream.push(`
`), this.manifest.dateRanges.length && this.lastProgramDateTime === null && this.trigger("warn", {
      message: "A playlist with EXT-X-DATERANGE tag must contain atleast one EXT-X-PROGRAM-DATE-TIME tag"
    }), this.lastProgramDateTime = null, this.trigger("end");
  }
  /**
   * Add an additional parser for non-standard tags
   *
   * @param {Object}   options              a map of options for the added parser
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {string}   options.customType   the custom type to register to the output
   * @param {Function} [options.dataParser] function to parse the line into an object
   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
   */
  addParser(e) {
    this.parseStream.addParser(e);
  }
  /**
   * Add a custom header mapper
   *
   * @param {Object}   options
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {Function} options.map          function to translate tag into a different tag
   */
  addTagMapper(e) {
    this.parseStream.addTagMapper(e);
  }
}
var mi = {
  // to determine mime types
  mp4: /^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,
  webm: /^(vp0?[89]|av0?1|opus|vorbis)/,
  ogg: /^(vp0?[89]|theora|flac|opus|vorbis)/,
  // to determine if a codec is audio or video
  video: /^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,
  audio: /^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3|speex|aac)/,
  text: /^(stpp.ttml.im1t)/,
  // mux.js support regex
  muxerVideo: /^(avc0?1)/,
  muxerAudio: /^(mp4a)/,
  // match nothing as muxer does not support text right now.
  // there cannot never be a character before the start of a string
  // so this matches nothing.
  muxerText: /a^/
}, F0 = ["video", "audio", "text"], yu = ["Video", "Audio", "Text"], Qc = function(e) {
  return e && e.replace(/avc1\.(\d+)\.(\d+)/i, function(t, s, r) {
    var n = ("00" + Number(s).toString(16)).slice(-2), a = ("00" + Number(r).toString(16)).slice(-2);
    return "avc1." + n + "00" + a;
  });
}, mt = function(e) {
  e === void 0 && (e = "");
  var t = e.split(","), s = [];
  return t.forEach(function(r) {
    r = r.trim();
    var n;
    F0.forEach(function(a) {
      var l = mi[a].exec(r.toLowerCase());
      if (!(!l || l.length <= 1)) {
        n = a;
        var u = r.substring(0, l[1].length), f = r.replace(u, "");
        s.push({
          type: u,
          details: f,
          mediaType: a
        });
      }
    }), n || s.push({
      type: r,
      details: "",
      mediaType: "unknown"
    });
  }), s;
}, U0 = function(e, t) {
  if (!e.mediaGroups.AUDIO || !t)
    return null;
  var s = e.mediaGroups.AUDIO[t];
  if (!s)
    return null;
  for (var r in s) {
    var n = s[r];
    if (n.default && n.playlists)
      return mt(n.playlists[0].attributes.CODECS);
  }
  return null;
}, Jc = function(e) {
  return e === void 0 && (e = ""), mi.audio.test(e.trim().toLowerCase());
}, q0 = function(e) {
  return e === void 0 && (e = ""), mi.text.test(e.trim().toLowerCase());
}, qs = function(e) {
  if (!(!e || typeof e != "string")) {
    var t = e.toLowerCase().split(",").map(function(n) {
      return Qc(n.trim());
    }), s = "video";
    t.length === 1 && Jc(t[0]) ? s = "audio" : t.length === 1 && q0(t[0]) && (s = "application");
    var r = "mp4";
    return t.every(function(n) {
      return mi.mp4.test(n);
    }) ? r = "mp4" : t.every(function(n) {
      return mi.webm.test(n);
    }) ? r = "webm" : t.every(function(n) {
      return mi.ogg.test(n);
    }) && (r = "ogg"), s + "/" + r + ';codecs="' + e + '"';
  }
}, Fr = function(e) {
  return e === void 0 && (e = ""), E.MediaSource && E.MediaSource.isTypeSupported && E.MediaSource.isTypeSupported(qs(e)) || !1;
}, fa = function(e) {
  return e === void 0 && (e = ""), e.toLowerCase().split(",").every(function(t) {
    t = t.trim();
    for (var s = 0; s < yu.length; s++) {
      var r = yu[s];
      if (mi["muxer" + r].test(t))
        return !0;
    }
    return !1;
  });
}, _u = "mp4a.40.2", $0 = "avc1.4d400d", V0 = /^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i, H0 = /^application\/dash\+xml/i, Zc = function(e) {
  return V0.test(e) ? "hls" : H0.test(e) ? "dash" : e === "application/vnd.videojs.vhs+json" ? "vhs-json" : null;
}, z0 = function(e) {
  return e.toString(2).length;
}, G0 = function(e) {
  return Math.ceil(z0(e) / 8);
}, ed = function(e) {
  return ArrayBuffer.isView === "function" ? ArrayBuffer.isView(e) : e && e.buffer instanceof ArrayBuffer;
}, W0 = function(e) {
  return ed(e);
}, H = function(e) {
  return e instanceof Uint8Array ? e : (!Array.isArray(e) && !W0(e) && !(e instanceof ArrayBuffer) && (typeof e != "number" || typeof e == "number" && e !== e ? e = 0 : e = [e]), new Uint8Array(e && e.buffer || e, e && e.byteOffset || 0, e && e.byteLength || 0));
}, De = E.BigInt || Number, Oa = [De("0x1"), De("0x100"), De("0x10000"), De("0x1000000"), De("0x100000000"), De("0x10000000000"), De("0x1000000000000"), De("0x100000000000000"), De("0x10000000000000000")];
(function() {
  var i = new Uint16Array([65484]), e = new Uint8Array(i.buffer, i.byteOffset, i.byteLength);
  return e[0] === 255 ? "big" : e[0] === 204 ? "little" : "unknown";
})();
var X0 = function(e, t) {
  var s = t === void 0 ? {} : t, r = s.signed, n = r === void 0 ? !1 : r, a = s.le, l = a === void 0 ? !1 : a;
  e = H(e);
  var u = l ? "reduce" : "reduceRight", f = e[u] ? e[u] : Array.prototype[u], m = f.call(e, function(b, S, y) {
    var A = l ? y : Math.abs(y + 1 - e.length);
    return b + De(S) * Oa[A];
  }, De(0));
  if (n) {
    var v = Oa[e.length] / De(2) - De(1);
    m = De(m), m > v && (m -= v, m -= v, m -= De(2));
  }
  return Number(m);
}, K0 = function(e, t) {
  var s = t === void 0 ? {} : t, r = s.le, n = r === void 0 ? !1 : r;
  (typeof e != "bigint" && typeof e != "number" || typeof e == "number" && e !== e) && (e = 0), e = De(e);
  for (var a = G0(e), l = new Uint8Array(new ArrayBuffer(a)), u = 0; u < a; u++) {
    var f = n ? u : Math.abs(u + 1 - l.length);
    l[f] = Number(e / Oa[u] & De(255)), e < 0 && (l[f] = Math.abs(~l[f]), l[f] -= u === 0 ? 1 : 2);
  }
  return l;
}, td = function(e, t) {
  if (typeof e != "string" && e && typeof e.toString == "function" && (e = e.toString()), typeof e != "string")
    return new Uint8Array();
  t || (e = unescape(encodeURIComponent(e)));
  for (var s = new Uint8Array(e.length), r = 0; r < e.length; r++)
    s[r] = e.charCodeAt(r);
  return s;
}, Y0 = function() {
  for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++)
    t[s] = arguments[s];
  if (t = t.filter(function(l) {
    return l && (l.byteLength || l.length) && typeof l != "string";
  }), t.length <= 1)
    return H(t[0]);
  var r = t.reduce(function(l, u, f) {
    return l + (u.byteLength || u.length);
  }, 0), n = new Uint8Array(r), a = 0;
  return t.forEach(function(l) {
    l = H(l), n.set(l, a), a += l.byteLength;
  }), n;
}, pe = function(e, t, s) {
  var r = s === void 0 ? {} : s, n = r.offset, a = n === void 0 ? 0 : n, l = r.mask, u = l === void 0 ? [] : l;
  e = H(e), t = H(t);
  var f = t.every ? t.every : Array.prototype.every;
  return t.length && e.length - a >= t.length && // ie 11 doesn't support every on uin8
  f.call(t, function(m, v) {
    var b = u[v] ? u[v] & e[a + v] : e[a + v];
    return m === b;
  });
}, Q0 = function(e, t, s) {
  t.forEach(function(r) {
    for (var n in e.mediaGroups[r])
      for (var a in e.mediaGroups[r][n]) {
        var l = e.mediaGroups[r][n][a];
        s(l, r, n, a);
      }
  });
}, J0 = function(e) {
  return E.atob ? E.atob(e) : Buffer.from(e, "base64").toString("binary");
};
function Z0(i) {
  for (var e = J0(i), t = new Uint8Array(e.length), s = 0; s < e.length; s++)
    t[s] = e.charCodeAt(s);
  return t;
}
var Zt = {}, qt = {};
function ev(i, e, t) {
  if (t === void 0 && (t = Array.prototype), i && typeof t.find == "function")
    return t.find.call(i, e);
  for (var s = 0; s < i.length; s++)
    if (Object.prototype.hasOwnProperty.call(i, s)) {
      var r = i[s];
      if (e.call(void 0, r, s, i))
        return r;
    }
}
function go(i, e) {
  return e === void 0 && (e = Object), e && typeof e.freeze == "function" ? e.freeze(i) : i;
}
function tv(i, e) {
  if (i === null || typeof i != "object")
    throw new TypeError("target is not an object");
  for (var t in e)
    Object.prototype.hasOwnProperty.call(e, t) && (i[t] = e[t]);
  return i;
}
var id = go({
  /**
   * `text/html`, the only mime type that triggers treating an XML document as HTML.
   *
   * @see DOMParser.SupportedType.isHTML
   * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
   * @see https://en.wikipedia.org/wiki/HTML Wikipedia
   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
   * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
   */
  HTML: "text/html",
  /**
   * Helper method to check a mime type if it indicates an HTML document
   *
   * @param {string} [value]
   * @returns {boolean}
   *
   * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
   * @see https://en.wikipedia.org/wiki/HTML Wikipedia
   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
   * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */
  isHTML: function(i) {
    return i === id.HTML;
  },
  /**
   * `application/xml`, the standard mime type for XML documents.
   *
   * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
   * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
   * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
   */
  XML_APPLICATION: "application/xml",
  /**
   * `text/html`, an alias for `application/xml`.
   *
   * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
   * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
   * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
   */
  XML_TEXT: "text/xml",
  /**
   * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
   * but is parsed as an XML document.
   *
   * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
   * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
   * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
   */
  XML_XHTML_APPLICATION: "application/xhtml+xml",
  /**
   * `image/svg+xml`,
   *
   * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
   * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
   * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
   */
  XML_SVG_IMAGE: "image/svg+xml"
}), sd = go({
  /**
   * The XHTML namespace.
   *
   * @see http://www.w3.org/1999/xhtml
   */
  HTML: "http://www.w3.org/1999/xhtml",
  /**
   * Checks if `uri` equals `NAMESPACE.HTML`.
   *
   * @param {string} [uri]
   *
   * @see NAMESPACE.HTML
   */
  isHTML: function(i) {
    return i === sd.HTML;
  },
  /**
   * The SVG namespace.
   *
   * @see http://www.w3.org/2000/svg
   */
  SVG: "http://www.w3.org/2000/svg",
  /**
   * The `xml:` namespace.
   *
   * @see http://www.w3.org/XML/1998/namespace
   */
  XML: "http://www.w3.org/XML/1998/namespace",
  /**
   * The `xmlns:` namespace
   *
   * @see https://www.w3.org/2000/xmlns/
   */
  XMLNS: "http://www.w3.org/2000/xmlns/"
});
qt.assign = tv;
qt.find = ev;
qt.freeze = go;
qt.MIME_TYPE = id;
qt.NAMESPACE = sd;
var rd = qt, xt = rd.find, $s = rd.NAMESPACE;
function iv(i) {
  return i !== "";
}
function sv(i) {
  return i ? i.split(/[\t\n\f\r ]+/).filter(iv) : [];
}
function rv(i, e) {
  return i.hasOwnProperty(e) || (i[e] = !0), i;
}
function Tu(i) {
  if (!i)
    return [];
  var e = sv(i);
  return Object.keys(e.reduce(rv, {}));
}
function nv(i) {
  return function(e) {
    return i && i.indexOf(e) !== -1;
  };
}
function Ks(i, e) {
  for (var t in i)
    Object.prototype.hasOwnProperty.call(i, t) && (e[t] = i[t]);
}
function ze(i, e) {
  var t = i.prototype;
  if (!(t instanceof e)) {
    let s = function() {
    };
    s.prototype = e.prototype, s = new s(), Ks(t, s), i.prototype = t = s;
  }
  t.constructor != i && (typeof i != "function" && console.error("unknown Class:" + i), t.constructor = i);
}
var Ge = {}, ct = Ge.ELEMENT_NODE = 1, $i = Ge.ATTRIBUTE_NODE = 2, zr = Ge.TEXT_NODE = 3, nd = Ge.CDATA_SECTION_NODE = 4, ad = Ge.ENTITY_REFERENCE_NODE = 5, av = Ge.ENTITY_NODE = 6, od = Ge.PROCESSING_INSTRUCTION_NODE = 7, ld = Ge.COMMENT_NODE = 8, ud = Ge.DOCUMENT_NODE = 9, cd = Ge.DOCUMENT_TYPE_NODE = 10, Bt = Ge.DOCUMENT_FRAGMENT_NODE = 11, ov = Ge.NOTATION_NODE = 12, Le = {}, Ae = {};
Le.INDEX_SIZE_ERR = (Ae[1] = "Index size error", 1);
Le.DOMSTRING_SIZE_ERR = (Ae[2] = "DOMString size error", 2);
var qe = Le.HIERARCHY_REQUEST_ERR = (Ae[3] = "Hierarchy request error", 3);
Le.WRONG_DOCUMENT_ERR = (Ae[4] = "Wrong document", 4);
Le.INVALID_CHARACTER_ERR = (Ae[5] = "Invalid character", 5);
Le.NO_DATA_ALLOWED_ERR = (Ae[6] = "No data allowed", 6);
Le.NO_MODIFICATION_ALLOWED_ERR = (Ae[7] = "No modification allowed", 7);
var dd = Le.NOT_FOUND_ERR = (Ae[8] = "Not found", 8);
Le.NOT_SUPPORTED_ERR = (Ae[9] = "Not supported", 9);
var bu = Le.INUSE_ATTRIBUTE_ERR = (Ae[10] = "Attribute in use", 10);
Le.INVALID_STATE_ERR = (Ae[11] = "Invalid state", 11);
Le.SYNTAX_ERR = (Ae[12] = "Syntax error", 12);
Le.INVALID_MODIFICATION_ERR = (Ae[13] = "Invalid modification", 13);
Le.NAMESPACE_ERR = (Ae[14] = "Invalid namespace", 14);
Le.INVALID_ACCESS_ERR = (Ae[15] = "Invalid access", 15);
function xe(i, e) {
  if (e instanceof Error)
    var t = e;
  else
    t = this, Error.call(this, Ae[i]), this.message = Ae[i], Error.captureStackTrace && Error.captureStackTrace(this, xe);
  return t.code = i, e && (this.message = this.message + ": " + e), t;
}
xe.prototype = Error.prototype;
Ks(Le, xe);
function Rt() {
}
Rt.prototype = {
  /**
   * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
   * @standard level1
   */
  length: 0,
  /**
   * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
   * @standard level1
   * @param index  unsigned long
   *   Index into the collection.
   * @return Node
   * 	The node at the indexth position in the NodeList, or null if that is not a valid index.
   */
  item: function(i) {
    return i >= 0 && i < this.length ? this[i] : null;
  },
  toString: function(i, e) {
    for (var t = [], s = 0; s < this.length; s++)
      Pi(this[s], t, i, e);
    return t.join("");
  },
  /**
   * @private
   * @param {function (Node):boolean} predicate
   * @returns {Node[]}
   */
  filter: function(i) {
    return Array.prototype.filter.call(this, i);
  },
  /**
   * @private
   * @param {Node} item
   * @returns {number}
   */
  indexOf: function(i) {
    return Array.prototype.indexOf.call(this, i);
  }
};
function Vi(i, e) {
  this._node = i, this._refresh = e, vo(this);
}
function vo(i) {
  var e = i._node._inc || i._node.ownerDocument._inc;
  if (i._inc !== e) {
    var t = i._refresh(i._node);
    if (Sd(i, "length", t.length), !i.$$length || t.length < i.$$length)
      for (var s = t.length; s in i; s++)
        Object.prototype.hasOwnProperty.call(i, s) && delete i[s];
    Ks(t, i), i._inc = e;
  }
}
Vi.prototype.item = function(i) {
  return vo(this), this[i] || null;
};
ze(Vi, Rt);
function Gr() {
}
function hd(i, e) {
  for (var t = i.length; t--; )
    if (i[t] === e)
      return t;
}
function xu(i, e, t, s) {
  if (s ? e[hd(e, s)] = t : e[e.length++] = t, i) {
    t.ownerElement = i;
    var r = i.ownerDocument;
    r && (s && md(r, i, s), lv(r, i, t));
  }
}
function Su(i, e, t) {
  var s = hd(e, t);
  if (s >= 0) {
    for (var r = e.length - 1; s < r; )
      e[s] = e[++s];
    if (e.length = r, i) {
      var n = i.ownerDocument;
      n && (md(n, i, t), t.ownerElement = null);
    }
  } else
    throw new xe(dd, new Error(i.tagName + "@" + t));
}
Gr.prototype = {
  length: 0,
  item: Rt.prototype.item,
  getNamedItem: function(i) {
    for (var e = this.length; e--; ) {
      var t = this[e];
      if (t.nodeName == i)
        return t;
    }
  },
  setNamedItem: function(i) {
    var e = i.ownerElement;
    if (e && e != this._ownerElement)
      throw new xe(bu);
    var t = this.getNamedItem(i.nodeName);
    return xu(this._ownerElement, this, i, t), t;
  },
  /* returns Node */
  setNamedItemNS: function(i) {
    var e = i.ownerElement, t;
    if (e && e != this._ownerElement)
      throw new xe(bu);
    return t = this.getNamedItemNS(i.namespaceURI, i.localName), xu(this._ownerElement, this, i, t), t;
  },
  /* returns Node */
  removeNamedItem: function(i) {
    var e = this.getNamedItem(i);
    return Su(this._ownerElement, this, e), e;
  },
  // raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
  //for level2
  removeNamedItemNS: function(i, e) {
    var t = this.getNamedItemNS(i, e);
    return Su(this._ownerElement, this, t), t;
  },
  getNamedItemNS: function(i, e) {
    for (var t = this.length; t--; ) {
      var s = this[t];
      if (s.localName == e && s.namespaceURI == i)
        return s;
    }
    return null;
  }
};
function fd() {
}
fd.prototype = {
  /**
   * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
   * The different implementations fairly diverged in what kind of features were reported.
   * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
   *
   * @deprecated It is deprecated and modern browsers return true in all cases.
   *
   * @param {string} feature
   * @param {string} [version]
   * @returns {boolean} always true
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
   * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
   * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
   */
  hasFeature: function(i, e) {
    return !0;
  },
  /**
   * Creates an XML Document object of the specified type with its document element.
   *
   * __It behaves slightly different from the description in the living standard__:
   * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
   * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
   * - this implementation is not validating names or qualified names
   *   (when parsing XML strings, the SAX parser takes care of that)
   *
   * @param {string|null} namespaceURI
   * @param {string} qualifiedName
   * @param {DocumentType=null} doctype
   * @returns {Document}
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
   * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
   * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
   *
   * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
   * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
   * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
   */
  createDocument: function(i, e, t) {
    var s = new Ys();
    if (s.implementation = this, s.childNodes = new Rt(), s.doctype = t || null, t && s.appendChild(t), e) {
      var r = s.createElementNS(i, e);
      s.appendChild(r);
    }
    return s;
  },
  /**
   * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
   *
   * __This behavior is slightly different from the in the specs__:
   * - this implementation is not validating names or qualified names
   *   (when parsing XML strings, the SAX parser takes care of that)
   *
   * @param {string} qualifiedName
   * @param {string} [publicId]
   * @param {string} [systemId]
   * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
   * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
   * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
   * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
   *
   * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
   * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
   * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
   */
  createDocumentType: function(i, e, t) {
    var s = new vn();
    return s.name = i, s.nodeName = i, s.publicId = e || "", s.systemId = t || "", s;
  }
};
function ne() {
}
ne.prototype = {
  firstChild: null,
  lastChild: null,
  previousSibling: null,
  nextSibling: null,
  attributes: null,
  parentNode: null,
  childNodes: null,
  ownerDocument: null,
  nodeValue: null,
  namespaceURI: null,
  prefix: null,
  localName: null,
  // Modified in DOM Level 2:
  insertBefore: function(i, e) {
    return Wr(this, i, e);
  },
  replaceChild: function(i, e) {
    Wr(this, i, e, vd), e && this.removeChild(e);
  },
  removeChild: function(i) {
    return gd(this, i);
  },
  appendChild: function(i) {
    return this.insertBefore(i, null);
  },
  hasChildNodes: function() {
    return this.firstChild != null;
  },
  cloneNode: function(i) {
    return ja(this.ownerDocument || this, this, i);
  },
  // Modified in DOM Level 2:
  normalize: function() {
    for (var i = this.firstChild; i; ) {
      var e = i.nextSibling;
      e && e.nodeType == zr && i.nodeType == zr ? (this.removeChild(e), i.appendData(e.data)) : (i.normalize(), i = e);
    }
  },
  // Introduced in DOM Level 2:
  isSupported: function(i, e) {
    return this.ownerDocument.implementation.hasFeature(i, e);
  },
  // Introduced in DOM Level 2:
  hasAttributes: function() {
    return this.attributes.length > 0;
  },
  /**
   * Look up the prefix associated to the given namespace URI, starting from this node.
   * **The default namespace declarations are ignored by this method.**
   * See Namespace Prefix Lookup for details on the algorithm used by this method.
   *
   * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._
   *
   * @param {string | null} namespaceURI
   * @returns {string | null}
   * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
   * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
   * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
   * @see https://github.com/xmldom/xmldom/issues/322
   */
  lookupPrefix: function(i) {
    for (var e = this; e; ) {
      var t = e._nsMap;
      if (t) {
        for (var s in t)
          if (Object.prototype.hasOwnProperty.call(t, s) && t[s] === i)
            return s;
      }
      e = e.nodeType == $i ? e.ownerDocument : e.parentNode;
    }
    return null;
  },
  // Introduced in DOM Level 3:
  lookupNamespaceURI: function(i) {
    for (var e = this; e; ) {
      var t = e._nsMap;
      if (t && Object.prototype.hasOwnProperty.call(t, i))
        return t[i];
      e = e.nodeType == $i ? e.ownerDocument : e.parentNode;
    }
    return null;
  },
  // Introduced in DOM Level 3:
  isDefaultNamespace: function(i) {
    var e = this.lookupPrefix(i);
    return e == null;
  }
};
function pd(i) {
  return i == "<" && "&lt;" || i == ">" && "&gt;" || i == "&" && "&amp;" || i == '"' && "&quot;" || "&#" + i.charCodeAt() + ";";
}
Ks(Ge, ne);
Ks(Ge, ne.prototype);
function Vs(i, e) {
  if (e(i))
    return !0;
  if (i = i.firstChild)
    do
      if (Vs(i, e))
        return !0;
    while (i = i.nextSibling);
}
function Ys() {
  this.ownerDocument = this;
}
function lv(i, e, t) {
  i && i._inc++;
  var s = t.namespaceURI;
  s === $s.XMLNS && (e._nsMap[t.prefix ? t.localName : ""] = t.value);
}
function md(i, e, t, s) {
  i && i._inc++;
  var r = t.namespaceURI;
  r === $s.XMLNS && delete e._nsMap[t.prefix ? t.localName : ""];
}
function yo(i, e, t) {
  if (i && i._inc) {
    i._inc++;
    var s = e.childNodes;
    if (t)
      s[s.length++] = t;
    else {
      for (var r = e.firstChild, n = 0; r; )
        s[n++] = r, r = r.nextSibling;
      s.length = n, delete s[s.length];
    }
  }
}
function gd(i, e) {
  var t = e.previousSibling, s = e.nextSibling;
  return t ? t.nextSibling = s : i.firstChild = s, s ? s.previousSibling = t : i.lastChild = t, e.parentNode = null, e.previousSibling = null, e.nextSibling = null, yo(i.ownerDocument, i), e;
}
function uv(i) {
  return i && (i.nodeType === ne.DOCUMENT_NODE || i.nodeType === ne.DOCUMENT_FRAGMENT_NODE || i.nodeType === ne.ELEMENT_NODE);
}
function cv(i) {
  return i && (St(i) || _o(i) || Ft(i) || i.nodeType === ne.DOCUMENT_FRAGMENT_NODE || i.nodeType === ne.COMMENT_NODE || i.nodeType === ne.PROCESSING_INSTRUCTION_NODE);
}
function Ft(i) {
  return i && i.nodeType === ne.DOCUMENT_TYPE_NODE;
}
function St(i) {
  return i && i.nodeType === ne.ELEMENT_NODE;
}
function _o(i) {
  return i && i.nodeType === ne.TEXT_NODE;
}
function Eu(i, e) {
  var t = i.childNodes || [];
  if (xt(t, St) || Ft(e))
    return !1;
  var s = xt(t, Ft);
  return !(e && s && t.indexOf(s) > t.indexOf(e));
}
function Cu(i, e) {
  var t = i.childNodes || [];
  function s(n) {
    return St(n) && n !== e;
  }
  if (xt(t, s))
    return !1;
  var r = xt(t, Ft);
  return !(e && r && t.indexOf(r) > t.indexOf(e));
}
function dv(i, e, t) {
  if (!uv(i))
    throw new xe(qe, "Unexpected parent node type " + i.nodeType);
  if (t && t.parentNode !== i)
    throw new xe(dd, "child not in parent");
  if (
    // 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a "HierarchyRequestError" DOMException.
    !cv(e) || // 5. If either `node` is a Text node and `parent` is a document,
    // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
    // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
    // or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
    Ft(e) && i.nodeType !== ne.DOCUMENT_NODE
  )
    throw new xe(
      qe,
      "Unexpected node type " + e.nodeType + " for parent node type " + i.nodeType
    );
}
function hv(i, e, t) {
  var s = i.childNodes || [], r = e.childNodes || [];
  if (e.nodeType === ne.DOCUMENT_FRAGMENT_NODE) {
    var n = r.filter(St);
    if (n.length > 1 || xt(r, _o))
      throw new xe(qe, "More than one element or text in fragment");
    if (n.length === 1 && !Eu(i, t))
      throw new xe(qe, "Element in fragment can not be inserted before doctype");
  }
  if (St(e) && !Eu(i, t))
    throw new xe(qe, "Only one element can be added and only after doctype");
  if (Ft(e)) {
    if (xt(s, Ft))
      throw new xe(qe, "Only one doctype is allowed");
    var a = xt(s, St);
    if (t && s.indexOf(a) < s.indexOf(t))
      throw new xe(qe, "Doctype can only be inserted before an element");
    if (!t && a)
      throw new xe(qe, "Doctype can not be appended since element is present");
  }
}
function vd(i, e, t) {
  var s = i.childNodes || [], r = e.childNodes || [];
  if (e.nodeType === ne.DOCUMENT_FRAGMENT_NODE) {
    var n = r.filter(St);
    if (n.length > 1 || xt(r, _o))
      throw new xe(qe, "More than one element or text in fragment");
    if (n.length === 1 && !Cu(i, t))
      throw new xe(qe, "Element in fragment can not be inserted before doctype");
  }
  if (St(e) && !Cu(i, t))
    throw new xe(qe, "Only one element can be added and only after doctype");
  if (Ft(e)) {
    if (xt(s, function(u) {
      return Ft(u) && u !== t;
    }))
      throw new xe(qe, "Only one doctype is allowed");
    var a = xt(s, St);
    if (t && s.indexOf(a) < s.indexOf(t))
      throw new xe(qe, "Doctype can only be inserted before an element");
  }
}
function Wr(i, e, t, s) {
  dv(i, e, t), i.nodeType === ne.DOCUMENT_NODE && (s || hv)(i, e, t);
  var r = e.parentNode;
  if (r && r.removeChild(e), e.nodeType === Bt) {
    var n = e.firstChild;
    if (n == null)
      return e;
    var a = e.lastChild;
  } else
    n = a = e;
  var l = t ? t.previousSibling : i.lastChild;
  n.previousSibling = l, a.nextSibling = t, l ? l.nextSibling = n : i.firstChild = n, t == null ? i.lastChild = a : t.previousSibling = a;
  do
    n.parentNode = i;
  while (n !== a && (n = n.nextSibling));
  return yo(i.ownerDocument || i, i), e.nodeType == Bt && (e.firstChild = e.lastChild = null), e;
}
function fv(i, e) {
  return e.parentNode && e.parentNode.removeChild(e), e.parentNode = i, e.previousSibling = i.lastChild, e.nextSibling = null, e.previousSibling ? e.previousSibling.nextSibling = e : i.firstChild = e, i.lastChild = e, yo(i.ownerDocument, i, e), e;
}
Ys.prototype = {
  //implementation : null,
  nodeName: "#document",
  nodeType: ud,
  /**
   * The DocumentType node of the document.
   *
   * @readonly
   * @type DocumentType
   */
  doctype: null,
  documentElement: null,
  _inc: 1,
  insertBefore: function(i, e) {
    if (i.nodeType == Bt) {
      for (var t = i.firstChild; t; ) {
        var s = t.nextSibling;
        this.insertBefore(t, e), t = s;
      }
      return i;
    }
    return Wr(this, i, e), i.ownerDocument = this, this.documentElement === null && i.nodeType === ct && (this.documentElement = i), i;
  },
  removeChild: function(i) {
    return this.documentElement == i && (this.documentElement = null), gd(this, i);
  },
  replaceChild: function(i, e) {
    Wr(this, i, e, vd), i.ownerDocument = this, e && this.removeChild(e), St(i) && (this.documentElement = i);
  },
  // Introduced in DOM Level 2:
  importNode: function(i, e) {
    return xd(this, i, e);
  },
  // Introduced in DOM Level 2:
  getElementById: function(i) {
    var e = null;
    return Vs(this.documentElement, function(t) {
      if (t.nodeType == ct && t.getAttribute("id") == i)
        return e = t, !0;
    }), e;
  },
  /**
   * The `getElementsByClassName` method of `Document` interface returns an array-like object
   * of all child elements which have **all** of the given class name(s).
   *
   * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
   *
   *
   * Warning: This is a live LiveNodeList.
   * Changes in the DOM will reflect in the array as the changes occur.
   * If an element selected by this array no longer qualifies for the selector,
   * it will automatically be removed. Be aware of this for iteration purposes.
   *
   * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
   * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
   */
  getElementsByClassName: function(i) {
    var e = Tu(i);
    return new Vi(this, function(t) {
      var s = [];
      return e.length > 0 && Vs(t.documentElement, function(r) {
        if (r !== t && r.nodeType === ct) {
          var n = r.getAttribute("class");
          if (n) {
            var a = i === n;
            if (!a) {
              var l = Tu(n);
              a = e.every(nv(l));
            }
            a && s.push(r);
          }
        }
      }), s;
    });
  },
  //document factory method:
  createElement: function(i) {
    var e = new yi();
    e.ownerDocument = this, e.nodeName = i, e.tagName = i, e.localName = i, e.childNodes = new Rt();
    var t = e.attributes = new Gr();
    return t._ownerElement = e, e;
  },
  createDocumentFragment: function() {
    var i = new yn();
    return i.ownerDocument = this, i.childNodes = new Rt(), i;
  },
  createTextNode: function(i) {
    var e = new To();
    return e.ownerDocument = this, e.appendData(i), e;
  },
  createComment: function(i) {
    var e = new bo();
    return e.ownerDocument = this, e.appendData(i), e;
  },
  createCDATASection: function(i) {
    var e = new xo();
    return e.ownerDocument = this, e.appendData(i), e;
  },
  createProcessingInstruction: function(i, e) {
    var t = new Eo();
    return t.ownerDocument = this, t.tagName = t.nodeName = t.target = i, t.nodeValue = t.data = e, t;
  },
  createAttribute: function(i) {
    var e = new Xr();
    return e.ownerDocument = this, e.name = i, e.nodeName = i, e.localName = i, e.specified = !0, e;
  },
  createEntityReference: function(i) {
    var e = new So();
    return e.ownerDocument = this, e.nodeName = i, e;
  },
  // Introduced in DOM Level 2:
  createElementNS: function(i, e) {
    var t = new yi(), s = e.split(":"), r = t.attributes = new Gr();
    return t.childNodes = new Rt(), t.ownerDocument = this, t.nodeName = e, t.tagName = e, t.namespaceURI = i, s.length == 2 ? (t.prefix = s[0], t.localName = s[1]) : t.localName = e, r._ownerElement = t, t;
  },
  // Introduced in DOM Level 2:
  createAttributeNS: function(i, e) {
    var t = new Xr(), s = e.split(":");
    return t.ownerDocument = this, t.nodeName = e, t.name = e, t.namespaceURI = i, t.specified = !0, s.length == 2 ? (t.prefix = s[0], t.localName = s[1]) : t.localName = e, t;
  }
};
ze(Ys, ne);
function yi() {
  this._nsMap = {};
}
yi.prototype = {
  nodeType: ct,
  hasAttribute: function(i) {
    return this.getAttributeNode(i) != null;
  },
  getAttribute: function(i) {
    var e = this.getAttributeNode(i);
    return e && e.value || "";
  },
  getAttributeNode: function(i) {
    return this.attributes.getNamedItem(i);
  },
  setAttribute: function(i, e) {
    var t = this.ownerDocument.createAttribute(i);
    t.value = t.nodeValue = "" + e, this.setAttributeNode(t);
  },
  removeAttribute: function(i) {
    var e = this.getAttributeNode(i);
    e && this.removeAttributeNode(e);
  },
  //four real opeartion method
  appendChild: function(i) {
    return i.nodeType === Bt ? this.insertBefore(i, null) : fv(this, i);
  },
  setAttributeNode: function(i) {
    return this.attributes.setNamedItem(i);
  },
  setAttributeNodeNS: function(i) {
    return this.attributes.setNamedItemNS(i);
  },
  removeAttributeNode: function(i) {
    return this.attributes.removeNamedItem(i.nodeName);
  },
  //get real attribute name,and remove it by removeAttributeNode
  removeAttributeNS: function(i, e) {
    var t = this.getAttributeNodeNS(i, e);
    t && this.removeAttributeNode(t);
  },
  hasAttributeNS: function(i, e) {
    return this.getAttributeNodeNS(i, e) != null;
  },
  getAttributeNS: function(i, e) {
    var t = this.getAttributeNodeNS(i, e);
    return t && t.value || "";
  },
  setAttributeNS: function(i, e, t) {
    var s = this.ownerDocument.createAttributeNS(i, e);
    s.value = s.nodeValue = "" + t, this.setAttributeNode(s);
  },
  getAttributeNodeNS: function(i, e) {
    return this.attributes.getNamedItemNS(i, e);
  },
  getElementsByTagName: function(i) {
    return new Vi(this, function(e) {
      var t = [];
      return Vs(e, function(s) {
        s !== e && s.nodeType == ct && (i === "*" || s.tagName == i) && t.push(s);
      }), t;
    });
  },
  getElementsByTagNameNS: function(i, e) {
    return new Vi(this, function(t) {
      var s = [];
      return Vs(t, function(r) {
        r !== t && r.nodeType === ct && (i === "*" || r.namespaceURI === i) && (e === "*" || r.localName == e) && s.push(r);
      }), s;
    });
  }
};
Ys.prototype.getElementsByTagName = yi.prototype.getElementsByTagName;
Ys.prototype.getElementsByTagNameNS = yi.prototype.getElementsByTagNameNS;
ze(yi, ne);
function Xr() {
}
Xr.prototype.nodeType = $i;
ze(Xr, ne);
function Qs() {
}
Qs.prototype = {
  data: "",
  substringData: function(i, e) {
    return this.data.substring(i, i + e);
  },
  appendData: function(i) {
    i = this.data + i, this.nodeValue = this.data = i, this.length = i.length;
  },
  insertData: function(i, e) {
    this.replaceData(i, 0, e);
  },
  appendChild: function(i) {
    throw new Error(Ae[qe]);
  },
  deleteData: function(i, e) {
    this.replaceData(i, e, "");
  },
  replaceData: function(i, e, t) {
    var s = this.data.substring(0, i), r = this.data.substring(i + e);
    t = s + t + r, this.nodeValue = this.data = t, this.length = t.length;
  }
};
ze(Qs, ne);
function To() {
}
To.prototype = {
  nodeName: "#text",
  nodeType: zr,
  splitText: function(i) {
    var e = this.data, t = e.substring(i);
    e = e.substring(0, i), this.data = this.nodeValue = e, this.length = e.length;
    var s = this.ownerDocument.createTextNode(t);
    return this.parentNode && this.parentNode.insertBefore(s, this.nextSibling), s;
  }
};
ze(To, Qs);
function bo() {
}
bo.prototype = {
  nodeName: "#comment",
  nodeType: ld
};
ze(bo, Qs);
function xo() {
}
xo.prototype = {
  nodeName: "#cdata-section",
  nodeType: nd
};
ze(xo, Qs);
function vn() {
}
vn.prototype.nodeType = cd;
ze(vn, ne);
function yd() {
}
yd.prototype.nodeType = ov;
ze(yd, ne);
function _d() {
}
_d.prototype.nodeType = av;
ze(_d, ne);
function So() {
}
So.prototype.nodeType = ad;
ze(So, ne);
function yn() {
}
yn.prototype.nodeName = "#document-fragment";
yn.prototype.nodeType = Bt;
ze(yn, ne);
function Eo() {
}
Eo.prototype.nodeType = od;
ze(Eo, ne);
function Td() {
}
Td.prototype.serializeToString = function(i, e, t) {
  return bd.call(i, e, t);
};
ne.prototype.toString = bd;
function bd(i, e) {
  var t = [], s = this.nodeType == 9 && this.documentElement || this, r = s.prefix, n = s.namespaceURI;
  if (n && r == null) {
    var r = s.lookupPrefix(n);
    if (r == null)
      var a = [
        { namespace: n, prefix: null }
        //{namespace:uri,prefix:''}
      ];
  }
  return Pi(this, t, i, e, a), t.join("");
}
function wu(i, e, t) {
  var s = i.prefix || "", r = i.namespaceURI;
  if (!r || s === "xml" && r === $s.XML || r === $s.XMLNS)
    return !1;
  for (var n = t.length; n--; ) {
    var a = t[n];
    if (a.prefix === s)
      return a.namespace !== r;
  }
  return !0;
}
function pa(i, e, t) {
  i.push(" ", e, '="', t.replace(/[<>&"\t\n\r]/g, pd), '"');
}
function Pi(i, e, t, s, r) {
  if (r || (r = []), s)
    if (i = s(i), i) {
      if (typeof i == "string") {
        e.push(i);
        return;
      }
    } else
      return;
  switch (i.nodeType) {
    case ct:
      var n = i.attributes, a = n.length, k = i.firstChild, l = i.tagName;
      t = $s.isHTML(i.namespaceURI) || t;
      var u = l;
      if (!t && !i.prefix && i.namespaceURI) {
        for (var f, m = 0; m < n.length; m++)
          if (n.item(m).name === "xmlns") {
            f = n.item(m).value;
            break;
          }
        if (!f)
          for (var v = r.length - 1; v >= 0; v--) {
            var b = r[v];
            if (b.prefix === "" && b.namespace === i.namespaceURI) {
              f = b.namespace;
              break;
            }
          }
        if (f !== i.namespaceURI)
          for (var v = r.length - 1; v >= 0; v--) {
            var b = r[v];
            if (b.namespace === i.namespaceURI) {
              b.prefix && (u = b.prefix + ":" + l);
              break;
            }
          }
      }
      e.push("<", u);
      for (var S = 0; S < a; S++) {
        var y = n.item(S);
        y.prefix == "xmlns" ? r.push({ prefix: y.localName, namespace: y.value }) : y.nodeName == "xmlns" && r.push({ prefix: "", namespace: y.value });
      }
      for (var S = 0; S < a; S++) {
        var y = n.item(S);
        if (wu(y, t, r)) {
          var A = y.prefix || "", w = y.namespaceURI;
          pa(e, A ? "xmlns:" + A : "xmlns", w), r.push({ prefix: A, namespace: w });
        }
        Pi(y, e, t, s, r);
      }
      if (l === u && wu(i, t, r)) {
        var A = i.prefix || "", w = i.namespaceURI;
        pa(e, A ? "xmlns:" + A : "xmlns", w), r.push({ prefix: A, namespace: w });
      }
      if (k || t && !/^(?:meta|link|img|br|hr|input)$/i.test(l)) {
        if (e.push(">"), t && /^script$/i.test(l))
          for (; k; )
            k.data ? e.push(k.data) : Pi(k, e, t, s, r.slice()), k = k.nextSibling;
        else
          for (; k; )
            Pi(k, e, t, s, r.slice()), k = k.nextSibling;
        e.push("</", u, ">");
      } else
        e.push("/>");
      return;
    case ud:
    case Bt:
      for (var k = i.firstChild; k; )
        Pi(k, e, t, s, r.slice()), k = k.nextSibling;
      return;
    case $i:
      return pa(e, i.name, i.value);
    case zr:
      return e.push(
        i.data.replace(/[<&>]/g, pd)
      );
    case nd:
      return e.push("<![CDATA[", i.data, "]]>");
    case ld:
      return e.push("<!--", i.data, "-->");
    case cd:
      var D = i.publicId, R = i.systemId;
      if (e.push("<!DOCTYPE ", i.name), D)
        e.push(" PUBLIC ", D), R && R != "." && e.push(" ", R), e.push(">");
      else if (R && R != ".")
        e.push(" SYSTEM ", R, ">");
      else {
        var j = i.internalSubset;
        j && e.push(" [", j, "]"), e.push(">");
      }
      return;
    case od:
      return e.push("<?", i.target, " ", i.data, "?>");
    case ad:
      return e.push("&", i.nodeName, ";");
    default:
      e.push("??", i.nodeName);
  }
}
function xd(i, e, t) {
  var s;
  switch (e.nodeType) {
    case ct:
      s = e.cloneNode(!1), s.ownerDocument = i;
    case Bt:
      break;
    case $i:
      t = !0;
      break;
  }
  if (s || (s = e.cloneNode(!1)), s.ownerDocument = i, s.parentNode = null, t)
    for (var r = e.firstChild; r; )
      s.appendChild(xd(i, r, t)), r = r.nextSibling;
  return s;
}
function ja(i, e, t) {
  var s = new e.constructor();
  for (var r in e)
    if (Object.prototype.hasOwnProperty.call(e, r)) {
      var n = e[r];
      typeof n != "object" && n != s[r] && (s[r] = n);
    }
  switch (e.childNodes && (s.childNodes = new Rt()), s.ownerDocument = i, s.nodeType) {
    case ct:
      var a = e.attributes, l = s.attributes = new Gr(), u = a.length;
      l._ownerElement = s;
      for (var f = 0; f < u; f++)
        s.setAttributeNode(ja(i, a.item(f), !0));
      break;
    case $i:
      t = !0;
  }
  if (t)
    for (var m = e.firstChild; m; )
      s.appendChild(ja(i, m, t)), m = m.nextSibling;
  return s;
}
function Sd(i, e, t) {
  i[e] = t;
}
try {
  if (Object.defineProperty) {
    let i = function(e) {
      switch (e.nodeType) {
        case ct:
        case Bt:
          var t = [];
          for (e = e.firstChild; e; )
            e.nodeType !== 7 && e.nodeType !== 8 && t.push(i(e)), e = e.nextSibling;
          return t.join("");
        default:
          return e.nodeValue;
      }
    };
    Object.defineProperty(Vi.prototype, "length", {
      get: function() {
        return vo(this), this.$$length;
      }
    }), Object.defineProperty(ne.prototype, "textContent", {
      get: function() {
        return i(this);
      },
      set: function(e) {
        switch (this.nodeType) {
          case ct:
          case Bt:
            for (; this.firstChild; )
              this.removeChild(this.firstChild);
            (e || String(e)) && this.appendChild(this.ownerDocument.createTextNode(e));
            break;
          default:
            this.data = e, this.value = e, this.nodeValue = e;
        }
      }
    }), Sd = function(e, t, s) {
      e["$$" + t] = s;
    };
  }
} catch {
}
Zt.DocumentType = vn;
Zt.DOMException = xe;
Zt.DOMImplementation = fd;
Zt.Element = yi;
Zt.Node = ne;
Zt.NodeList = Rt;
Zt.XMLSerializer = Td;
var _n = {}, Ed = {};
(function(i) {
  var e = qt.freeze;
  i.XML_ENTITIES = e({
    amp: "&",
    apos: "'",
    gt: ">",
    lt: "<",
    quot: '"'
  }), i.HTML_ENTITIES = e({
    Aacute: "Á",
    aacute: "á",
    Abreve: "Ă",
    abreve: "ă",
    ac: "∾",
    acd: "∿",
    acE: "∾̳",
    Acirc: "Â",
    acirc: "â",
    acute: "´",
    Acy: "А",
    acy: "а",
    AElig: "Æ",
    aelig: "æ",
    af: "⁡",
    Afr: "𝔄",
    afr: "𝔞",
    Agrave: "À",
    agrave: "à",
    alefsym: "ℵ",
    aleph: "ℵ",
    Alpha: "Α",
    alpha: "α",
    Amacr: "Ā",
    amacr: "ā",
    amalg: "⨿",
    AMP: "&",
    amp: "&",
    And: "⩓",
    and: "∧",
    andand: "⩕",
    andd: "⩜",
    andslope: "⩘",
    andv: "⩚",
    ang: "∠",
    ange: "⦤",
    angle: "∠",
    angmsd: "∡",
    angmsdaa: "⦨",
    angmsdab: "⦩",
    angmsdac: "⦪",
    angmsdad: "⦫",
    angmsdae: "⦬",
    angmsdaf: "⦭",
    angmsdag: "⦮",
    angmsdah: "⦯",
    angrt: "∟",
    angrtvb: "⊾",
    angrtvbd: "⦝",
    angsph: "∢",
    angst: "Å",
    angzarr: "⍼",
    Aogon: "Ą",
    aogon: "ą",
    Aopf: "𝔸",
    aopf: "𝕒",
    ap: "≈",
    apacir: "⩯",
    apE: "⩰",
    ape: "≊",
    apid: "≋",
    apos: "'",
    ApplyFunction: "⁡",
    approx: "≈",
    approxeq: "≊",
    Aring: "Å",
    aring: "å",
    Ascr: "𝒜",
    ascr: "𝒶",
    Assign: "≔",
    ast: "*",
    asymp: "≈",
    asympeq: "≍",
    Atilde: "Ã",
    atilde: "ã",
    Auml: "Ä",
    auml: "ä",
    awconint: "∳",
    awint: "⨑",
    backcong: "≌",
    backepsilon: "϶",
    backprime: "‵",
    backsim: "∽",
    backsimeq: "⋍",
    Backslash: "∖",
    Barv: "⫧",
    barvee: "⊽",
    Barwed: "⌆",
    barwed: "⌅",
    barwedge: "⌅",
    bbrk: "⎵",
    bbrktbrk: "⎶",
    bcong: "≌",
    Bcy: "Б",
    bcy: "б",
    bdquo: "„",
    becaus: "∵",
    Because: "∵",
    because: "∵",
    bemptyv: "⦰",
    bepsi: "϶",
    bernou: "ℬ",
    Bernoullis: "ℬ",
    Beta: "Β",
    beta: "β",
    beth: "ℶ",
    between: "≬",
    Bfr: "𝔅",
    bfr: "𝔟",
    bigcap: "⋂",
    bigcirc: "◯",
    bigcup: "⋃",
    bigodot: "⨀",
    bigoplus: "⨁",
    bigotimes: "⨂",
    bigsqcup: "⨆",
    bigstar: "★",
    bigtriangledown: "▽",
    bigtriangleup: "△",
    biguplus: "⨄",
    bigvee: "⋁",
    bigwedge: "⋀",
    bkarow: "⤍",
    blacklozenge: "⧫",
    blacksquare: "▪",
    blacktriangle: "▴",
    blacktriangledown: "▾",
    blacktriangleleft: "◂",
    blacktriangleright: "▸",
    blank: "␣",
    blk12: "▒",
    blk14: "░",
    blk34: "▓",
    block: "█",
    bne: "=⃥",
    bnequiv: "≡⃥",
    bNot: "⫭",
    bnot: "⌐",
    Bopf: "𝔹",
    bopf: "𝕓",
    bot: "⊥",
    bottom: "⊥",
    bowtie: "⋈",
    boxbox: "⧉",
    boxDL: "╗",
    boxDl: "╖",
    boxdL: "╕",
    boxdl: "┐",
    boxDR: "╔",
    boxDr: "╓",
    boxdR: "╒",
    boxdr: "┌",
    boxH: "═",
    boxh: "─",
    boxHD: "╦",
    boxHd: "╤",
    boxhD: "╥",
    boxhd: "┬",
    boxHU: "╩",
    boxHu: "╧",
    boxhU: "╨",
    boxhu: "┴",
    boxminus: "⊟",
    boxplus: "⊞",
    boxtimes: "⊠",
    boxUL: "╝",
    boxUl: "╜",
    boxuL: "╛",
    boxul: "┘",
    boxUR: "╚",
    boxUr: "╙",
    boxuR: "╘",
    boxur: "└",
    boxV: "║",
    boxv: "│",
    boxVH: "╬",
    boxVh: "╫",
    boxvH: "╪",
    boxvh: "┼",
    boxVL: "╣",
    boxVl: "╢",
    boxvL: "╡",
    boxvl: "┤",
    boxVR: "╠",
    boxVr: "╟",
    boxvR: "╞",
    boxvr: "├",
    bprime: "‵",
    Breve: "˘",
    breve: "˘",
    brvbar: "¦",
    Bscr: "ℬ",
    bscr: "𝒷",
    bsemi: "⁏",
    bsim: "∽",
    bsime: "⋍",
    bsol: "\\",
    bsolb: "⧅",
    bsolhsub: "⟈",
    bull: "•",
    bullet: "•",
    bump: "≎",
    bumpE: "⪮",
    bumpe: "≏",
    Bumpeq: "≎",
    bumpeq: "≏",
    Cacute: "Ć",
    cacute: "ć",
    Cap: "⋒",
    cap: "∩",
    capand: "⩄",
    capbrcup: "⩉",
    capcap: "⩋",
    capcup: "⩇",
    capdot: "⩀",
    CapitalDifferentialD: "ⅅ",
    caps: "∩︀",
    caret: "⁁",
    caron: "ˇ",
    Cayleys: "ℭ",
    ccaps: "⩍",
    Ccaron: "Č",
    ccaron: "č",
    Ccedil: "Ç",
    ccedil: "ç",
    Ccirc: "Ĉ",
    ccirc: "ĉ",
    Cconint: "∰",
    ccups: "⩌",
    ccupssm: "⩐",
    Cdot: "Ċ",
    cdot: "ċ",
    cedil: "¸",
    Cedilla: "¸",
    cemptyv: "⦲",
    cent: "¢",
    CenterDot: "·",
    centerdot: "·",
    Cfr: "ℭ",
    cfr: "𝔠",
    CHcy: "Ч",
    chcy: "ч",
    check: "✓",
    checkmark: "✓",
    Chi: "Χ",
    chi: "χ",
    cir: "○",
    circ: "ˆ",
    circeq: "≗",
    circlearrowleft: "↺",
    circlearrowright: "↻",
    circledast: "⊛",
    circledcirc: "⊚",
    circleddash: "⊝",
    CircleDot: "⊙",
    circledR: "®",
    circledS: "Ⓢ",
    CircleMinus: "⊖",
    CirclePlus: "⊕",
    CircleTimes: "⊗",
    cirE: "⧃",
    cire: "≗",
    cirfnint: "⨐",
    cirmid: "⫯",
    cirscir: "⧂",
    ClockwiseContourIntegral: "∲",
    CloseCurlyDoubleQuote: "”",
    CloseCurlyQuote: "’",
    clubs: "♣",
    clubsuit: "♣",
    Colon: "∷",
    colon: ":",
    Colone: "⩴",
    colone: "≔",
    coloneq: "≔",
    comma: ",",
    commat: "@",
    comp: "∁",
    compfn: "∘",
    complement: "∁",
    complexes: "ℂ",
    cong: "≅",
    congdot: "⩭",
    Congruent: "≡",
    Conint: "∯",
    conint: "∮",
    ContourIntegral: "∮",
    Copf: "ℂ",
    copf: "𝕔",
    coprod: "∐",
    Coproduct: "∐",
    COPY: "©",
    copy: "©",
    copysr: "℗",
    CounterClockwiseContourIntegral: "∳",
    crarr: "↵",
    Cross: "⨯",
    cross: "✗",
    Cscr: "𝒞",
    cscr: "𝒸",
    csub: "⫏",
    csube: "⫑",
    csup: "⫐",
    csupe: "⫒",
    ctdot: "⋯",
    cudarrl: "⤸",
    cudarrr: "⤵",
    cuepr: "⋞",
    cuesc: "⋟",
    cularr: "↶",
    cularrp: "⤽",
    Cup: "⋓",
    cup: "∪",
    cupbrcap: "⩈",
    CupCap: "≍",
    cupcap: "⩆",
    cupcup: "⩊",
    cupdot: "⊍",
    cupor: "⩅",
    cups: "∪︀",
    curarr: "↷",
    curarrm: "⤼",
    curlyeqprec: "⋞",
    curlyeqsucc: "⋟",
    curlyvee: "⋎",
    curlywedge: "⋏",
    curren: "¤",
    curvearrowleft: "↶",
    curvearrowright: "↷",
    cuvee: "⋎",
    cuwed: "⋏",
    cwconint: "∲",
    cwint: "∱",
    cylcty: "⌭",
    Dagger: "‡",
    dagger: "†",
    daleth: "ℸ",
    Darr: "↡",
    dArr: "⇓",
    darr: "↓",
    dash: "‐",
    Dashv: "⫤",
    dashv: "⊣",
    dbkarow: "⤏",
    dblac: "˝",
    Dcaron: "Ď",
    dcaron: "ď",
    Dcy: "Д",
    dcy: "д",
    DD: "ⅅ",
    dd: "ⅆ",
    ddagger: "‡",
    ddarr: "⇊",
    DDotrahd: "⤑",
    ddotseq: "⩷",
    deg: "°",
    Del: "∇",
    Delta: "Δ",
    delta: "δ",
    demptyv: "⦱",
    dfisht: "⥿",
    Dfr: "𝔇",
    dfr: "𝔡",
    dHar: "⥥",
    dharl: "⇃",
    dharr: "⇂",
    DiacriticalAcute: "´",
    DiacriticalDot: "˙",
    DiacriticalDoubleAcute: "˝",
    DiacriticalGrave: "`",
    DiacriticalTilde: "˜",
    diam: "⋄",
    Diamond: "⋄",
    diamond: "⋄",
    diamondsuit: "♦",
    diams: "♦",
    die: "¨",
    DifferentialD: "ⅆ",
    digamma: "ϝ",
    disin: "⋲",
    div: "÷",
    divide: "÷",
    divideontimes: "⋇",
    divonx: "⋇",
    DJcy: "Ђ",
    djcy: "ђ",
    dlcorn: "⌞",
    dlcrop: "⌍",
    dollar: "$",
    Dopf: "𝔻",
    dopf: "𝕕",
    Dot: "¨",
    dot: "˙",
    DotDot: "⃜",
    doteq: "≐",
    doteqdot: "≑",
    DotEqual: "≐",
    dotminus: "∸",
    dotplus: "∔",
    dotsquare: "⊡",
    doublebarwedge: "⌆",
    DoubleContourIntegral: "∯",
    DoubleDot: "¨",
    DoubleDownArrow: "⇓",
    DoubleLeftArrow: "⇐",
    DoubleLeftRightArrow: "⇔",
    DoubleLeftTee: "⫤",
    DoubleLongLeftArrow: "⟸",
    DoubleLongLeftRightArrow: "⟺",
    DoubleLongRightArrow: "⟹",
    DoubleRightArrow: "⇒",
    DoubleRightTee: "⊨",
    DoubleUpArrow: "⇑",
    DoubleUpDownArrow: "⇕",
    DoubleVerticalBar: "∥",
    DownArrow: "↓",
    Downarrow: "⇓",
    downarrow: "↓",
    DownArrowBar: "⤓",
    DownArrowUpArrow: "⇵",
    DownBreve: "̑",
    downdownarrows: "⇊",
    downharpoonleft: "⇃",
    downharpoonright: "⇂",
    DownLeftRightVector: "⥐",
    DownLeftTeeVector: "⥞",
    DownLeftVector: "↽",
    DownLeftVectorBar: "⥖",
    DownRightTeeVector: "⥟",
    DownRightVector: "⇁",
    DownRightVectorBar: "⥗",
    DownTee: "⊤",
    DownTeeArrow: "↧",
    drbkarow: "⤐",
    drcorn: "⌟",
    drcrop: "⌌",
    Dscr: "𝒟",
    dscr: "𝒹",
    DScy: "Ѕ",
    dscy: "ѕ",
    dsol: "⧶",
    Dstrok: "Đ",
    dstrok: "đ",
    dtdot: "⋱",
    dtri: "▿",
    dtrif: "▾",
    duarr: "⇵",
    duhar: "⥯",
    dwangle: "⦦",
    DZcy: "Џ",
    dzcy: "џ",
    dzigrarr: "⟿",
    Eacute: "É",
    eacute: "é",
    easter: "⩮",
    Ecaron: "Ě",
    ecaron: "ě",
    ecir: "≖",
    Ecirc: "Ê",
    ecirc: "ê",
    ecolon: "≕",
    Ecy: "Э",
    ecy: "э",
    eDDot: "⩷",
    Edot: "Ė",
    eDot: "≑",
    edot: "ė",
    ee: "ⅇ",
    efDot: "≒",
    Efr: "𝔈",
    efr: "𝔢",
    eg: "⪚",
    Egrave: "È",
    egrave: "è",
    egs: "⪖",
    egsdot: "⪘",
    el: "⪙",
    Element: "∈",
    elinters: "⏧",
    ell: "ℓ",
    els: "⪕",
    elsdot: "⪗",
    Emacr: "Ē",
    emacr: "ē",
    empty: "∅",
    emptyset: "∅",
    EmptySmallSquare: "◻",
    emptyv: "∅",
    EmptyVerySmallSquare: "▫",
    emsp: " ",
    emsp13: " ",
    emsp14: " ",
    ENG: "Ŋ",
    eng: "ŋ",
    ensp: " ",
    Eogon: "Ę",
    eogon: "ę",
    Eopf: "𝔼",
    eopf: "𝕖",
    epar: "⋕",
    eparsl: "⧣",
    eplus: "⩱",
    epsi: "ε",
    Epsilon: "Ε",
    epsilon: "ε",
    epsiv: "ϵ",
    eqcirc: "≖",
    eqcolon: "≕",
    eqsim: "≂",
    eqslantgtr: "⪖",
    eqslantless: "⪕",
    Equal: "⩵",
    equals: "=",
    EqualTilde: "≂",
    equest: "≟",
    Equilibrium: "⇌",
    equiv: "≡",
    equivDD: "⩸",
    eqvparsl: "⧥",
    erarr: "⥱",
    erDot: "≓",
    Escr: "ℰ",
    escr: "ℯ",
    esdot: "≐",
    Esim: "⩳",
    esim: "≂",
    Eta: "Η",
    eta: "η",
    ETH: "Ð",
    eth: "ð",
    Euml: "Ë",
    euml: "ë",
    euro: "€",
    excl: "!",
    exist: "∃",
    Exists: "∃",
    expectation: "ℰ",
    ExponentialE: "ⅇ",
    exponentiale: "ⅇ",
    fallingdotseq: "≒",
    Fcy: "Ф",
    fcy: "ф",
    female: "♀",
    ffilig: "ﬃ",
    fflig: "ﬀ",
    ffllig: "ﬄ",
    Ffr: "𝔉",
    ffr: "𝔣",
    filig: "ﬁ",
    FilledSmallSquare: "◼",
    FilledVerySmallSquare: "▪",
    fjlig: "fj",
    flat: "♭",
    fllig: "ﬂ",
    fltns: "▱",
    fnof: "ƒ",
    Fopf: "𝔽",
    fopf: "𝕗",
    ForAll: "∀",
    forall: "∀",
    fork: "⋔",
    forkv: "⫙",
    Fouriertrf: "ℱ",
    fpartint: "⨍",
    frac12: "½",
    frac13: "⅓",
    frac14: "¼",
    frac15: "⅕",
    frac16: "⅙",
    frac18: "⅛",
    frac23: "⅔",
    frac25: "⅖",
    frac34: "¾",
    frac35: "⅗",
    frac38: "⅜",
    frac45: "⅘",
    frac56: "⅚",
    frac58: "⅝",
    frac78: "⅞",
    frasl: "⁄",
    frown: "⌢",
    Fscr: "ℱ",
    fscr: "𝒻",
    gacute: "ǵ",
    Gamma: "Γ",
    gamma: "γ",
    Gammad: "Ϝ",
    gammad: "ϝ",
    gap: "⪆",
    Gbreve: "Ğ",
    gbreve: "ğ",
    Gcedil: "Ģ",
    Gcirc: "Ĝ",
    gcirc: "ĝ",
    Gcy: "Г",
    gcy: "г",
    Gdot: "Ġ",
    gdot: "ġ",
    gE: "≧",
    ge: "≥",
    gEl: "⪌",
    gel: "⋛",
    geq: "≥",
    geqq: "≧",
    geqslant: "⩾",
    ges: "⩾",
    gescc: "⪩",
    gesdot: "⪀",
    gesdoto: "⪂",
    gesdotol: "⪄",
    gesl: "⋛︀",
    gesles: "⪔",
    Gfr: "𝔊",
    gfr: "𝔤",
    Gg: "⋙",
    gg: "≫",
    ggg: "⋙",
    gimel: "ℷ",
    GJcy: "Ѓ",
    gjcy: "ѓ",
    gl: "≷",
    gla: "⪥",
    glE: "⪒",
    glj: "⪤",
    gnap: "⪊",
    gnapprox: "⪊",
    gnE: "≩",
    gne: "⪈",
    gneq: "⪈",
    gneqq: "≩",
    gnsim: "⋧",
    Gopf: "𝔾",
    gopf: "𝕘",
    grave: "`",
    GreaterEqual: "≥",
    GreaterEqualLess: "⋛",
    GreaterFullEqual: "≧",
    GreaterGreater: "⪢",
    GreaterLess: "≷",
    GreaterSlantEqual: "⩾",
    GreaterTilde: "≳",
    Gscr: "𝒢",
    gscr: "ℊ",
    gsim: "≳",
    gsime: "⪎",
    gsiml: "⪐",
    Gt: "≫",
    GT: ">",
    gt: ">",
    gtcc: "⪧",
    gtcir: "⩺",
    gtdot: "⋗",
    gtlPar: "⦕",
    gtquest: "⩼",
    gtrapprox: "⪆",
    gtrarr: "⥸",
    gtrdot: "⋗",
    gtreqless: "⋛",
    gtreqqless: "⪌",
    gtrless: "≷",
    gtrsim: "≳",
    gvertneqq: "≩︀",
    gvnE: "≩︀",
    Hacek: "ˇ",
    hairsp: " ",
    half: "½",
    hamilt: "ℋ",
    HARDcy: "Ъ",
    hardcy: "ъ",
    hArr: "⇔",
    harr: "↔",
    harrcir: "⥈",
    harrw: "↭",
    Hat: "^",
    hbar: "ℏ",
    Hcirc: "Ĥ",
    hcirc: "ĥ",
    hearts: "♥",
    heartsuit: "♥",
    hellip: "…",
    hercon: "⊹",
    Hfr: "ℌ",
    hfr: "𝔥",
    HilbertSpace: "ℋ",
    hksearow: "⤥",
    hkswarow: "⤦",
    hoarr: "⇿",
    homtht: "∻",
    hookleftarrow: "↩",
    hookrightarrow: "↪",
    Hopf: "ℍ",
    hopf: "𝕙",
    horbar: "―",
    HorizontalLine: "─",
    Hscr: "ℋ",
    hscr: "𝒽",
    hslash: "ℏ",
    Hstrok: "Ħ",
    hstrok: "ħ",
    HumpDownHump: "≎",
    HumpEqual: "≏",
    hybull: "⁃",
    hyphen: "‐",
    Iacute: "Í",
    iacute: "í",
    ic: "⁣",
    Icirc: "Î",
    icirc: "î",
    Icy: "И",
    icy: "и",
    Idot: "İ",
    IEcy: "Е",
    iecy: "е",
    iexcl: "¡",
    iff: "⇔",
    Ifr: "ℑ",
    ifr: "𝔦",
    Igrave: "Ì",
    igrave: "ì",
    ii: "ⅈ",
    iiiint: "⨌",
    iiint: "∭",
    iinfin: "⧜",
    iiota: "℩",
    IJlig: "Ĳ",
    ijlig: "ĳ",
    Im: "ℑ",
    Imacr: "Ī",
    imacr: "ī",
    image: "ℑ",
    ImaginaryI: "ⅈ",
    imagline: "ℐ",
    imagpart: "ℑ",
    imath: "ı",
    imof: "⊷",
    imped: "Ƶ",
    Implies: "⇒",
    in: "∈",
    incare: "℅",
    infin: "∞",
    infintie: "⧝",
    inodot: "ı",
    Int: "∬",
    int: "∫",
    intcal: "⊺",
    integers: "ℤ",
    Integral: "∫",
    intercal: "⊺",
    Intersection: "⋂",
    intlarhk: "⨗",
    intprod: "⨼",
    InvisibleComma: "⁣",
    InvisibleTimes: "⁢",
    IOcy: "Ё",
    iocy: "ё",
    Iogon: "Į",
    iogon: "į",
    Iopf: "𝕀",
    iopf: "𝕚",
    Iota: "Ι",
    iota: "ι",
    iprod: "⨼",
    iquest: "¿",
    Iscr: "ℐ",
    iscr: "𝒾",
    isin: "∈",
    isindot: "⋵",
    isinE: "⋹",
    isins: "⋴",
    isinsv: "⋳",
    isinv: "∈",
    it: "⁢",
    Itilde: "Ĩ",
    itilde: "ĩ",
    Iukcy: "І",
    iukcy: "і",
    Iuml: "Ï",
    iuml: "ï",
    Jcirc: "Ĵ",
    jcirc: "ĵ",
    Jcy: "Й",
    jcy: "й",
    Jfr: "𝔍",
    jfr: "𝔧",
    jmath: "ȷ",
    Jopf: "𝕁",
    jopf: "𝕛",
    Jscr: "𝒥",
    jscr: "𝒿",
    Jsercy: "Ј",
    jsercy: "ј",
    Jukcy: "Є",
    jukcy: "є",
    Kappa: "Κ",
    kappa: "κ",
    kappav: "ϰ",
    Kcedil: "Ķ",
    kcedil: "ķ",
    Kcy: "К",
    kcy: "к",
    Kfr: "𝔎",
    kfr: "𝔨",
    kgreen: "ĸ",
    KHcy: "Х",
    khcy: "х",
    KJcy: "Ќ",
    kjcy: "ќ",
    Kopf: "𝕂",
    kopf: "𝕜",
    Kscr: "𝒦",
    kscr: "𝓀",
    lAarr: "⇚",
    Lacute: "Ĺ",
    lacute: "ĺ",
    laemptyv: "⦴",
    lagran: "ℒ",
    Lambda: "Λ",
    lambda: "λ",
    Lang: "⟪",
    lang: "⟨",
    langd: "⦑",
    langle: "⟨",
    lap: "⪅",
    Laplacetrf: "ℒ",
    laquo: "«",
    Larr: "↞",
    lArr: "⇐",
    larr: "←",
    larrb: "⇤",
    larrbfs: "⤟",
    larrfs: "⤝",
    larrhk: "↩",
    larrlp: "↫",
    larrpl: "⤹",
    larrsim: "⥳",
    larrtl: "↢",
    lat: "⪫",
    lAtail: "⤛",
    latail: "⤙",
    late: "⪭",
    lates: "⪭︀",
    lBarr: "⤎",
    lbarr: "⤌",
    lbbrk: "❲",
    lbrace: "{",
    lbrack: "[",
    lbrke: "⦋",
    lbrksld: "⦏",
    lbrkslu: "⦍",
    Lcaron: "Ľ",
    lcaron: "ľ",
    Lcedil: "Ļ",
    lcedil: "ļ",
    lceil: "⌈",
    lcub: "{",
    Lcy: "Л",
    lcy: "л",
    ldca: "⤶",
    ldquo: "“",
    ldquor: "„",
    ldrdhar: "⥧",
    ldrushar: "⥋",
    ldsh: "↲",
    lE: "≦",
    le: "≤",
    LeftAngleBracket: "⟨",
    LeftArrow: "←",
    Leftarrow: "⇐",
    leftarrow: "←",
    LeftArrowBar: "⇤",
    LeftArrowRightArrow: "⇆",
    leftarrowtail: "↢",
    LeftCeiling: "⌈",
    LeftDoubleBracket: "⟦",
    LeftDownTeeVector: "⥡",
    LeftDownVector: "⇃",
    LeftDownVectorBar: "⥙",
    LeftFloor: "⌊",
    leftharpoondown: "↽",
    leftharpoonup: "↼",
    leftleftarrows: "⇇",
    LeftRightArrow: "↔",
    Leftrightarrow: "⇔",
    leftrightarrow: "↔",
    leftrightarrows: "⇆",
    leftrightharpoons: "⇋",
    leftrightsquigarrow: "↭",
    LeftRightVector: "⥎",
    LeftTee: "⊣",
    LeftTeeArrow: "↤",
    LeftTeeVector: "⥚",
    leftthreetimes: "⋋",
    LeftTriangle: "⊲",
    LeftTriangleBar: "⧏",
    LeftTriangleEqual: "⊴",
    LeftUpDownVector: "⥑",
    LeftUpTeeVector: "⥠",
    LeftUpVector: "↿",
    LeftUpVectorBar: "⥘",
    LeftVector: "↼",
    LeftVectorBar: "⥒",
    lEg: "⪋",
    leg: "⋚",
    leq: "≤",
    leqq: "≦",
    leqslant: "⩽",
    les: "⩽",
    lescc: "⪨",
    lesdot: "⩿",
    lesdoto: "⪁",
    lesdotor: "⪃",
    lesg: "⋚︀",
    lesges: "⪓",
    lessapprox: "⪅",
    lessdot: "⋖",
    lesseqgtr: "⋚",
    lesseqqgtr: "⪋",
    LessEqualGreater: "⋚",
    LessFullEqual: "≦",
    LessGreater: "≶",
    lessgtr: "≶",
    LessLess: "⪡",
    lesssim: "≲",
    LessSlantEqual: "⩽",
    LessTilde: "≲",
    lfisht: "⥼",
    lfloor: "⌊",
    Lfr: "𝔏",
    lfr: "𝔩",
    lg: "≶",
    lgE: "⪑",
    lHar: "⥢",
    lhard: "↽",
    lharu: "↼",
    lharul: "⥪",
    lhblk: "▄",
    LJcy: "Љ",
    ljcy: "љ",
    Ll: "⋘",
    ll: "≪",
    llarr: "⇇",
    llcorner: "⌞",
    Lleftarrow: "⇚",
    llhard: "⥫",
    lltri: "◺",
    Lmidot: "Ŀ",
    lmidot: "ŀ",
    lmoust: "⎰",
    lmoustache: "⎰",
    lnap: "⪉",
    lnapprox: "⪉",
    lnE: "≨",
    lne: "⪇",
    lneq: "⪇",
    lneqq: "≨",
    lnsim: "⋦",
    loang: "⟬",
    loarr: "⇽",
    lobrk: "⟦",
    LongLeftArrow: "⟵",
    Longleftarrow: "⟸",
    longleftarrow: "⟵",
    LongLeftRightArrow: "⟷",
    Longleftrightarrow: "⟺",
    longleftrightarrow: "⟷",
    longmapsto: "⟼",
    LongRightArrow: "⟶",
    Longrightarrow: "⟹",
    longrightarrow: "⟶",
    looparrowleft: "↫",
    looparrowright: "↬",
    lopar: "⦅",
    Lopf: "𝕃",
    lopf: "𝕝",
    loplus: "⨭",
    lotimes: "⨴",
    lowast: "∗",
    lowbar: "_",
    LowerLeftArrow: "↙",
    LowerRightArrow: "↘",
    loz: "◊",
    lozenge: "◊",
    lozf: "⧫",
    lpar: "(",
    lparlt: "⦓",
    lrarr: "⇆",
    lrcorner: "⌟",
    lrhar: "⇋",
    lrhard: "⥭",
    lrm: "‎",
    lrtri: "⊿",
    lsaquo: "‹",
    Lscr: "ℒ",
    lscr: "𝓁",
    Lsh: "↰",
    lsh: "↰",
    lsim: "≲",
    lsime: "⪍",
    lsimg: "⪏",
    lsqb: "[",
    lsquo: "‘",
    lsquor: "‚",
    Lstrok: "Ł",
    lstrok: "ł",
    Lt: "≪",
    LT: "<",
    lt: "<",
    ltcc: "⪦",
    ltcir: "⩹",
    ltdot: "⋖",
    lthree: "⋋",
    ltimes: "⋉",
    ltlarr: "⥶",
    ltquest: "⩻",
    ltri: "◃",
    ltrie: "⊴",
    ltrif: "◂",
    ltrPar: "⦖",
    lurdshar: "⥊",
    luruhar: "⥦",
    lvertneqq: "≨︀",
    lvnE: "≨︀",
    macr: "¯",
    male: "♂",
    malt: "✠",
    maltese: "✠",
    Map: "⤅",
    map: "↦",
    mapsto: "↦",
    mapstodown: "↧",
    mapstoleft: "↤",
    mapstoup: "↥",
    marker: "▮",
    mcomma: "⨩",
    Mcy: "М",
    mcy: "м",
    mdash: "—",
    mDDot: "∺",
    measuredangle: "∡",
    MediumSpace: " ",
    Mellintrf: "ℳ",
    Mfr: "𝔐",
    mfr: "𝔪",
    mho: "℧",
    micro: "µ",
    mid: "∣",
    midast: "*",
    midcir: "⫰",
    middot: "·",
    minus: "−",
    minusb: "⊟",
    minusd: "∸",
    minusdu: "⨪",
    MinusPlus: "∓",
    mlcp: "⫛",
    mldr: "…",
    mnplus: "∓",
    models: "⊧",
    Mopf: "𝕄",
    mopf: "𝕞",
    mp: "∓",
    Mscr: "ℳ",
    mscr: "𝓂",
    mstpos: "∾",
    Mu: "Μ",
    mu: "μ",
    multimap: "⊸",
    mumap: "⊸",
    nabla: "∇",
    Nacute: "Ń",
    nacute: "ń",
    nang: "∠⃒",
    nap: "≉",
    napE: "⩰̸",
    napid: "≋̸",
    napos: "ŉ",
    napprox: "≉",
    natur: "♮",
    natural: "♮",
    naturals: "ℕ",
    nbsp: " ",
    nbump: "≎̸",
    nbumpe: "≏̸",
    ncap: "⩃",
    Ncaron: "Ň",
    ncaron: "ň",
    Ncedil: "Ņ",
    ncedil: "ņ",
    ncong: "≇",
    ncongdot: "⩭̸",
    ncup: "⩂",
    Ncy: "Н",
    ncy: "н",
    ndash: "–",
    ne: "≠",
    nearhk: "⤤",
    neArr: "⇗",
    nearr: "↗",
    nearrow: "↗",
    nedot: "≐̸",
    NegativeMediumSpace: "​",
    NegativeThickSpace: "​",
    NegativeThinSpace: "​",
    NegativeVeryThinSpace: "​",
    nequiv: "≢",
    nesear: "⤨",
    nesim: "≂̸",
    NestedGreaterGreater: "≫",
    NestedLessLess: "≪",
    NewLine: `
`,
    nexist: "∄",
    nexists: "∄",
    Nfr: "𝔑",
    nfr: "𝔫",
    ngE: "≧̸",
    nge: "≱",
    ngeq: "≱",
    ngeqq: "≧̸",
    ngeqslant: "⩾̸",
    nges: "⩾̸",
    nGg: "⋙̸",
    ngsim: "≵",
    nGt: "≫⃒",
    ngt: "≯",
    ngtr: "≯",
    nGtv: "≫̸",
    nhArr: "⇎",
    nharr: "↮",
    nhpar: "⫲",
    ni: "∋",
    nis: "⋼",
    nisd: "⋺",
    niv: "∋",
    NJcy: "Њ",
    njcy: "њ",
    nlArr: "⇍",
    nlarr: "↚",
    nldr: "‥",
    nlE: "≦̸",
    nle: "≰",
    nLeftarrow: "⇍",
    nleftarrow: "↚",
    nLeftrightarrow: "⇎",
    nleftrightarrow: "↮",
    nleq: "≰",
    nleqq: "≦̸",
    nleqslant: "⩽̸",
    nles: "⩽̸",
    nless: "≮",
    nLl: "⋘̸",
    nlsim: "≴",
    nLt: "≪⃒",
    nlt: "≮",
    nltri: "⋪",
    nltrie: "⋬",
    nLtv: "≪̸",
    nmid: "∤",
    NoBreak: "⁠",
    NonBreakingSpace: " ",
    Nopf: "ℕ",
    nopf: "𝕟",
    Not: "⫬",
    not: "¬",
    NotCongruent: "≢",
    NotCupCap: "≭",
    NotDoubleVerticalBar: "∦",
    NotElement: "∉",
    NotEqual: "≠",
    NotEqualTilde: "≂̸",
    NotExists: "∄",
    NotGreater: "≯",
    NotGreaterEqual: "≱",
    NotGreaterFullEqual: "≧̸",
    NotGreaterGreater: "≫̸",
    NotGreaterLess: "≹",
    NotGreaterSlantEqual: "⩾̸",
    NotGreaterTilde: "≵",
    NotHumpDownHump: "≎̸",
    NotHumpEqual: "≏̸",
    notin: "∉",
    notindot: "⋵̸",
    notinE: "⋹̸",
    notinva: "∉",
    notinvb: "⋷",
    notinvc: "⋶",
    NotLeftTriangle: "⋪",
    NotLeftTriangleBar: "⧏̸",
    NotLeftTriangleEqual: "⋬",
    NotLess: "≮",
    NotLessEqual: "≰",
    NotLessGreater: "≸",
    NotLessLess: "≪̸",
    NotLessSlantEqual: "⩽̸",
    NotLessTilde: "≴",
    NotNestedGreaterGreater: "⪢̸",
    NotNestedLessLess: "⪡̸",
    notni: "∌",
    notniva: "∌",
    notnivb: "⋾",
    notnivc: "⋽",
    NotPrecedes: "⊀",
    NotPrecedesEqual: "⪯̸",
    NotPrecedesSlantEqual: "⋠",
    NotReverseElement: "∌",
    NotRightTriangle: "⋫",
    NotRightTriangleBar: "⧐̸",
    NotRightTriangleEqual: "⋭",
    NotSquareSubset: "⊏̸",
    NotSquareSubsetEqual: "⋢",
    NotSquareSuperset: "⊐̸",
    NotSquareSupersetEqual: "⋣",
    NotSubset: "⊂⃒",
    NotSubsetEqual: "⊈",
    NotSucceeds: "⊁",
    NotSucceedsEqual: "⪰̸",
    NotSucceedsSlantEqual: "⋡",
    NotSucceedsTilde: "≿̸",
    NotSuperset: "⊃⃒",
    NotSupersetEqual: "⊉",
    NotTilde: "≁",
    NotTildeEqual: "≄",
    NotTildeFullEqual: "≇",
    NotTildeTilde: "≉",
    NotVerticalBar: "∤",
    npar: "∦",
    nparallel: "∦",
    nparsl: "⫽⃥",
    npart: "∂̸",
    npolint: "⨔",
    npr: "⊀",
    nprcue: "⋠",
    npre: "⪯̸",
    nprec: "⊀",
    npreceq: "⪯̸",
    nrArr: "⇏",
    nrarr: "↛",
    nrarrc: "⤳̸",
    nrarrw: "↝̸",
    nRightarrow: "⇏",
    nrightarrow: "↛",
    nrtri: "⋫",
    nrtrie: "⋭",
    nsc: "⊁",
    nsccue: "⋡",
    nsce: "⪰̸",
    Nscr: "𝒩",
    nscr: "𝓃",
    nshortmid: "∤",
    nshortparallel: "∦",
    nsim: "≁",
    nsime: "≄",
    nsimeq: "≄",
    nsmid: "∤",
    nspar: "∦",
    nsqsube: "⋢",
    nsqsupe: "⋣",
    nsub: "⊄",
    nsubE: "⫅̸",
    nsube: "⊈",
    nsubset: "⊂⃒",
    nsubseteq: "⊈",
    nsubseteqq: "⫅̸",
    nsucc: "⊁",
    nsucceq: "⪰̸",
    nsup: "⊅",
    nsupE: "⫆̸",
    nsupe: "⊉",
    nsupset: "⊃⃒",
    nsupseteq: "⊉",
    nsupseteqq: "⫆̸",
    ntgl: "≹",
    Ntilde: "Ñ",
    ntilde: "ñ",
    ntlg: "≸",
    ntriangleleft: "⋪",
    ntrianglelefteq: "⋬",
    ntriangleright: "⋫",
    ntrianglerighteq: "⋭",
    Nu: "Ν",
    nu: "ν",
    num: "#",
    numero: "№",
    numsp: " ",
    nvap: "≍⃒",
    nVDash: "⊯",
    nVdash: "⊮",
    nvDash: "⊭",
    nvdash: "⊬",
    nvge: "≥⃒",
    nvgt: ">⃒",
    nvHarr: "⤄",
    nvinfin: "⧞",
    nvlArr: "⤂",
    nvle: "≤⃒",
    nvlt: "<⃒",
    nvltrie: "⊴⃒",
    nvrArr: "⤃",
    nvrtrie: "⊵⃒",
    nvsim: "∼⃒",
    nwarhk: "⤣",
    nwArr: "⇖",
    nwarr: "↖",
    nwarrow: "↖",
    nwnear: "⤧",
    Oacute: "Ó",
    oacute: "ó",
    oast: "⊛",
    ocir: "⊚",
    Ocirc: "Ô",
    ocirc: "ô",
    Ocy: "О",
    ocy: "о",
    odash: "⊝",
    Odblac: "Ő",
    odblac: "ő",
    odiv: "⨸",
    odot: "⊙",
    odsold: "⦼",
    OElig: "Œ",
    oelig: "œ",
    ofcir: "⦿",
    Ofr: "𝔒",
    ofr: "𝔬",
    ogon: "˛",
    Ograve: "Ò",
    ograve: "ò",
    ogt: "⧁",
    ohbar: "⦵",
    ohm: "Ω",
    oint: "∮",
    olarr: "↺",
    olcir: "⦾",
    olcross: "⦻",
    oline: "‾",
    olt: "⧀",
    Omacr: "Ō",
    omacr: "ō",
    Omega: "Ω",
    omega: "ω",
    Omicron: "Ο",
    omicron: "ο",
    omid: "⦶",
    ominus: "⊖",
    Oopf: "𝕆",
    oopf: "𝕠",
    opar: "⦷",
    OpenCurlyDoubleQuote: "“",
    OpenCurlyQuote: "‘",
    operp: "⦹",
    oplus: "⊕",
    Or: "⩔",
    or: "∨",
    orarr: "↻",
    ord: "⩝",
    order: "ℴ",
    orderof: "ℴ",
    ordf: "ª",
    ordm: "º",
    origof: "⊶",
    oror: "⩖",
    orslope: "⩗",
    orv: "⩛",
    oS: "Ⓢ",
    Oscr: "𝒪",
    oscr: "ℴ",
    Oslash: "Ø",
    oslash: "ø",
    osol: "⊘",
    Otilde: "Õ",
    otilde: "õ",
    Otimes: "⨷",
    otimes: "⊗",
    otimesas: "⨶",
    Ouml: "Ö",
    ouml: "ö",
    ovbar: "⌽",
    OverBar: "‾",
    OverBrace: "⏞",
    OverBracket: "⎴",
    OverParenthesis: "⏜",
    par: "∥",
    para: "¶",
    parallel: "∥",
    parsim: "⫳",
    parsl: "⫽",
    part: "∂",
    PartialD: "∂",
    Pcy: "П",
    pcy: "п",
    percnt: "%",
    period: ".",
    permil: "‰",
    perp: "⊥",
    pertenk: "‱",
    Pfr: "𝔓",
    pfr: "𝔭",
    Phi: "Φ",
    phi: "φ",
    phiv: "ϕ",
    phmmat: "ℳ",
    phone: "☎",
    Pi: "Π",
    pi: "π",
    pitchfork: "⋔",
    piv: "ϖ",
    planck: "ℏ",
    planckh: "ℎ",
    plankv: "ℏ",
    plus: "+",
    plusacir: "⨣",
    plusb: "⊞",
    pluscir: "⨢",
    plusdo: "∔",
    plusdu: "⨥",
    pluse: "⩲",
    PlusMinus: "±",
    plusmn: "±",
    plussim: "⨦",
    plustwo: "⨧",
    pm: "±",
    Poincareplane: "ℌ",
    pointint: "⨕",
    Popf: "ℙ",
    popf: "𝕡",
    pound: "£",
    Pr: "⪻",
    pr: "≺",
    prap: "⪷",
    prcue: "≼",
    prE: "⪳",
    pre: "⪯",
    prec: "≺",
    precapprox: "⪷",
    preccurlyeq: "≼",
    Precedes: "≺",
    PrecedesEqual: "⪯",
    PrecedesSlantEqual: "≼",
    PrecedesTilde: "≾",
    preceq: "⪯",
    precnapprox: "⪹",
    precneqq: "⪵",
    precnsim: "⋨",
    precsim: "≾",
    Prime: "″",
    prime: "′",
    primes: "ℙ",
    prnap: "⪹",
    prnE: "⪵",
    prnsim: "⋨",
    prod: "∏",
    Product: "∏",
    profalar: "⌮",
    profline: "⌒",
    profsurf: "⌓",
    prop: "∝",
    Proportion: "∷",
    Proportional: "∝",
    propto: "∝",
    prsim: "≾",
    prurel: "⊰",
    Pscr: "𝒫",
    pscr: "𝓅",
    Psi: "Ψ",
    psi: "ψ",
    puncsp: " ",
    Qfr: "𝔔",
    qfr: "𝔮",
    qint: "⨌",
    Qopf: "ℚ",
    qopf: "𝕢",
    qprime: "⁗",
    Qscr: "𝒬",
    qscr: "𝓆",
    quaternions: "ℍ",
    quatint: "⨖",
    quest: "?",
    questeq: "≟",
    QUOT: '"',
    quot: '"',
    rAarr: "⇛",
    race: "∽̱",
    Racute: "Ŕ",
    racute: "ŕ",
    radic: "√",
    raemptyv: "⦳",
    Rang: "⟫",
    rang: "⟩",
    rangd: "⦒",
    range: "⦥",
    rangle: "⟩",
    raquo: "»",
    Rarr: "↠",
    rArr: "⇒",
    rarr: "→",
    rarrap: "⥵",
    rarrb: "⇥",
    rarrbfs: "⤠",
    rarrc: "⤳",
    rarrfs: "⤞",
    rarrhk: "↪",
    rarrlp: "↬",
    rarrpl: "⥅",
    rarrsim: "⥴",
    Rarrtl: "⤖",
    rarrtl: "↣",
    rarrw: "↝",
    rAtail: "⤜",
    ratail: "⤚",
    ratio: "∶",
    rationals: "ℚ",
    RBarr: "⤐",
    rBarr: "⤏",
    rbarr: "⤍",
    rbbrk: "❳",
    rbrace: "}",
    rbrack: "]",
    rbrke: "⦌",
    rbrksld: "⦎",
    rbrkslu: "⦐",
    Rcaron: "Ř",
    rcaron: "ř",
    Rcedil: "Ŗ",
    rcedil: "ŗ",
    rceil: "⌉",
    rcub: "}",
    Rcy: "Р",
    rcy: "р",
    rdca: "⤷",
    rdldhar: "⥩",
    rdquo: "”",
    rdquor: "”",
    rdsh: "↳",
    Re: "ℜ",
    real: "ℜ",
    realine: "ℛ",
    realpart: "ℜ",
    reals: "ℝ",
    rect: "▭",
    REG: "®",
    reg: "®",
    ReverseElement: "∋",
    ReverseEquilibrium: "⇋",
    ReverseUpEquilibrium: "⥯",
    rfisht: "⥽",
    rfloor: "⌋",
    Rfr: "ℜ",
    rfr: "𝔯",
    rHar: "⥤",
    rhard: "⇁",
    rharu: "⇀",
    rharul: "⥬",
    Rho: "Ρ",
    rho: "ρ",
    rhov: "ϱ",
    RightAngleBracket: "⟩",
    RightArrow: "→",
    Rightarrow: "⇒",
    rightarrow: "→",
    RightArrowBar: "⇥",
    RightArrowLeftArrow: "⇄",
    rightarrowtail: "↣",
    RightCeiling: "⌉",
    RightDoubleBracket: "⟧",
    RightDownTeeVector: "⥝",
    RightDownVector: "⇂",
    RightDownVectorBar: "⥕",
    RightFloor: "⌋",
    rightharpoondown: "⇁",
    rightharpoonup: "⇀",
    rightleftarrows: "⇄",
    rightleftharpoons: "⇌",
    rightrightarrows: "⇉",
    rightsquigarrow: "↝",
    RightTee: "⊢",
    RightTeeArrow: "↦",
    RightTeeVector: "⥛",
    rightthreetimes: "⋌",
    RightTriangle: "⊳",
    RightTriangleBar: "⧐",
    RightTriangleEqual: "⊵",
    RightUpDownVector: "⥏",
    RightUpTeeVector: "⥜",
    RightUpVector: "↾",
    RightUpVectorBar: "⥔",
    RightVector: "⇀",
    RightVectorBar: "⥓",
    ring: "˚",
    risingdotseq: "≓",
    rlarr: "⇄",
    rlhar: "⇌",
    rlm: "‏",
    rmoust: "⎱",
    rmoustache: "⎱",
    rnmid: "⫮",
    roang: "⟭",
    roarr: "⇾",
    robrk: "⟧",
    ropar: "⦆",
    Ropf: "ℝ",
    ropf: "𝕣",
    roplus: "⨮",
    rotimes: "⨵",
    RoundImplies: "⥰",
    rpar: ")",
    rpargt: "⦔",
    rppolint: "⨒",
    rrarr: "⇉",
    Rrightarrow: "⇛",
    rsaquo: "›",
    Rscr: "ℛ",
    rscr: "𝓇",
    Rsh: "↱",
    rsh: "↱",
    rsqb: "]",
    rsquo: "’",
    rsquor: "’",
    rthree: "⋌",
    rtimes: "⋊",
    rtri: "▹",
    rtrie: "⊵",
    rtrif: "▸",
    rtriltri: "⧎",
    RuleDelayed: "⧴",
    ruluhar: "⥨",
    rx: "℞",
    Sacute: "Ś",
    sacute: "ś",
    sbquo: "‚",
    Sc: "⪼",
    sc: "≻",
    scap: "⪸",
    Scaron: "Š",
    scaron: "š",
    sccue: "≽",
    scE: "⪴",
    sce: "⪰",
    Scedil: "Ş",
    scedil: "ş",
    Scirc: "Ŝ",
    scirc: "ŝ",
    scnap: "⪺",
    scnE: "⪶",
    scnsim: "⋩",
    scpolint: "⨓",
    scsim: "≿",
    Scy: "С",
    scy: "с",
    sdot: "⋅",
    sdotb: "⊡",
    sdote: "⩦",
    searhk: "⤥",
    seArr: "⇘",
    searr: "↘",
    searrow: "↘",
    sect: "§",
    semi: ";",
    seswar: "⤩",
    setminus: "∖",
    setmn: "∖",
    sext: "✶",
    Sfr: "𝔖",
    sfr: "𝔰",
    sfrown: "⌢",
    sharp: "♯",
    SHCHcy: "Щ",
    shchcy: "щ",
    SHcy: "Ш",
    shcy: "ш",
    ShortDownArrow: "↓",
    ShortLeftArrow: "←",
    shortmid: "∣",
    shortparallel: "∥",
    ShortRightArrow: "→",
    ShortUpArrow: "↑",
    shy: "­",
    Sigma: "Σ",
    sigma: "σ",
    sigmaf: "ς",
    sigmav: "ς",
    sim: "∼",
    simdot: "⩪",
    sime: "≃",
    simeq: "≃",
    simg: "⪞",
    simgE: "⪠",
    siml: "⪝",
    simlE: "⪟",
    simne: "≆",
    simplus: "⨤",
    simrarr: "⥲",
    slarr: "←",
    SmallCircle: "∘",
    smallsetminus: "∖",
    smashp: "⨳",
    smeparsl: "⧤",
    smid: "∣",
    smile: "⌣",
    smt: "⪪",
    smte: "⪬",
    smtes: "⪬︀",
    SOFTcy: "Ь",
    softcy: "ь",
    sol: "/",
    solb: "⧄",
    solbar: "⌿",
    Sopf: "𝕊",
    sopf: "𝕤",
    spades: "♠",
    spadesuit: "♠",
    spar: "∥",
    sqcap: "⊓",
    sqcaps: "⊓︀",
    sqcup: "⊔",
    sqcups: "⊔︀",
    Sqrt: "√",
    sqsub: "⊏",
    sqsube: "⊑",
    sqsubset: "⊏",
    sqsubseteq: "⊑",
    sqsup: "⊐",
    sqsupe: "⊒",
    sqsupset: "⊐",
    sqsupseteq: "⊒",
    squ: "□",
    Square: "□",
    square: "□",
    SquareIntersection: "⊓",
    SquareSubset: "⊏",
    SquareSubsetEqual: "⊑",
    SquareSuperset: "⊐",
    SquareSupersetEqual: "⊒",
    SquareUnion: "⊔",
    squarf: "▪",
    squf: "▪",
    srarr: "→",
    Sscr: "𝒮",
    sscr: "𝓈",
    ssetmn: "∖",
    ssmile: "⌣",
    sstarf: "⋆",
    Star: "⋆",
    star: "☆",
    starf: "★",
    straightepsilon: "ϵ",
    straightphi: "ϕ",
    strns: "¯",
    Sub: "⋐",
    sub: "⊂",
    subdot: "⪽",
    subE: "⫅",
    sube: "⊆",
    subedot: "⫃",
    submult: "⫁",
    subnE: "⫋",
    subne: "⊊",
    subplus: "⪿",
    subrarr: "⥹",
    Subset: "⋐",
    subset: "⊂",
    subseteq: "⊆",
    subseteqq: "⫅",
    SubsetEqual: "⊆",
    subsetneq: "⊊",
    subsetneqq: "⫋",
    subsim: "⫇",
    subsub: "⫕",
    subsup: "⫓",
    succ: "≻",
    succapprox: "⪸",
    succcurlyeq: "≽",
    Succeeds: "≻",
    SucceedsEqual: "⪰",
    SucceedsSlantEqual: "≽",
    SucceedsTilde: "≿",
    succeq: "⪰",
    succnapprox: "⪺",
    succneqq: "⪶",
    succnsim: "⋩",
    succsim: "≿",
    SuchThat: "∋",
    Sum: "∑",
    sum: "∑",
    sung: "♪",
    Sup: "⋑",
    sup: "⊃",
    sup1: "¹",
    sup2: "²",
    sup3: "³",
    supdot: "⪾",
    supdsub: "⫘",
    supE: "⫆",
    supe: "⊇",
    supedot: "⫄",
    Superset: "⊃",
    SupersetEqual: "⊇",
    suphsol: "⟉",
    suphsub: "⫗",
    suplarr: "⥻",
    supmult: "⫂",
    supnE: "⫌",
    supne: "⊋",
    supplus: "⫀",
    Supset: "⋑",
    supset: "⊃",
    supseteq: "⊇",
    supseteqq: "⫆",
    supsetneq: "⊋",
    supsetneqq: "⫌",
    supsim: "⫈",
    supsub: "⫔",
    supsup: "⫖",
    swarhk: "⤦",
    swArr: "⇙",
    swarr: "↙",
    swarrow: "↙",
    swnwar: "⤪",
    szlig: "ß",
    Tab: "	",
    target: "⌖",
    Tau: "Τ",
    tau: "τ",
    tbrk: "⎴",
    Tcaron: "Ť",
    tcaron: "ť",
    Tcedil: "Ţ",
    tcedil: "ţ",
    Tcy: "Т",
    tcy: "т",
    tdot: "⃛",
    telrec: "⌕",
    Tfr: "𝔗",
    tfr: "𝔱",
    there4: "∴",
    Therefore: "∴",
    therefore: "∴",
    Theta: "Θ",
    theta: "θ",
    thetasym: "ϑ",
    thetav: "ϑ",
    thickapprox: "≈",
    thicksim: "∼",
    ThickSpace: "  ",
    thinsp: " ",
    ThinSpace: " ",
    thkap: "≈",
    thksim: "∼",
    THORN: "Þ",
    thorn: "þ",
    Tilde: "∼",
    tilde: "˜",
    TildeEqual: "≃",
    TildeFullEqual: "≅",
    TildeTilde: "≈",
    times: "×",
    timesb: "⊠",
    timesbar: "⨱",
    timesd: "⨰",
    tint: "∭",
    toea: "⤨",
    top: "⊤",
    topbot: "⌶",
    topcir: "⫱",
    Topf: "𝕋",
    topf: "𝕥",
    topfork: "⫚",
    tosa: "⤩",
    tprime: "‴",
    TRADE: "™",
    trade: "™",
    triangle: "▵",
    triangledown: "▿",
    triangleleft: "◃",
    trianglelefteq: "⊴",
    triangleq: "≜",
    triangleright: "▹",
    trianglerighteq: "⊵",
    tridot: "◬",
    trie: "≜",
    triminus: "⨺",
    TripleDot: "⃛",
    triplus: "⨹",
    trisb: "⧍",
    tritime: "⨻",
    trpezium: "⏢",
    Tscr: "𝒯",
    tscr: "𝓉",
    TScy: "Ц",
    tscy: "ц",
    TSHcy: "Ћ",
    tshcy: "ћ",
    Tstrok: "Ŧ",
    tstrok: "ŧ",
    twixt: "≬",
    twoheadleftarrow: "↞",
    twoheadrightarrow: "↠",
    Uacute: "Ú",
    uacute: "ú",
    Uarr: "↟",
    uArr: "⇑",
    uarr: "↑",
    Uarrocir: "⥉",
    Ubrcy: "Ў",
    ubrcy: "ў",
    Ubreve: "Ŭ",
    ubreve: "ŭ",
    Ucirc: "Û",
    ucirc: "û",
    Ucy: "У",
    ucy: "у",
    udarr: "⇅",
    Udblac: "Ű",
    udblac: "ű",
    udhar: "⥮",
    ufisht: "⥾",
    Ufr: "𝔘",
    ufr: "𝔲",
    Ugrave: "Ù",
    ugrave: "ù",
    uHar: "⥣",
    uharl: "↿",
    uharr: "↾",
    uhblk: "▀",
    ulcorn: "⌜",
    ulcorner: "⌜",
    ulcrop: "⌏",
    ultri: "◸",
    Umacr: "Ū",
    umacr: "ū",
    uml: "¨",
    UnderBar: "_",
    UnderBrace: "⏟",
    UnderBracket: "⎵",
    UnderParenthesis: "⏝",
    Union: "⋃",
    UnionPlus: "⊎",
    Uogon: "Ų",
    uogon: "ų",
    Uopf: "𝕌",
    uopf: "𝕦",
    UpArrow: "↑",
    Uparrow: "⇑",
    uparrow: "↑",
    UpArrowBar: "⤒",
    UpArrowDownArrow: "⇅",
    UpDownArrow: "↕",
    Updownarrow: "⇕",
    updownarrow: "↕",
    UpEquilibrium: "⥮",
    upharpoonleft: "↿",
    upharpoonright: "↾",
    uplus: "⊎",
    UpperLeftArrow: "↖",
    UpperRightArrow: "↗",
    Upsi: "ϒ",
    upsi: "υ",
    upsih: "ϒ",
    Upsilon: "Υ",
    upsilon: "υ",
    UpTee: "⊥",
    UpTeeArrow: "↥",
    upuparrows: "⇈",
    urcorn: "⌝",
    urcorner: "⌝",
    urcrop: "⌎",
    Uring: "Ů",
    uring: "ů",
    urtri: "◹",
    Uscr: "𝒰",
    uscr: "𝓊",
    utdot: "⋰",
    Utilde: "Ũ",
    utilde: "ũ",
    utri: "▵",
    utrif: "▴",
    uuarr: "⇈",
    Uuml: "Ü",
    uuml: "ü",
    uwangle: "⦧",
    vangrt: "⦜",
    varepsilon: "ϵ",
    varkappa: "ϰ",
    varnothing: "∅",
    varphi: "ϕ",
    varpi: "ϖ",
    varpropto: "∝",
    vArr: "⇕",
    varr: "↕",
    varrho: "ϱ",
    varsigma: "ς",
    varsubsetneq: "⊊︀",
    varsubsetneqq: "⫋︀",
    varsupsetneq: "⊋︀",
    varsupsetneqq: "⫌︀",
    vartheta: "ϑ",
    vartriangleleft: "⊲",
    vartriangleright: "⊳",
    Vbar: "⫫",
    vBar: "⫨",
    vBarv: "⫩",
    Vcy: "В",
    vcy: "в",
    VDash: "⊫",
    Vdash: "⊩",
    vDash: "⊨",
    vdash: "⊢",
    Vdashl: "⫦",
    Vee: "⋁",
    vee: "∨",
    veebar: "⊻",
    veeeq: "≚",
    vellip: "⋮",
    Verbar: "‖",
    verbar: "|",
    Vert: "‖",
    vert: "|",
    VerticalBar: "∣",
    VerticalLine: "|",
    VerticalSeparator: "❘",
    VerticalTilde: "≀",
    VeryThinSpace: " ",
    Vfr: "𝔙",
    vfr: "𝔳",
    vltri: "⊲",
    vnsub: "⊂⃒",
    vnsup: "⊃⃒",
    Vopf: "𝕍",
    vopf: "𝕧",
    vprop: "∝",
    vrtri: "⊳",
    Vscr: "𝒱",
    vscr: "𝓋",
    vsubnE: "⫋︀",
    vsubne: "⊊︀",
    vsupnE: "⫌︀",
    vsupne: "⊋︀",
    Vvdash: "⊪",
    vzigzag: "⦚",
    Wcirc: "Ŵ",
    wcirc: "ŵ",
    wedbar: "⩟",
    Wedge: "⋀",
    wedge: "∧",
    wedgeq: "≙",
    weierp: "℘",
    Wfr: "𝔚",
    wfr: "𝔴",
    Wopf: "𝕎",
    wopf: "𝕨",
    wp: "℘",
    wr: "≀",
    wreath: "≀",
    Wscr: "𝒲",
    wscr: "𝓌",
    xcap: "⋂",
    xcirc: "◯",
    xcup: "⋃",
    xdtri: "▽",
    Xfr: "𝔛",
    xfr: "𝔵",
    xhArr: "⟺",
    xharr: "⟷",
    Xi: "Ξ",
    xi: "ξ",
    xlArr: "⟸",
    xlarr: "⟵",
    xmap: "⟼",
    xnis: "⋻",
    xodot: "⨀",
    Xopf: "𝕏",
    xopf: "𝕩",
    xoplus: "⨁",
    xotime: "⨂",
    xrArr: "⟹",
    xrarr: "⟶",
    Xscr: "𝒳",
    xscr: "𝓍",
    xsqcup: "⨆",
    xuplus: "⨄",
    xutri: "△",
    xvee: "⋁",
    xwedge: "⋀",
    Yacute: "Ý",
    yacute: "ý",
    YAcy: "Я",
    yacy: "я",
    Ycirc: "Ŷ",
    ycirc: "ŷ",
    Ycy: "Ы",
    ycy: "ы",
    yen: "¥",
    Yfr: "𝔜",
    yfr: "𝔶",
    YIcy: "Ї",
    yicy: "ї",
    Yopf: "𝕐",
    yopf: "𝕪",
    Yscr: "𝒴",
    yscr: "𝓎",
    YUcy: "Ю",
    yucy: "ю",
    Yuml: "Ÿ",
    yuml: "ÿ",
    Zacute: "Ź",
    zacute: "ź",
    Zcaron: "Ž",
    zcaron: "ž",
    Zcy: "З",
    zcy: "з",
    Zdot: "Ż",
    zdot: "ż",
    zeetrf: "ℨ",
    ZeroWidthSpace: "​",
    Zeta: "Ζ",
    zeta: "ζ",
    Zfr: "ℨ",
    zfr: "𝔷",
    ZHcy: "Ж",
    zhcy: "ж",
    zigrarr: "⇝",
    Zopf: "ℤ",
    zopf: "𝕫",
    Zscr: "𝒵",
    zscr: "𝓏",
    zwj: "‍",
    zwnj: "‌"
  }), i.entityMap = i.HTML_ENTITIES;
})(Ed);
var Co = {}, Hs = qt.NAMESPACE, Ra = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, Au = new RegExp("[\\-\\.0-9" + Ra.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"), Du = new RegExp("^" + Ra.source + Au.source + "*(?::" + Ra.source + Au.source + "*)?$"), bs = 0, zt = 1, Ci = 2, xs = 3, wi = 4, Ai = 5, Ss = 6, Pr = 7;
function Hi(i, e) {
  this.message = i, this.locator = e, Error.captureStackTrace && Error.captureStackTrace(this, Hi);
}
Hi.prototype = new Error();
Hi.prototype.name = Hi.name;
function Cd() {
}
Cd.prototype = {
  parse: function(i, e, t) {
    var s = this.domBuilder;
    s.startDocument(), wd(e, e = {}), pv(
      i,
      e,
      t,
      s,
      this.errorHandler
    ), s.endDocument();
  }
};
function pv(i, e, t, s, r) {
  function n(te) {
    if (te > 65535) {
      te -= 65536;
      var _e = 55296 + (te >> 10), kt = 56320 + (te & 1023);
      return String.fromCharCode(_e, kt);
    } else
      return String.fromCharCode(te);
  }
  function a(te) {
    var _e = te.slice(1, -1);
    return Object.hasOwnProperty.call(t, _e) ? t[_e] : _e.charAt(0) === "#" ? n(parseInt(_e.substr(1).replace("x", "0x"))) : (r.error("entity not found:" + te), te);
  }
  function l(te) {
    if (te > A) {
      var _e = i.substring(A, te).replace(/&#?\w+;/g, a);
      b && u(A), s.characters(_e, 0, te - A), A = te;
    }
  }
  function u(te, _e) {
    for (; te >= m && (_e = v.exec(i)); )
      f = _e.index, m = f + _e[0].length, b.lineNumber++;
    b.columnNumber = te - f + 1;
  }
  for (var f = 0, m = 0, v = /.*(?:\r\n?|\n)|.*$/g, b = s.locator, S = [{ currentNSMap: e }], y = {}, A = 0; ; ) {
    try {
      var w = i.indexOf("<", A);
      if (w < 0) {
        if (!i.substr(A).match(/^\s*$/)) {
          var k = s.doc, D = k.createTextNode(i.substr(A));
          k.appendChild(D), s.currentElement = D;
        }
        return;
      }
      switch (w > A && l(w), i.charAt(w + 1)) {
        case "/":
          var Z = i.indexOf(">", w + 3), R = i.substring(w + 2, Z).replace(/[ \t\n\r]+$/g, ""), j = S.pop();
          Z < 0 ? (R = i.substring(w + 2).replace(/[\s<].*/, ""), r.error("end tag name: " + R + " is not complete:" + j.tagName), Z = w + 1 + R.length) : R.match(/\s</) && (R = R.replace(/[\s<].*/, ""), r.error("end tag name: " + R + " maybe not complete"), Z = w + 1 + R.length);
          var P = j.localNSMap, F = j.tagName == R, $ = F || j.tagName && j.tagName.toLowerCase() == R.toLowerCase();
          if ($) {
            if (s.endElement(j.uri, j.localName, R), P)
              for (var Q in P)
                Object.prototype.hasOwnProperty.call(P, Q) && s.endPrefixMapping(Q);
            F || r.fatalError("end tag name: " + R + " is not match the current start tagName:" + j.tagName);
          } else
            S.push(j);
          Z++;
          break;
        case "?":
          b && u(w), Z = _v(i, w, s);
          break;
        case "!":
          b && u(w), Z = yv(i, w, s, r);
          break;
        default:
          b && u(w);
          var K = new Ad(), oe = S[S.length - 1].currentNSMap, Z = mv(i, w, K, oe, a, r), ce = K.length;
          if (!K.closed && vv(i, Z, K.tagName, y) && (K.closed = !0, t.nbsp || r.warning("unclosed xml attribute")), b && ce) {
            for (var V = ku(b, {}), ee = 0; ee < ce; ee++) {
              var We = K[ee];
              u(We.offset), We.locator = ku(b, {});
            }
            s.locator = V, Iu(K, s, oe) && S.push(K), s.locator = b;
          } else
            Iu(K, s, oe) && S.push(K);
          Hs.isHTML(K.uri) && !K.closed ? Z = gv(i, Z, K.tagName, a, s) : Z++;
      }
    } catch (te) {
      if (te instanceof Hi)
        throw te;
      r.error("element parse error: " + te), Z = -1;
    }
    Z > A ? A = Z : l(Math.max(w, A) + 1);
  }
}
function ku(i, e) {
  return e.lineNumber = i.lineNumber, e.columnNumber = i.columnNumber, e;
}
function mv(i, e, t, s, r, n) {
  function a(b, S, y) {
    t.attributeNames.hasOwnProperty(b) && n.fatalError("Attribute " + b + " redefined"), t.addValue(
      b,
      // @see https://www.w3.org/TR/xml/#AVNormalize
      // since the xmldom sax parser does not "interpret" DTD the following is not implemented:
      // - recursive replacement of (DTD) entity references
      // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
      S.replace(/[\t\n\r]/g, " ").replace(/&#?\w+;/g, r),
      y
    );
  }
  for (var l, u, f = ++e, m = bs; ; ) {
    var v = i.charAt(f);
    switch (v) {
      case "=":
        if (m === zt)
          l = i.slice(e, f), m = xs;
        else if (m === Ci)
          m = xs;
        else
          throw new Error("attribute equal must after attrName");
        break;
      case "'":
      case '"':
        if (m === xs || m === zt)
          if (m === zt && (n.warning('attribute value must after "="'), l = i.slice(e, f)), e = f + 1, f = i.indexOf(v, e), f > 0)
            u = i.slice(e, f), a(l, u, e - 1), m = Ai;
          else
            throw new Error("attribute value no end '" + v + "' match");
        else if (m == wi)
          u = i.slice(e, f), a(l, u, e), n.warning('attribute "' + l + '" missed start quot(' + v + ")!!"), e = f + 1, m = Ai;
        else
          throw new Error('attribute value must after "="');
        break;
      case "/":
        switch (m) {
          case bs:
            t.setTagName(i.slice(e, f));
          case Ai:
          case Ss:
          case Pr:
            m = Pr, t.closed = !0;
          case wi:
          case zt:
            break;
          case Ci:
            t.closed = !0;
            break;
          default:
            throw new Error("attribute invalid close char('/')");
        }
        break;
      case "":
        return n.error("unexpected end of input"), m == bs && t.setTagName(i.slice(e, f)), f;
      case ">":
        switch (m) {
          case bs:
            t.setTagName(i.slice(e, f));
          case Ai:
          case Ss:
          case Pr:
            break;
          case wi:
          case zt:
            u = i.slice(e, f), u.slice(-1) === "/" && (t.closed = !0, u = u.slice(0, -1));
          case Ci:
            m === Ci && (u = l), m == wi ? (n.warning('attribute "' + u + '" missed quot(")!'), a(l, u, e)) : ((!Hs.isHTML(s[""]) || !u.match(/^(?:disabled|checked|selected)$/i)) && n.warning('attribute "' + u + '" missed value!! "' + u + '" instead!!'), a(u, u, e));
            break;
          case xs:
            throw new Error("attribute value missed!!");
        }
        return f;
      case "":
        v = " ";
      default:
        if (v <= " ")
          switch (m) {
            case bs:
              t.setTagName(i.slice(e, f)), m = Ss;
              break;
            case zt:
              l = i.slice(e, f), m = Ci;
              break;
            case wi:
              var u = i.slice(e, f);
              n.warning('attribute "' + u + '" missed quot(")!!'), a(l, u, e);
            case Ai:
              m = Ss;
              break;
          }
        else
          switch (m) {
            case Ci:
              t.tagName, (!Hs.isHTML(s[""]) || !l.match(/^(?:disabled|checked|selected)$/i)) && n.warning('attribute "' + l + '" missed value!! "' + l + '" instead2!!'), a(l, l, e), e = f, m = zt;
              break;
            case Ai:
              n.warning('attribute space is required"' + l + '"!!');
            case Ss:
              m = zt, e = f;
              break;
            case xs:
              m = wi, e = f;
              break;
            case Pr:
              throw new Error("elements closed character '/' and '>' must be connected to");
          }
    }
    f++;
  }
}
function Iu(i, e, t) {
  for (var s = i.tagName, r = null, v = i.length; v--; ) {
    var n = i[v], a = n.qName, l = n.value, b = a.indexOf(":");
    if (b > 0)
      var u = n.prefix = a.slice(0, b), f = a.slice(b + 1), m = u === "xmlns" && f;
    else
      f = a, u = null, m = a === "xmlns" && "";
    n.localName = f, m !== !1 && (r == null && (r = {}, wd(t, t = {})), t[m] = r[m] = l, n.uri = Hs.XMLNS, e.startPrefixMapping(m, l));
  }
  for (var v = i.length; v--; ) {
    n = i[v];
    var u = n.prefix;
    u && (u === "xml" && (n.uri = Hs.XML), u !== "xmlns" && (n.uri = t[u || ""]));
  }
  var b = s.indexOf(":");
  b > 0 ? (u = i.prefix = s.slice(0, b), f = i.localName = s.slice(b + 1)) : (u = null, f = i.localName = s);
  var S = i.uri = t[u || ""];
  if (e.startElement(S, f, s, i), i.closed) {
    if (e.endElement(S, f, s), r)
      for (u in r)
        Object.prototype.hasOwnProperty.call(r, u) && e.endPrefixMapping(u);
  } else
    return i.currentNSMap = t, i.localNSMap = r, !0;
}
function gv(i, e, t, s, r) {
  if (/^(?:script|textarea)$/i.test(t)) {
    var n = i.indexOf("</" + t + ">", e), a = i.substring(e + 1, n);
    if (/[&<]/.test(a))
      return /^script$/i.test(t) ? (r.characters(a, 0, a.length), n) : (a = a.replace(/&#?\w+;/g, s), r.characters(a, 0, a.length), n);
  }
  return e + 1;
}
function vv(i, e, t, s) {
  var r = s[t];
  return r == null && (r = i.lastIndexOf("</" + t + ">"), r < e && (r = i.lastIndexOf("</" + t)), s[t] = r), r < e;
}
function wd(i, e) {
  for (var t in i)
    Object.prototype.hasOwnProperty.call(i, t) && (e[t] = i[t]);
}
function yv(i, e, t, s) {
  var r = i.charAt(e + 2);
  switch (r) {
    case "-":
      if (i.charAt(e + 3) === "-") {
        var n = i.indexOf("-->", e + 4);
        return n > e ? (t.comment(i, e + 4, n - e - 4), n + 3) : (s.error("Unclosed comment"), -1);
      } else
        return -1;
    default:
      if (i.substr(e + 3, 6) == "CDATA[") {
        var n = i.indexOf("]]>", e + 9);
        return t.startCDATA(), t.characters(i, e + 9, n - e - 9), t.endCDATA(), n + 3;
      }
      var a = Tv(i, e), l = a.length;
      if (l > 1 && /!doctype/i.test(a[0][0])) {
        var u = a[1][0], f = !1, m = !1;
        l > 3 && (/^public$/i.test(a[2][0]) ? (f = a[3][0], m = l > 4 && a[4][0]) : /^system$/i.test(a[2][0]) && (m = a[3][0]));
        var v = a[l - 1];
        return t.startDTD(u, f, m), t.endDTD(), v.index + v[0].length;
      }
  }
  return -1;
}
function _v(i, e, t) {
  var s = i.indexOf("?>", e);
  if (s) {
    var r = i.substring(e, s).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
    return r ? (r[0].length, t.processingInstruction(r[1], r[2]), s + 2) : -1;
  }
  return -1;
}
function Ad() {
  this.attributeNames = {};
}
Ad.prototype = {
  setTagName: function(i) {
    if (!Du.test(i))
      throw new Error("invalid tagName:" + i);
    this.tagName = i;
  },
  addValue: function(i, e, t) {
    if (!Du.test(i))
      throw new Error("invalid attribute:" + i);
    this.attributeNames[i] = this.length, this[this.length++] = { qName: i, value: e, offset: t };
  },
  length: 0,
  getLocalName: function(i) {
    return this[i].localName;
  },
  getLocator: function(i) {
    return this[i].locator;
  },
  getQName: function(i) {
    return this[i].qName;
  },
  getURI: function(i) {
    return this[i].uri;
  },
  getValue: function(i) {
    return this[i].value;
  }
  //	,getIndex:function(uri, localName)){
  //		if(localName){
  //
  //		}else{
  //			var qName = uri
  //		}
  //	},
  //	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
  //	getType:function(uri,localName){}
  //	getType:function(i){},
};
function Tv(i, e) {
  var t, s = [], r = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
  for (r.lastIndex = e, r.exec(i); t = r.exec(i); )
    if (s.push(t), t[1])
      return s;
}
Co.XMLReader = Cd;
Co.ParseError = Hi;
var bv = qt, xv = Zt, Pu = Ed, Dd = Co, Sv = xv.DOMImplementation, Lu = bv.NAMESPACE, Ev = Dd.ParseError, Cv = Dd.XMLReader;
function kd(i) {
  return i.replace(/\r[\n\u0085]/g, `
`).replace(/[\r\u0085\u2028]/g, `
`);
}
function Id(i) {
  this.options = i || { locator: {} };
}
Id.prototype.parseFromString = function(i, e) {
  var t = this.options, s = new Cv(), r = t.domBuilder || new Js(), n = t.errorHandler, a = t.locator, l = t.xmlns || {}, u = /\/x?html?$/.test(e), f = u ? Pu.HTML_ENTITIES : Pu.XML_ENTITIES;
  a && r.setDocumentLocator(a), s.errorHandler = wv(n, r, a), s.domBuilder = t.domBuilder || r, u && (l[""] = Lu.HTML), l.xml = l.xml || Lu.XML;
  var m = t.normalizeLineEndings || kd;
  return i && typeof i == "string" ? s.parse(
    m(i),
    l,
    f
  ) : s.errorHandler.error("invalid doc source"), r.doc;
};
function wv(i, e, t) {
  if (!i) {
    if (e instanceof Js)
      return e;
    i = e;
  }
  var s = {}, r = i instanceof Function;
  t = t || {};
  function n(a) {
    var l = i[a];
    !l && r && (l = i.length == 2 ? function(u) {
      i(a, u);
    } : i), s[a] = l && function(u) {
      l("[xmldom " + a + "]	" + u + Na(t));
    } || function() {
    };
  }
  return n("warning"), n("error"), n("fatalError"), s;
}
function Js() {
  this.cdata = !1;
}
function Di(i, e) {
  e.lineNumber = i.lineNumber, e.columnNumber = i.columnNumber;
}
Js.prototype = {
  startDocument: function() {
    this.doc = new Sv().createDocument(null, null, null), this.locator && (this.doc.documentURI = this.locator.systemId);
  },
  startElement: function(i, e, t, s) {
    var r = this.doc, n = r.createElementNS(i, t || e), a = s.length;
    Lr(this, n), this.currentElement = n, this.locator && Di(this.locator, n);
    for (var l = 0; l < a; l++) {
      var i = s.getURI(l), u = s.getValue(l), t = s.getQName(l), f = r.createAttributeNS(i, t);
      this.locator && Di(s.getLocator(l), f), f.value = f.nodeValue = u, n.setAttributeNode(f);
    }
  },
  endElement: function(i, e, t) {
    var s = this.currentElement;
    s.tagName, this.currentElement = s.parentNode;
  },
  startPrefixMapping: function(i, e) {
  },
  endPrefixMapping: function(i) {
  },
  processingInstruction: function(i, e) {
    var t = this.doc.createProcessingInstruction(i, e);
    this.locator && Di(this.locator, t), Lr(this, t);
  },
  ignorableWhitespace: function(i, e, t) {
  },
  characters: function(i, e, t) {
    if (i = Ou.apply(this, arguments), i) {
      if (this.cdata)
        var s = this.doc.createCDATASection(i);
      else
        var s = this.doc.createTextNode(i);
      this.currentElement ? this.currentElement.appendChild(s) : /^\s*$/.test(i) && this.doc.appendChild(s), this.locator && Di(this.locator, s);
    }
  },
  skippedEntity: function(i) {
  },
  endDocument: function() {
    this.doc.normalize();
  },
  setDocumentLocator: function(i) {
    (this.locator = i) && (i.lineNumber = 0);
  },
  //LexicalHandler
  comment: function(i, e, t) {
    i = Ou.apply(this, arguments);
    var s = this.doc.createComment(i);
    this.locator && Di(this.locator, s), Lr(this, s);
  },
  startCDATA: function() {
    this.cdata = !0;
  },
  endCDATA: function() {
    this.cdata = !1;
  },
  startDTD: function(i, e, t) {
    var s = this.doc.implementation;
    if (s && s.createDocumentType) {
      var r = s.createDocumentType(i, e, t);
      this.locator && Di(this.locator, r), Lr(this, r), this.doc.doctype = r;
    }
  },
  /**
   * @see org.xml.sax.ErrorHandler
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
   */
  warning: function(i) {
    console.warn("[xmldom warning]	" + i, Na(this.locator));
  },
  error: function(i) {
    console.error("[xmldom error]	" + i, Na(this.locator));
  },
  fatalError: function(i) {
    throw new Ev(i, this.locator);
  }
};
function Na(i) {
  if (i)
    return `
@` + (i.systemId || "") + "#[line:" + i.lineNumber + ",col:" + i.columnNumber + "]";
}
function Ou(i, e, t) {
  return typeof i == "string" ? i.substr(e, t) : i.length >= e + t || e ? new java.lang.String(i, e, t) + "" : i;
}
"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function(i) {
  Js.prototype[i] = function() {
    return null;
  };
});
function Lr(i, e) {
  i.currentElement ? i.currentElement.appendChild(e) : i.doc.appendChild(e);
}
_n.__DOMHandler = Js;
_n.normalizeLineEndings = kd;
_n.DOMParser = Id;
var Av = _n.DOMParser;
/*! @name mpd-parser @version 1.3.0 @license Apache-2.0 */
const ju = (i) => !!i && typeof i == "object", we = (...i) => i.reduce((e, t) => (typeof t != "object" || Object.keys(t).forEach((s) => {
  Array.isArray(e[s]) && Array.isArray(t[s]) ? e[s] = e[s].concat(t[s]) : ju(e[s]) && ju(t[s]) ? e[s] = we(e[s], t[s]) : e[s] = t[s];
}), e), {}), Pd = (i) => Object.keys(i).map((e) => i[e]), Dv = (i, e) => {
  const t = [];
  for (let s = i; s < e; s++)
    t.push(s);
  return t;
}, zi = (i) => i.reduce((e, t) => e.concat(t), []), Ld = (i) => {
  if (!i.length)
    return [];
  const e = [];
  for (let t = 0; t < i.length; t++)
    e.push(i[t]);
  return e;
}, kv = (i, e) => i.reduce((t, s, r) => (s[e] && t.push(r), t), []), Iv = (i, e) => Pd(i.reduce((t, s) => (s.forEach((r) => {
  t[e(r)] = r;
}), t), {}));
var Gi = {
  INVALID_NUMBER_OF_PERIOD: "INVALID_NUMBER_OF_PERIOD",
  INVALID_NUMBER_OF_CONTENT_STEERING: "INVALID_NUMBER_OF_CONTENT_STEERING",
  DASH_EMPTY_MANIFEST: "DASH_EMPTY_MANIFEST",
  DASH_INVALID_XML: "DASH_INVALID_XML",
  NO_BASE_URL: "NO_BASE_URL",
  MISSING_SEGMENT_INFORMATION: "MISSING_SEGMENT_INFORMATION",
  SEGMENT_TIME_UNSPECIFIED: "SEGMENT_TIME_UNSPECIFIED",
  UNSUPPORTED_UTC_TIMING_SCHEME: "UNSUPPORTED_UTC_TIMING_SCHEME"
};
const zs = ({
  baseUrl: i = "",
  source: e = "",
  range: t = "",
  indexRange: s = ""
}) => {
  const r = {
    uri: e,
    resolvedUri: gn(i || "", e)
  };
  if (t || s) {
    const a = (t || s).split("-");
    let l = E.BigInt ? E.BigInt(a[0]) : parseInt(a[0], 10), u = E.BigInt ? E.BigInt(a[1]) : parseInt(a[1], 10);
    l < Number.MAX_SAFE_INTEGER && typeof l == "bigint" && (l = Number(l)), u < Number.MAX_SAFE_INTEGER && typeof u == "bigint" && (u = Number(u));
    let f;
    typeof u == "bigint" || typeof l == "bigint" ? f = E.BigInt(u) - E.BigInt(l) + E.BigInt(1) : f = u - l + 1, typeof f == "bigint" && f < Number.MAX_SAFE_INTEGER && (f = Number(f)), r.byterange = {
      length: f,
      offset: l
    };
  }
  return r;
}, Pv = (i) => {
  let e;
  return typeof i.offset == "bigint" || typeof i.length == "bigint" ? e = E.BigInt(i.offset) + E.BigInt(i.length) - E.BigInt(1) : e = i.offset + i.length - 1, `${i.offset}-${e}`;
}, Ru = (i) => (i && typeof i != "number" && (i = parseInt(i, 10)), isNaN(i) ? null : i), Lv = {
  /**
   * Returns the entire range of available segments for a static MPD
   *
   * @param {Object} attributes
   *        Inheritied MPD attributes
   * @return {{ start: number, end: number }}
   *         The start and end numbers for available segments
   */
  static(i) {
    const {
      duration: e,
      timescale: t = 1,
      sourceDuration: s,
      periodDuration: r
    } = i, n = Ru(i.endNumber), a = e / t;
    return typeof n == "number" ? {
      start: 0,
      end: n
    } : typeof r == "number" ? {
      start: 0,
      end: r / a
    } : {
      start: 0,
      end: s / a
    };
  },
  /**
   * Returns the current live window range of available segments for a dynamic MPD
   *
   * @param {Object} attributes
   *        Inheritied MPD attributes
   * @return {{ start: number, end: number }}
   *         The start and end numbers for available segments
   */
  dynamic(i) {
    const {
      NOW: e,
      clientOffset: t,
      availabilityStartTime: s,
      timescale: r = 1,
      duration: n,
      periodStart: a = 0,
      minimumUpdatePeriod: l = 0,
      timeShiftBufferDepth: u = 1 / 0
    } = i, f = Ru(i.endNumber), m = (e + t) / 1e3, v = s + a, S = m + l - v, y = Math.ceil(S * r / n), A = Math.floor((m - v - u) * r / n), w = Math.floor((m - v) * r / n);
    return {
      start: Math.max(0, A),
      end: typeof f == "number" ? f : Math.min(y, w)
    };
  }
}, Ov = (i) => (e) => {
  const {
    duration: t,
    timescale: s = 1,
    periodStart: r,
    startNumber: n = 1
  } = i;
  return {
    number: n + e,
    duration: t / s,
    timeline: r,
    time: e * t
  };
}, wo = (i) => {
  const {
    type: e,
    duration: t,
    timescale: s = 1,
    periodDuration: r,
    sourceDuration: n
  } = i, {
    start: a,
    end: l
  } = Lv[e](i), u = Dv(a, l).map(Ov(i));
  if (e === "static") {
    const f = u.length - 1, m = typeof r == "number" ? r : n;
    u[f].duration = m - t / s * f;
  }
  return u;
}, Od = (i) => {
  const {
    baseUrl: e,
    initialization: t = {},
    sourceDuration: s,
    indexRange: r = "",
    periodStart: n,
    presentationTime: a,
    number: l = 0,
    duration: u
  } = i;
  if (!e)
    throw new Error(Gi.NO_BASE_URL);
  const f = zs({
    baseUrl: e,
    source: t.sourceURL,
    range: t.range
  }), m = zs({
    baseUrl: e,
    source: e,
    indexRange: r
  });
  if (m.map = f, u) {
    const v = wo(i);
    v.length && (m.duration = v[0].duration, m.timeline = v[0].timeline);
  } else
    s && (m.duration = s, m.timeline = n);
  return m.presentationTime = a || n, m.number = l, [m];
}, Ao = (i, e, t) => {
  const s = i.sidx.map ? i.sidx.map : null, r = i.sidx.duration, n = i.timeline || 0, a = i.sidx.byterange, l = a.offset + a.length, u = e.timescale, f = e.references.filter((w) => w.referenceType !== 1), m = [], v = i.endList ? "static" : "dynamic", b = i.sidx.timeline;
  let S = b, y = i.mediaSequence || 0, A;
  typeof e.firstOffset == "bigint" ? A = E.BigInt(l) + e.firstOffset : A = l + e.firstOffset;
  for (let w = 0; w < f.length; w++) {
    const k = e.references[w], D = k.referencedSize, R = k.subsegmentDuration;
    let j;
    typeof A == "bigint" ? j = A + E.BigInt(D) - E.BigInt(1) : j = A + D - 1;
    const P = `${A}-${j}`, $ = Od({
      baseUrl: t,
      timescale: u,
      timeline: n,
      periodStart: b,
      presentationTime: S,
      number: y,
      duration: R,
      sourceDuration: r,
      indexRange: P,
      type: v
    })[0];
    s && ($.map = s), m.push($), typeof A == "bigint" ? A += E.BigInt(D) : A += D, S += R / u, y++;
  }
  return i.segments = m, i;
}, jv = ["AUDIO", "SUBTITLES"], Rv = 1 / 60, jd = (i) => Iv(i, ({
  timeline: e
}) => e).sort((e, t) => e.timeline > t.timeline ? 1 : -1), Nv = (i, e) => {
  for (let t = 0; t < i.length; t++)
    if (i[t].attributes.NAME === e)
      return i[t];
  return null;
}, Nu = (i) => {
  let e = [];
  return Q0(i, jv, (t, s, r, n) => {
    e = e.concat(t.playlists || []);
  }), e;
}, Mu = ({
  playlist: i,
  mediaSequence: e
}) => {
  i.mediaSequence = e, i.segments.forEach((t, s) => {
    t.number = i.mediaSequence + s;
  });
}, Mv = ({
  oldPlaylists: i,
  newPlaylists: e,
  timelineStarts: t
}) => {
  e.forEach((s) => {
    s.discontinuitySequence = t.findIndex(function({
      timeline: u
    }) {
      return u === s.timeline;
    });
    const r = Nv(i, s.attributes.NAME);
    if (!r || s.sidx)
      return;
    const n = s.segments[0], a = r.segments.findIndex(function(u) {
      return Math.abs(u.presentationTime - n.presentationTime) < Rv;
    });
    if (a === -1) {
      Mu({
        playlist: s,
        mediaSequence: r.mediaSequence + r.segments.length
      }), s.segments[0].discontinuity = !0, s.discontinuityStarts.unshift(0), (!r.segments.length && s.timeline > r.timeline || r.segments.length && s.timeline > r.segments[r.segments.length - 1].timeline) && s.discontinuitySequence--;
      return;
    }
    r.segments[a].discontinuity && !n.discontinuity && (n.discontinuity = !0, s.discontinuityStarts.unshift(0), s.discontinuitySequence--), Mu({
      playlist: s,
      mediaSequence: r.segments[a].number
    });
  });
}, Bv = ({
  oldManifest: i,
  newManifest: e
}) => {
  const t = i.playlists.concat(Nu(i)), s = e.playlists.concat(Nu(e));
  return e.timelineStarts = jd([i.timelineStarts, e.timelineStarts]), Mv({
    oldPlaylists: t,
    newPlaylists: s,
    timelineStarts: e.timelineStarts
  }), e;
}, Tn = (i) => i && i.uri + "-" + Pv(i.byterange), ma = (i) => {
  const e = i.reduce(function(s, r) {
    return s[r.attributes.baseUrl] || (s[r.attributes.baseUrl] = []), s[r.attributes.baseUrl].push(r), s;
  }, {});
  let t = [];
  return Object.values(e).forEach((s) => {
    const r = Pd(s.reduce((n, a) => {
      const l = a.attributes.id + (a.attributes.lang || "");
      return n[l] ? (a.segments && (a.segments[0] && (a.segments[0].discontinuity = !0), n[l].segments.push(...a.segments)), a.attributes.contentProtection && (n[l].attributes.contentProtection = a.attributes.contentProtection)) : (n[l] = a, n[l].attributes.timelineStarts = []), n[l].attributes.timelineStarts.push({
        // Although they represent the same number, it's important to have both to make it
        // compatible with HLS potentially having a similar attribute.
        start: a.attributes.periodStart,
        timeline: a.attributes.periodStart
      }), n;
    }, {}));
    t = t.concat(r);
  }), t.map((s) => (s.discontinuityStarts = kv(s.segments || [], "discontinuity"), s));
}, Do = (i, e) => {
  const t = Tn(i.sidx), s = t && e[t] && e[t].sidx;
  return s && Ao(i, s, i.sidx.resolvedUri), i;
}, Fv = (i, e = {}) => {
  if (!Object.keys(e).length)
    return i;
  for (const t in i)
    i[t] = Do(i[t], e);
  return i;
}, Uv = ({
  attributes: i,
  segments: e,
  sidx: t,
  mediaSequence: s,
  discontinuitySequence: r,
  discontinuityStarts: n
}, a) => {
  const l = {
    attributes: {
      NAME: i.id,
      BANDWIDTH: i.bandwidth,
      CODECS: i.codecs,
      "PROGRAM-ID": 1
    },
    uri: "",
    endList: i.type === "static",
    timeline: i.periodStart,
    resolvedUri: i.baseUrl || "",
    targetDuration: i.duration,
    discontinuitySequence: r,
    discontinuityStarts: n,
    timelineStarts: i.timelineStarts,
    mediaSequence: s,
    segments: e
  };
  return i.contentProtection && (l.contentProtection = i.contentProtection), i.serviceLocation && (l.attributes.serviceLocation = i.serviceLocation), t && (l.sidx = t), a && (l.attributes.AUDIO = "audio", l.attributes.SUBTITLES = "subs"), l;
}, qv = ({
  attributes: i,
  segments: e,
  mediaSequence: t,
  discontinuityStarts: s,
  discontinuitySequence: r
}) => {
  typeof e > "u" && (e = [{
    uri: i.baseUrl,
    timeline: i.periodStart,
    resolvedUri: i.baseUrl || "",
    duration: i.sourceDuration,
    number: 0
  }], i.duration = i.sourceDuration);
  const n = {
    NAME: i.id,
    BANDWIDTH: i.bandwidth,
    "PROGRAM-ID": 1
  };
  i.codecs && (n.CODECS = i.codecs);
  const a = {
    attributes: n,
    uri: "",
    endList: i.type === "static",
    timeline: i.periodStart,
    resolvedUri: i.baseUrl || "",
    targetDuration: i.duration,
    timelineStarts: i.timelineStarts,
    discontinuityStarts: s,
    discontinuitySequence: r,
    mediaSequence: t,
    segments: e
  };
  return i.serviceLocation && (a.attributes.serviceLocation = i.serviceLocation), a;
}, $v = (i, e = {}, t = !1) => {
  let s;
  const r = i.reduce((n, a) => {
    const l = a.attributes.role && a.attributes.role.value || "", u = a.attributes.lang || "";
    let f = a.attributes.label || "main";
    if (u && !a.attributes.label) {
      const v = l ? ` (${l})` : "";
      f = `${a.attributes.lang}${v}`;
    }
    n[f] || (n[f] = {
      language: u,
      autoselect: !0,
      default: l === "main",
      playlists: [],
      uri: ""
    });
    const m = Do(Uv(a, t), e);
    return n[f].playlists.push(m), typeof s > "u" && l === "main" && (s = a, s.default = !0), n;
  }, {});
  if (!s) {
    const n = Object.keys(r)[0];
    r[n].default = !0;
  }
  return r;
}, Vv = (i, e = {}) => i.reduce((t, s) => {
  const r = s.attributes.label || s.attributes.lang || "text";
  return t[r] || (t[r] = {
    language: r,
    default: !1,
    autoselect: !1,
    playlists: [],
    uri: ""
  }), t[r].playlists.push(Do(qv(s), e)), t;
}, {}), Hv = (i) => i.reduce((e, t) => (t && t.forEach((s) => {
  const {
    channel: r,
    language: n
  } = s;
  e[n] = {
    autoselect: !1,
    default: !1,
    instreamId: r,
    language: n
  }, s.hasOwnProperty("aspectRatio") && (e[n].aspectRatio = s.aspectRatio), s.hasOwnProperty("easyReader") && (e[n].easyReader = s.easyReader), s.hasOwnProperty("3D") && (e[n]["3D"] = s["3D"]);
}), e), {}), zv = ({
  attributes: i,
  segments: e,
  sidx: t,
  discontinuityStarts: s
}) => {
  const r = {
    attributes: {
      NAME: i.id,
      AUDIO: "audio",
      SUBTITLES: "subs",
      RESOLUTION: {
        width: i.width,
        height: i.height
      },
      CODECS: i.codecs,
      BANDWIDTH: i.bandwidth,
      "PROGRAM-ID": 1
    },
    uri: "",
    endList: i.type === "static",
    timeline: i.periodStart,
    resolvedUri: i.baseUrl || "",
    targetDuration: i.duration,
    discontinuityStarts: s,
    timelineStarts: i.timelineStarts,
    segments: e
  };
  return i.frameRate && (r.attributes["FRAME-RATE"] = i.frameRate), i.contentProtection && (r.contentProtection = i.contentProtection), i.serviceLocation && (r.attributes.serviceLocation = i.serviceLocation), t && (r.sidx = t), r;
}, Gv = ({
  attributes: i
}) => i.mimeType === "video/mp4" || i.mimeType === "video/webm" || i.contentType === "video", Wv = ({
  attributes: i
}) => i.mimeType === "audio/mp4" || i.mimeType === "audio/webm" || i.contentType === "audio", Xv = ({
  attributes: i
}) => i.mimeType === "text/vtt" || i.contentType === "text", Kv = (i, e) => {
  i.forEach((t) => {
    t.mediaSequence = 0, t.discontinuitySequence = e.findIndex(function({
      timeline: s
    }) {
      return s === t.timeline;
    }), t.segments && t.segments.forEach((s, r) => {
      s.number = r;
    });
  });
}, Bu = (i) => i ? Object.keys(i).reduce((e, t) => {
  const s = i[t];
  return e.concat(s.playlists);
}, []) : [], Yv = ({
  dashPlaylists: i,
  locations: e,
  contentSteering: t,
  sidxMapping: s = {},
  previousManifest: r,
  eventStream: n
}) => {
  if (!i.length)
    return {};
  const {
    sourceDuration: a,
    type: l,
    suggestedPresentationDelay: u,
    minimumUpdatePeriod: f
  } = i[0].attributes, m = ma(i.filter(Gv)).map(zv), v = ma(i.filter(Wv)), b = ma(i.filter(Xv)), S = i.map((j) => j.attributes.captionServices).filter(Boolean), y = {
    allowCache: !0,
    discontinuityStarts: [],
    segments: [],
    endList: !0,
    mediaGroups: {
      AUDIO: {},
      VIDEO: {},
      "CLOSED-CAPTIONS": {},
      SUBTITLES: {}
    },
    uri: "",
    duration: a,
    playlists: Fv(m, s)
  };
  f >= 0 && (y.minimumUpdatePeriod = f * 1e3), e && (y.locations = e), t && (y.contentSteering = t), l === "dynamic" && (y.suggestedPresentationDelay = u), n && n.length > 0 && (y.eventStream = n);
  const A = y.playlists.length === 0, w = v.length ? $v(v, s, A) : null, k = b.length ? Vv(b, s) : null, D = m.concat(Bu(w), Bu(k)), R = D.map(({
    timelineStarts: j
  }) => j);
  return y.timelineStarts = jd(R), Kv(D, y.timelineStarts), w && (y.mediaGroups.AUDIO.audio = w), k && (y.mediaGroups.SUBTITLES.subs = k), S.length && (y.mediaGroups["CLOSED-CAPTIONS"].cc = Hv(S)), r ? Bv({
    oldManifest: r,
    newManifest: y
  }) : y;
}, Qv = (i, e, t) => {
  const {
    NOW: s,
    clientOffset: r,
    availabilityStartTime: n,
    timescale: a = 1,
    periodStart: l = 0,
    minimumUpdatePeriod: u = 0
  } = i, f = (s + r) / 1e3, m = n + l, b = f + u - m;
  return Math.ceil((b * a - e) / t);
}, Rd = (i, e) => {
  const {
    type: t,
    minimumUpdatePeriod: s = 0,
    media: r = "",
    sourceDuration: n,
    timescale: a = 1,
    startNumber: l = 1,
    periodStart: u
  } = i, f = [];
  let m = -1;
  for (let v = 0; v < e.length; v++) {
    const b = e[v], S = b.d, y = b.r || 0, A = b.t || 0;
    m < 0 && (m = A), A && A > m && (m = A);
    let w;
    if (y < 0) {
      const R = v + 1;
      R === e.length ? t === "dynamic" && s > 0 && r.indexOf("$Number$") > 0 ? w = Qv(i, m, S) : w = (n * a - m) / S : w = (e[R].t - m) / S;
    } else
      w = y + 1;
    const k = l + f.length + w;
    let D = l + f.length;
    for (; D < k; )
      f.push({
        number: D,
        duration: S / a,
        time: m,
        timeline: u
      }), m += S, D++;
  }
  return f;
}, Jv = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g, Zv = (i) => (e, t, s, r) => {
  if (e === "$$")
    return "$";
  if (typeof i[t] > "u")
    return e;
  const n = "" + i[t];
  return t === "RepresentationID" || (s ? r = parseInt(r, 10) : r = 1, n.length >= r) ? n : `${new Array(r - n.length + 1).join("0")}${n}`;
}, Fu = (i, e) => i.replace(Jv, Zv(e)), ey = (i, e) => !i.duration && !e ? [{
  number: i.startNumber || 1,
  duration: i.sourceDuration,
  time: 0,
  timeline: i.periodStart
}] : i.duration ? wo(i) : Rd(i, e), ty = (i, e) => {
  const t = {
    RepresentationID: i.id,
    Bandwidth: i.bandwidth || 0
  }, {
    initialization: s = {
      sourceURL: "",
      range: ""
    }
  } = i, r = zs({
    baseUrl: i.baseUrl,
    source: Fu(s.sourceURL, t),
    range: s.range
  });
  return ey(i, e).map((a) => {
    t.Number = a.number, t.Time = a.time;
    const l = Fu(i.media || "", t), u = i.timescale || 1, f = i.presentationTimeOffset || 0, m = (
      // Even if the @t attribute is not specified for the segment, segment.time is
      // calculated in mpd-parser prior to this, so it's assumed to be available.
      i.periodStart + (a.time - f) / u
    );
    return {
      uri: l,
      timeline: a.timeline,
      duration: a.duration,
      resolvedUri: gn(i.baseUrl || "", l),
      map: r,
      number: a.number,
      presentationTime: m
    };
  });
}, iy = (i, e) => {
  const {
    baseUrl: t,
    initialization: s = {}
  } = i, r = zs({
    baseUrl: t,
    source: s.sourceURL,
    range: s.range
  }), n = zs({
    baseUrl: t,
    source: e.media,
    range: e.mediaRange
  });
  return n.map = r, n;
}, sy = (i, e) => {
  const {
    duration: t,
    segmentUrls: s = [],
    periodStart: r
  } = i;
  if (!t && !e || t && e)
    throw new Error(Gi.SEGMENT_TIME_UNSPECIFIED);
  const n = s.map((u) => iy(i, u));
  let a;
  return t && (a = wo(i)), e && (a = Rd(i, e)), a.map((u, f) => {
    if (n[f]) {
      const m = n[f], v = i.timescale || 1, b = i.presentationTimeOffset || 0;
      return m.timeline = u.timeline, m.duration = u.duration, m.number = u.number, m.presentationTime = r + (u.time - b) / v, m;
    }
  }).filter((u) => u);
}, ry = ({
  attributes: i,
  segmentInfo: e
}) => {
  let t, s;
  e.template ? (s = ty, t = we(i, e.template)) : e.base ? (s = Od, t = we(i, e.base)) : e.list && (s = sy, t = we(i, e.list));
  const r = {
    attributes: i
  };
  if (!s)
    return r;
  const n = s(t, e.segmentTimeline);
  if (t.duration) {
    const {
      duration: a,
      timescale: l = 1
    } = t;
    t.duration = a / l;
  } else
    n.length ? t.duration = n.reduce((a, l) => Math.max(a, Math.ceil(l.duration)), 0) : t.duration = 0;
  return r.attributes = t, r.segments = n, e.base && t.indexRange && (r.sidx = n[0], r.segments = []), r;
}, ny = (i) => i.map(ry), me = (i, e) => Ld(i.childNodes).filter(({
  tagName: t
}) => t === e), Zs = (i) => i.textContent.trim(), ay = (i) => parseFloat(i.split("/").reduce((e, t) => e / t)), ki = (i) => {
  const l = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/.exec(i);
  if (!l)
    return 0;
  const [u, f, m, v, b, S] = l.slice(1);
  return parseFloat(u || 0) * 31536e3 + parseFloat(f || 0) * 2592e3 + parseFloat(m || 0) * 86400 + parseFloat(v || 0) * 3600 + parseFloat(b || 0) * 60 + parseFloat(S || 0);
}, oy = (i) => (/^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/.test(i) && (i += "Z"), Date.parse(i)), Uu = {
  /**
   * Specifies the duration of the entire Media Presentation. Format is a duration string
   * as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */
  mediaPresentationDuration(i) {
    return ki(i);
  },
  /**
   * Specifies the Segment availability start time for all Segments referred to in this
   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability
   * time. Format is a date string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The date as seconds from unix epoch
   */
  availabilityStartTime(i) {
    return oy(i) / 1e3;
  },
  /**
   * Specifies the smallest period between potential changes to the MPD. Format is a
   * duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */
  minimumUpdatePeriod(i) {
    return ki(i);
  },
  /**
   * Specifies the suggested presentation delay. Format is a
   * duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */
  suggestedPresentationDelay(i) {
    return ki(i);
  },
  /**
   * specifices the type of mpd. Can be either "static" or "dynamic"
   *
   * @param {string} value
   *        value of attribute as a string
   *
   * @return {string}
   *         The type as a string
   */
  type(i) {
    return i;
  },
  /**
   * Specifies the duration of the smallest time shifting buffer for any Representation
   * in the MPD. Format is a duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */
  timeShiftBufferDepth(i) {
    return ki(i);
  },
  /**
   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.
   * Format is a duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */
  start(i) {
    return ki(i);
  },
  /**
   * Specifies the width of the visual presentation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed width
   */
  width(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the height of the visual presentation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed height
   */
  height(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the bitrate of the representation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed bandwidth
   */
  bandwidth(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the frame rate of the representation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed frame rate
   */
  frameRate(i) {
    return ay(i);
  },
  /**
   * Specifies the number of the first Media Segment in this Representation in the Period
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed number
   */
  startNumber(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the timescale in units per seconds
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed timescale
   */
  timescale(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the presentationTimeOffset.
   *
   * @param {string} value
   *        value of the attribute as a string
   *
   * @return {number}
   *         The parsed presentationTimeOffset
   */
  presentationTimeOffset(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the constant approximate Segment duration
   * NOTE: The <Period> element also contains an @duration attribute. This duration
   *       specifies the duration of the Period. This attribute is currently not
   *       supported by the rest of the parser, however we still check for it to prevent
   *       errors.
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed duration
   */
  duration(i) {
    const e = parseInt(i, 10);
    return isNaN(e) ? ki(i) : e;
  },
  /**
   * Specifies the Segment duration, in units of the value of the @timescale.
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed duration
   */
  d(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the MPD start time, in @timescale units, the first Segment in the series
   * starts relative to the beginning of the Period
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed time
   */
  t(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the repeat count of the number of following contiguous Segments with the
   * same duration expressed by the value of @d
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed number
   */
  r(i) {
    return parseInt(i, 10);
  },
  /**
   * Specifies the presentationTime.
   *
   * @param {string} value
   *        value of the attribute as a string
   *
   * @return {number}
   *         The parsed presentationTime
   */
  presentationTime(i) {
    return parseInt(i, 10);
  },
  /**
   * Default parser for all other attributes. Acts as a no-op and just returns the value
   * as a string
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {string}
   *         Unparsed value
   */
  DEFAULT(i) {
    return i;
  }
}, Se = (i) => i && i.attributes ? Ld(i.attributes).reduce((e, t) => {
  const s = Uu[t.name] || Uu.DEFAULT;
  return e[t.name] = s(t.value), e;
}, {}) : {}, ly = {
  "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey",
  "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha",
  "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready",
  "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime",
  // ISO_IEC 23009-1_2022 5.8.5.2.2 The mp4 Protection Scheme
  "urn:mpeg:dash:mp4protection:2011": "mp4protection"
}, bn = (i, e) => e.length ? zi(i.map(function(t) {
  return e.map(function(s) {
    const r = Zs(s), n = gn(t.baseUrl, r), a = we(Se(s), {
      baseUrl: n
    });
    return n !== r && !a.serviceLocation && t.serviceLocation && (a.serviceLocation = t.serviceLocation), a;
  });
})) : i, ko = (i) => {
  const e = me(i, "SegmentTemplate")[0], t = me(i, "SegmentList")[0], s = t && me(t, "SegmentURL").map((v) => we({
    tag: "SegmentURL"
  }, Se(v))), r = me(i, "SegmentBase")[0], n = t || e, a = n && me(n, "SegmentTimeline")[0], l = t || r || e, u = l && me(l, "Initialization")[0], f = e && Se(e);
  f && u ? f.initialization = u && Se(u) : f && f.initialization && (f.initialization = {
    sourceURL: f.initialization
  });
  const m = {
    template: f,
    segmentTimeline: a && me(a, "S").map((v) => Se(v)),
    list: t && we(Se(t), {
      segmentUrls: s,
      initialization: Se(u)
    }),
    base: r && we(Se(r), {
      initialization: Se(u)
    })
  };
  return Object.keys(m).forEach((v) => {
    m[v] || delete m[v];
  }), m;
}, uy = (i, e, t) => (s) => {
  const r = me(s, "BaseURL"), n = bn(e, r), a = we(i, Se(s)), l = ko(s);
  return n.map((u) => ({
    segmentInfo: we(t, l),
    attributes: we(a, u)
  }));
}, cy = (i) => i.reduce((e, t) => {
  const s = Se(t);
  s.schemeIdUri && (s.schemeIdUri = s.schemeIdUri.toLowerCase());
  const r = ly[s.schemeIdUri];
  if (r) {
    e[r] = {
      attributes: s
    };
    const n = me(t, "cenc:pssh")[0];
    if (n) {
      const a = Zs(n);
      e[r].pssh = a && Z0(a);
    }
  }
  return e;
}, {}), dy = (i) => {
  if (i.schemeIdUri === "urn:scte:dash:cc:cea-608:2015")
    return (typeof i.value != "string" ? [] : i.value.split(";")).map((t) => {
      let s, r;
      return r = t, /^CC\d=/.test(t) ? [s, r] = t.split("=") : /^CC\d$/.test(t) && (s = t), {
        channel: s,
        language: r
      };
    });
  if (i.schemeIdUri === "urn:scte:dash:cc:cea-708:2015")
    return (typeof i.value != "string" ? [] : i.value.split(";")).map((t) => {
      const s = {
        // service or channel number 1-63
        channel: void 0,
        // language is a 3ALPHA per ISO 639.2/B
        // field is required
        language: void 0,
        // BIT 1/0 or ?
        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown
        aspectRatio: 1,
        // BIT 1/0
        // easy reader flag indicated the text is tailed to the needs of beginning readers
        // default 0, or off
        easyReader: 0,
        // BIT 1/0
        // If 3d metadata is present (CEA-708.1) then 1
        // default 0
        "3D": 0
      };
      if (/=/.test(t)) {
        const [r, n = ""] = t.split("=");
        s.channel = r, s.language = t, n.split(",").forEach((a) => {
          const [l, u] = a.split(":");
          l === "lang" ? s.language = u : l === "er" ? s.easyReader = Number(u) : l === "war" ? s.aspectRatio = Number(u) : l === "3D" && (s["3D"] = Number(u));
        });
      } else
        s.language = t;
      return s.channel && (s.channel = "SERVICE" + s.channel), s;
    });
}, hy = (i) => zi(me(i.node, "EventStream").map((e) => {
  const t = Se(e), s = t.schemeIdUri;
  return me(e, "Event").map((r) => {
    const n = Se(r), a = n.presentationTime || 0, l = t.timescale || 1, u = n.duration || 0, f = a / l + i.attributes.start;
    return {
      schemeIdUri: s,
      value: t.value,
      id: n.id,
      start: f,
      end: f + u / l,
      messageData: Zs(r) || n.messageData,
      contentEncoding: t.contentEncoding,
      presentationTimeOffset: t.presentationTimeOffset || 0
    };
  });
})), fy = (i, e, t) => (s) => {
  const r = Se(s), n = bn(e, me(s, "BaseURL")), a = me(s, "Role")[0], l = {
    role: Se(a)
  };
  let u = we(i, r, l);
  const f = me(s, "Accessibility")[0], m = dy(Se(f));
  m && (u = we(u, {
    captionServices: m
  }));
  const v = me(s, "Label")[0];
  if (v && v.childNodes.length) {
    const w = v.childNodes[0].nodeValue.trim();
    u = we(u, {
      label: w
    });
  }
  const b = cy(me(s, "ContentProtection"));
  Object.keys(b).length && (u = we(u, {
    contentProtection: b
  }));
  const S = ko(s), y = me(s, "Representation"), A = we(t, S);
  return zi(y.map(uy(u, n, A)));
}, py = (i, e) => (t, s) => {
  const r = bn(e, me(t.node, "BaseURL")), n = we(i, {
    periodStart: t.attributes.start
  });
  typeof t.attributes.duration == "number" && (n.periodDuration = t.attributes.duration);
  const a = me(t.node, "AdaptationSet"), l = ko(t.node);
  return zi(a.map(fy(n, r, l)));
}, my = (i, e) => {
  if (i.length > 1 && e({
    type: "warn",
    message: "The MPD manifest should contain no more than one ContentSteering tag"
  }), !i.length)
    return null;
  const t = we({
    serverURL: Zs(i[0])
  }, Se(i[0]));
  return t.queryBeforeStart = t.queryBeforeStart === "true", t;
}, gy = ({
  attributes: i,
  priorPeriodAttributes: e,
  mpdType: t
}) => typeof i.start == "number" ? i.start : e && typeof e.start == "number" && typeof e.duration == "number" ? e.start + e.duration : !e && t === "static" ? 0 : null, vy = (i, e = {}) => {
  const {
    manifestUri: t = "",
    NOW: s = Date.now(),
    clientOffset: r = 0,
    // TODO: For now, we are expecting an eventHandler callback function
    // to be passed into the mpd parser as an option.
    // In the future, we should enable stream parsing by using the Stream class from vhs-utils.
    // This will support new features including a standardized event handler.
    // See the m3u8 parser for examples of how stream parsing is currently used for HLS parsing.
    // https://github.com/videojs/vhs-utils/blob/88d6e10c631e57a5af02c5a62bc7376cd456b4f5/src/stream.js#L9
    eventHandler: n = function() {
    }
  } = e, a = me(i, "Period");
  if (!a.length)
    throw new Error(Gi.INVALID_NUMBER_OF_PERIOD);
  const l = me(i, "Location"), u = Se(i), f = bn([{
    baseUrl: t
  }], me(i, "BaseURL")), m = me(i, "ContentSteering");
  u.type = u.type || "static", u.sourceDuration = u.mediaPresentationDuration || 0, u.NOW = s, u.clientOffset = r, l.length && (u.locations = l.map(Zs));
  const v = [];
  return a.forEach((b, S) => {
    const y = Se(b), A = v[S - 1];
    y.start = gy({
      attributes: y,
      priorPeriodAttributes: A ? A.attributes : null,
      mpdType: u.type
    }), v.push({
      node: b,
      attributes: y
    });
  }), {
    locations: u.locations,
    contentSteeringInfo: my(m, n),
    // TODO: There are occurences where this `representationInfo` array contains undesired
    // duplicates. This generally occurs when there are multiple BaseURL nodes that are
    // direct children of the MPD node. When we attempt to resolve URLs from a combination of the
    // parent BaseURL and a child BaseURL, and the value does not resolve,
    // we end up returning the child BaseURL multiple times.
    // We need to determine a way to remove these duplicates in a safe way.
    // See: https://github.com/videojs/mpd-parser/pull/17#discussion_r162750527
    representationInfo: zi(v.map(py(u, f))),
    eventStream: zi(v.map(hy))
  };
}, Nd = (i) => {
  if (i === "")
    throw new Error(Gi.DASH_EMPTY_MANIFEST);
  const e = new Av();
  let t, s;
  try {
    t = e.parseFromString(i, "application/xml"), s = t && t.documentElement.tagName === "MPD" ? t.documentElement : null;
  } catch {
  }
  if (!s || s && s.getElementsByTagName("parsererror").length > 0)
    throw new Error(Gi.DASH_INVALID_XML);
  return s;
}, yy = (i) => {
  const e = me(i, "UTCTiming")[0];
  if (!e)
    return null;
  const t = Se(e);
  switch (t.schemeIdUri) {
    case "urn:mpeg:dash:utc:http-head:2014":
    case "urn:mpeg:dash:utc:http-head:2012":
      t.method = "HEAD";
      break;
    case "urn:mpeg:dash:utc:http-xsdate:2014":
    case "urn:mpeg:dash:utc:http-iso:2014":
    case "urn:mpeg:dash:utc:http-xsdate:2012":
    case "urn:mpeg:dash:utc:http-iso:2012":
      t.method = "GET";
      break;
    case "urn:mpeg:dash:utc:direct:2014":
    case "urn:mpeg:dash:utc:direct:2012":
      t.method = "DIRECT", t.value = Date.parse(t.value);
      break;
    case "urn:mpeg:dash:utc:http-ntp:2014":
    case "urn:mpeg:dash:utc:ntp:2014":
    case "urn:mpeg:dash:utc:sntp:2014":
    default:
      throw new Error(Gi.UNSUPPORTED_UTC_TIMING_SCHEME);
  }
  return t;
}, _y = (i, e = {}) => {
  const t = vy(Nd(i), e), s = ny(t.representationInfo);
  return Yv({
    dashPlaylists: s,
    locations: t.locations,
    contentSteering: t.contentSteeringInfo,
    sidxMapping: e.sidxMapping,
    previousManifest: e.previousManifest,
    eventStream: t.eventStream
  });
}, Ty = (i) => yy(Nd(i));
var Md = Math.pow(2, 32), by = function(i) {
  var e = new DataView(i.buffer, i.byteOffset, i.byteLength), t;
  return e.getBigUint64 ? (t = e.getBigUint64(0), t < Number.MAX_SAFE_INTEGER ? Number(t) : t) : e.getUint32(0) * Md + e.getUint32(4);
}, xy = {
  getUint64: by,
  MAX_UINT32: Md
}, qu = xy.getUint64, Sy = function(i) {
  var e = new DataView(i.buffer, i.byteOffset, i.byteLength), t = {
    version: i[0],
    flags: new Uint8Array(i.subarray(1, 4)),
    references: [],
    referenceId: e.getUint32(4),
    timescale: e.getUint32(8)
  }, s = 12;
  t.version === 0 ? (t.earliestPresentationTime = e.getUint32(s), t.firstOffset = e.getUint32(s + 4), s += 8) : (t.earliestPresentationTime = qu(i.subarray(s)), t.firstOffset = qu(i.subarray(s + 8)), s += 16), s += 2;
  var r = e.getUint16(s);
  for (s += 2; r > 0; s += 12, r--)
    t.references.push({
      referenceType: (i[s] & 128) >>> 7,
      referencedSize: e.getUint32(s) & 2147483647,
      subsegmentDuration: e.getUint32(s + 4),
      startsWithSap: !!(i[s + 8] & 128),
      sapType: (i[s + 8] & 112) >>> 4,
      sapDeltaTime: e.getUint32(s + 8) & 268435455
    });
  return t;
}, Ey = Sy;
const Cy = /* @__PURE__ */ Jt(Ey);
var wy = H([73, 68, 51]), Ay = function(e, t) {
  t === void 0 && (t = 0), e = H(e);
  var s = e[t + 5], r = e[t + 6] << 21 | e[t + 7] << 14 | e[t + 8] << 7 | e[t + 9], n = (s & 16) >> 4;
  return n ? r + 20 : r + 10;
}, Ps = function i(e, t) {
  return t === void 0 && (t = 0), e = H(e), e.length - t < 10 || !pe(e, wy, {
    offset: t
  }) ? t : (t += Ay(e, t), i(e, t));
}, $u = function(e) {
  return typeof e == "string" ? td(e) : e;
}, Dy = function(e) {
  return Array.isArray(e) ? e.map(function(t) {
    return $u(t);
  }) : [$u(e)];
}, ky = function i(e, t, s) {
  s === void 0 && (s = !1), t = Dy(t), e = H(e);
  var r = [];
  if (!t.length)
    return r;
  for (var n = 0; n < e.length; ) {
    var a = (e[n] << 24 | e[n + 1] << 16 | e[n + 2] << 8 | e[n + 3]) >>> 0, l = e.subarray(n + 4, n + 8);
    if (a === 0)
      break;
    var u = n + a;
    if (u > e.length) {
      if (s)
        break;
      u = e.length;
    }
    var f = e.subarray(n + 8, u);
    pe(l, t[0]) && (t.length === 1 ? r.push(f) : r.push.apply(r, i(f, t.slice(1), s))), n = u;
  }
  return r;
}, Or = {
  EBML: H([26, 69, 223, 163]),
  DocType: H([66, 130]),
  Segment: H([24, 83, 128, 103]),
  SegmentInfo: H([21, 73, 169, 102]),
  Tracks: H([22, 84, 174, 107]),
  Track: H([174]),
  TrackNumber: H([215]),
  DefaultDuration: H([35, 227, 131]),
  TrackEntry: H([174]),
  TrackType: H([131]),
  FlagDefault: H([136]),
  CodecID: H([134]),
  CodecPrivate: H([99, 162]),
  VideoTrack: H([224]),
  AudioTrack: H([225]),
  // Not used yet, but will be used for live webm/mkv
  // see https://www.matroska.org/technical/basics.html#block-structure
  // see https://www.matroska.org/technical/basics.html#simpleblock-structure
  Cluster: H([31, 67, 182, 117]),
  Timestamp: H([231]),
  TimestampScale: H([42, 215, 177]),
  BlockGroup: H([160]),
  BlockDuration: H([155]),
  Block: H([161]),
  SimpleBlock: H([163])
}, Ma = [128, 64, 32, 16, 8, 4, 2, 1], Iy = function(e) {
  for (var t = 1, s = 0; s < Ma.length && !(e & Ma[s]); s++)
    t++;
  return t;
}, Kr = function(e, t, s, r) {
  s === void 0 && (s = !0), r === void 0 && (r = !1);
  var n = Iy(e[t]), a = e.subarray(t, t + n);
  return s && (a = Array.prototype.slice.call(e, t, t + n), a[0] ^= Ma[n - 1]), {
    length: n,
    value: X0(a, {
      signed: r
    }),
    bytes: a
  };
}, Vu = function i(e) {
  return typeof e == "string" ? e.match(/.{1,2}/g).map(function(t) {
    return i(t);
  }) : typeof e == "number" ? K0(e) : e;
}, Py = function(e) {
  return Array.isArray(e) ? e.map(function(t) {
    return Vu(t);
  }) : [Vu(e)];
}, Ly = function i(e, t, s) {
  if (s >= t.length)
    return t.length;
  var r = Kr(t, s, !1);
  if (pe(e.bytes, r.bytes))
    return s;
  var n = Kr(t, s + r.length);
  return i(e, t, s + n.length + n.value + r.length);
}, Hu = function i(e, t) {
  t = Py(t), e = H(e);
  var s = [];
  if (!t.length)
    return s;
  for (var r = 0; r < e.length; ) {
    var n = Kr(e, r, !1), a = Kr(e, r + n.length), l = r + n.length + a.length;
    a.value === 127 && (a.value = Ly(n, e, l), a.value !== e.length && (a.value -= l));
    var u = l + a.value > e.length ? e.length : l + a.value, f = e.subarray(l, u);
    pe(t[0], n.bytes) && (t.length === 1 ? s.push(f) : s = s.concat(i(f, t.slice(1))));
    var m = n.length + a.length + f.length;
    r += m;
  }
  return s;
}, Oy = H([0, 0, 0, 1]), jy = H([0, 0, 1]), Ry = H([0, 0, 3]), Ny = function(e) {
  for (var t = [], s = 1; s < e.length - 2; )
    pe(e.subarray(s, s + 3), Ry) && (t.push(s + 2), s++), s++;
  if (t.length === 0)
    return e;
  var r = e.length - t.length, n = new Uint8Array(r), a = 0;
  for (s = 0; s < r; a++, s++)
    a === t[0] && (a++, t.shift()), n[s] = e[a];
  return n;
}, Bd = function(e, t, s, r) {
  r === void 0 && (r = 1 / 0), e = H(e), s = [].concat(s);
  for (var n = 0, a, l = 0; n < e.length && (l < r || a); ) {
    var u = void 0;
    if (pe(e.subarray(n), Oy) ? u = 4 : pe(e.subarray(n), jy) && (u = 3), !u) {
      n++;
      continue;
    }
    if (l++, a)
      return Ny(e.subarray(a, n));
    var f = void 0;
    t === "h264" ? f = e[n + u] & 31 : t === "h265" && (f = e[n + u] >> 1 & 63), s.indexOf(f) !== -1 && (a = n + u), n += u + (t === "h264" ? 1 : 2);
  }
  return e.subarray(0, 0);
}, My = function(e, t, s) {
  return Bd(e, "h264", t, s);
}, By = function(e, t, s) {
  return Bd(e, "h265", t, s);
}, je = {
  // "webm" string literal in hex
  webm: H([119, 101, 98, 109]),
  // "matroska" string literal in hex
  matroska: H([109, 97, 116, 114, 111, 115, 107, 97]),
  // "fLaC" string literal in hex
  flac: H([102, 76, 97, 67]),
  // "OggS" string literal in hex
  ogg: H([79, 103, 103, 83]),
  // ac-3 sync byte, also works for ec-3 as that is simply a codec
  // of ac-3
  ac3: H([11, 119]),
  // "RIFF" string literal in hex used for wav and avi
  riff: H([82, 73, 70, 70]),
  // "AVI" string literal in hex
  avi: H([65, 86, 73]),
  // "WAVE" string literal in hex
  wav: H([87, 65, 86, 69]),
  // "ftyp3g" string literal in hex
  "3gp": H([102, 116, 121, 112, 51, 103]),
  // "ftyp" string literal in hex
  mp4: H([102, 116, 121, 112]),
  // "styp" string literal in hex
  fmp4: H([115, 116, 121, 112]),
  // "ftypqt" string literal in hex
  mov: H([102, 116, 121, 112, 113, 116]),
  // moov string literal in hex
  moov: H([109, 111, 111, 118]),
  // moof string literal in hex
  moof: H([109, 111, 111, 102])
}, Wi = {
  aac: function(e) {
    var t = Ps(e);
    return pe(e, [255, 16], {
      offset: t,
      mask: [255, 22]
    });
  },
  mp3: function(e) {
    var t = Ps(e);
    return pe(e, [255, 2], {
      offset: t,
      mask: [255, 6]
    });
  },
  webm: function(e) {
    var t = Hu(e, [Or.EBML, Or.DocType])[0];
    return pe(t, je.webm);
  },
  mkv: function(e) {
    var t = Hu(e, [Or.EBML, Or.DocType])[0];
    return pe(t, je.matroska);
  },
  mp4: function(e) {
    if (Wi["3gp"](e) || Wi.mov(e))
      return !1;
    if (pe(e, je.mp4, {
      offset: 4
    }) || pe(e, je.fmp4, {
      offset: 4
    }) || pe(e, je.moof, {
      offset: 4
    }) || pe(e, je.moov, {
      offset: 4
    }))
      return !0;
  },
  mov: function(e) {
    return pe(e, je.mov, {
      offset: 4
    });
  },
  "3gp": function(e) {
    return pe(e, je["3gp"], {
      offset: 4
    });
  },
  ac3: function(e) {
    var t = Ps(e);
    return pe(e, je.ac3, {
      offset: t
    });
  },
  ts: function(e) {
    if (e.length < 189 && e.length >= 1)
      return e[0] === 71;
    for (var t = 0; t + 188 < e.length && t < 188; ) {
      if (e[t] === 71 && e[t + 188] === 71)
        return !0;
      t += 1;
    }
    return !1;
  },
  flac: function(e) {
    var t = Ps(e);
    return pe(e, je.flac, {
      offset: t
    });
  },
  ogg: function(e) {
    return pe(e, je.ogg);
  },
  avi: function(e) {
    return pe(e, je.riff) && pe(e, je.avi, {
      offset: 8
    });
  },
  wav: function(e) {
    return pe(e, je.riff) && pe(e, je.wav, {
      offset: 8
    });
  },
  h264: function(e) {
    return My(e, 7, 3).length;
  },
  h265: function(e) {
    return By(e, [32, 33], 3).length;
  }
}, Ba = Object.keys(Wi).filter(function(i) {
  return i !== "ts" && i !== "h264" && i !== "h265";
}).concat(["ts", "h264", "h265"]);
Ba.forEach(function(i) {
  var e = Wi[i];
  Wi[i] = function(t) {
    return e(H(t));
  };
});
var Fy = Wi, Io = function(e) {
  e = H(e);
  for (var t = 0; t < Ba.length; t++) {
    var s = Ba[t];
    if (Fy[s](e))
      return s;
  }
  return "";
}, Uy = function(e) {
  return ky(e, ["moof"]).length > 0;
}, Po = 9e4, Lo, Oo, xn, jo, Fd, Ud, qd;
Lo = function(i) {
  return i * Po;
};
Oo = function(i, e) {
  return i * e;
};
xn = function(i) {
  return i / Po;
};
jo = function(i, e) {
  return i / e;
};
Fd = function(i, e) {
  return Lo(jo(i, e));
};
Ud = function(i, e) {
  return Oo(xn(i), e);
};
qd = function(i, e, t) {
  return xn(t ? i : i - e);
};
var fi = {
  ONE_SECOND_IN_TS: Po,
  secondsToVideoTs: Lo,
  secondsToAudioTs: Oo,
  videoTsToSeconds: xn,
  audioTsToSeconds: jo,
  audioTsToVideoTs: Fd,
  videoTsToAudioTs: Ud,
  metadataTsToSeconds: qd
};
/**
 * @license
 * Video.js 8.12.0 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/main/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>
 */
var Fa = "8.12.0";
const Ot = {}, Xt = function(i, e) {
  return Ot[i] = Ot[i] || [], e && (Ot[i] = Ot[i].concat(e)), Ot[i];
}, qy = function(i, e) {
  Xt(i, e);
}, $d = function(i, e) {
  const t = Xt(i).indexOf(e);
  return t <= -1 ? !1 : (Ot[i] = Ot[i].slice(), Ot[i].splice(t, 1), !0);
}, $y = function(i, e) {
  Xt(i, [].concat(e).map((t) => {
    const s = (...r) => ($d(i, s), t(...r));
    return s;
  }));
}, Yr = {
  prefixed: !0
}, Ur = [
  ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror", "fullscreen"],
  // WebKit
  ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror", "-webkit-full-screen"]
], zu = Ur[0];
let Ls;
for (let i = 0; i < Ur.length; i++)
  if (Ur[i][1] in B) {
    Ls = Ur[i];
    break;
  }
if (Ls) {
  for (let i = 0; i < Ls.length; i++)
    Yr[zu[i]] = Ls[i];
  Yr.prefixed = Ls[0] !== zu[0];
}
let Ue = [];
const Vy = (i, e, t) => (s, r, n) => {
  const a = e.levels[r], l = new RegExp(`^(${a})$`);
  let u = i;
  if (s !== "log" && n.unshift(s.toUpperCase() + ":"), t && (u = `%c${i}`, n.unshift(t)), n.unshift(u + ":"), Ue) {
    Ue.push([].concat(n));
    const m = Ue.length - 1e3;
    Ue.splice(0, m > 0 ? m : 0);
  }
  if (!E.console)
    return;
  let f = E.console[s];
  !f && s === "debug" && (f = E.console.info || E.console.log), !(!f || !a || !l.test(s)) && f[Array.isArray(n) ? "apply" : "call"](E.console, n);
};
function Ua(i, e = ":", t = "") {
  let s = "info", r;
  const n = function(...a) {
    r("log", s, a);
  };
  return r = Vy(i, n, t), n.createLogger = (a, l, u) => {
    const f = l !== void 0 ? l : e, m = u !== void 0 ? u : t, v = `${i} ${f} ${a}`;
    return Ua(v, f, m);
  }, n.createNewLogger = (a, l, u) => Ua(a, l, u), n.levels = {
    all: "debug|log|warn|error",
    off: "",
    debug: "debug|log|warn|error",
    info: "log|warn|error",
    warn: "warn|error",
    error: "error",
    DEFAULT: s
  }, n.level = (a) => {
    if (typeof a == "string") {
      if (!n.levels.hasOwnProperty(a))
        throw new Error(`"${a}" in not a valid log level`);
      s = a;
    }
    return s;
  }, n.history = () => Ue ? [].concat(Ue) : [], n.history.filter = (a) => (Ue || []).filter((l) => new RegExp(`.*${a}.*`).test(l[0])), n.history.clear = () => {
    Ue && (Ue.length = 0);
  }, n.history.disable = () => {
    Ue !== null && (Ue.length = 0, Ue = null);
  }, n.history.enable = () => {
    Ue === null && (Ue = []);
  }, n.error = (...a) => r("error", s, a), n.warn = (...a) => r("warn", s, a), n.debug = (...a) => r("debug", s, a), n;
}
const J = Ua("VIDEOJS"), Vd = J.createLogger, Hy = Object.prototype.toString, Hd = function(i) {
  return Et(i) ? Object.keys(i) : [];
};
function Ri(i, e) {
  Hd(i).forEach((t) => e(i[t], t));
}
function zd(i, e, t = 0) {
  return Hd(i).reduce((s, r) => e(s, i[r], r), t);
}
function Et(i) {
  return !!i && typeof i == "object";
}
function Xi(i) {
  return Et(i) && Hy.call(i) === "[object Object]" && i.constructor === Object;
}
function le(...i) {
  const e = {};
  return i.forEach((t) => {
    t && Ri(t, (s, r) => {
      if (!Xi(s)) {
        e[r] = s;
        return;
      }
      Xi(e[r]) || (e[r] = {}), e[r] = le(e[r], s);
    });
  }), e;
}
function Gd(i = {}) {
  const e = [];
  for (const t in i)
    if (i.hasOwnProperty(t)) {
      const s = i[t];
      e.push(s);
    }
  return e;
}
function Sn(i, e, t, s = !0) {
  const r = (a) => Object.defineProperty(i, e, {
    value: a,
    enumerable: !0,
    writable: !0
  }), n = {
    configurable: !0,
    enumerable: !0,
    get() {
      const a = t();
      return r(a), a;
    }
  };
  return s && (n.set = r), Object.defineProperty(i, e, n);
}
var zy = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  each: Ri,
  reduce: zd,
  isObject: Et,
  isPlain: Xi,
  merge: le,
  values: Gd,
  defineLazyProperty: Sn
});
let Ro = !1, Wd = null, Ct = !1, Xd, Kd = !1, Ni = !1, Mi = !1, wt = !1, No = null, En = null, Yd = null, Qr = !1, Cn = !1, Jr = !1, wn = !1, qa = !1, $a = !1, Va = !1;
const Gs = !!(ts() && ("ontouchstart" in E || E.navigator.maxTouchPoints || E.DocumentTouch && E.document instanceof E.DocumentTouch)), Gt = E.navigator && E.navigator.userAgentData;
Gt && Gt.platform && Gt.brands && (Ct = Gt.platform === "Android", Ni = !!Gt.brands.find((i) => i.brand === "Microsoft Edge"), Mi = !!Gt.brands.find((i) => i.brand === "Chromium"), wt = !Ni && Mi, No = En = (Gt.brands.find((i) => i.brand === "Chromium") || {}).version || null, Cn = Gt.platform === "Windows");
if (!Mi) {
  const i = E.navigator && E.navigator.userAgent || "";
  Ro = /iPod/i.test(i), Wd = function() {
    const e = i.match(/OS (\d+)_/i);
    return e && e[1] ? e[1] : null;
  }(), Ct = /Android/i.test(i), Xd = function() {
    const e = i.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
    if (!e)
      return null;
    const t = e[1] && parseFloat(e[1]), s = e[2] && parseFloat(e[2]);
    return t && s ? parseFloat(e[1] + "." + e[2]) : t || null;
  }(), Kd = /Firefox/i.test(i), Ni = /Edg/i.test(i), Mi = /Chrome/i.test(i) || /CriOS/i.test(i), wt = !Ni && Mi, No = En = function() {
    const e = i.match(/(Chrome|CriOS)\/(\d+)/);
    return e && e[2] ? parseFloat(e[2]) : null;
  }(), Yd = function() {
    const e = /MSIE\s(\d+)\.\d/.exec(i);
    let t = e && parseFloat(e[1]);
    return !t && /Trident\/7.0/i.test(i) && /rv:11.0/.test(i) && (t = 11), t;
  }(), qa = /Tizen/i.test(i), $a = /Web0S/i.test(i), Va = qa || $a, Qr = /Safari/i.test(i) && !wt && !Ct && !Ni && !Va, Cn = /Windows/i.test(i), Jr = /iPad/i.test(i) || Qr && Gs && !/iPhone/i.test(i), wn = /iPhone/i.test(i) && !Jr;
}
const Be = wn || Jr || Ro, An = (Qr || Be) && !wt;
var Qd = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  get IS_IPOD() {
    return Ro;
  },
  get IOS_VERSION() {
    return Wd;
  },
  get IS_ANDROID() {
    return Ct;
  },
  get ANDROID_VERSION() {
    return Xd;
  },
  get IS_FIREFOX() {
    return Kd;
  },
  get IS_EDGE() {
    return Ni;
  },
  get IS_CHROMIUM() {
    return Mi;
  },
  get IS_CHROME() {
    return wt;
  },
  get CHROMIUM_VERSION() {
    return No;
  },
  get CHROME_VERSION() {
    return En;
  },
  get IE_VERSION() {
    return Yd;
  },
  get IS_SAFARI() {
    return Qr;
  },
  get IS_WINDOWS() {
    return Cn;
  },
  get IS_IPAD() {
    return Jr;
  },
  get IS_IPHONE() {
    return wn;
  },
  get IS_TIZEN() {
    return qa;
  },
  get IS_WEBOS() {
    return $a;
  },
  get IS_SMART_TV() {
    return Va;
  },
  TOUCH_ENABLED: Gs,
  IS_IOS: Be,
  IS_ANY_SAFARI: An
});
function Gu(i) {
  return typeof i == "string" && !!i.trim();
}
function Gy(i) {
  if (i.indexOf(" ") >= 0)
    throw new Error("class has illegal whitespace characters");
}
function ts() {
  return B === E.document;
}
function is(i) {
  return Et(i) && i.nodeType === 1;
}
function Jd() {
  try {
    return E.parent !== E.self;
  } catch {
    return !0;
  }
}
function Zd(i) {
  return function(e, t) {
    if (!Gu(e))
      return B[i](null);
    Gu(t) && (t = B.querySelector(t));
    const s = is(t) ? t : B;
    return s[i] && s[i](e);
  };
}
function Y(i = "div", e = {}, t = {}, s) {
  const r = B.createElement(i);
  return Object.getOwnPropertyNames(e).forEach(function(n) {
    const a = e[n];
    n === "textContent" ? ei(r, a) : (r[n] !== a || n === "tabIndex") && (r[n] = a);
  }), Object.getOwnPropertyNames(t).forEach(function(n) {
    r.setAttribute(n, t[n]);
  }), s && Mo(r, s), r;
}
function ei(i, e) {
  return typeof i.textContent > "u" ? i.innerText = e : i.textContent = e, i;
}
function Ha(i, e) {
  e.firstChild ? e.insertBefore(i, e.firstChild) : e.appendChild(i);
}
function Rs(i, e) {
  return Gy(e), i.classList.contains(e);
}
function gi(i, ...e) {
  return i.classList.add(...e.reduce((t, s) => t.concat(s.split(/\s+/)), [])), i;
}
function Dn(i, ...e) {
  return i ? (i.classList.remove(...e.reduce((t, s) => t.concat(s.split(/\s+/)), [])), i) : (J.warn("removeClass was called with an element that doesn't exist"), null);
}
function eh(i, e, t) {
  return typeof t == "function" && (t = t(i, e)), typeof t != "boolean" && (t = void 0), e.split(/\s+/).forEach((s) => i.classList.toggle(s, t)), i;
}
function th(i, e) {
  Object.getOwnPropertyNames(e).forEach(function(t) {
    const s = e[t];
    s === null || typeof s > "u" || s === !1 ? i.removeAttribute(t) : i.setAttribute(t, s === !0 ? "" : s);
  });
}
function Wt(i) {
  const e = {}, t = ["autoplay", "controls", "playsinline", "loop", "muted", "default", "defaultMuted"];
  if (i && i.attributes && i.attributes.length > 0) {
    const s = i.attributes;
    for (let r = s.length - 1; r >= 0; r--) {
      const n = s[r].name;
      let a = s[r].value;
      t.includes(n) && (a = a !== null), e[n] = a;
    }
  }
  return e;
}
function ih(i, e) {
  return i.getAttribute(e);
}
function Ki(i, e, t) {
  i.setAttribute(e, t);
}
function kn(i, e) {
  i.removeAttribute(e);
}
function sh() {
  B.body.focus(), B.onselectstart = function() {
    return !1;
  };
}
function rh() {
  B.onselectstart = function() {
    return !0;
  };
}
function Yi(i) {
  if (i && i.getBoundingClientRect && i.parentNode) {
    const e = i.getBoundingClientRect(), t = {};
    return ["bottom", "height", "left", "right", "top", "width"].forEach((s) => {
      e[s] !== void 0 && (t[s] = e[s]);
    }), t.height || (t.height = parseFloat(Qi(i, "height"))), t.width || (t.width = parseFloat(Qi(i, "width"))), t;
  }
}
function Ws(i) {
  if (!i || i && !i.offsetParent)
    return {
      left: 0,
      top: 0,
      width: 0,
      height: 0
    };
  const e = i.offsetWidth, t = i.offsetHeight;
  let s = 0, r = 0;
  for (; i.offsetParent && i !== B[Yr.fullscreenElement]; )
    s += i.offsetLeft, r += i.offsetTop, i = i.offsetParent;
  return {
    left: s,
    top: r,
    width: e,
    height: t
  };
}
function In(i, e) {
  const t = {
    x: 0,
    y: 0
  };
  if (Be) {
    let m = i;
    for (; m && m.nodeName.toLowerCase() !== "html"; ) {
      const v = Qi(m, "transform");
      if (/^matrix/.test(v)) {
        const b = v.slice(7, -1).split(/,\s/).map(Number);
        t.x += b[4], t.y += b[5];
      } else if (/^matrix3d/.test(v)) {
        const b = v.slice(9, -1).split(/,\s/).map(Number);
        t.x += b[12], t.y += b[13];
      }
      m = m.parentNode;
    }
  }
  const s = {}, r = Ws(e.target), n = Ws(i), a = n.width, l = n.height;
  let u = e.offsetY - (n.top - r.top), f = e.offsetX - (n.left - r.left);
  return e.changedTouches && (f = e.changedTouches[0].pageX - n.left, u = e.changedTouches[0].pageY + n.top, Be && (f -= t.x, u -= t.y)), s.y = 1 - Math.max(0, Math.min(1, u / l)), s.x = Math.max(0, Math.min(1, f / a)), s;
}
function nh(i) {
  return Et(i) && i.nodeType === 3;
}
function Pn(i) {
  for (; i.firstChild; )
    i.removeChild(i.firstChild);
  return i;
}
function ah(i) {
  return typeof i == "function" && (i = i()), (Array.isArray(i) ? i : [i]).map((e) => {
    if (typeof e == "function" && (e = e()), is(e) || nh(e))
      return e;
    if (typeof e == "string" && /\S/.test(e))
      return B.createTextNode(e);
  }).filter((e) => e);
}
function Mo(i, e) {
  return ah(e).forEach((t) => i.appendChild(t)), i;
}
function oh(i, e) {
  return Mo(Pn(i), e);
}
function Xs(i) {
  return i.button === void 0 && i.buttons === void 0 || i.button === 0 && i.buttons === void 0 || i.type === "mouseup" && i.button === 0 && i.buttons === 0 ? !0 : !(i.button !== 0 || i.buttons !== 1);
}
const Kt = Zd("querySelector"), lh = Zd("querySelectorAll");
function Qi(i, e) {
  if (!i || !e)
    return "";
  if (typeof E.getComputedStyle == "function") {
    let t;
    try {
      t = E.getComputedStyle(i);
    } catch {
      return "";
    }
    return t ? t.getPropertyValue(e) || t[e] : "";
  }
  return "";
}
function uh(i) {
  [...B.styleSheets].forEach((e) => {
    try {
      const t = [...e.cssRules].map((r) => r.cssText).join(""), s = B.createElement("style");
      s.textContent = t, i.document.head.appendChild(s);
    } catch {
      const s = B.createElement("link");
      s.rel = "stylesheet", s.type = e.type, s.media = e.media.mediaText, s.href = e.href, i.document.head.appendChild(s);
    }
  });
}
var ch = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  isReal: ts,
  isEl: is,
  isInFrame: Jd,
  createEl: Y,
  textContent: ei,
  prependTo: Ha,
  hasClass: Rs,
  addClass: gi,
  removeClass: Dn,
  toggleClass: eh,
  setAttributes: th,
  getAttributes: Wt,
  getAttribute: ih,
  setAttribute: Ki,
  removeAttribute: kn,
  blockTextSelection: sh,
  unblockTextSelection: rh,
  getBoundingClientRect: Yi,
  findPosition: Ws,
  getPointerPosition: In,
  isTextNode: nh,
  emptyEl: Pn,
  normalizeContent: ah,
  appendContent: Mo,
  insertContent: oh,
  isSingleLeftClick: Xs,
  $: Kt,
  $$: lh,
  computedStyle: Qi,
  copyStyleSheetsToWindow: uh
});
let dh = !1, za;
const Wy = function() {
  if (za.options.autoSetup === !1)
    return;
  const i = Array.prototype.slice.call(B.getElementsByTagName("video")), e = Array.prototype.slice.call(B.getElementsByTagName("audio")), t = Array.prototype.slice.call(B.getElementsByTagName("video-js")), s = i.concat(e, t);
  if (s && s.length > 0)
    for (let r = 0, n = s.length; r < n; r++) {
      const a = s[r];
      if (a && a.getAttribute)
        a.player === void 0 && a.getAttribute("data-setup") !== null && za(a);
      else {
        Ga(1);
        break;
      }
    }
  else
    dh || Ga(1);
};
function Ga(i, e) {
  ts() && (e && (za = e), E.setTimeout(Wy, i));
}
function Wa() {
  dh = !0, E.removeEventListener("load", Wa);
}
ts() && (B.readyState === "complete" ? Wa() : E.addEventListener("load", Wa));
const hh = function(i) {
  const e = B.createElement("style");
  return e.className = i, e;
}, fh = function(i, e) {
  i.styleSheet ? i.styleSheet.cssText = e : i.textContent = e;
};
var Me = /* @__PURE__ */ new WeakMap();
const Xy = 3;
let Ky = Xy;
function ht() {
  return Ky++;
}
function Wu(i, e) {
  if (!Me.has(i))
    return;
  const t = Me.get(i);
  t.handlers[e].length === 0 && (delete t.handlers[e], i.removeEventListener ? i.removeEventListener(e, t.dispatcher, !1) : i.detachEvent && i.detachEvent("on" + e, t.dispatcher)), Object.getOwnPropertyNames(t.handlers).length <= 0 && (delete t.handlers, delete t.dispatcher, delete t.disabled), Object.getOwnPropertyNames(t).length === 0 && Me.delete(i);
}
function Bo(i, e, t, s) {
  t.forEach(function(r) {
    i(e, r, s);
  });
}
function Ln(i) {
  if (i.fixed_)
    return i;
  function e() {
    return !0;
  }
  function t() {
    return !1;
  }
  if (!i || !i.isPropagationStopped || !i.isImmediatePropagationStopped) {
    const s = i || E.event;
    i = {};
    for (const r in s)
      r !== "layerX" && r !== "layerY" && r !== "keyLocation" && r !== "webkitMovementX" && r !== "webkitMovementY" && r !== "path" && (r === "returnValue" && s.preventDefault || (i[r] = s[r]));
    if (i.target || (i.target = i.srcElement || B), i.relatedTarget || (i.relatedTarget = i.fromElement === i.target ? i.toElement : i.fromElement), i.preventDefault = function() {
      s.preventDefault && s.preventDefault(), i.returnValue = !1, s.returnValue = !1, i.defaultPrevented = !0;
    }, i.defaultPrevented = !1, i.stopPropagation = function() {
      s.stopPropagation && s.stopPropagation(), i.cancelBubble = !0, s.cancelBubble = !0, i.isPropagationStopped = e;
    }, i.isPropagationStopped = t, i.stopImmediatePropagation = function() {
      s.stopImmediatePropagation && s.stopImmediatePropagation(), i.isImmediatePropagationStopped = e, i.stopPropagation();
    }, i.isImmediatePropagationStopped = t, i.clientX !== null && i.clientX !== void 0) {
      const r = B.documentElement, n = B.body;
      i.pageX = i.clientX + (r && r.scrollLeft || n && n.scrollLeft || 0) - (r && r.clientLeft || n && n.clientLeft || 0), i.pageY = i.clientY + (r && r.scrollTop || n && n.scrollTop || 0) - (r && r.clientTop || n && n.clientTop || 0);
    }
    i.which = i.charCode || i.keyCode, i.button !== null && i.button !== void 0 && (i.button = i.button & 1 ? 0 : i.button & 4 ? 1 : i.button & 2 ? 2 : 0);
  }
  return i.fixed_ = !0, i;
}
let jr;
const Yy = function() {
  if (typeof jr != "boolean") {
    jr = !1;
    try {
      const i = Object.defineProperty({}, "passive", {
        get() {
          jr = !0;
        }
      });
      E.addEventListener("test", null, i), E.removeEventListener("test", null, i);
    } catch {
    }
  }
  return jr;
}, Qy = ["touchstart", "touchmove"];
function Ze(i, e, t) {
  if (Array.isArray(e))
    return Bo(Ze, i, e, t);
  Me.has(i) || Me.set(i, {});
  const s = Me.get(i);
  if (s.handlers || (s.handlers = {}), s.handlers[e] || (s.handlers[e] = []), t.guid || (t.guid = ht()), s.handlers[e].push(t), s.dispatcher || (s.disabled = !1, s.dispatcher = function(r, n) {
    if (s.disabled)
      return;
    r = Ln(r);
    const a = s.handlers[r.type];
    if (a) {
      const l = a.slice(0);
      for (let u = 0, f = l.length; u < f && !r.isImmediatePropagationStopped(); u++)
        try {
          l[u].call(i, r, n);
        } catch (m) {
          J.error(m);
        }
    }
  }), s.handlers[e].length === 1)
    if (i.addEventListener) {
      let r = !1;
      Yy() && Qy.indexOf(e) > -1 && (r = {
        passive: !0
      }), i.addEventListener(e, s.dispatcher, r);
    } else
      i.attachEvent && i.attachEvent("on" + e, s.dispatcher);
}
function Pe(i, e, t) {
  if (!Me.has(i))
    return;
  const s = Me.get(i);
  if (!s.handlers)
    return;
  if (Array.isArray(e))
    return Bo(Pe, i, e, t);
  const r = function(a, l) {
    s.handlers[l] = [], Wu(a, l);
  };
  if (e === void 0) {
    for (const a in s.handlers)
      Object.prototype.hasOwnProperty.call(s.handlers || {}, a) && r(i, a);
    return;
  }
  const n = s.handlers[e];
  if (n) {
    if (!t) {
      r(i, e);
      return;
    }
    if (t.guid)
      for (let a = 0; a < n.length; a++)
        n[a].guid === t.guid && n.splice(a--, 1);
    Wu(i, e);
  }
}
function ss(i, e, t) {
  const s = Me.has(i) ? Me.get(i) : {}, r = i.parentNode || i.ownerDocument;
  if (typeof e == "string" ? e = {
    type: e,
    target: i
  } : e.target || (e.target = i), e = Ln(e), s.dispatcher && s.dispatcher.call(i, e, t), r && !e.isPropagationStopped() && e.bubbles === !0)
    ss.call(null, r, e, t);
  else if (!r && !e.defaultPrevented && e.target && e.target[e.type]) {
    Me.has(e.target) || Me.set(e.target, {});
    const n = Me.get(e.target);
    e.target[e.type] && (n.disabled = !0, typeof e.target[e.type] == "function" && e.target[e.type](), n.disabled = !1);
  }
  return !e.defaultPrevented;
}
function On(i, e, t) {
  if (Array.isArray(e))
    return Bo(On, i, e, t);
  const s = function() {
    Pe(i, e, s), t.apply(this, arguments);
  };
  s.guid = t.guid = t.guid || ht(), Ze(i, e, s);
}
function Fo(i, e, t) {
  const s = function() {
    Pe(i, e, s), t.apply(this, arguments);
  };
  s.guid = t.guid = t.guid || ht(), Ze(i, e, s);
}
var Jy = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  fixEvent: Ln,
  on: Ze,
  off: Pe,
  trigger: ss,
  one: On,
  any: Fo
});
const rt = 30, ue = function(i, e, t) {
  e.guid || (e.guid = ht());
  const s = e.bind(i);
  return s.guid = t ? t + "_" + e.guid : e.guid, s;
}, At = function(i, e) {
  let t = E.performance.now();
  return function(...r) {
    const n = E.performance.now();
    n - t >= e && (i(...r), t = n);
  };
}, ph = function(i, e, t, s = E) {
  let r;
  const n = () => {
    s.clearTimeout(r), r = null;
  }, a = function() {
    const l = this, u = arguments;
    let f = function() {
      r = null, f = null, t || i.apply(l, u);
    };
    !r && t && i.apply(l, u), s.clearTimeout(r), r = s.setTimeout(f, e);
  };
  return a.cancel = n, a;
};
var Zy = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  UPDATE_REFRESH_INTERVAL: rt,
  bind_: ue,
  throttle: At,
  debounce: ph
});
let Es;
class nt {
  /**
   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
   * function that will get called when an event with a certain name gets triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to call with `EventTarget`s
   */
  on(e, t) {
    const s = this.addEventListener;
    this.addEventListener = () => {
    }, Ze(this, e, t), this.addEventListener = s;
  }
  /**
   * Removes an `event listener` for a specific event from an instance of `EventTarget`.
   * This makes it so that the `event listener` will no longer get called when the
   * named event happens.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to remove.
   */
  off(e, t) {
    Pe(this, e, t);
  }
  /**
   * This function will add an `event listener` that gets triggered only once. After the
   * first trigger it will get removed. This is like adding an `event listener`
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */
  one(e, t) {
    const s = this.addEventListener;
    this.addEventListener = () => {
    }, On(this, e, t), this.addEventListener = s;
  }
  /**
   * This function will add an `event listener` that gets triggered only once and is
   * removed from all events. This is like adding an array of `event listener`s
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the
   * first time it is triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */
  any(e, t) {
    const s = this.addEventListener;
    this.addEventListener = () => {
    }, Fo(this, e, t), this.addEventListener = s;
  }
  /**
   * This function causes an event to happen. This will then cause any `event listeners`
   * that are waiting for that event, to get called. If there are no `event listeners`
   * for an event then nothing will happen.
   *
   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
   * Trigger will also call the `on` + `uppercaseEventName` function.
   *
   * Example:
   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
   * `onClick` if it exists.
   *
   * @param {string|EventTarget~Event|Object} event
   *        The name of the event, an `Event`, or an object with a key of type set to
   *        an event name.
   */
  trigger(e) {
    const t = e.type || e;
    typeof e == "string" && (e = {
      type: t
    }), e = Ln(e), this.allowedEvents_[t] && this["on" + t] && this["on" + t](e), ss(this, e);
  }
  queueTrigger(e) {
    Es || (Es = /* @__PURE__ */ new Map());
    const t = e.type || e;
    let s = Es.get(this);
    s || (s = /* @__PURE__ */ new Map(), Es.set(this, s));
    const r = s.get(t);
    s.delete(t), E.clearTimeout(r);
    const n = E.setTimeout(() => {
      s.delete(t), s.size === 0 && (s = null, Es.delete(this)), this.trigger(e);
    }, 0);
    s.set(t, n);
  }
}
nt.prototype.allowedEvents_ = {};
nt.prototype.addEventListener = nt.prototype.on;
nt.prototype.removeEventListener = nt.prototype.off;
nt.prototype.dispatchEvent = nt.prototype.trigger;
const jn = (i) => typeof i.name == "function" ? i.name() : typeof i.name == "string" ? i.name : i.name_ ? i.name_ : i.constructor && i.constructor.name ? i.constructor.name : typeof i, Nt = (i) => i instanceof nt || !!i.eventBusEl_ && ["on", "one", "off", "trigger"].every((e) => typeof i[e] == "function"), e_ = (i, e) => {
  Nt(i) ? e() : (i.eventedCallbacks || (i.eventedCallbacks = []), i.eventedCallbacks.push(e));
}, Xa = (i) => (
  // The regex here verifies that the `type` contains at least one non-
  // whitespace character.
  typeof i == "string" && /\S/.test(i) || Array.isArray(i) && !!i.length
), Zr = (i, e, t) => {
  if (!i || !i.nodeName && !Nt(i))
    throw new Error(`Invalid target for ${jn(e)}#${t}; must be a DOM node or evented object.`);
}, mh = (i, e, t) => {
  if (!Xa(i))
    throw new Error(`Invalid event type for ${jn(e)}#${t}; must be a non-empty string or array.`);
}, gh = (i, e, t) => {
  if (typeof i != "function")
    throw new Error(`Invalid listener for ${jn(e)}#${t}; must be a function.`);
}, ga = (i, e, t) => {
  const s = e.length < 3 || e[0] === i || e[0] === i.eventBusEl_;
  let r, n, a;
  return s ? (r = i.eventBusEl_, e.length >= 3 && e.shift(), [n, a] = e) : [r, n, a] = e, Zr(r, i, t), mh(n, i, t), gh(a, i, t), a = ue(i, a), {
    isTargetingSelf: s,
    target: r,
    type: n,
    listener: a
  };
}, ci = (i, e, t, s) => {
  Zr(i, i, e), i.nodeName ? Jy[e](i, t, s) : i[e](t, s);
}, t_ = {
  /**
   * Add a listener to an event (or events) on this object or another evented
   * object.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */
  on(...i) {
    const {
      isTargetingSelf: e,
      target: t,
      type: s,
      listener: r
    } = ga(this, i, "on");
    if (ci(t, "on", s, r), !e) {
      const n = () => this.off(t, s, r);
      n.guid = r.guid;
      const a = () => this.off("dispose", n);
      a.guid = r.guid, ci(this, "on", "dispose", n), ci(t, "on", "dispose", a);
    }
  },
  /**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will be called once per event and then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */
  one(...i) {
    const {
      isTargetingSelf: e,
      target: t,
      type: s,
      listener: r
    } = ga(this, i, "one");
    if (e)
      ci(t, "one", s, r);
    else {
      const n = (...a) => {
        this.off(t, s, n), r.apply(null, a);
      };
      n.guid = r.guid, ci(t, "one", s, n);
    }
  },
  /**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will only be called once for the first event that is triggered
   * then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */
  any(...i) {
    const {
      isTargetingSelf: e,
      target: t,
      type: s,
      listener: r
    } = ga(this, i, "any");
    if (e)
      ci(t, "any", s, r);
    else {
      const n = (...a) => {
        this.off(t, s, n), r.apply(null, a);
      };
      n.guid = r.guid, ci(t, "any", s, n);
    }
  },
  /**
   * Removes listener(s) from event(s) on an evented object.
   *
   * @param  {string|Array|Element|Object} [targetOrType]
   *         If this is a string or array, it represents the event type(s).
   *
   *         Another evented object can be passed here instead, in which case
   *         ALL 3 arguments are _required_.
   *
   * @param  {string|Array|Function} [typeOrListener]
   *         If the first argument was a string or array, this may be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function; otherwise, _all_ listeners bound to the
   *         event type(s) will be removed.
   */
  off(i, e, t) {
    if (!i || Xa(i))
      Pe(this.eventBusEl_, i, e);
    else {
      const s = i, r = e;
      Zr(s, this, "off"), mh(r, this, "off"), gh(t, this, "off"), t = ue(this, t), this.off("dispose", t), s.nodeName ? (Pe(s, r, t), Pe(s, "dispose", t)) : Nt(s) && (s.off(r, t), s.off("dispose", t));
    }
  },
  /**
   * Fire an event on this evented object, causing its listeners to be called.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash]
   *          An additional object to pass along to listeners.
   *
   * @return {boolean}
   *          Whether or not the default behavior was prevented.
   */
  trigger(i, e) {
    Zr(this.eventBusEl_, this, "trigger");
    const t = i && typeof i != "string" ? i.type : i;
    if (!Xa(t))
      throw new Error(`Invalid event type for ${jn(this)}#trigger; must be a non-empty string or object with a type key that has a non-empty value.`);
    return ss(this.eventBusEl_, i, e);
  }
};
function Uo(i, e = {}) {
  const {
    eventBusKey: t
  } = e;
  if (t) {
    if (!i[t].nodeName)
      throw new Error(`The eventBusKey "${t}" does not refer to an element.`);
    i.eventBusEl_ = i[t];
  } else
    i.eventBusEl_ = Y("span", {
      className: "vjs-event-bus"
    });
  return Object.assign(i, t_), i.eventedCallbacks && i.eventedCallbacks.forEach((s) => {
    s();
  }), i.on("dispose", () => {
    i.off(), [i, i.el_, i.eventBusEl_].forEach(function(s) {
      s && Me.has(s) && Me.delete(s);
    }), E.setTimeout(() => {
      i.eventBusEl_ = null;
    }, 0);
  }), i;
}
const i_ = {
  /**
   * A hash containing arbitrary keys and values representing the state of
   * the object.
   *
   * @type {Object}
   */
  state: {},
  /**
   * Set the state of an object by mutating its
   * {@link module:stateful~StatefulMixin.state|state} object in place.
   *
   * @fires   module:stateful~StatefulMixin#statechanged
   * @param   {Object|Function} stateUpdates
   *          A new set of properties to shallow-merge into the plugin state.
   *          Can be a plain object or a function returning a plain object.
   *
   * @return {Object|undefined}
   *          An object containing changes that occurred. If no changes
   *          occurred, returns `undefined`.
   */
  setState(i) {
    typeof i == "function" && (i = i());
    let e;
    return Ri(i, (t, s) => {
      this.state[s] !== t && (e = e || {}, e[s] = {
        from: this.state[s],
        to: t
      }), this.state[s] = t;
    }), e && Nt(this) && this.trigger({
      changes: e,
      type: "statechanged"
    }), e;
  }
};
function vh(i, e) {
  return Object.assign(i, i_), i.state = Object.assign({}, i.state, e), typeof i.handleStateChanged == "function" && Nt(i) && i.on("statechanged", i.handleStateChanged), i;
}
const Ns = function(i) {
  return typeof i != "string" ? i : i.replace(/./, (e) => e.toLowerCase());
}, ye = function(i) {
  return typeof i != "string" ? i : i.replace(/./, (e) => e.toUpperCase());
}, yh = function(i, e) {
  return ye(i) === ye(e);
};
var s_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  toLowerCase: Ns,
  toTitleCase: ye,
  titleCaseEquals: yh
});
class N {
  /**
   * A callback that is called when a component is ready. Does not have any
   * parameters and any callback value will be ignored.
   *
   * @callback ReadyCallback
   * @this Component
   */
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of component options.
   *
   * @param {Object[]} [options.children]
   *        An array of children objects to initialize this component with. Children objects have
   *        a name property that will be used if more than one component of the same type needs to be
   *        added.
   *
   * @param  {string} [options.className]
   *         A class or space separated list of classes to add the component
   *
   * @param {ReadyCallback} [ready]
   *        Function that gets called when the `Component` is ready.
   */
  constructor(e, t, s) {
    if (!e && this.play ? this.player_ = e = this : this.player_ = e, this.isDisposed_ = !1, this.parentComponent_ = null, this.options_ = le({}, this.options_), t = this.options_ = le(this.options_, t), this.id_ = t.id || t.el && t.el.id, !this.id_) {
      const r = e && e.id && e.id() || "no_player";
      this.id_ = `${r}_component_${ht()}`;
    }
    this.name_ = t.name || null, t.el ? this.el_ = t.el : t.createEl !== !1 && (this.el_ = this.createEl()), t.className && this.el_ && t.className.split(" ").forEach((r) => this.addClass(r)), ["on", "off", "one", "any", "trigger"].forEach((r) => {
      this[r] = void 0;
    }), t.evented !== !1 && (Uo(this, {
      eventBusKey: this.el_ ? "el_" : null
    }), this.handleLanguagechange = this.handleLanguagechange.bind(this), this.on(this.player_, "languagechange", this.handleLanguagechange)), vh(this, this.constructor.defaultState), this.children_ = [], this.childIndex_ = {}, this.childNameIndex_ = {}, this.setTimeoutIds_ = /* @__PURE__ */ new Set(), this.setIntervalIds_ = /* @__PURE__ */ new Set(), this.rafIds_ = /* @__PURE__ */ new Set(), this.namedRafs_ = /* @__PURE__ */ new Map(), this.clearingTimersOnDispose_ = !1, t.initChildren !== !1 && this.initChildren(), this.ready(s), t.reportTouchActivity !== !1 && this.enableTouchActivity();
  }
  // `on`, `off`, `one`, `any` and `trigger` are here so tsc includes them in definitions.
  // They are replaced or removed in the constructor
  /**
   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
   * function that will get called when an event with a certain name gets triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to call with `EventTarget`s
   */
  on(e, t) {
  }
  /**
   * Removes an `event listener` for a specific event from an instance of `EventTarget`.
   * This makes it so that the `event listener` will no longer get called when the
   * named event happens.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} [fn]
   *        The function to remove. If not specified, all listeners managed by Video.js will be removed.
   */
  off(e, t) {
  }
  /**
   * This function will add an `event listener` that gets triggered only once. After the
   * first trigger it will get removed. This is like adding an `event listener`
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */
  one(e, t) {
  }
  /**
   * This function will add an `event listener` that gets triggered only once and is
   * removed from all events. This is like adding an array of `event listener`s
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the
   * first time it is triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */
  any(e, t) {
  }
  /**
   * This function causes an event to happen. This will then cause any `event listeners`
   * that are waiting for that event, to get called. If there are no `event listeners`
   * for an event then nothing will happen.
   *
   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
   * Trigger will also call the `on` + `uppercaseEventName` function.
   *
   * Example:
   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
   * `onClick` if it exists.
   *
   * @param {string|Event|Object} event
   *        The name of the event, an `Event`, or an object with a key of type set to
   *        an event name.
   *
   * @param {Object} [hash]
   *        Optionally extra argument to pass through to an event listener
   */
  trigger(e, t) {
  }
  /**
   * Dispose of the `Component` and all child components.
   *
   * @fires Component#dispose
   *
   * @param {Object} options
   * @param {Element} options.originalEl element with which to replace player element
   */
  dispose(e = {}) {
    if (!this.isDisposed_) {
      if (this.readyQueue_ && (this.readyQueue_.length = 0), this.trigger({
        type: "dispose",
        bubbles: !1
      }), this.isDisposed_ = !0, this.children_)
        for (let t = this.children_.length - 1; t >= 0; t--)
          this.children_[t].dispose && this.children_[t].dispose();
      this.children_ = null, this.childIndex_ = null, this.childNameIndex_ = null, this.parentComponent_ = null, this.el_ && (this.el_.parentNode && (e.restoreEl ? this.el_.parentNode.replaceChild(e.restoreEl, this.el_) : this.el_.parentNode.removeChild(this.el_)), this.el_ = null), this.player_ = null;
    }
  }
  /**
   * Determine whether or not this component has been disposed.
   *
   * @return {boolean}
   *         If the component has been disposed, will be `true`. Otherwise, `false`.
   */
  isDisposed() {
    return !!this.isDisposed_;
  }
  /**
   * Return the {@link Player} that the `Component` has attached to.
   *
   * @return { import('./player').default }
   *         The player that this `Component` has attached to.
   */
  player() {
    return this.player_;
  }
  /**
   * Deep merge of options objects with new options.
   * > Note: When both `obj` and `options` contain properties whose values are objects.
   *         The two properties get merged using {@link module:obj.merge}
   *
   * @param {Object} obj
   *        The object that contains new options.
   *
   * @return {Object}
   *         A new object of `this.options_` and `obj` merged together.
   */
  options(e) {
    return e ? (this.options_ = le(this.options_, e), this.options_) : this.options_;
  }
  /**
   * Get the `Component`s DOM element
   *
   * @return {Element}
   *         The DOM element for this `Component`.
   */
  el() {
    return this.el_;
  }
  /**
   * Create the `Component`s DOM element.
   *
   * @param {string} [tagName]
   *        Element's DOM node type. e.g. 'div'
   *
   * @param {Object} [properties]
   *        An object of properties that should be set.
   *
   * @param {Object} [attributes]
   *        An object of attributes that should be set.
   *
   * @return {Element}
   *         The element that gets created.
   */
  createEl(e, t, s) {
    return Y(e, t, s);
  }
  /**
   * Localize a string given the string in english.
   *
   * If tokens are provided, it'll try and run a simple token replacement on the provided string.
   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.
   *
   * If a `defaultValue` is provided, it'll use that over `string`,
   * if a value isn't found in provided language files.
   * This is useful if you want to have a descriptive key for token replacement
   * but have a succinct localized string and not require `en.json` to be included.
   *
   * Currently, it is used for the progress bar timing.
   * ```js
   * {
   *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
   * }
   * ```
   * It is then used like so:
   * ```js
   * this.localize('progress bar timing: currentTime={1} duration{2}',
   *               [this.player_.currentTime(), this.player_.duration()],
   *               '{1} of {2}');
   * ```
   *
   * Which outputs something like: `01:23 of 24:56`.
   *
   *
   * @param {string} string
   *        The string to localize and the key to lookup in the language files.
   * @param {string[]} [tokens]
   *        If the current item has token replacements, provide the tokens here.
   * @param {string} [defaultValue]
   *        Defaults to `string`. Can be a default value to use for token replacement
   *        if the lookup key is needed to be separate.
   *
   * @return {string}
   *         The localized string or if no localization exists the english string.
   */
  localize(e, t, s = e) {
    const r = this.player_.language && this.player_.language(), n = this.player_.languages && this.player_.languages(), a = n && n[r], l = r && r.split("-")[0], u = n && n[l];
    let f = s;
    return a && a[e] ? f = a[e] : u && u[e] && (f = u[e]), t && (f = f.replace(/\{(\d+)\}/g, function(m, v) {
      const b = t[v - 1];
      let S = b;
      return typeof b > "u" && (S = m), S;
    })), f;
  }
  /**
   * Handles language change for the player in components. Should be overridden by sub-components.
   *
   * @abstract
   */
  handleLanguagechange() {
  }
  /**
   * Return the `Component`s DOM element. This is where children get inserted.
   * This will usually be the the same as the element returned in {@link Component#el}.
   *
   * @return {Element}
   *         The content element for this `Component`.
   */
  contentEl() {
    return this.contentEl_ || this.el_;
  }
  /**
   * Get this `Component`s ID
   *
   * @return {string}
   *         The id of this `Component`
   */
  id() {
    return this.id_;
  }
  /**
   * Get the `Component`s name. The name gets used to reference the `Component`
   * and is set during registration.
   *
   * @return {string}
   *         The name of this `Component`.
   */
  name() {
    return this.name_;
  }
  /**
   * Get an array of all child components
   *
   * @return {Array}
   *         The children
   */
  children() {
    return this.children_;
  }
  /**
   * Returns the child `Component` with the given `id`.
   *
   * @param {string} id
   *        The id of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `id` or undefined.
   */
  getChildById(e) {
    return this.childIndex_[e];
  }
  /**
   * Returns the child `Component` with the given `name`.
   *
   * @param {string} name
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `name` or undefined.
   */
  getChild(e) {
    if (e)
      return this.childNameIndex_[e];
  }
  /**
   * Returns the descendant `Component` following the givent
   * descendant `names`. For instance ['foo', 'bar', 'baz'] would
   * try to get 'foo' on the current component, 'bar' on the 'foo'
   * component and 'baz' on the 'bar' component and return undefined
   * if any of those don't exist.
   *
   * @param {...string[]|...string} names
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The descendant `Component` following the given descendant
   *         `names` or undefined.
   */
  getDescendant(...e) {
    e = e.reduce((s, r) => s.concat(r), []);
    let t = this;
    for (let s = 0; s < e.length; s++)
      if (t = t.getChild(e[s]), !t || !t.getChild)
        return;
    return t;
  }
  /**
   * Adds an SVG icon element to another element or component.
   *
   * @param {string} iconName
   *        The name of icon. A list of all the icon names can be found at 'sandbox/svg-icons.html'
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on. Defaults to the current Component's element.
   *
   * @return {Element}
   *        The newly created icon element.
   */
  setIcon(e, t = this.el()) {
    if (!this.player_.options_.experimentalSvgIcons)
      return;
    const s = "http://www.w3.org/2000/svg", r = Y("span", {
      className: "vjs-icon-placeholder vjs-svg-icon"
    }, {
      "aria-hidden": "true"
    }), n = B.createElementNS(s, "svg");
    n.setAttributeNS(null, "viewBox", "0 0 512 512");
    const a = B.createElementNS(s, "use");
    return n.appendChild(a), a.setAttributeNS(null, "href", `#vjs-icon-${e}`), r.appendChild(n), this.iconIsSet_ ? t.replaceChild(r, t.querySelector(".vjs-icon-placeholder")) : t.appendChild(r), this.iconIsSet_ = !0, r;
  }
  /**
   * Add a child `Component` inside the current `Component`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @param {number} [index=this.children_.length]
   *        The index to attempt to add a child into.
   *
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   */
  addChild(e, t = {}, s = this.children_.length) {
    let r, n;
    if (typeof e == "string") {
      n = ye(e);
      const a = t.componentClass || n;
      t.name = n;
      const l = N.getComponent(a);
      if (!l)
        throw new Error(`Component ${a} does not exist`);
      if (typeof l != "function")
        return null;
      r = new l(this.player_ || this, t);
    } else
      r = e;
    if (r.parentComponent_ && r.parentComponent_.removeChild(r), this.children_.splice(s, 0, r), r.parentComponent_ = this, typeof r.id == "function" && (this.childIndex_[r.id()] = r), n = n || r.name && ye(r.name()), n && (this.childNameIndex_[n] = r, this.childNameIndex_[Ns(n)] = r), typeof r.el == "function" && r.el()) {
      let a = null;
      this.children_[s + 1] && (this.children_[s + 1].el_ ? a = this.children_[s + 1].el_ : is(this.children_[s + 1]) && (a = this.children_[s + 1])), this.contentEl().insertBefore(r.el(), a);
    }
    return r;
  }
  /**
   * Remove a child `Component` from this `Component`s list of children. Also removes
   * the child `Component`s element from this `Component`s element.
   *
   * @param {Component} component
   *        The child `Component` to remove.
   */
  removeChild(e) {
    if (typeof e == "string" && (e = this.getChild(e)), !e || !this.children_)
      return;
    let t = !1;
    for (let r = this.children_.length - 1; r >= 0; r--)
      if (this.children_[r] === e) {
        t = !0, this.children_.splice(r, 1);
        break;
      }
    if (!t)
      return;
    e.parentComponent_ = null, this.childIndex_[e.id()] = null, this.childNameIndex_[ye(e.name())] = null, this.childNameIndex_[Ns(e.name())] = null;
    const s = e.el();
    s && s.parentNode === this.contentEl() && this.contentEl().removeChild(e.el());
  }
  /**
   * Add and initialize default child `Component`s based upon options.
   */
  initChildren() {
    const e = this.options_.children;
    if (e) {
      const t = this.options_, s = (a) => {
        const l = a.name;
        let u = a.opts;
        if (t[l] !== void 0 && (u = t[l]), u === !1)
          return;
        u === !0 && (u = {}), u.playerOptions = this.options_.playerOptions;
        const f = this.addChild(l, u);
        f && (this[l] = f);
      };
      let r;
      const n = N.getComponent("Tech");
      Array.isArray(e) ? r = e : r = Object.keys(e), r.concat(Object.keys(this.options_).filter(function(a) {
        return !r.some(function(l) {
          return typeof l == "string" ? a === l : a === l.name;
        });
      })).map((a) => {
        let l, u;
        return typeof a == "string" ? (l = a, u = e[l] || this.options_[l] || {}) : (l = a.name, u = a), {
          name: l,
          opts: u
        };
      }).filter((a) => {
        const l = N.getComponent(a.opts.componentClass || ye(a.name));
        return l && !n.isTech(l);
      }).forEach(s);
    }
  }
  /**
   * Builds the default DOM class name. Should be overridden by sub-components.
   *
   * @return {string}
   *         The DOM class name for this object.
   *
   * @abstract
   */
  buildCSSClass() {
    return "";
  }
  /**
   * Bind a listener to the component's ready state.
   * Different from event listeners in that if the ready event has already happened
   * it will trigger the function immediately.
   *
   * @param {ReadyCallback} fn
   *        Function that gets called when the `Component` is ready.
   *
   * @return {Component}
   *         Returns itself; method can be chained.
   */
  ready(e, t = !1) {
    if (e) {
      if (!this.isReady_) {
        this.readyQueue_ = this.readyQueue_ || [], this.readyQueue_.push(e);
        return;
      }
      t ? e.call(this) : this.setTimeout(e, 1);
    }
  }
  /**
   * Trigger all the ready listeners for this `Component`.
   *
   * @fires Component#ready
   */
  triggerReady() {
    this.isReady_ = !0, this.setTimeout(function() {
      const e = this.readyQueue_;
      this.readyQueue_ = [], e && e.length > 0 && e.forEach(function(t) {
        t.call(this);
      }, this), this.trigger("ready");
    }, 1);
  }
  /**
   * Find a single DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelector`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {Element|null}
   *         the dom element that was found, or null
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */
  $(e, t) {
    return Kt(e, t || this.contentEl());
  }
  /**
   * Finds all DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelectorAll`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {NodeList}
   *         a list of dom elements that were found
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */
  $$(e, t) {
    return lh(e, t || this.contentEl());
  }
  /**
   * Check if a component's element has a CSS class name.
   *
   * @param {string} classToCheck
   *        CSS class name to check.
   *
   * @return {boolean}
   *         - True if the `Component` has the class.
   *         - False if the `Component` does not have the class`
   */
  hasClass(e) {
    return Rs(this.el_, e);
  }
  /**
   * Add a CSS class name to the `Component`s element.
   *
   * @param {...string} classesToAdd
   *        One or more CSS class name to add.
   */
  addClass(...e) {
    gi(this.el_, ...e);
  }
  /**
   * Remove a CSS class name from the `Component`s element.
   *
   * @param {...string} classesToRemove
   *        One or more CSS class name to remove.
   */
  removeClass(...e) {
    Dn(this.el_, ...e);
  }
  /**
   * Add or remove a CSS class name from the component's element.
   * - `classToToggle` gets added when {@link Component#hasClass} would return false.
   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
   *
   * @param  {string} classToToggle
   *         The class to add or remove based on (@link Component#hasClass}
   *
   * @param  {boolean|Dom~predicate} [predicate]
   *         An {@link Dom~predicate} function or a boolean
   */
  toggleClass(e, t) {
    eh(this.el_, e, t);
  }
  /**
   * Show the `Component`s element if it is hidden by removing the
   * 'vjs-hidden' class name from it.
   */
  show() {
    this.removeClass("vjs-hidden");
  }
  /**
   * Hide the `Component`s element if it is currently showing by adding the
   * 'vjs-hidden` class name to it.
   */
  hide() {
    this.addClass("vjs-hidden");
  }
  /**
   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
   * class name to it. Used during fadeIn/fadeOut.
   *
   * @private
   */
  lockShowing() {
    this.addClass("vjs-lock-showing");
  }
  /**
   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
   * class name from it. Used during fadeIn/fadeOut.
   *
   * @private
   */
  unlockShowing() {
    this.removeClass("vjs-lock-showing");
  }
  /**
   * Get the value of an attribute on the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to get the value from.
   *
   * @return {string|null}
   *         - The value of the attribute that was asked for.
   *         - Can be an empty string on some browsers if the attribute does not exist
   *           or has no value
   *         - Most browsers will return null if the attribute does not exist or has
   *           no value.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
   */
  getAttribute(e) {
    return ih(this.el_, e);
  }
  /**
   * Set the value of an attribute on the `Component`'s element
   *
   * @param {string} attribute
   *        Name of the attribute to set.
   *
   * @param {string} value
   *        Value to set the attribute to.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
   */
  setAttribute(e, t) {
    Ki(this.el_, e, t);
  }
  /**
   * Remove an attribute from the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to remove.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
   */
  removeAttribute(e) {
    kn(this.el_, e);
  }
  /**
   * Get or set the width of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The width that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|undefined}
   *         The width when getting, zero if there is no width
   */
  width(e, t) {
    return this.dimension("width", e, t);
  }
  /**
   * Get or set the height of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The height that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|undefined}
   *         The height when getting, zero if there is no height
   */
  height(e, t) {
    return this.dimension("height", e, t);
  }
  /**
   * Set both the width and height of the `Component` element at the same time.
   *
   * @param  {number|string} width
   *         Width to set the `Component`s element to.
   *
   * @param  {number|string} height
   *         Height to set the `Component`s element to.
   */
  dimensions(e, t) {
    this.width(e, !0), this.height(t);
  }
  /**
   * Get or set width or height of the `Component` element. This is the shared code
   * for the {@link Component#width} and {@link Component#height}.
   *
   * Things to know:
   * - If the width or height in an number this will return the number postfixed with 'px'.
   * - If the width/height is a percent this will return the percent postfixed with '%'
   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
   *   for more information
   * - If you want the computed style of the component, use {@link Component#currentWidth}
   *   and {@link {Component#currentHeight}
   *
   * @fires Component#componentresize
   *
   * @param {string} widthOrHeight
   8        'width' or 'height'
   *
   * @param  {number|string} [num]
   8         New dimension
   *
   * @param  {boolean} [skipListeners]
   *         Skip componentresize event trigger
   *
   * @return {number|undefined}
   *         The dimension when getting or 0 if unset
   */
  dimension(e, t, s) {
    if (t !== void 0) {
      (t === null || t !== t) && (t = 0), ("" + t).indexOf("%") !== -1 || ("" + t).indexOf("px") !== -1 ? this.el_.style[e] = t : t === "auto" ? this.el_.style[e] = "" : this.el_.style[e] = t + "px", s || this.trigger("componentresize");
      return;
    }
    if (!this.el_)
      return 0;
    const r = this.el_.style[e], n = r.indexOf("px");
    return parseInt(n !== -1 ? r.slice(0, n) : this.el_["offset" + ye(e)], 10);
  }
  /**
   * Get the computed width or the height of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @param {string} widthOrHeight
   *        A string containing 'width' or 'height'. Whichever one you want to get.
   *
   * @return {number}
   *         The dimension that gets asked for or 0 if nothing was set
   *         for that dimension.
   */
  currentDimension(e) {
    let t = 0;
    if (e !== "width" && e !== "height")
      throw new Error("currentDimension only accepts width or height value");
    if (t = Qi(this.el_, e), t = parseFloat(t), t === 0 || isNaN(t)) {
      const s = `offset${ye(e)}`;
      t = this.el_[s];
    }
    return t;
  }
  /**
   * An object that contains width and height values of the `Component`s
   * computed style. Uses `window.getComputedStyle`.
   *
   * @typedef {Object} Component~DimensionObject
   *
   * @property {number} width
   *           The width of the `Component`s computed style.
   *
   * @property {number} height
   *           The height of the `Component`s computed style.
   */
  /**
   * Get an object that contains computed width and height values of the
   * component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {Component~DimensionObject}
   *         The computed dimensions of the component's element.
   */
  currentDimensions() {
    return {
      width: this.currentDimension("width"),
      height: this.currentDimension("height")
    };
  }
  /**
   * Get the computed width of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {number}
   *         The computed width of the component's element.
   */
  currentWidth() {
    return this.currentDimension("width");
  }
  /**
   * Get the computed height of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {number}
   *         The computed height of the component's element.
   */
  currentHeight() {
    return this.currentDimension("height");
  }
  /**
   * Set the focus to this component
   */
  focus() {
    this.el_.focus();
  }
  /**
   * Remove the focus from this component
   */
  blur() {
    this.el_.blur();
  }
  /**
   * When this Component receives a `keydown` event which it does not process,
   *  it passes the event to the Player for handling.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   */
  handleKeyDown(e) {
    this.player_ && (W.isEventKey(e, "Tab") || e.stopPropagation(), this.player_.handleKeyDown(e));
  }
  /**
   * Many components used to have a `handleKeyPress` method, which was poorly
   * named because it listened to a `keydown` event. This method name now
   * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`
   * will not see their method calls stop working.
   *
   * @param {KeyboardEvent} event
   *        The event that caused this function to be called.
   */
  handleKeyPress(e) {
    this.handleKeyDown(e);
  }
  /**
   * Emit a 'tap' events when touch event support gets detected. This gets used to
   * support toggling the controls through a tap on the video. They get enabled
   * because every sub-component would have extra overhead otherwise.
   *
   * @protected
   * @fires Component#tap
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchleave
   * @listens Component#touchcancel
   * @listens Component#touchend
    */
  emitTapEvents() {
    let e = 0, t = null;
    const s = 10, r = 200;
    let n;
    this.on("touchstart", function(l) {
      l.touches.length === 1 && (t = {
        pageX: l.touches[0].pageX,
        pageY: l.touches[0].pageY
      }, e = E.performance.now(), n = !0);
    }), this.on("touchmove", function(l) {
      if (l.touches.length > 1)
        n = !1;
      else if (t) {
        const u = l.touches[0].pageX - t.pageX, f = l.touches[0].pageY - t.pageY;
        Math.sqrt(u * u + f * f) > s && (n = !1);
      }
    });
    const a = function() {
      n = !1;
    };
    this.on("touchleave", a), this.on("touchcancel", a), this.on("touchend", function(l) {
      t = null, n === !0 && E.performance.now() - e < r && (l.preventDefault(), this.trigger("tap"));
    });
  }
  /**
   * This function reports user activity whenever touch events happen. This can get
   * turned off by any sub-components that wants touch events to act another way.
   *
   * Report user touch activity when touch events occur. User activity gets used to
   * determine when controls should show/hide. It is simple when it comes to mouse
   * events, because any mouse event should show the controls. So we capture mouse
   * events that bubble up to the player and report activity when that happens.
   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
   * controls. So touch events can't help us at the player level either.
   *
   * User activity gets checked asynchronously. So what could happen is a tap event
   * on the video turns the controls off. Then the `touchend` event bubbles up to
   * the player. Which, if it reported user activity, would turn the controls right
   * back on. We also don't want to completely block touch events from bubbling up.
   * Furthermore a `touchmove` event and anything other than a tap, should not turn
   * controls back on.
   *
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchend
   * @listens Component#touchcancel
   */
  enableTouchActivity() {
    if (!this.player() || !this.player().reportUserActivity)
      return;
    const e = ue(this.player(), this.player().reportUserActivity);
    let t;
    this.on("touchstart", function() {
      e(), this.clearInterval(t), t = this.setInterval(e, 250);
    });
    const s = function(r) {
      e(), this.clearInterval(t);
    };
    this.on("touchmove", e), this.on("touchend", s), this.on("touchcancel", s);
  }
  /**
   * A callback that has no parameters and is bound into `Component`s context.
   *
   * @callback Component~GenericCallback
   * @this Component
   */
  /**
   * Creates a function that runs after an `x` millisecond timeout. This function is a
   * wrapper around `window.setTimeout`. There are a few reasons to use this one
   * instead though:
   * 1. It gets cleared via  {@link Component#clearTimeout} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will gets turned into a {@link Component~GenericCallback}
   *
   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This
   *         will cause its dispose listener not to get cleaned up! Please use
   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.
   *
   * @param {Component~GenericCallback} fn
   *        The function that will be run after `timeout`.
   *
   * @param {number} timeout
   *        Timeout in milliseconds to delay before executing the specified function.
   *
   * @return {number}
   *         Returns a timeout ID that gets used to identify the timeout. It can also
   *         get used in {@link Component#clearTimeout} to clear the timeout that
   *         was set.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
   */
  setTimeout(e, t) {
    var s;
    return e = ue(this, e), this.clearTimersOnDispose_(), s = E.setTimeout(() => {
      this.setTimeoutIds_.has(s) && this.setTimeoutIds_.delete(s), e();
    }, t), this.setTimeoutIds_.add(s), s;
  }
  /**
   * Clears a timeout that gets created via `window.setTimeout` or
   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
   * use this function instead of `window.clearTimout`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} timeoutId
   *        The id of the timeout to clear. The return value of
   *        {@link Component#setTimeout} or `window.setTimeout`.
   *
   * @return {number}
   *         Returns the timeout id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
   */
  clearTimeout(e) {
    return this.setTimeoutIds_.has(e) && (this.setTimeoutIds_.delete(e), E.clearTimeout(e)), e;
  }
  /**
   * Creates a function that gets run every `x` milliseconds. This function is a wrapper
   * around `window.setInterval`. There are a few reasons to use this one instead though.
   * 1. It gets cleared via  {@link Component#clearInterval} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will be a {@link Component~GenericCallback}
   *
   * @param {Component~GenericCallback} fn
   *        The function to run every `x` seconds.
   *
   * @param {number} interval
   *        Execute the specified function every `x` milliseconds.
   *
   * @return {number}
   *         Returns an id that can be used to identify the interval. It can also be be used in
   *         {@link Component#clearInterval} to clear the interval.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
   */
  setInterval(e, t) {
    e = ue(this, e), this.clearTimersOnDispose_();
    const s = E.setInterval(e, t);
    return this.setIntervalIds_.add(s), s;
  }
  /**
   * Clears an interval that gets created via `window.setInterval` or
   * {@link Component#setInterval}. If you set an interval via {@link Component#setInterval}
   * use this function instead of `window.clearInterval`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} intervalId
   *        The id of the interval to clear. The return value of
   *        {@link Component#setInterval} or `window.setInterval`.
   *
   * @return {number}
   *         Returns the interval id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
   */
  clearInterval(e) {
    return this.setIntervalIds_.has(e) && (this.setIntervalIds_.delete(e), E.clearInterval(e)), e;
  }
  /**
   * Queues up a callback to be passed to requestAnimationFrame (rAF), but
   * with a few extra bonuses:
   *
   * - Supports browsers that do not support rAF by falling back to
   *   {@link Component#setTimeout}.
   *
   * - The callback is turned into a {@link Component~GenericCallback} (i.e.
   *   bound to the component).
   *
   * - Automatic cancellation of the rAF callback is handled if the component
   *   is disposed before it is called.
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   *
   * @return {number}
   *         Returns an rAF ID that gets used to identify the timeout. It can
   *         also be used in {@link Component#cancelAnimationFrame} to cancel
   *         the animation frame callback.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
   */
  requestAnimationFrame(e) {
    this.clearTimersOnDispose_();
    var t;
    return e = ue(this, e), t = E.requestAnimationFrame(() => {
      this.rafIds_.has(t) && this.rafIds_.delete(t), e();
    }), this.rafIds_.add(t), t;
  }
  /**
   * Request an animation frame, but only one named animation
   * frame will be queued. Another will never be added until
   * the previous one finishes.
   *
   * @param {string} name
   *        The name to give this requestAnimationFrame
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   */
  requestNamedAnimationFrame(e, t) {
    if (this.namedRafs_.has(e))
      return;
    this.clearTimersOnDispose_(), t = ue(this, t);
    const s = this.requestAnimationFrame(() => {
      t(), this.namedRafs_.has(e) && this.namedRafs_.delete(e);
    });
    return this.namedRafs_.set(e, s), e;
  }
  /**
   * Cancels a current named animation frame if it exists.
   *
   * @param {string} name
   *        The name of the requestAnimationFrame to cancel.
   */
  cancelNamedAnimationFrame(e) {
    this.namedRafs_.has(e) && (this.cancelAnimationFrame(this.namedRafs_.get(e)), this.namedRafs_.delete(e));
  }
  /**
   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
   * (rAF).
   *
   * If you queue an rAF callback via {@link Component#requestAnimationFrame},
   * use this function instead of `window.cancelAnimationFrame`. If you don't,
   * your dispose listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} id
   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
   *
   * @return {number}
   *         Returns the rAF ID that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
   */
  cancelAnimationFrame(e) {
    return this.rafIds_.has(e) && (this.rafIds_.delete(e), E.cancelAnimationFrame(e)), e;
  }
  /**
   * A function to setup `requestAnimationFrame`, `setTimeout`,
   * and `setInterval`, clearing on dispose.
   *
   * > Previously each timer added and removed dispose listeners on it's own.
   * For better performance it was decided to batch them all, and use `Set`s
   * to track outstanding timer ids.
   *
   * @private
   */
  clearTimersOnDispose_() {
    this.clearingTimersOnDispose_ || (this.clearingTimersOnDispose_ = !0, this.one("dispose", () => {
      [["namedRafs_", "cancelNamedAnimationFrame"], ["rafIds_", "cancelAnimationFrame"], ["setTimeoutIds_", "clearTimeout"], ["setIntervalIds_", "clearInterval"]].forEach(([e, t]) => {
        this[e].forEach((s, r) => this[t](r));
      }), this.clearingTimersOnDispose_ = !1;
    }));
  }
  /**
   * Register a `Component` with `videojs` given the name and the component.
   *
   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
   *         should be registered using {@link Tech.registerTech} or
   *         {@link videojs:videojs.registerTech}.
   *
   * > NOTE: This function can also be seen on videojs as
   *         {@link videojs:videojs.registerComponent}.
   *
   * @param {string} name
   *        The name of the `Component` to register.
   *
   * @param {Component} ComponentToRegister
   *        The `Component` class to register.
   *
   * @return {Component}
   *         The `Component` that was registered.
   */
  static registerComponent(e, t) {
    if (typeof e != "string" || !e)
      throw new Error(`Illegal component name, "${e}"; must be a non-empty string.`);
    const s = N.getComponent("Tech"), r = s && s.isTech(t), n = N === t || N.prototype.isPrototypeOf(t.prototype);
    if (r || !n) {
      let l;
      throw r ? l = "techs must be registered using Tech.registerTech()" : l = "must be a Component subclass", new Error(`Illegal component, "${e}"; ${l}.`);
    }
    e = ye(e), N.components_ || (N.components_ = {});
    const a = N.getComponent("Player");
    if (e === "Player" && a && a.players) {
      const l = a.players, u = Object.keys(l);
      if (l && u.length > 0 && u.map((f) => l[f]).every(Boolean))
        throw new Error("Can not register Player component after player has been created.");
    }
    return N.components_[e] = t, N.components_[Ns(e)] = t, t;
  }
  /**
   * Get a `Component` based on the name it was registered with.
   *
   * @param {string} name
   *        The Name of the component to get.
   *
   * @return {typeof Component}
   *         The `Component` that got registered under the given name.
   */
  static getComponent(e) {
    if (!(!e || !N.components_))
      return N.components_[e];
  }
}
N.registerComponent("Component", N);
function r_(i, e, t) {
  if (typeof e != "number" || e < 0 || e > t)
    throw new Error(`Failed to execute '${i}' on 'TimeRanges': The index provided (${e}) is non-numeric or out of bounds (0-${t}).`);
}
function Xu(i, e, t, s) {
  return r_(i, s, t.length - 1), t[s][e];
}
function va(i) {
  let e;
  return i === void 0 || i.length === 0 ? e = {
    length: 0,
    start() {
      throw new Error("This TimeRanges object is empty");
    },
    end() {
      throw new Error("This TimeRanges object is empty");
    }
  } : e = {
    length: i.length,
    start: Xu.bind(null, "start", 0, i),
    end: Xu.bind(null, "end", 1, i)
  }, E.Symbol && E.Symbol.iterator && (e[E.Symbol.iterator] = () => (i || []).values()), e;
}
function dt(i, e) {
  return Array.isArray(i) ? va(i) : i === void 0 || e === void 0 ? va() : va([[i, e]]);
}
const _h = function(i, e) {
  i = i < 0 ? 0 : i;
  let t = Math.floor(i % 60), s = Math.floor(i / 60 % 60), r = Math.floor(i / 3600);
  const n = Math.floor(e / 60 % 60), a = Math.floor(e / 3600);
  return (isNaN(i) || i === 1 / 0) && (r = s = t = "-"), r = r > 0 || a > 0 ? r + ":" : "", s = ((r || n >= 10) && s < 10 ? "0" + s : s) + ":", t = t < 10 ? "0" + t : t, r + s + t;
};
let qo = _h;
function Th(i) {
  qo = i;
}
function bh() {
  qo = _h;
}
function _i(i, e = i) {
  return qo(i, e);
}
var n_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  createTimeRanges: dt,
  createTimeRange: dt,
  setFormatTime: Th,
  resetFormatTime: bh,
  formatTime: _i
});
function xh(i, e) {
  let t = 0, s, r;
  if (!e)
    return 0;
  (!i || !i.length) && (i = dt(0, 0));
  for (let n = 0; n < i.length; n++)
    s = i.start(n), r = i.end(n), r > e && (r = e), t += r - s;
  return t / e;
}
function ve(i) {
  if (i instanceof ve)
    return i;
  typeof i == "number" ? this.code = i : typeof i == "string" ? this.message = i : Et(i) && (typeof i.code == "number" && (this.code = i.code), Object.assign(this, i)), this.message || (this.message = ve.defaultMessages[this.code] || "");
}
ve.prototype.code = 0;
ve.prototype.message = "";
ve.prototype.status = null;
ve.prototype.metadata = null;
ve.errorTypes = ["MEDIA_ERR_CUSTOM", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED", "MEDIA_ERR_ENCRYPTED"];
ve.defaultMessages = {
  1: "You aborted the media playback",
  2: "A network error caused the media download to fail part-way.",
  3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
  4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
  5: "The media is encrypted and we do not have the keys to decrypt it."
};
ve.MEDIA_ERR_CUSTOM = 0;
ve.prototype.MEDIA_ERR_CUSTOM = 0;
ve.MEDIA_ERR_ABORTED = 1;
ve.prototype.MEDIA_ERR_ABORTED = 1;
ve.MEDIA_ERR_NETWORK = 2;
ve.prototype.MEDIA_ERR_NETWORK = 2;
ve.MEDIA_ERR_DECODE = 3;
ve.prototype.MEDIA_ERR_DECODE = 3;
ve.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
ve.prototype.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
ve.MEDIA_ERR_ENCRYPTED = 5;
ve.prototype.MEDIA_ERR_ENCRYPTED = 5;
function Ms(i) {
  return i != null && typeof i.then == "function";
}
function vt(i) {
  Ms(i) && i.then(null, (e) => {
  });
}
const Ka = function(i) {
  return ["kind", "label", "language", "id", "inBandMetadataTrackDispatchType", "mode", "src"].reduce((t, s, r) => (i[s] && (t[s] = i[s]), t), {
    cues: i.cues && Array.prototype.map.call(i.cues, function(t) {
      return {
        startTime: t.startTime,
        endTime: t.endTime,
        text: t.text,
        id: t.id
      };
    })
  });
}, a_ = function(i) {
  const e = i.$$("track"), t = Array.prototype.map.call(e, (r) => r.track);
  return Array.prototype.map.call(e, function(r) {
    const n = Ka(r.track);
    return r.src && (n.src = r.src), n;
  }).concat(Array.prototype.filter.call(i.textTracks(), function(r) {
    return t.indexOf(r) === -1;
  }).map(Ka));
}, o_ = function(i, e) {
  return i.forEach(function(t) {
    const s = e.addRemoteTextTrack(t).track;
    !t.src && t.cues && t.cues.forEach((r) => s.addCue(r));
  }), e.textTracks();
};
var Ku = {
  textTracksToJson: a_,
  jsonToTextTracks: o_,
  trackToJson_: Ka
};
const ya = "vjs-modal-dialog";
class rs extends N {
  /**
   * Create an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param { import('./utils/dom').ContentDescriptor} [options.content=undefined]
   *        Provide customized content for this modal.
   *
   * @param {string} [options.description]
   *        A text description for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.fillAlways=false]
   *        Normally, modals are automatically filled only the first time
   *        they open. This tells the modal to refresh its content
   *        every time it opens.
   *
   * @param {string} [options.label]
   *        A text label for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.pauseOnOpen=true]
   *        If `true`, playback will will be paused if playing when
   *        the modal opens, and resumed when it closes.
   *
   * @param {boolean} [options.temporary=true]
   *        If `true`, the modal can only be opened once; it will be
   *        disposed as soon as it's closed.
   *
   * @param {boolean} [options.uncloseable=false]
   *        If `true`, the user will not be able to close the modal
   *        through the UI in the normal ways. Programmatic closing is
   *        still possible.
   */
  constructor(e, t) {
    super(e, t), this.handleKeyDown_ = (s) => this.handleKeyDown(s), this.close_ = (s) => this.close(s), this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = !1, this.closeable(!this.options_.uncloseable), this.content(this.options_.content), this.contentEl_ = Y("div", {
      className: `${ya}-content`
    }, {
      role: "document"
    }), this.descEl_ = Y("p", {
      className: `${ya}-description vjs-control-text`,
      id: this.el().getAttribute("aria-describedby")
    }), ei(this.descEl_, this.description()), this.el_.appendChild(this.descEl_), this.el_.appendChild(this.contentEl_);
  }
  /**
   * Create the `ModalDialog`'s DOM element
   *
   * @return {Element}
   *         The DOM element that gets created.
   */
  createEl() {
    return super.createEl("div", {
      className: this.buildCSSClass(),
      tabIndex: -1
    }, {
      "aria-describedby": `${this.id()}_description`,
      "aria-hidden": "true",
      "aria-label": this.label(),
      role: "dialog",
      "aria-live": "polite"
    });
  }
  dispose() {
    this.contentEl_ = null, this.descEl_ = null, this.previouslyActiveEl_ = null, super.dispose();
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `${ya} vjs-hidden ${super.buildCSSClass()}`;
  }
  /**
   * Returns the label string for this modal. Primarily used for accessibility.
   *
   * @return {string}
   *         the localized or raw label of this modal.
   */
  label() {
    return this.localize(this.options_.label || "Modal Window");
  }
  /**
   * Returns the description string for this modal. Primarily used for
   * accessibility.
   *
   * @return {string}
   *         The localized or raw description of this modal.
   */
  description() {
    let e = this.options_.description || this.localize("This is a modal window.");
    return this.closeable() && (e += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.")), e;
  }
  /**
   * Opens the modal.
   *
   * @fires ModalDialog#beforemodalopen
   * @fires ModalDialog#modalopen
   */
  open() {
    if (this.opened_) {
      this.options_.fillAlways && this.fill();
      return;
    }
    const e = this.player();
    this.trigger("beforemodalopen"), this.opened_ = !0, (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) && this.fill(), this.wasPlaying_ = !e.paused(), this.options_.pauseOnOpen && this.wasPlaying_ && e.pause(), this.on("keydown", this.handleKeyDown_), this.hadControls_ = e.controls(), e.controls(!1), this.show(), this.conditionalFocus_(), this.el().setAttribute("aria-hidden", "false"), this.trigger("modalopen"), this.hasBeenOpened_ = !0;
  }
  /**
   * If the `ModalDialog` is currently open or closed.
   *
   * @param  {boolean} [value]
   *         If given, it will open (`true`) or close (`false`) the modal.
   *
   * @return {boolean}
   *         the current open state of the modaldialog
   */
  opened(e) {
    return typeof e == "boolean" && this[e ? "open" : "close"](), this.opened_;
  }
  /**
   * Closes the modal, does nothing if the `ModalDialog` is
   * not open.
   *
   * @fires ModalDialog#beforemodalclose
   * @fires ModalDialog#modalclose
   */
  close() {
    if (!this.opened_)
      return;
    const e = this.player();
    this.trigger("beforemodalclose"), this.opened_ = !1, this.wasPlaying_ && this.options_.pauseOnOpen && e.play(), this.off("keydown", this.handleKeyDown_), this.hadControls_ && e.controls(!0), this.hide(), this.el().setAttribute("aria-hidden", "true"), this.trigger("modalclose"), this.conditionalBlur_(), this.options_.temporary && this.dispose();
  }
  /**
   * Check to see if the `ModalDialog` is closeable via the UI.
   *
   * @param  {boolean} [value]
   *         If given as a boolean, it will set the `closeable` option.
   *
   * @return {boolean}
   *         Returns the final value of the closable option.
   */
  closeable(e) {
    if (typeof e == "boolean") {
      const t = this.closeable_ = !!e;
      let s = this.getChild("closeButton");
      if (t && !s) {
        const r = this.contentEl_;
        this.contentEl_ = this.el_, s = this.addChild("closeButton", {
          controlText: "Close Modal Dialog"
        }), this.contentEl_ = r, this.on(s, "close", this.close_);
      }
      !t && s && (this.off(s, "close", this.close_), this.removeChild(s), s.dispose());
    }
    return this.closeable_;
  }
  /**
   * Fill the modal's content element with the modal's "content" option.
   * The content element will be emptied before this change takes place.
   */
  fill() {
    this.fillWith(this.content());
  }
  /**
   * Fill the modal's content element with arbitrary content.
   * The content element will be emptied before this change takes place.
   *
   * @fires ModalDialog#beforemodalfill
   * @fires ModalDialog#modalfill
   *
   * @param { import('./utils/dom').ContentDescriptor} [content]
   *        The same rules apply to this as apply to the `content` option.
   */
  fillWith(e) {
    const t = this.contentEl(), s = t.parentNode, r = t.nextSibling;
    this.trigger("beforemodalfill"), this.hasBeenFilled_ = !0, s.removeChild(t), this.empty(), oh(t, e), this.trigger("modalfill"), r ? s.insertBefore(t, r) : s.appendChild(t);
    const n = this.getChild("closeButton");
    n && s.appendChild(n.el_);
  }
  /**
   * Empties the content element. This happens anytime the modal is filled.
   *
   * @fires ModalDialog#beforemodalempty
   * @fires ModalDialog#modalempty
   */
  empty() {
    this.trigger("beforemodalempty"), Pn(this.contentEl()), this.trigger("modalempty");
  }
  /**
   * Gets or sets the modal content, which gets normalized before being
   * rendered into the DOM.
   *
   * This does not update the DOM or fill the modal, but it is called during
   * that process.
   *
   * @param  { import('./utils/dom').ContentDescriptor} [value]
   *         If defined, sets the internal content value to be used on the
   *         next call(s) to `fill`. This value is normalized before being
   *         inserted. To "clear" the internal content value, pass `null`.
   *
   * @return { import('./utils/dom').ContentDescriptor}
   *         The current content of the modal dialog
   */
  content(e) {
    return typeof e < "u" && (this.content_ = e), this.content_;
  }
  /**
   * conditionally focus the modal dialog if focus was previously on the player.
   *
   * @private
   */
  conditionalFocus_() {
    const e = B.activeElement, t = this.player_.el_;
    this.previouslyActiveEl_ = null, (t.contains(e) || t === e) && (this.previouslyActiveEl_ = e, this.focus());
  }
  /**
   * conditionally blur the element and refocus the last focused element
   *
   * @private
   */
  conditionalBlur_() {
    this.previouslyActiveEl_ && (this.previouslyActiveEl_.focus(), this.previouslyActiveEl_ = null);
  }
  /**
   * Keydown handler. Attached when modal is focused.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    if (e.stopPropagation(), W.isEventKey(e, "Escape") && this.closeable()) {
      e.preventDefault(), this.close();
      return;
    }
    if (!W.isEventKey(e, "Tab"))
      return;
    const t = this.focusableEls_(), s = this.el_.querySelector(":focus");
    let r;
    for (let n = 0; n < t.length; n++)
      if (s === t[n]) {
        r = n;
        break;
      }
    B.activeElement === this.el_ && (r = 0), e.shiftKey && r === 0 ? (t[t.length - 1].focus(), e.preventDefault()) : !e.shiftKey && r === t.length - 1 && (t[0].focus(), e.preventDefault());
  }
  /**
   * get all focusable elements
   *
   * @private
   */
  focusableEls_() {
    const e = this.el_.querySelectorAll("*");
    return Array.prototype.filter.call(e, (t) => (t instanceof E.HTMLAnchorElement || t instanceof E.HTMLAreaElement) && t.hasAttribute("href") || (t instanceof E.HTMLInputElement || t instanceof E.HTMLSelectElement || t instanceof E.HTMLTextAreaElement || t instanceof E.HTMLButtonElement) && !t.hasAttribute("disabled") || t instanceof E.HTMLIFrameElement || t instanceof E.HTMLObjectElement || t instanceof E.HTMLEmbedElement || t.hasAttribute("tabindex") && t.getAttribute("tabindex") !== -1 || t.hasAttribute("contenteditable"));
  }
}
rs.prototype.options_ = {
  pauseOnOpen: !0,
  temporary: !0
};
N.registerComponent("ModalDialog", rs);
class Ji extends nt {
  /**
   * Create an instance of this class
   *
   * @param { import('./track').default[] } tracks
   *        A list of tracks to initialize the list with.
   *
   * @abstract
   */
  constructor(e = []) {
    super(), this.tracks_ = [], Object.defineProperty(this, "length", {
      get() {
        return this.tracks_.length;
      }
    });
    for (let t = 0; t < e.length; t++)
      this.addTrack(e[t]);
  }
  /**
   * Add a {@link Track} to the `TrackList`
   *
   * @param { import('./track').default } track
   *        The audio, video, or text track to add to the list.
   *
   * @fires TrackList#addtrack
   */
  addTrack(e) {
    const t = this.tracks_.length;
    "" + t in this || Object.defineProperty(this, t, {
      get() {
        return this.tracks_[t];
      }
    }), this.tracks_.indexOf(e) === -1 && (this.tracks_.push(e), this.trigger({
      track: e,
      type: "addtrack",
      target: this
    })), e.labelchange_ = () => {
      this.trigger({
        track: e,
        type: "labelchange",
        target: this
      });
    }, Nt(e) && e.addEventListener("labelchange", e.labelchange_);
  }
  /**
   * Remove a {@link Track} from the `TrackList`
   *
   * @param { import('./track').default } rtrack
   *        The audio, video, or text track to remove from the list.
   *
   * @fires TrackList#removetrack
   */
  removeTrack(e) {
    let t;
    for (let s = 0, r = this.length; s < r; s++)
      if (this[s] === e) {
        t = this[s], t.off && t.off(), this.tracks_.splice(s, 1);
        break;
      }
    t && this.trigger({
      track: t,
      type: "removetrack",
      target: this
    });
  }
  /**
   * Get a Track from the TrackList by a tracks id
   *
   * @param {string} id - the id of the track to get
   * @method getTrackById
   * @return { import('./track').default }
   * @private
   */
  getTrackById(e) {
    let t = null;
    for (let s = 0, r = this.length; s < r; s++) {
      const n = this[s];
      if (n.id === e) {
        t = n;
        break;
      }
    }
    return t;
  }
}
Ji.prototype.allowedEvents_ = {
  change: "change",
  addtrack: "addtrack",
  removetrack: "removetrack",
  labelchange: "labelchange"
};
for (const i in Ji.prototype.allowedEvents_)
  Ji.prototype["on" + i] = null;
const _a = function(i, e) {
  for (let t = 0; t < i.length; t++)
    !Object.keys(i[t]).length || e.id === i[t].id || (i[t].enabled = !1);
};
class l_ extends Ji {
  /**
   * Create an instance of this class.
   *
   * @param { import('./audio-track').default[] } [tracks=[]]
   *        A list of `AudioTrack` to instantiate the list with.
   */
  constructor(e = []) {
    for (let t = e.length - 1; t >= 0; t--)
      if (e[t].enabled) {
        _a(e, e[t]);
        break;
      }
    super(e), this.changing_ = !1;
  }
  /**
   * Add an {@link AudioTrack} to the `AudioTrackList`.
   *
   * @param { import('./audio-track').default } track
   *        The AudioTrack to add to the list
   *
   * @fires TrackList#addtrack
   */
  addTrack(e) {
    e.enabled && _a(this, e), super.addTrack(e), e.addEventListener && (e.enabledChange_ = () => {
      this.changing_ || (this.changing_ = !0, _a(this, e), this.changing_ = !1, this.trigger("change"));
    }, e.addEventListener("enabledchange", e.enabledChange_));
  }
  removeTrack(e) {
    super.removeTrack(e), e.removeEventListener && e.enabledChange_ && (e.removeEventListener("enabledchange", e.enabledChange_), e.enabledChange_ = null);
  }
}
const Ta = function(i, e) {
  for (let t = 0; t < i.length; t++)
    !Object.keys(i[t]).length || e.id === i[t].id || (i[t].selected = !1);
};
class u_ extends Ji {
  /**
   * Create an instance of this class.
   *
   * @param {VideoTrack[]} [tracks=[]]
   *        A list of `VideoTrack` to instantiate the list with.
   */
  constructor(e = []) {
    for (let t = e.length - 1; t >= 0; t--)
      if (e[t].selected) {
        Ta(e, e[t]);
        break;
      }
    super(e), this.changing_ = !1, Object.defineProperty(this, "selectedIndex", {
      get() {
        for (let t = 0; t < this.length; t++)
          if (this[t].selected)
            return t;
        return -1;
      },
      set() {
      }
    });
  }
  /**
   * Add a {@link VideoTrack} to the `VideoTrackList`.
   *
   * @param { import('./video-track').default } track
   *        The VideoTrack to add to the list
   *
   * @fires TrackList#addtrack
   */
  addTrack(e) {
    e.selected && Ta(this, e), super.addTrack(e), e.addEventListener && (e.selectedChange_ = () => {
      this.changing_ || (this.changing_ = !0, Ta(this, e), this.changing_ = !1, this.trigger("change"));
    }, e.addEventListener("selectedchange", e.selectedChange_));
  }
  removeTrack(e) {
    super.removeTrack(e), e.removeEventListener && e.selectedChange_ && (e.removeEventListener("selectedchange", e.selectedChange_), e.selectedChange_ = null);
  }
}
class Sh extends Ji {
  /**
   * Add a {@link TextTrack} to the `TextTrackList`
   *
   * @param { import('./text-track').default } track
   *        The text track to add to the list.
   *
   * @fires TrackList#addtrack
   */
  addTrack(e) {
    super.addTrack(e), this.queueChange_ || (this.queueChange_ = () => this.queueTrigger("change")), this.triggerSelectedlanguagechange || (this.triggerSelectedlanguagechange_ = () => this.trigger("selectedlanguagechange")), e.addEventListener("modechange", this.queueChange_), ["metadata", "chapters"].indexOf(e.kind) === -1 && e.addEventListener("modechange", this.triggerSelectedlanguagechange_);
  }
  removeTrack(e) {
    super.removeTrack(e), e.removeEventListener && (this.queueChange_ && e.removeEventListener("modechange", this.queueChange_), this.selectedlanguagechange_ && e.removeEventListener("modechange", this.triggerSelectedlanguagechange_));
  }
}
class c_ {
  /**
   * Create an instance of this class.
   *
   * @param {HtmlTrackElement[]} [tracks=[]]
   *        A list of `HtmlTrackElement` to instantiate the list with.
   */
  constructor(e = []) {
    this.trackElements_ = [], Object.defineProperty(this, "length", {
      get() {
        return this.trackElements_.length;
      }
    });
    for (let t = 0, s = e.length; t < s; t++)
      this.addTrackElement_(e[t]);
  }
  /**
   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to add to the list.
   *
   * @private
   */
  addTrackElement_(e) {
    const t = this.trackElements_.length;
    "" + t in this || Object.defineProperty(this, t, {
      get() {
        return this.trackElements_[t];
      }
    }), this.trackElements_.indexOf(e) === -1 && this.trackElements_.push(e);
  }
  /**
   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
   * {@link TextTrack}.
   *
   * @param {TextTrack} track
   *        The track associated with a track element.
   *
   * @return {HtmlTrackElement|undefined}
   *         The track element that was found or undefined.
   *
   * @private
   */
  getTrackElementByTrack_(e) {
    let t;
    for (let s = 0, r = this.trackElements_.length; s < r; s++)
      if (e === this.trackElements_[s].track) {
        t = this.trackElements_[s];
        break;
      }
    return t;
  }
  /**
   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to remove from the list.
   *
   * @private
   */
  removeTrackElement_(e) {
    for (let t = 0, s = this.trackElements_.length; t < s; t++)
      if (e === this.trackElements_[t]) {
        this.trackElements_[t].track && typeof this.trackElements_[t].track.off == "function" && this.trackElements_[t].track.off(), typeof this.trackElements_[t].off == "function" && this.trackElements_[t].off(), this.trackElements_.splice(t, 1);
        break;
      }
  }
}
class en {
  /**
   * Create an instance of this class..
   *
   * @param {Array} cues
   *        A list of cues to be initialized with
   */
  constructor(e) {
    en.prototype.setCues_.call(this, e), Object.defineProperty(this, "length", {
      get() {
        return this.length_;
      }
    });
  }
  /**
   * A setter for cues in this list. Creates getters
   * an an index for the cues.
   *
   * @param {Array} cues
   *        An array of cues to set
   *
   * @private
   */
  setCues_(e) {
    const t = this.length || 0;
    let s = 0;
    const r = e.length;
    this.cues_ = e, this.length_ = e.length;
    const n = function(a) {
      "" + a in this || Object.defineProperty(this, "" + a, {
        get() {
          return this.cues_[a];
        }
      });
    };
    if (t < r)
      for (s = t; s < r; s++)
        n.call(this, s);
  }
  /**
   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
   *
   * @param {string} id
   *        The id of the cue that should be searched for.
   *
   * @return {TextTrackCueList~TextTrackCue|null}
   *         A single cue or null if none was found.
   */
  getCueById(e) {
    let t = null;
    for (let s = 0, r = this.length; s < r; s++) {
      const n = this[s];
      if (n.id === e) {
        t = n;
        break;
      }
    }
    return t;
  }
}
const d_ = {
  alternative: "alternative",
  captions: "captions",
  main: "main",
  sign: "sign",
  subtitles: "subtitles",
  commentary: "commentary"
}, h_ = {
  alternative: "alternative",
  descriptions: "descriptions",
  main: "main",
  "main-desc": "main-desc",
  translation: "translation",
  commentary: "commentary"
}, f_ = {
  subtitles: "subtitles",
  captions: "captions",
  descriptions: "descriptions",
  chapters: "chapters",
  metadata: "metadata"
}, Yu = {
  disabled: "disabled",
  hidden: "hidden",
  showing: "showing"
};
class $o extends nt {
  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid kind for the track type you are creating.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @abstract
   */
  constructor(e = {}) {
    super();
    const t = {
      id: e.id || "vjs_track_" + ht(),
      kind: e.kind || "",
      language: e.language || ""
    };
    let s = e.label || "";
    for (const r in t)
      Object.defineProperty(this, r, {
        get() {
          return t[r];
        },
        set() {
        }
      });
    Object.defineProperty(this, "label", {
      get() {
        return s;
      },
      set(r) {
        r !== s && (s = r, this.trigger("labelchange"));
      }
    });
  }
}
const Vo = function(i) {
  const e = ["protocol", "hostname", "port", "pathname", "search", "hash", "host"], t = B.createElement("a");
  t.href = i;
  const s = {};
  for (let r = 0; r < e.length; r++)
    s[e[r]] = t[e[r]];
  return s.protocol === "http:" && (s.host = s.host.replace(/:80$/, "")), s.protocol === "https:" && (s.host = s.host.replace(/:443$/, "")), s.protocol || (s.protocol = E.location.protocol), s.host || (s.host = E.location.host), s;
}, Eh = function(i) {
  if (!i.match(/^https?:\/\//)) {
    const e = B.createElement("a");
    e.href = i, i = e.href;
  }
  return i;
}, Ho = function(i) {
  if (typeof i == "string") {
    const t = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/.exec(i);
    if (t)
      return t.pop().toLowerCase();
  }
  return "";
}, Rn = function(i, e = E.location) {
  const t = Vo(i);
  return (t.protocol === ":" ? e.protocol : t.protocol) + t.host !== e.protocol + e.host;
};
var p_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  parseUrl: Vo,
  getAbsoluteURL: Eh,
  getFileExtension: Ho,
  isCrossOrigin: Rn
});
const Qu = function(i, e) {
  const t = new E.WebVTT.Parser(E, E.vttjs, E.WebVTT.StringDecoder()), s = [];
  t.oncue = function(r) {
    e.addCue(r);
  }, t.onparsingerror = function(r) {
    s.push(r);
  }, t.onflush = function() {
    e.trigger({
      type: "loadeddata",
      target: e
    });
  }, t.parse(i), s.length > 0 && (E.console && E.console.groupCollapsed && E.console.groupCollapsed(`Text Track parsing errors for ${e.src}`), s.forEach((r) => J.error(r)), E.console && E.console.groupEnd && E.console.groupEnd()), t.flush();
}, Ju = function(i, e) {
  const t = {
    uri: i
  }, s = Rn(i);
  s && (t.cors = s);
  const r = e.tech_.crossOrigin() === "use-credentials";
  r && (t.withCredentials = r), Gc(t, ue(this, function(n, a, l) {
    if (n)
      return J.error(n, a);
    e.loaded_ = !0, typeof E.WebVTT != "function" ? e.tech_ && e.tech_.any(["vttjsloaded", "vttjserror"], (u) => {
      if (u.type === "vttjserror") {
        J.error(`vttjs failed to load, stopping trying to process ${e.src}`);
        return;
      }
      return Qu(l, e);
    }) : Qu(l, e);
  }));
};
class er extends $o {
  /**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param { import('../tech/tech').default } options.tech
   *        A reference to the tech that owns this TextTrack.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        version of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */
  constructor(e = {}) {
    if (!e.tech)
      throw new Error("A tech was not provided.");
    const t = le(e, {
      kind: f_[e.kind] || "subtitles",
      language: e.language || e.srclang || ""
    });
    let s = Yu[t.mode] || "disabled";
    const r = t.default;
    (t.kind === "metadata" || t.kind === "chapters") && (s = "hidden"), super(t), this.tech_ = t.tech, this.cues_ = [], this.activeCues_ = [], this.preload_ = this.tech_.preloadTextTracks !== !1;
    const n = new en(this.cues_), a = new en(this.activeCues_);
    let l = !1;
    this.timeupdateHandler = ue(this, function(f = {}) {
      if (!this.tech_.isDisposed()) {
        if (!this.tech_.isReady_) {
          f.type !== "timeupdate" && (this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler));
          return;
        }
        this.activeCues = this.activeCues, l && (this.trigger("cuechange"), l = !1), f.type !== "timeupdate" && (this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler));
      }
    });
    const u = () => {
      this.stopTracking();
    };
    this.tech_.one("dispose", u), s !== "disabled" && this.startTracking(), Object.defineProperties(this, {
      /**
       * @memberof TextTrack
       * @member {boolean} default
       *         If this track was set to be on or off by default. Cannot be changed after
       *         creation.
       * @instance
       *
       * @readonly
       */
      default: {
        get() {
          return r;
        },
        set() {
        }
      },
      /**
       * @memberof TextTrack
       * @member {string} mode
       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
       *         not be set if setting to an invalid mode.
       * @instance
       *
       * @fires TextTrack#modechange
       */
      mode: {
        get() {
          return s;
        },
        set(f) {
          Yu[f] && s !== f && (s = f, !this.preload_ && s !== "disabled" && this.cues.length === 0 && Ju(this.src, this), this.stopTracking(), s !== "disabled" && this.startTracking(), this.trigger("modechange"));
        }
      },
      /**
       * @memberof TextTrack
       * @member {TextTrackCueList} cues
       *         The text track cue list for this TextTrack.
       * @instance
       */
      cues: {
        get() {
          return this.loaded_ ? n : null;
        },
        set() {
        }
      },
      /**
       * @memberof TextTrack
       * @member {TextTrackCueList} activeCues
       *         The list text track cues that are currently active for this TextTrack.
       * @instance
       */
      activeCues: {
        get() {
          if (!this.loaded_)
            return null;
          if (this.cues.length === 0)
            return a;
          const f = this.tech_.currentTime(), m = [];
          for (let v = 0, b = this.cues.length; v < b; v++) {
            const S = this.cues[v];
            S.startTime <= f && S.endTime >= f && m.push(S);
          }
          if (l = !1, m.length !== this.activeCues_.length)
            l = !0;
          else
            for (let v = 0; v < m.length; v++)
              this.activeCues_.indexOf(m[v]) === -1 && (l = !0);
          return this.activeCues_ = m, a.setCues_(this.activeCues_), a;
        },
        // /!\ Keep this setter empty (see the timeupdate handler above)
        set() {
        }
      }
    }), t.src ? (this.src = t.src, this.preload_ || (this.loaded_ = !0), (this.preload_ || t.kind !== "subtitles" && t.kind !== "captions") && Ju(this.src, this)) : this.loaded_ = !0;
  }
  startTracking() {
    this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler), this.tech_.on("timeupdate", this.timeupdateHandler);
  }
  stopTracking() {
    this.rvf_ && (this.tech_.cancelVideoFrameCallback(this.rvf_), this.rvf_ = void 0), this.tech_.off("timeupdate", this.timeupdateHandler);
  }
  /**
   * Add a cue to the internal list of cues.
   *
   * @param {TextTrack~Cue} cue
   *        The cue to add to our internal list
   */
  addCue(e) {
    let t = e;
    if (!("getCueAsHTML" in t)) {
      t = new E.vttjs.VTTCue(e.startTime, e.endTime, e.text);
      for (const r in e)
        r in t || (t[r] = e[r]);
      t.id = e.id, t.originalCue_ = e;
    }
    const s = this.tech_.textTracks();
    for (let r = 0; r < s.length; r++)
      s[r] !== this && s[r].removeCue(t);
    this.cues_.push(t), this.cues.setCues_(this.cues_);
  }
  /**
   * Remove a cue from our internal list
   *
   * @param {TextTrack~Cue} removeCue
   *        The cue to remove from our internal list
   */
  removeCue(e) {
    let t = this.cues_.length;
    for (; t--; ) {
      const s = this.cues_[t];
      if (s === e || s.originalCue_ && s.originalCue_ === e) {
        this.cues_.splice(t, 1), this.cues.setCues_(this.cues_);
        break;
      }
    }
  }
}
er.prototype.allowedEvents_ = {
  cuechange: "cuechange"
};
class Ch extends $o {
  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {AudioTrack~Kind} [options.kind='']
   *        A valid audio track kind
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.enabled]
   *        If this track is the one that is currently playing. If this track is part of
   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
   */
  constructor(e = {}) {
    const t = le(e, {
      kind: h_[e.kind] || ""
    });
    super(t);
    let s = !1;
    Object.defineProperty(this, "enabled", {
      get() {
        return s;
      },
      set(r) {
        typeof r != "boolean" || r === s || (s = r, this.trigger("enabledchange"));
      }
    }), t.enabled && (this.enabled = t.enabled), this.loaded_ = !0;
  }
}
class wh extends $o {
  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid {@link VideoTrack~Kind}
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.selected]
   *        If this track is the one that is currently playing.
   */
  constructor(e = {}) {
    const t = le(e, {
      kind: d_[e.kind] || ""
    });
    super(t);
    let s = !1;
    Object.defineProperty(this, "selected", {
      get() {
        return s;
      },
      set(r) {
        typeof r != "boolean" || r === s || (s = r, this.trigger("selectedchange"));
      }
    }), t.selected && (this.selected = t.selected);
  }
}
class Ut extends nt {
  /**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param { import('../tech/tech').default } options.tech
   *        A reference to the tech that owns this HTMLTrackElement.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        version of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */
  constructor(e = {}) {
    super();
    let t;
    const s = new er(e);
    this.kind = s.kind, this.src = s.src, this.srclang = s.language, this.label = s.label, this.default = s.default, Object.defineProperties(this, {
      /**
       * @memberof HTMLTrackElement
       * @member {HTMLTrackElement~ReadyState} readyState
       *         The current ready state of the track element.
       * @instance
       */
      readyState: {
        get() {
          return t;
        }
      },
      /**
       * @memberof HTMLTrackElement
       * @member {TextTrack} track
       *         The underlying TextTrack object.
       * @instance
       *
       */
      track: {
        get() {
          return s;
        }
      }
    }), t = Ut.NONE, s.addEventListener("loadeddata", () => {
      t = Ut.LOADED, this.trigger({
        type: "load",
        target: this
      });
    });
  }
}
Ut.prototype.allowedEvents_ = {
  load: "load"
};
Ut.NONE = 0;
Ut.LOADING = 1;
Ut.LOADED = 2;
Ut.ERROR = 3;
const st = {
  audio: {
    ListClass: l_,
    TrackClass: Ch,
    capitalName: "Audio"
  },
  video: {
    ListClass: u_,
    TrackClass: wh,
    capitalName: "Video"
  },
  text: {
    ListClass: Sh,
    TrackClass: er,
    capitalName: "Text"
  }
};
Object.keys(st).forEach(function(i) {
  st[i].getterName = `${i}Tracks`, st[i].privateName = `${i}Tracks_`;
});
const Zi = {
  remoteText: {
    ListClass: Sh,
    TrackClass: er,
    capitalName: "RemoteText",
    getterName: "remoteTextTracks",
    privateName: "remoteTextTracks_"
  },
  remoteTextEl: {
    ListClass: c_,
    TrackClass: Ut,
    capitalName: "RemoteTextTrackEls",
    getterName: "remoteTextTrackEls",
    privateName: "remoteTextTrackEls_"
  }
}, Re = Object.assign({}, st, Zi);
Zi.names = Object.keys(Zi);
st.names = Object.keys(st);
Re.names = [].concat(Zi.names).concat(st.names);
function m_(i, e, t, s, r = {}) {
  const n = i.textTracks();
  r.kind = e, t && (r.label = t), s && (r.language = s), r.tech = i;
  const a = new Re.text.TrackClass(r);
  return n.addTrack(a), a;
}
class X extends N {
  /**
  * Create an instance of this Tech.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  *
  * @param {Function} [ready]
  *        Callback function to call when the `HTML5` Tech is ready.
  */
  constructor(e = {}, t = function() {
  }) {
    e.reportTouchActivity = !1, super(null, e, t), this.onDurationChange_ = (s) => this.onDurationChange(s), this.trackProgress_ = (s) => this.trackProgress(s), this.trackCurrentTime_ = (s) => this.trackCurrentTime(s), this.stopTrackingCurrentTime_ = (s) => this.stopTrackingCurrentTime(s), this.disposeSourceHandler_ = (s) => this.disposeSourceHandler(s), this.queuedHanders_ = /* @__PURE__ */ new Set(), this.hasStarted_ = !1, this.on("playing", function() {
      this.hasStarted_ = !0;
    }), this.on("loadstart", function() {
      this.hasStarted_ = !1;
    }), Re.names.forEach((s) => {
      const r = Re[s];
      e && e[r.getterName] && (this[r.privateName] = e[r.getterName]);
    }), this.featuresProgressEvents || this.manualProgressOn(), this.featuresTimeupdateEvents || this.manualTimeUpdatesOn(), ["Text", "Audio", "Video"].forEach((s) => {
      e[`native${s}Tracks`] === !1 && (this[`featuresNative${s}Tracks`] = !1);
    }), e.nativeCaptions === !1 || e.nativeTextTracks === !1 ? this.featuresNativeTextTracks = !1 : (e.nativeCaptions === !0 || e.nativeTextTracks === !0) && (this.featuresNativeTextTracks = !0), this.featuresNativeTextTracks || this.emulateTextTracks(), this.preloadTextTracks = e.preloadTextTracks !== !1, this.autoRemoteTextTracks_ = new Re.text.ListClass(), this.initTrackListeners(), e.nativeControlsForTouch || this.emitTapEvents(), this.constructor && (this.name_ = this.constructor.name || "Unknown Tech");
  }
  /**
   * A special function to trigger source set in a way that will allow player
   * to re-trigger if the player or tech are not ready yet.
   *
   * @fires Tech#sourceset
   * @param {string} src The source string at the time of the source changing.
   */
  triggerSourceset(e) {
    this.isReady_ || this.one("ready", () => this.setTimeout(() => this.triggerSourceset(e), 1)), this.trigger({
      src: e,
      type: "sourceset"
    });
  }
  /* Fallbacks for unsupported event types
  ================================================================================ */
  /**
   * Polyfill the `progress` event for browsers that don't support it natively.
   *
   * @see {@link Tech#trackProgress}
   */
  manualProgressOn() {
    this.on("durationchange", this.onDurationChange_), this.manualProgress = !0, this.one("ready", this.trackProgress_);
  }
  /**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   */
  manualProgressOff() {
    this.manualProgress = !1, this.stopTrackingProgress(), this.off("durationchange", this.onDurationChange_);
  }
  /**
   * This is used to trigger a `progress` event when the buffered percent changes. It
   * sets an interval function that will be called every 500 milliseconds to check if the
   * buffer end percent has changed.
   *
   * > This function is called by {@link Tech#manualProgressOn}
   *
   * @param {Event} event
   *        The `ready` event that caused this to run.
   *
   * @listens Tech#ready
   * @fires Tech#progress
   */
  trackProgress(e) {
    this.stopTrackingProgress(), this.progressInterval = this.setInterval(ue(this, function() {
      const t = this.bufferedPercent();
      this.bufferedPercent_ !== t && this.trigger("progress"), this.bufferedPercent_ = t, t === 1 && this.stopTrackingProgress();
    }), 500);
  }
  /**
   * Update our internal duration on a `durationchange` event by calling
   * {@link Tech#duration}.
   *
   * @param {Event} event
   *        The `durationchange` event that caused this to run.
   *
   * @listens Tech#durationchange
   */
  onDurationChange(e) {
    this.duration_ = this.duration();
  }
  /**
   * Get and create a `TimeRange` object for buffering.
   *
   * @return { import('../utils/time').TimeRange }
   *         The time range object that was created.
   */
  buffered() {
    return dt(0, 0);
  }
  /**
   * Get the percentage of the current video that is currently buffered.
   *
   * @return {number}
   *         A number from 0 to 1 that represents the decimal percentage of the
   *         video that is buffered.
   *
   */
  bufferedPercent() {
    return xh(this.buffered(), this.duration_);
  }
  /**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   * Stop manually tracking progress events by clearing the interval that was set in
   * {@link Tech#trackProgress}.
   */
  stopTrackingProgress() {
    this.clearInterval(this.progressInterval);
  }
  /**
   * Polyfill the `timeupdate` event for browsers that don't support it.
   *
   * @see {@link Tech#trackCurrentTime}
   */
  manualTimeUpdatesOn() {
    this.manualTimeUpdates = !0, this.on("play", this.trackCurrentTime_), this.on("pause", this.stopTrackingCurrentTime_);
  }
  /**
   * Turn off the polyfill for `timeupdate` events that was created in
   * {@link Tech#manualTimeUpdatesOn}
   */
  manualTimeUpdatesOff() {
    this.manualTimeUpdates = !1, this.stopTrackingCurrentTime(), this.off("play", this.trackCurrentTime_), this.off("pause", this.stopTrackingCurrentTime_);
  }
  /**
   * Sets up an interval function to track current time and trigger `timeupdate` every
   * 250 milliseconds.
   *
   * @listens Tech#play
   * @triggers Tech#timeupdate
   */
  trackCurrentTime() {
    this.currentTimeInterval && this.stopTrackingCurrentTime(), this.currentTimeInterval = this.setInterval(function() {
      this.trigger({
        type: "timeupdate",
        target: this,
        manuallyTriggered: !0
      });
    }, 250);
  }
  /**
   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
   * `timeupdate` event is no longer triggered.
   *
   * @listens {Tech#pause}
   */
  stopTrackingCurrentTime() {
    this.clearInterval(this.currentTimeInterval), this.trigger({
      type: "timeupdate",
      target: this,
      manuallyTriggered: !0
    });
  }
  /**
   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
   *
   * @fires Component#dispose
   */
  dispose() {
    this.clearTracks(st.names), this.manualProgress && this.manualProgressOff(), this.manualTimeUpdates && this.manualTimeUpdatesOff(), super.dispose();
  }
  /**
   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
   *
   * > Note: Techs without source handlers should call this between sources for `video`
   *         & `audio` tracks. You don't want to use them between tracks!
   *
   * @param {string[]|string} types
   *        TrackList names to clear, valid names are `video`, `audio`, and
   *        `text`.
   */
  clearTracks(e) {
    e = [].concat(e), e.forEach((t) => {
      const s = this[`${t}Tracks`]() || [];
      let r = s.length;
      for (; r--; ) {
        const n = s[r];
        t === "text" && this.removeRemoteTextTrack(n), s.removeTrack(n);
      }
    });
  }
  /**
   * Remove any TextTracks added via addRemoteTextTrack that are
   * flagged for automatic garbage collection
   */
  cleanupAutoTextTracks() {
    const e = this.autoRemoteTextTracks_ || [];
    let t = e.length;
    for (; t--; ) {
      const s = e[t];
      this.removeRemoteTextTrack(s);
    }
  }
  /**
   * Reset the tech, which will removes all sources and reset the internal readyState.
   *
   * @abstract
   */
  reset() {
  }
  /**
   * Get the value of `crossOrigin` from the tech.
   *
   * @abstract
   *
   * @see {Html5#crossOrigin}
   */
  crossOrigin() {
  }
  /**
   * Set the value of `crossOrigin` on the tech.
   *
   * @abstract
   *
   * @param {string} crossOrigin the crossOrigin value
   * @see {Html5#setCrossOrigin}
   */
  setCrossOrigin() {
  }
  /**
   * Get or set an error on the Tech.
   *
   * @param {MediaError} [err]
   *        Error to set on the Tech
   *
   * @return {MediaError|null}
   *         The current error object on the tech, or null if there isn't one.
   */
  error(e) {
    return e !== void 0 && (this.error_ = new ve(e), this.trigger("error")), this.error_;
  }
  /**
   * Returns the `TimeRange`s that have been played through for the current source.
   *
   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
   *         It only checks whether the source has played at all or not.
   *
   * @return { import('../utils/time').TimeRange }
   *         - A single time range if this video has played
   *         - An empty set of ranges if not.
   */
  played() {
    return this.hasStarted_ ? dt(0, 0) : dt();
  }
  /**
   * Start playback
   *
   * @abstract
   *
   * @see {Html5#play}
   */
  play() {
  }
  /**
   * Set whether we are scrubbing or not
   *
   * @abstract
   * @param {boolean} _isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   *
   * @see {Html5#setScrubbing}
   */
  setScrubbing(e) {
  }
  /**
   * Get whether we are scrubbing or not
   *
   * @abstract
   *
   * @see {Html5#scrubbing}
   */
  scrubbing() {
  }
  /**
   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
   * previously called.
   *
   * @param {number} _seconds
   *        Set the current time of the media to this.
   * @fires Tech#timeupdate
   */
  setCurrentTime(e) {
    this.manualTimeUpdates && this.trigger({
      type: "timeupdate",
      target: this,
      manuallyTriggered: !0
    });
  }
  /**
   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
   * {@link TextTrackList} events.
   *
   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
   *
   * @fires Tech#audiotrackchange
   * @fires Tech#videotrackchange
   * @fires Tech#texttrackchange
   */
  initTrackListeners() {
    st.names.forEach((e) => {
      const t = st[e], s = () => {
        this.trigger(`${e}trackchange`);
      }, r = this[t.getterName]();
      r.addEventListener("removetrack", s), r.addEventListener("addtrack", s), this.on("dispose", () => {
        r.removeEventListener("removetrack", s), r.removeEventListener("addtrack", s);
      });
    });
  }
  /**
   * Emulate TextTracks using vtt.js if necessary
   *
   * @fires Tech#vttjsloaded
   * @fires Tech#vttjserror
   */
  addWebVttScript_() {
    if (!E.WebVTT)
      if (B.body.contains(this.el())) {
        if (!this.options_["vtt.js"] && Xi(mu) && Object.keys(mu).length > 0) {
          this.trigger("vttjsloaded");
          return;
        }
        const e = B.createElement("script");
        e.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js", e.onload = () => {
          this.trigger("vttjsloaded");
        }, e.onerror = () => {
          this.trigger("vttjserror");
        }, this.on("dispose", () => {
          e.onload = null, e.onerror = null;
        }), E.WebVTT = !0, this.el().parentNode.appendChild(e);
      } else
        this.ready(this.addWebVttScript_);
  }
  /**
   * Emulate texttracks
   *
   */
  emulateTextTracks() {
    const e = this.textTracks(), t = this.remoteTextTracks(), s = (l) => e.addTrack(l.track), r = (l) => e.removeTrack(l.track);
    t.on("addtrack", s), t.on("removetrack", r), this.addWebVttScript_();
    const n = () => this.trigger("texttrackchange"), a = () => {
      n();
      for (let l = 0; l < e.length; l++) {
        const u = e[l];
        u.removeEventListener("cuechange", n), u.mode === "showing" && u.addEventListener("cuechange", n);
      }
    };
    a(), e.addEventListener("change", a), e.addEventListener("addtrack", a), e.addEventListener("removetrack", a), this.on("dispose", function() {
      t.off("addtrack", s), t.off("removetrack", r), e.removeEventListener("change", a), e.removeEventListener("addtrack", a), e.removeEventListener("removetrack", a);
      for (let l = 0; l < e.length; l++)
        e[l].removeEventListener("cuechange", n);
    });
  }
  /**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */
  addTextTrack(e, t, s) {
    if (!e)
      throw new Error("TextTrack kind is required but was not provided");
    return m_(this, e, t, s);
  }
  /**
   * Create an emulated TextTrack for use by addRemoteTextTrack
   *
   * This is intended to be overridden by classes that inherit from
   * Tech in order to create native or custom TextTracks.
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label].
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */
  createRemoteTextTrack(e) {
    const t = le(e, {
      tech: this
    });
    return new Zi.remoteTextEl.TrackClass(t);
  }
  /**
   * Creates a remote text track object and returns an html track element.
   *
   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   * @param {Object} options
   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
   *
   * @param {boolean} [manualCleanup=false]
   *        - When false: the TextTrack will be automatically removed from the video
   *          element whenever the source changes
   *        - When True: The TextTrack will have to be cleaned up manually
   *
   * @return {HTMLTrackElement}
   *         An Html Track Element.
   *
   */
  addRemoteTextTrack(e = {}, t) {
    const s = this.createRemoteTextTrack(e);
    return typeof t != "boolean" && (t = !1), this.remoteTextTrackEls().addTrackElement_(s), this.remoteTextTracks().addTrack(s.track), t === !1 && this.ready(() => this.autoRemoteTextTracks_.addTrack(s.track)), s;
  }
  /**
   * Remove a remote text track from the remote `TextTrackList`.
   *
   * @param {TextTrack} track
   *        `TextTrack` to remove from the `TextTrackList`
   */
  removeRemoteTextTrack(e) {
    const t = this.remoteTextTrackEls().getTrackElementByTrack_(e);
    this.remoteTextTrackEls().removeTrackElement_(t), this.remoteTextTracks().removeTrack(e), this.autoRemoteTextTracks_.removeTrack(e);
  }
  /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   *
   * @abstract
   */
  getVideoPlaybackQuality() {
    return {};
  }
  /**
   * Attempt to create a floating video window always on top of other windows
   * so that users may continue consuming media while they interact with other
   * content sites, or applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @return {Promise|undefined}
   *         A promise with a Picture-in-Picture window if the browser supports
   *         Promises (or one was passed in as an option). It returns undefined
   *         otherwise.
   *
   * @abstract
   */
  requestPictureInPicture() {
    return Promise.reject();
  }
  /**
   * A method to check for the value of the 'disablePictureInPicture' <video> property.
   * Defaults to true, as it should be considered disabled if the tech does not support pip
   *
   * @abstract
   */
  disablePictureInPicture() {
    return !0;
  }
  /**
   * A method to set or unset the 'disablePictureInPicture' <video> property.
   *
   * @abstract
   */
  setDisablePictureInPicture() {
  }
  /**
   * A fallback implementation of requestVideoFrameCallback using requestAnimationFrame
   *
   * @param {function} cb
   * @return {number} request id
   */
  requestVideoFrameCallback(e) {
    const t = ht();
    return !this.isReady_ || this.paused() ? (this.queuedHanders_.add(t), this.one("playing", () => {
      this.queuedHanders_.has(t) && (this.queuedHanders_.delete(t), e());
    })) : this.requestNamedAnimationFrame(t, e), t;
  }
  /**
   * A fallback implementation of cancelVideoFrameCallback
   *
   * @param {number} id id of callback to be cancelled
   */
  cancelVideoFrameCallback(e) {
    this.queuedHanders_.has(e) ? this.queuedHanders_.delete(e) : this.cancelNamedAnimationFrame(e);
  }
  /**
   * A method to set a poster from a `Tech`.
   *
   * @abstract
   */
  setPoster() {
  }
  /**
   * A method to check for the presence of the 'playsinline' <video> attribute.
   *
   * @abstract
   */
  playsinline() {
  }
  /**
   * A method to set or unset the 'playsinline' <video> attribute.
   *
   * @abstract
   */
  setPlaysinline() {
  }
  /**
   * Attempt to force override of native audio tracks.
   *
   * @param {boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   *
   * @abstract
   */
  overrideNativeAudioTracks(e) {
  }
  /**
   * Attempt to force override of native video tracks.
   *
   * @param {boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   *
   * @abstract
   */
  overrideNativeVideoTracks(e) {
  }
  /**
   * Check if the tech can support the given mime-type.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param  {string} _type
   *         The mimetype to check for support
   *
   * @return {string}
   *         'probably', 'maybe', or empty string
   *
   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
   *
   * @abstract
   */
  canPlayType(e) {
    return "";
  }
  /**
   * Check if the type is supported by this tech.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param {string} _type
   *        The media type to check
   * @return {string} Returns the native video element's response
   */
  static canPlayType(e) {
    return "";
  }
  /**
   * Check if the tech can support the given source
   *
   * @param {Object} srcObj
   *        The source object
   * @param {Object} options
   *        The options passed to the tech
   * @return {string} 'probably', 'maybe', or '' (empty string)
   */
  static canPlaySource(e, t) {
    return X.canPlayType(e.type);
  }
  /*
   * Return whether the argument is a Tech or not.
   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
   *
   * @param {Object} component
   *        The item to check
   *
   * @return {boolean}
   *         Whether it is a tech or not
   *         - True if it is a tech
   *         - False if it is not
   */
  static isTech(e) {
    return e.prototype instanceof X || e instanceof X || e === X;
  }
  /**
   * Registers a `Tech` into a shared list for videojs.
   *
   * @param {string} name
   *        Name of the `Tech` to register.
   *
   * @param {Object} tech
   *        The `Tech` class to register.
   */
  static registerTech(e, t) {
    if (X.techs_ || (X.techs_ = {}), !X.isTech(t))
      throw new Error(`Tech ${e} must be a Tech`);
    if (!X.canPlayType)
      throw new Error("Techs must have a static canPlayType method on them");
    if (!X.canPlaySource)
      throw new Error("Techs must have a static canPlaySource method on them");
    return e = ye(e), X.techs_[e] = t, X.techs_[Ns(e)] = t, e !== "Tech" && X.defaultTechOrder_.push(e), t;
  }
  /**
   * Get a `Tech` from the shared list by name.
   *
   * @param {string} name
   *        `camelCase` or `TitleCase` name of the Tech to get
   *
   * @return {Tech|undefined}
   *         The `Tech` or undefined if there was no tech with the name requested.
   */
  static getTech(e) {
    if (e) {
      if (X.techs_ && X.techs_[e])
        return X.techs_[e];
      if (e = ye(e), E && E.videojs && E.videojs[e])
        return J.warn(`The ${e} tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)`), E.videojs[e];
    }
  }
}
Re.names.forEach(function(i) {
  const e = Re[i];
  X.prototype[e.getterName] = function() {
    return this[e.privateName] = this[e.privateName] || new e.ListClass(), this[e.privateName];
  };
});
X.prototype.featuresVolumeControl = !0;
X.prototype.featuresMuteControl = !0;
X.prototype.featuresFullscreenResize = !1;
X.prototype.featuresPlaybackRate = !1;
X.prototype.featuresProgressEvents = !1;
X.prototype.featuresSourceset = !1;
X.prototype.featuresTimeupdateEvents = !1;
X.prototype.featuresNativeTextTracks = !1;
X.prototype.featuresVideoFrameCallback = !1;
X.withSourceHandlers = function(i) {
  i.registerSourceHandler = function(t, s) {
    let r = i.sourceHandlers;
    r || (r = i.sourceHandlers = []), s === void 0 && (s = r.length), r.splice(s, 0, t);
  }, i.canPlayType = function(t) {
    const s = i.sourceHandlers || [];
    let r;
    for (let n = 0; n < s.length; n++)
      if (r = s[n].canPlayType(t), r)
        return r;
    return "";
  }, i.selectSourceHandler = function(t, s) {
    const r = i.sourceHandlers || [];
    let n;
    for (let a = 0; a < r.length; a++)
      if (n = r[a].canHandleSource(t, s), n)
        return r[a];
    return null;
  }, i.canPlaySource = function(t, s) {
    const r = i.selectSourceHandler(t, s);
    return r ? r.canHandleSource(t, s) : "";
  }, ["seekable", "seeking", "duration"].forEach(function(t) {
    const s = this[t];
    typeof s == "function" && (this[t] = function() {
      return this.sourceHandler_ && this.sourceHandler_[t] ? this.sourceHandler_[t].apply(this.sourceHandler_, arguments) : s.apply(this, arguments);
    });
  }, i.prototype), i.prototype.setSource = function(t) {
    let s = i.selectSourceHandler(t, this.options_);
    s || (i.nativeSourceHandler ? s = i.nativeSourceHandler : J.error("No source handler found for the current source.")), this.disposeSourceHandler(), this.off("dispose", this.disposeSourceHandler_), s !== i.nativeSourceHandler && (this.currentSource_ = t), this.sourceHandler_ = s.handleSource(t, this, this.options_), this.one("dispose", this.disposeSourceHandler_);
  }, i.prototype.disposeSourceHandler = function() {
    this.currentSource_ && (this.clearTracks(["audio", "video"]), this.currentSource_ = null), this.cleanupAutoTextTracks(), this.sourceHandler_ && (this.sourceHandler_.dispose && this.sourceHandler_.dispose(), this.sourceHandler_ = null);
  };
};
N.registerComponent("Tech", X);
X.registerTech("Tech", X);
X.defaultTechOrder_ = [];
const vi = {}, Ya = {}, tn = {};
function g_(i, e) {
  vi[i] = vi[i] || [], vi[i].push(e);
}
function v_(i, e, t) {
  i.setTimeout(() => di(e, vi[e.type], t, i), 1);
}
function y_(i, e) {
  i.forEach((t) => t.setTech && t.setTech(e));
}
function __(i, e, t) {
  return i.reduceRight(zo(t), e[t]());
}
function T_(i, e, t, s) {
  return e[t](i.reduce(zo(t), s));
}
function Zu(i, e, t, s = null) {
  const r = "call" + ye(t), n = i.reduce(zo(r), s), a = n === tn, l = a ? null : e[t](n);
  return S_(i, t, l, a), l;
}
const b_ = {
  buffered: 1,
  currentTime: 1,
  duration: 1,
  muted: 1,
  played: 1,
  paused: 1,
  seekable: 1,
  volume: 1,
  ended: 1
}, x_ = {
  setCurrentTime: 1,
  setMuted: 1,
  setVolume: 1
}, ec = {
  play: 1,
  pause: 1
};
function zo(i) {
  return (e, t) => e === tn ? tn : t[i] ? t[i](e) : e;
}
function S_(i, e, t, s) {
  for (let r = i.length - 1; r >= 0; r--) {
    const n = i[r];
    n[e] && n[e](s, t);
  }
}
function E_(i) {
  Ya[i.id()] = null;
}
function C_(i, e) {
  const t = Ya[i.id()];
  let s = null;
  if (t == null)
    return s = e(i), Ya[i.id()] = [[e, s]], s;
  for (let r = 0; r < t.length; r++) {
    const [n, a] = t[r];
    n === e && (s = a);
  }
  return s === null && (s = e(i), t.push([e, s])), s;
}
function di(i = {}, e = [], t, s, r = [], n = !1) {
  const [a, ...l] = e;
  if (typeof a == "string")
    di(i, vi[a], t, s, r, n);
  else if (a) {
    const u = C_(s, a);
    if (!u.setSource)
      return r.push(u), di(i, l, t, s, r, n);
    u.setSource(Object.assign({}, i), function(f, m) {
      if (f)
        return di(i, l, t, s, r, n);
      r.push(u), di(m, i.type === m.type ? l : vi[m.type], t, s, r, n);
    });
  } else
    l.length ? di(i, l, t, s, r, n) : n ? t(i, r) : di(i, vi["*"], t, s, r, !0);
}
const w_ = {
  opus: "video/ogg",
  ogv: "video/ogg",
  mp4: "video/mp4",
  mov: "video/mp4",
  m4v: "video/mp4",
  mkv: "video/x-matroska",
  m4a: "audio/mp4",
  mp3: "audio/mpeg",
  aac: "audio/aac",
  caf: "audio/x-caf",
  flac: "audio/flac",
  oga: "audio/ogg",
  wav: "audio/wav",
  m3u8: "application/x-mpegURL",
  mpd: "application/dash+xml",
  jpg: "image/jpeg",
  jpeg: "image/jpeg",
  gif: "image/gif",
  png: "image/png",
  svg: "image/svg+xml",
  webp: "image/webp"
}, sn = function(i = "") {
  const e = Ho(i);
  return w_[e.toLowerCase()] || "";
}, A_ = (i, e) => {
  if (!e)
    return "";
  if (i.cache_.source.src === e && i.cache_.source.type)
    return i.cache_.source.type;
  const t = i.cache_.sources.filter((r) => r.src === e);
  if (t.length)
    return t[0].type;
  const s = i.$$("source");
  for (let r = 0; r < s.length; r++) {
    const n = s[r];
    if (n.type && n.src && n.src === e)
      return n.type;
  }
  return sn(e);
}, Ah = function(i) {
  if (Array.isArray(i)) {
    let e = [];
    i.forEach(function(t) {
      t = Ah(t), Array.isArray(t) ? e = e.concat(t) : Et(t) && e.push(t);
    }), i = e;
  } else
    typeof i == "string" && i.trim() ? i = [tc({
      src: i
    })] : Et(i) && typeof i.src == "string" && i.src && i.src.trim() ? i = [tc(i)] : i = [];
  return i;
};
function tc(i) {
  if (!i.type) {
    const e = sn(i.src);
    e && (i.type = e);
  }
  return i;
}
var D_ = `<svg xmlns="http://www.w3.org/2000/svg">
  <defs>
    <symbol viewBox="0 0 48 48" id="vjs-icon-play">
      <path d="M16 10v28l22-14z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-pause">
      <path d="M12 38h8V10h-8v28zm16-28v28h8V10h-8z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-audio">
      <path d="M24 2C14.06 2 6 10.06 6 20v14c0 3.31 2.69 6 6 6h6V24h-8v-4c0-7.73 6.27-14 14-14s14 6.27 14 14v4h-8v16h6c3.31 0 6-2.69 6-6V20c0-9.94-8.06-18-18-18z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-captions">
      <path d="M38 8H10c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM22 22h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2zm14 0h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-subtitles">
      <path d="M40 8H8c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM8 24h8v4H8v-4zm20 12H8v-4h20v4zm12 0h-8v-4h8v4zm0-8H20v-4h20v4z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-fullscreen-enter">
      <path d="M14 28h-4v10h10v-4h-6v-6zm-4-8h4v-6h6v-4H10v10zm24 14h-6v4h10V28h-4v6zm-6-24v4h6v6h4V10H28z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-fullscreen-exit">
      <path d="M10 32h6v6h4V28H10v4zm6-16h-6v4h10V10h-4v6zm12 22h4v-6h6v-4H28v10zm4-22v-6h-4v10h10v-4h-6z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-play-circle">
      <path d="M20 33l12-9-12-9v18zm4-29C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-mute">
      <path d="M33 24c0-3.53-2.04-6.58-5-8.05v4.42l4.91 4.91c.06-.42.09-.85.09-1.28zm5 0c0 1.88-.41 3.65-1.08 5.28l3.03 3.03C41.25 29.82 42 27 42 24c0-8.56-5.99-15.72-14-17.54v4.13c5.78 1.72 10 7.07 10 13.41zM8.55 6L6 8.55 15.45 18H6v12h8l10 10V26.55l8.51 8.51c-1.34 1.03-2.85 1.86-4.51 2.36v4.13a17.94 17.94 0 0 0 7.37-3.62L39.45 42 42 39.45l-18-18L8.55 6zM24 8l-4.18 4.18L24 16.36V8z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-low">
      <path d="M14 18v12h8l10 10V8L22 18h-8z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-medium">
      <path d="M37 24c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zm-27-6v12h8l10 10V8L18 18h-8z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-high">
      <path d="M6 18v12h8l10 10V8L14 18H6zm27 6c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zM28 6.46v4.13c5.78 1.72 10 7.07 10 13.41s-4.22 11.69-10 13.41v4.13c8.01-1.82 14-8.97 14-17.54S36.01 8.28 28 6.46z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-spinner">
      <path d="M18.8 21l9.53-16.51C26.94 4.18 25.49 4 24 4c-4.8 0-9.19 1.69-12.64 4.51l7.33 12.69.11-.2zm24.28-3c-1.84-5.85-6.3-10.52-11.99-12.68L23.77 18h19.31zm.52 2H28.62l.58 1 9.53 16.5C41.99 33.94 44 29.21 44 24c0-1.37-.14-2.71-.4-4zm-26.53 4l-7.8-13.5C6.01 14.06 4 18.79 4 24c0 1.37.14 2.71.4 4h14.98l-2.31-4zM4.92 30c1.84 5.85 6.3 10.52 11.99 12.68L24.23 30H4.92zm22.54 0l-7.8 13.51c1.4.31 2.85.49 4.34.49 4.8 0 9.19-1.69 12.64-4.51L29.31 26.8 27.46 30z"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="vjs-icon-hd">
      <path d="M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-8 12H9.5v-2h-2v2H6V9h1.5v2.5h2V9H11v6zm2-6h4c.55 0 1 .45 1 1v4c0 .55-.45 1-1 1h-4V9zm1.5 4.5h2v-3h-2v3z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-chapters">
      <path d="M6 26h4v-4H6v4zm0 8h4v-4H6v4zm0-16h4v-4H6v4zm8 8h28v-4H14v4zm0 8h28v-4H14v4zm0-20v4h28v-4H14z"></path>
    </symbol>
    <symbol viewBox="0 0 40 40" id="vjs-icon-downloading">
      <path d="M18.208 36.875q-3.208-.292-5.979-1.729-2.771-1.438-4.812-3.729-2.042-2.292-3.188-5.229-1.146-2.938-1.146-6.23 0-6.583 4.334-11.416 4.333-4.834 10.833-5.5v3.166q-5.167.75-8.583 4.646Q6.25 14.75 6.25 19.958q0 5.209 3.396 9.104 3.396 3.896 8.562 4.646zM20 28.417L11.542 20l2.083-2.083 4.917 4.916v-11.25h2.916v11.25l4.875-4.916L28.417 20zm1.792 8.458v-3.167q1.833-.25 3.541-.958 1.709-.708 3.167-1.875l2.333 2.292q-1.958 1.583-4.25 2.541-2.291.959-4.791 1.167zm6.791-27.792q-1.541-1.125-3.25-1.854-1.708-.729-3.541-1.021V3.042q2.5.25 4.77 1.208 2.271.958 4.271 2.5zm4.584 21.584l-2.25-2.25q1.166-1.5 1.854-3.209.687-1.708.937-3.541h3.209q-.292 2.5-1.229 4.791-.938 2.292-2.521 4.209zm.541-12.417q-.291-1.833-.958-3.562-.667-1.73-1.833-3.188l2.375-2.208q1.541 1.916 2.458 4.208.917 2.292 1.167 4.75z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download">
      <path d="M10.8 40.55q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h26.35v-7.7h3.4v7.7q0 1.4-1 2.4t-2.4 1zM24 32.1L13.9 22.05l2.45-2.45 5.95 5.95V7.15h3.4v18.4l5.95-5.95 2.45 2.45z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download-done">
      <path d="M9.8 40.5v-3.45h28.4v3.45zm9.2-9.05L7.4 19.85l2.45-2.35L19 26.65l19.2-19.2 2.4 2.4z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download-off">
      <path d="M4.9 4.75L43.25 43.1 41 45.3l-4.75-4.75q-.05.05-.075.025-.025-.025-.075-.025H10.8q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h22.05l-7-7-1.85 1.8L13.9 21.9l1.85-1.85L2.7 7zm26.75 14.7l2.45 2.45-3.75 3.8-2.45-2.5zM25.7 7.15V21.1l-3.4-3.45V7.15z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-share">
      <path d="M36 32.17c-1.52 0-2.89.59-3.93 1.54L17.82 25.4c.11-.45.18-.92.18-1.4s-.07-.95-.18-1.4l14.1-8.23c1.07 1 2.5 1.62 4.08 1.62 3.31 0 6-2.69 6-6s-2.69-6-6-6-6 2.69-6 6c0 .48.07.95.18 1.4l-14.1 8.23c-1.07-1-2.5-1.62-4.08-1.62-3.31 0-6 2.69-6 6s2.69 6 6 6c1.58 0 3.01-.62 4.08-1.62l14.25 8.31c-.1.42-.16.86-.16 1.31A5.83 5.83 0 1 0 36 32.17z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-cog">
      <path d="M38.86 25.95c.08-.64.14-1.29.14-1.95s-.06-1.31-.14-1.95l4.23-3.31c.38-.3.49-.84.24-1.28l-4-6.93c-.25-.43-.77-.61-1.22-.43l-4.98 2.01c-1.03-.79-2.16-1.46-3.38-1.97L29 4.84c-.09-.47-.5-.84-1-.84h-8c-.5 0-.91.37-.99.84l-.75 5.3a14.8 14.8 0 0 0-3.38 1.97L9.9 10.1a1 1 0 0 0-1.22.43l-4 6.93c-.25.43-.14.97.24 1.28l4.22 3.31C9.06 22.69 9 23.34 9 24s.06 1.31.14 1.95l-4.22 3.31c-.38.3-.49.84-.24 1.28l4 6.93c.25.43.77.61 1.22.43l4.98-2.01c1.03.79 2.16 1.46 3.38 1.97l.75 5.3c.08.47.49.84.99.84h8c.5 0 .91-.37.99-.84l.75-5.3a14.8 14.8 0 0 0 3.38-1.97l4.98 2.01a1 1 0 0 0 1.22-.43l4-6.93c.25-.43.14-.97-.24-1.28l-4.22-3.31zM24 31c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-square">
      <path d="M36 8H12c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h24c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zm0 28H12V12h24v24z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-circle">
      <circle cx="24" cy="24" r="20"></circle>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-circle-outline">
      <path d="M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-circle-inner-circle">
      <path d="M24 4C12.97 4 4 12.97 4 24s8.97 20 20 20 20-8.97 20-20S35.03 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16zm6-16c0 3.31-2.69 6-6 6s-6-2.69-6-6 2.69-6 6-6 6 2.69 6 6z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-cancel">
      <path d="M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm10 27.17L31.17 34 24 26.83 16.83 34 14 31.17 21.17 24 14 16.83 16.83 14 24 21.17 31.17 14 34 16.83 26.83 24 34 31.17z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-replay">
      <path d="M24 10V2L14 12l10 10v-8c6.63 0 12 5.37 12 12s-5.37 12-12 12-12-5.37-12-12H8c0 8.84 7.16 16 16 16s16-7.16 16-16-7.16-16-16-16z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-repeat">
      <path d="M14 14h20v6l8-8-8-8v6H10v12h4v-8zm20 20H14v-6l-8 8 8 8v-6h24V26h-4v8z"></path>
    </symbol>
    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-5">
      <path d="M17.689 98l-8.697 8.696 8.697 8.697 2.486-2.485-4.32-4.319h1.302c4.93 0 9.071 1.722 12.424 5.165 3.352 3.443 5.029 7.638 5.029 12.584h3.55c0-2.958-.553-5.73-1.658-8.313-1.104-2.583-2.622-4.841-4.555-6.774-1.932-1.932-4.19-3.45-6.773-4.555-2.584-1.104-5.355-1.657-8.313-1.657H15.5l4.615-4.615zm-8.08 21.659v13.861h11.357v5.008H9.609V143h12.7c.834 0 1.55-.298 2.146-.894.596-.597.895-1.31.895-2.145v-7.781c0-.835-.299-1.55-.895-2.147a2.929 2.929 0 0 0-2.147-.894h-8.227v-5.096H25.35v-4.384z"></path>
    </symbol>
    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-10">
      <path d="M42.315 125.63c0-4.997-1.694-9.235-5.08-12.713-3.388-3.479-7.571-5.218-12.552-5.218h-1.315l4.363 4.363-2.51 2.51-8.787-8.786L25.221 97l2.45 2.45-4.662 4.663h1.375c2.988 0 5.788.557 8.397 1.673 2.61 1.116 4.892 2.65 6.844 4.602 1.953 1.953 3.487 4.234 4.602 6.844 1.116 2.61 1.674 5.41 1.674 8.398zM8.183 142v-19.657H3.176V117.8h9.643V142zm13.63 0c-1.156 0-2.127-.393-2.912-1.178-.778-.778-1.168-1.746-1.168-2.902v-16.04c0-1.156.393-2.127 1.178-2.912.779-.779 1.746-1.168 2.902-1.168h7.696c1.156 0 2.126.392 2.911 1.177.779.78 1.168 1.747 1.168 2.903v16.04c0 1.156-.392 2.127-1.177 2.912-.779.779-1.746 1.168-2.902 1.168zm.556-4.636h6.583v-15.02H22.37z"></path>
    </symbol>
    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-30">
      <path d="M26.047 97l-8.733 8.732 8.733 8.733 2.496-2.494-4.336-4.338h1.307c4.95 0 9.108 1.73 12.474 5.187 3.367 3.458 5.051 7.668 5.051 12.635h3.565c0-2.97-.556-5.751-1.665-8.346-1.109-2.594-2.633-4.862-4.574-6.802-1.94-1.941-4.208-3.466-6.803-4.575-2.594-1.109-5.375-1.664-8.345-1.664H23.85l4.634-4.634zM2.555 117.531v4.688h10.297v5.25H5.873v4.687h6.979v5.156H2.555V142H13.36c1.061 0 1.95-.395 2.668-1.186.718-.79 1.076-1.772 1.076-2.94v-16.218c0-1.168-.358-2.149-1.076-2.94-.717-.79-1.607-1.185-2.668-1.185zm22.482.14c-1.149 0-2.11.39-2.885 1.165-.78.78-1.172 1.744-1.172 2.893v15.943c0 1.149.388 2.11 1.163 2.885.78.78 1.745 1.172 2.894 1.172h7.649c1.148 0 2.11-.388 2.884-1.163.78-.78 1.17-1.745 1.17-2.894v-15.943c0-1.15-.386-2.111-1.16-2.885-.78-.78-1.746-1.172-2.894-1.172zm.553 4.518h6.545v14.93H25.59z"></path>
    </symbol>
    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-5">
      <path d="M29.508 97l-2.431 2.43 4.625 4.625h-1.364c-2.965 0-5.742.554-8.332 1.66-2.589 1.107-4.851 2.629-6.788 4.566-1.937 1.937-3.458 4.2-4.565 6.788-1.107 2.59-1.66 5.367-1.66 8.331h3.557c0-4.957 1.68-9.16 5.04-12.611 3.36-3.45 7.51-5.177 12.451-5.177h1.304l-4.326 4.33 2.49 2.49 8.715-8.716zm-9.783 21.61v13.89h11.382v5.018H19.725V142h12.727a2.93 2.93 0 0 0 2.15-.896 2.93 2.93 0 0 0 .896-2.15v-7.798c0-.837-.299-1.554-.896-2.152a2.93 2.93 0 0 0-2.15-.896h-8.245V123h11.29v-4.392z"></path>
    </symbol>
    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-10">
      <path d="M23.119 97l-2.386 2.383 4.538 4.538h-1.339c-2.908 0-5.633.543-8.173 1.63-2.54 1.085-4.76 2.577-6.66 4.478-1.9 1.9-3.392 4.12-4.478 6.66-1.085 2.54-1.629 5.264-1.629 8.172h3.49c0-4.863 1.648-8.986 4.944-12.372 3.297-3.385 7.368-5.078 12.216-5.078h1.279l-4.245 4.247 2.443 2.442 8.55-8.55zm-9.52 21.45v4.42h4.871V142h4.513v-23.55zm18.136 0c-1.125 0-2.066.377-2.824 1.135-.764.764-1.148 1.709-1.148 2.834v15.612c0 1.124.38 2.066 1.139 2.824.764.764 1.708 1.145 2.833 1.145h7.489c1.125 0 2.066-.378 2.824-1.136.764-.764 1.145-1.709 1.145-2.833v-15.612c0-1.125-.378-2.067-1.136-2.825-.764-.764-1.708-1.145-2.833-1.145zm.54 4.42h6.408v14.617h-6.407z"></path>
    </symbol>
    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-30">
      <path d="M25.549 97l-2.437 2.434 4.634 4.635H26.38c-2.97 0-5.753.555-8.347 1.664-2.594 1.109-4.861 2.633-6.802 4.574-1.94 1.94-3.465 4.207-4.574 6.802-1.109 2.594-1.664 5.377-1.664 8.347h3.565c0-4.967 1.683-9.178 5.05-12.636 3.366-3.458 7.525-5.187 12.475-5.187h1.307l-4.335 4.338 2.495 2.494 8.732-8.732zm-11.553 20.53v4.689h10.297v5.249h-6.978v4.688h6.978v5.156H13.996V142h10.808c1.06 0 1.948-.395 2.666-1.186.718-.79 1.077-1.771 1.077-2.94v-16.217c0-1.169-.36-2.15-1.077-2.94-.718-.79-1.605-1.186-2.666-1.186zm21.174.168c-1.149 0-2.11.389-2.884 1.163-.78.78-1.172 1.745-1.172 2.894v15.942c0 1.15.388 2.11 1.162 2.885.78.78 1.745 1.17 2.894 1.17h7.649c1.149 0 2.11-.386 2.885-1.16.78-.78 1.17-1.746 1.17-2.895v-15.942c0-1.15-.387-2.11-1.161-2.885-.78-.78-1.745-1.172-2.894-1.172zm.552 4.516h6.542v14.931h-6.542z"></path>
    </symbol>
    <symbol viewBox="0 0 512 512" id="vjs-icon-audio-description">
      <g fill-rule="evenodd"><path d="M227.29 381.351V162.993c50.38-1.017 89.108-3.028 117.631 17.126 27.374 19.342 48.734 56.965 44.89 105.325-4.067 51.155-41.335 94.139-89.776 98.475-24.085 2.155-71.972 0-71.972 0s-.84-1.352-.773-2.568m48.755-54.804c31.43 1.26 53.208-16.633 56.495-45.386 4.403-38.51-21.188-63.552-58.041-60.796v103.612c-.036 1.466.575 2.22 1.546 2.57"></path><path d="M383.78 381.328c13.336 3.71 17.387-11.06 23.215-21.408 12.722-22.571 22.294-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.226 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894"></path><path d="M425.154 381.328c13.336 3.71 17.384-11.061 23.215-21.408 12.721-22.571 22.291-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.511c-.586 3.874 2.226 7.315 3.866 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894"></path><path d="M466.26 381.328c13.337 3.71 17.385-11.061 23.216-21.408 12.722-22.571 22.292-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.225 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894M4.477 383.005H72.58l18.573-28.484 64.169-.135s.065 19.413.065 28.62h48.756V160.307h-58.816c-5.653 9.537-140.85 222.697-140.85 222.697zm152.667-145.282v71.158l-40.453-.27 40.453-70.888z"></path></g>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-next-item">
      <path d="M12 36l17-12-17-12v24zm20-24v24h4V12h-4z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-previous-item">
      <path d="M12 12h4v24h-4zm7 12l17 12V12z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-shuffle">
      <path d="M21.17 18.34L10.83 8 8 10.83l10.34 10.34 2.83-2.83zM29 8l4.09 4.09L8 37.17 10.83 40l25.09-25.09L40 19V8H29zm.66 18.83l-2.83 2.83 6.26 6.26L29 40h11V29l-4.09 4.09-6.25-6.26z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-cast">
      <path d="M42 6H6c-2.21 0-4 1.79-4 4v6h4v-6h36v28H28v4h14c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4zM2 36v6h6c0-3.31-2.69-6-6-6zm0-8v4c5.52 0 10 4.48 10 10h4c0-7.73-6.27-14-14-14zm0-8v4c9.94 0 18 8.06 18 18h4c0-12.15-9.85-22-22-22z"></path>
    </symbol>
    <symbol viewBox="0 0 48 48" id="vjs-icon-picture-in-picture-enter">
      <path d="M38 22H22v11.99h16V22zm8 16V9.96C46 7.76 44.2 6 42 6H6C3.8 6 2 7.76 2 9.96V38c0 2.2 1.8 4 4 4h36c2.2 0 4-1.8 4-4zm-4 .04H6V9.94h36v28.1z"></path>
    </symbol>
    <symbol viewBox="0 0 22 18" id="vjs-icon-picture-in-picture-exit">
      <path d="M18 4H4v10h14V4zm4 12V1.98C22 .88 21.1 0 20 0H2C.9 0 0 .88 0 1.98V16c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H2V1.97h18v14.05z"></path>
      <path fill="none" d="M-1-3h24v24H-1z"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="vjs-icon-facebook">
      <path d="M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759H734V905H479V609h255V391q0-186 104-288.5T1115 0q147 0 228 12z"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="vjs-icon-linkedin">
      <path d="M477 625v991H147V625h330zm21-306q1 73-50.5 122T312 490h-2q-82 0-132-49t-50-122q0-74 51.5-122.5T314 148t133 48.5T498 319zm1166 729v568h-329v-530q0-105-40.5-164.5T1168 862q-63 0-105.5 34.5T999 982q-11 30-11 81v553H659q2-399 2-647t-1-296l-1-48h329v144h-2q20-32 41-56t56.5-52 87-43.5T1285 602q171 0 275 113.5t104 332.5z"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="vjs-icon-twitter">
      <path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5T1369.5 1125 1185 1335.5t-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5T285 1033q33 5 61 5 43 0 85-11-112-23-185.5-111.5T172 710v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5T884 653q-8-38-8-74 0-134 94.5-228.5T1199 256q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="vjs-icon-tumblr">
      <path d="M1328 1329l80 237q-23 35-111 66t-177 32q-104 2-190.5-26T787 1564t-95-106-55.5-120-16.5-118V676H452V461q72-26 129-69.5t91-90 58-102 34-99T779 12q1-5 4.5-8.5T791 0h244v424h333v252h-334v518q0 30 6.5 56t22.5 52.5 49.5 41.5 81.5 14q78-2 134-29z"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="vjs-icon-pinterest">
      <path d="M1664 896q0 209-103 385.5T1281.5 1561 896 1664q-111 0-218-32 59-93 78-164 9-34 54-211 20 39 73 67.5t114 28.5q121 0 216-68.5t147-188.5 52-270q0-114-59.5-214T1180 449t-255-63q-105 0-196 29t-154.5 77-109 110.5-67 129.5T377 866q0 104 40 183t117 111q30 12 38-20 2-7 8-31t8-30q6-23-11-43-51-61-51-151 0-151 104.5-259.5T904 517q151 0 235.5 82t84.5 213q0 170-68.5 289T980 1220q-61 0-98-43.5T859 1072q8-35 26.5-93.5t30-103T927 800q0-50-27-83t-77-33q-62 0-105 57t-43 142q0 73 25 122l-99 418q-17 70-13 177-206-91-333-281T128 896q0-209 103-385.5T510.5 231 896 128t385.5 103T1561 510.5 1664 896z"></path>
    </symbol>
  </defs>
</svg>`;
class k_ extends N {
  /**
   * Create an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function that is run when this component is ready.
   */
  constructor(e, t, s) {
    const r = le({
      createEl: !1
    }, t);
    if (super(e, r, s), !t.playerOptions.sources || t.playerOptions.sources.length === 0)
      for (let n = 0, a = t.playerOptions.techOrder; n < a.length; n++) {
        const l = ye(a[n]);
        let u = X.getTech(l);
        if (l || (u = N.getComponent(l)), u && u.isSupported()) {
          e.loadTech_(l);
          break;
        }
      }
    else
      e.src(t.playerOptions.sources);
  }
}
N.registerComponent("MediaLoader", k_);
class Nn extends N {
  /**
   * Creates an instance of this class.
   *
   * @param  { import('./player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of component options.
   *
   * @param  {function} [options.clickHandler]
   *         The function to call when the button is clicked / activated
   *
   * @param  {string} [options.controlText]
   *         The text to set on the button
   *
   * @param  {string} [options.className]
   *         A class or space separated list of classes to add the component
   *
   */
  constructor(e, t) {
    super(e, t), this.options_.controlText && this.controlText(this.options_.controlText), this.handleMouseOver_ = (s) => this.handleMouseOver(s), this.handleMouseOut_ = (s) => this.handleMouseOut(s), this.handleClick_ = (s) => this.handleClick(s), this.handleKeyDown_ = (s) => this.handleKeyDown(s), this.emitTapEvents(), this.enable();
  }
  /**
   * Create the `ClickableComponent`s DOM element.
   *
   * @param {string} [tag=div]
   *        The element's node type.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */
  createEl(e = "div", t = {}, s = {}) {
    t = Object.assign({
      className: this.buildCSSClass(),
      tabIndex: 0
    }, t), e === "button" && J.error(`Creating a ClickableComponent with an HTML element of ${e} is not supported; use a Button instead.`), s = Object.assign({
      role: "button"
    }, s), this.tabIndex_ = t.tabIndex;
    const r = Y(e, t, s);
    return this.player_.options_.experimentalSvgIcons || r.appendChild(Y("span", {
      className: "vjs-icon-placeholder"
    }, {
      "aria-hidden": !0
    })), this.createControlTextEl(r), r;
  }
  dispose() {
    this.controlTextEl_ = null, super.dispose();
  }
  /**
   * Create a control text element on this `ClickableComponent`
   *
   * @param {Element} [el]
   *        Parent element for the control text.
   *
   * @return {Element}
   *         The control text element that gets created.
   */
  createControlTextEl(e) {
    return this.controlTextEl_ = Y("span", {
      className: "vjs-control-text"
    }, {
      // let the screen reader user know that the text of the element may change
      "aria-live": "polite"
    }), e && e.appendChild(this.controlTextEl_), this.controlText(this.controlText_, e), this.controlTextEl_;
  }
  /**
   * Get or set the localize text to use for the controls on the `ClickableComponent`.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */
  controlText(e, t = this.el()) {
    if (e === void 0)
      return this.controlText_ || "Need Text";
    const s = this.localize(e);
    this.controlText_ = e, ei(this.controlTextEl_, s), !this.nonIconControl && !this.player_.options_.noUITitleAttributes && t.setAttribute("title", s);
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-control vjs-button ${super.buildCSSClass()}`;
  }
  /**
   * Enable this `ClickableComponent`
   */
  enable() {
    this.enabled_ || (this.enabled_ = !0, this.removeClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "false"), typeof this.tabIndex_ < "u" && this.el_.setAttribute("tabIndex", this.tabIndex_), this.on(["tap", "click"], this.handleClick_), this.on("keydown", this.handleKeyDown_));
  }
  /**
   * Disable this `ClickableComponent`
   */
  disable() {
    this.enabled_ = !1, this.addClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "true"), typeof this.tabIndex_ < "u" && this.el_.removeAttribute("tabIndex"), this.off("mouseover", this.handleMouseOver_), this.off("mouseout", this.handleMouseOut_), this.off(["tap", "click"], this.handleClick_), this.off("keydown", this.handleKeyDown_);
  }
  /**
   * Handles language change in ClickableComponent for the player in components
   *
   *
   */
  handleLanguagechange() {
    this.controlText(this.controlText_);
  }
  /**
   * Event handler that is called when a `ClickableComponent` receives a
   * `click` or `tap` event.
   *
   * @param {Event} event
   *        The `tap` or `click` event that caused this function to be called.
   *
   * @listens tap
   * @listens click
   * @abstract
   */
  handleClick(e) {
    this.options_.clickHandler && this.options_.clickHandler.call(this, arguments);
  }
  /**
   * Event handler that is called when a `ClickableComponent` receives a
   * `keydown` event.
   *
   * By default, if the key is Space or Enter, it will trigger a `click` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    W.isEventKey(e, "Space") || W.isEventKey(e, "Enter") ? (e.preventDefault(), e.stopPropagation(), this.trigger("click")) : super.handleKeyDown(e);
  }
}
N.registerComponent("ClickableComponent", Nn);
class Qa extends Nn {
  /**
   * Create an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.update(), this.update_ = (s) => this.update(s), e.on("posterchange", this.update_);
  }
  /**
   * Clean up and dispose of the `PosterImage`.
   */
  dispose() {
    this.player().off("posterchange", this.update_), super.dispose();
  }
  /**
   * Create the `PosterImage`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */
  createEl() {
    return Y("div", {
      className: "vjs-poster"
    });
  }
  /**
   * Get or set the `PosterImage`'s crossOrigin option.
   *
   * @param {string|null} [value]
   *        The value to set the crossOrigin to. If an argument is
   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.
   *
   * @return {string|null}
   *         - The current crossOrigin value of the `Player` when getting.
   *         - undefined when setting
   */
  crossOrigin(e) {
    if (typeof e > "u")
      return this.$("img") ? this.$("img").crossOrigin : this.player_.tech_ && this.player_.tech_.isReady_ ? this.player_.crossOrigin() : this.player_.options_.crossOrigin || this.player_.options_.crossorigin || null;
    if (e !== null && e !== "anonymous" && e !== "use-credentials") {
      this.player_.log.warn(`crossOrigin must be null,  "anonymous" or "use-credentials", given "${e}"`);
      return;
    }
    this.$("img") && (this.$("img").crossOrigin = e);
  }
  /**
   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
   *
   * @listens Player#posterchange
   *
   * @param {Event} [event]
   *        The `Player#posterchange` event that triggered this function.
   */
  update(e) {
    const t = this.player().poster();
    this.setSrc(t), t ? this.show() : this.hide();
  }
  /**
   * Set the source of the `PosterImage` depending on the display method. (Re)creates
   * the inner picture and img elementss when needed.
   *
   * @param {string} [url]
   *        The URL to the source for the `PosterImage`. If not specified or falsy,
   *        any source and ant inner picture/img are removed.
   */
  setSrc(e) {
    if (!e) {
      this.el_.textContent = "";
      return;
    }
    this.$("img") || this.el_.appendChild(Y("picture", {
      className: "vjs-poster",
      // Don't want poster to be tabbable.
      tabIndex: -1
    }, {}, Y("img", {
      loading: "lazy",
      crossOrigin: this.crossOrigin()
    }, {
      alt: ""
    }))), this.$("img").src = e;
  }
  /**
   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
   *
   * @listens tap
   * @listens click
   * @listens keydown
   *
   * @param {Event} event
   +        The `click`, `tap` or `keydown` event that caused this function to be called.
   */
  handleClick(e) {
    this.player_.controls() && (this.player_.tech(!0) && this.player_.tech(!0).focus(), this.player_.paused() ? vt(this.player_.play()) : this.player_.pause());
  }
}
Qa.prototype.crossorigin = Qa.prototype.crossOrigin;
N.registerComponent("PosterImage", Qa);
const tt = "#222", ic = "#ccc", I_ = {
  monospace: "monospace",
  sansSerif: "sans-serif",
  serif: "serif",
  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
  monospaceSerif: '"Courier New", monospace',
  proportionalSansSerif: "sans-serif",
  proportionalSerif: "serif",
  casual: '"Comic Sans MS", Impact, fantasy',
  script: '"Monotype Corsiva", cursive',
  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
};
function ba(i, e) {
  let t;
  if (i.length === 4)
    t = i[1] + i[1] + i[2] + i[2] + i[3] + i[3];
  else if (i.length === 7)
    t = i.slice(1);
  else
    throw new Error("Invalid color code provided, " + i + "; must be formatted as e.g. #f0e or #f604e2.");
  return "rgba(" + parseInt(t.slice(0, 2), 16) + "," + parseInt(t.slice(2, 4), 16) + "," + parseInt(t.slice(4, 6), 16) + "," + e + ")";
}
function Cs(i, e, t) {
  try {
    i.style[e] = t;
  } catch {
    return;
  }
}
function sc(i) {
  return i ? `${i}px` : "";
}
class P_ extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when `TextTrackDisplay` is ready.
   */
  constructor(e, t, s) {
    super(e, t, s);
    const r = (a) => this.updateDisplay(a), n = (a) => {
      this.updateDisplayOverlay(), this.updateDisplay(a);
    };
    e.on("loadstart", (a) => this.toggleDisplay(a)), e.on("texttrackchange", r), e.on("loadedmetadata", (a) => {
      this.updateDisplayOverlay(), this.preselectTrack(a);
    }), e.ready(ue(this, function() {
      if (e.tech_ && e.tech_.featuresNativeTextTracks) {
        this.hide();
        return;
      }
      e.on("fullscreenchange", n), e.on("playerresize", n);
      const a = E.screen.orientation || E, l = E.screen.orientation ? "change" : "orientationchange";
      a.addEventListener(l, n), e.on("dispose", () => a.removeEventListener(l, n));
      const u = this.options_.playerOptions.tracks || [];
      for (let f = 0; f < u.length; f++)
        this.player_.addRemoteTextTrack(u[f], !0);
      this.preselectTrack();
    }));
  }
  /**
  * Preselect a track following this precedence:
  * - matches the previously selected {@link TextTrack}'s language and kind
  * - matches the previously selected {@link TextTrack}'s language only
  * - is the first default captions track
  * - is the first default descriptions track
  *
  * @listens Player#loadstart
  */
  preselectTrack() {
    const e = {
      captions: 1,
      subtitles: 1
    }, t = this.player_.textTracks(), s = this.player_.cache_.selectedLanguage;
    let r, n, a;
    for (let l = 0; l < t.length; l++) {
      const u = t[l];
      s && s.enabled && s.language && s.language === u.language && u.kind in e ? u.kind === s.kind ? a = u : a || (a = u) : s && !s.enabled ? (a = null, r = null, n = null) : u.default && (u.kind === "descriptions" && !r ? r = u : u.kind in e && !n && (n = u));
    }
    a ? a.mode = "showing" : n ? n.mode = "showing" : r && (r.mode = "showing");
  }
  /**
   * Turn display of {@link TextTrack}'s from the current state into the other state.
   * There are only two states:
   * - 'shown'
   * - 'hidden'
   *
   * @listens Player#loadstart
   */
  toggleDisplay() {
    this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks ? this.hide() : this.show();
  }
  /**
   * Create the {@link Component}'s DOM element.
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-text-track-display"
    }, {
      translate: "yes",
      "aria-live": "off",
      "aria-atomic": "true"
    });
  }
  /**
   * Clear all displayed {@link TextTrack}s.
   */
  clearDisplay() {
    typeof E.WebVTT == "function" && E.WebVTT.processCues(E, [], this.el_);
  }
  /**
   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
   * a {@link Player#fullscreenchange} is fired.
   *
   * @listens Player#texttrackchange
   * @listens Player#fullscreenchange
   */
  updateDisplay() {
    const e = this.player_.textTracks(), t = this.options_.allowMultipleShowingTracks;
    if (this.clearDisplay(), t) {
      const a = [];
      for (let l = 0; l < e.length; ++l) {
        const u = e[l];
        u.mode === "showing" && a.push(u);
      }
      this.updateForTrack(a);
      return;
    }
    let s = null, r = null, n = e.length;
    for (; n--; ) {
      const a = e[n];
      a.mode === "showing" && (a.kind === "descriptions" ? s = a : r = a);
    }
    r ? (this.getAttribute("aria-live") !== "off" && this.setAttribute("aria-live", "off"), this.updateForTrack(r)) : s && (this.getAttribute("aria-live") !== "assertive" && this.setAttribute("aria-live", "assertive"), this.updateForTrack(s));
  }
  /**
   * Updates the displayed TextTrack to be sure it overlays the video when a either
   * a {@link Player#texttrackchange} or a {@link Player#fullscreenchange} is fired.
   */
  updateDisplayOverlay() {
    if (!this.player_.videoHeight() || !E.CSS.supports("inset-inline: 10px"))
      return;
    const e = this.player_.currentWidth(), t = this.player_.currentHeight(), s = e / t, r = this.player_.videoWidth() / this.player_.videoHeight();
    let n = 0, a = 0;
    Math.abs(s - r) > 0.1 && (s > r ? n = Math.round((e - t * r) / 2) : a = Math.round((t - e / r) / 2)), Cs(this.el_, "insetInline", sc(n)), Cs(this.el_, "insetBlock", sc(a));
  }
  /**
   * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.
   *
   * @param {TextTrack} track
   *        Text track object containing active cues to style.
   */
  updateDisplayState(e) {
    const t = this.player_.textTrackSettings.getValues(), s = e.activeCues;
    let r = s.length;
    for (; r--; ) {
      const n = s[r];
      if (!n)
        continue;
      const a = n.displayState;
      if (t.color && (a.firstChild.style.color = t.color), t.textOpacity && Cs(a.firstChild, "color", ba(t.color || "#fff", t.textOpacity)), t.backgroundColor && (a.firstChild.style.backgroundColor = t.backgroundColor), t.backgroundOpacity && Cs(a.firstChild, "backgroundColor", ba(t.backgroundColor || "#000", t.backgroundOpacity)), t.windowColor && (t.windowOpacity ? Cs(a, "backgroundColor", ba(t.windowColor, t.windowOpacity)) : a.style.backgroundColor = t.windowColor), t.edgeStyle && (t.edgeStyle === "dropshadow" ? a.firstChild.style.textShadow = `2px 2px 3px ${tt}, 2px 2px 4px ${tt}, 2px 2px 5px ${tt}` : t.edgeStyle === "raised" ? a.firstChild.style.textShadow = `1px 1px ${tt}, 2px 2px ${tt}, 3px 3px ${tt}` : t.edgeStyle === "depressed" ? a.firstChild.style.textShadow = `1px 1px ${ic}, 0 1px ${ic}, -1px -1px ${tt}, 0 -1px ${tt}` : t.edgeStyle === "uniform" && (a.firstChild.style.textShadow = `0 0 4px ${tt}, 0 0 4px ${tt}, 0 0 4px ${tt}, 0 0 4px ${tt}`)), t.fontPercent && t.fontPercent !== 1) {
        const l = E.parseFloat(a.style.fontSize);
        a.style.fontSize = l * t.fontPercent + "px", a.style.height = "auto", a.style.top = "auto";
      }
      t.fontFamily && t.fontFamily !== "default" && (t.fontFamily === "small-caps" ? a.firstChild.style.fontVariant = "small-caps" : a.firstChild.style.fontFamily = I_[t.fontFamily]);
    }
  }
  /**
   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.
   *
   * @param {TextTrack|TextTrack[]} tracks
   *        Text track object or text track array to be added to the list.
   */
  updateForTrack(e) {
    if (Array.isArray(e) || (e = [e]), typeof E.WebVTT != "function" || e.every((s) => !s.activeCues))
      return;
    const t = [];
    for (let s = 0; s < e.length; ++s) {
      const r = e[s];
      for (let n = 0; n < r.activeCues.length; ++n)
        t.push(r.activeCues[n]);
    }
    E.WebVTT.processCues(E, t, this.el_);
    for (let s = 0; s < e.length; ++s) {
      const r = e[s];
      for (let n = 0; n < r.activeCues.length; ++n) {
        const a = r.activeCues[n].displayState;
        gi(a, "vjs-text-track-cue", "vjs-text-track-cue-" + (r.language ? r.language : s)), r.language && Ki(a, "lang", r.language);
      }
      this.player_.textTrackSettings && this.updateDisplayState(r);
    }
  }
}
N.registerComponent("TextTrackDisplay", P_);
class L_ extends N {
  /**
   * Create the `LoadingSpinner`s DOM element.
   *
   * @return {Element}
   *         The dom element that gets created.
   */
  createEl() {
    const e = this.player_.isAudio(), t = this.localize(e ? "Audio Player" : "Video Player"), s = Y("span", {
      className: "vjs-control-text",
      textContent: this.localize("{1} is loading.", [t])
    }), r = super.createEl("div", {
      className: "vjs-loading-spinner",
      dir: "ltr"
    });
    return r.appendChild(s), r;
  }
  /**
   * Update control text on languagechange
   */
  handleLanguagechange() {
    this.$(".vjs-control-text").textContent = this.localize("{1} is loading.", [this.player_.isAudio() ? "Audio Player" : "Video Player"]);
  }
}
N.registerComponent("LoadingSpinner", L_);
class Je extends Nn {
  /**
   * Create the `Button`s DOM element.
   *
   * @param {string} [tag="button"]
   *        The element's node type. This argument is IGNORED: no matter what
   *        is passed, it will always create a `button` element.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */
  createEl(e, t = {}, s = {}) {
    e = "button", t = Object.assign({
      className: this.buildCSSClass()
    }, t), s = Object.assign({
      // Necessary since the default button type is "submit"
      type: "button"
    }, s);
    const r = Y(e, t, s);
    return this.player_.options_.experimentalSvgIcons || r.appendChild(Y("span", {
      className: "vjs-icon-placeholder"
    }, {
      "aria-hidden": !0
    })), this.createControlTextEl(r), r;
  }
  /**
   * Add a child `Component` inside of this `Button`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   *
   * @deprecated since version 5
   */
  addChild(e, t = {}) {
    const s = this.constructor.name;
    return J.warn(`Adding an actionable (user controllable) child to a Button (${s}) is not supported; use a ClickableComponent instead.`), N.prototype.addChild.call(this, e, t);
  }
  /**
   * Enable the `Button` element so that it can be activated or clicked. Use this with
   * {@link Button#disable}.
   */
  enable() {
    super.enable(), this.el_.removeAttribute("disabled");
  }
  /**
   * Disable the `Button` element so that it cannot be activated or clicked. Use this with
   * {@link Button#enable}.
   */
  disable() {
    super.disable(), this.el_.setAttribute("disabled", "disabled");
  }
  /**
   * This gets called when a `Button` has focus and `keydown` is triggered via a key
   * press.
   *
   * @param {KeyboardEvent} event
   *        The event that caused this function to get called.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    if (W.isEventKey(e, "Space") || W.isEventKey(e, "Enter")) {
      e.stopPropagation();
      return;
    }
    super.handleKeyDown(e);
  }
}
N.registerComponent("Button", Je);
class Dh extends Je {
  constructor(e, t) {
    super(e, t), this.mouseused_ = !1, this.setIcon("play"), this.on("mousedown", (s) => this.handleMouseDown(s));
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
   */
  buildCSSClass() {
    return "vjs-big-play-button";
  }
  /**
   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {KeyboardEvent|MouseEvent|TouchEvent} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    const t = this.player_.play();
    if (this.mouseused_ && "clientX" in e && "clientY" in e) {
      vt(t), this.player_.tech(!0) && this.player_.tech(!0).focus();
      return;
    }
    const s = this.player_.getChild("controlBar"), r = s && s.getChild("playToggle");
    if (!r) {
      this.player_.tech(!0).focus();
      return;
    }
    const n = () => r.focus();
    Ms(t) ? t.then(n, () => {
    }) : this.setTimeout(n, 1);
  }
  /**
   * Event handler that is called when a `BigPlayButton` receives a
   * `keydown` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    this.mouseused_ = !1, super.handleKeyDown(e);
  }
  /**
   * Handle `mousedown` events on the `BigPlayButton`.
   *
   * @param {MouseEvent} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   */
  handleMouseDown(e) {
    this.mouseused_ = !0;
  }
}
Dh.prototype.controlText_ = "Play Video";
N.registerComponent("BigPlayButton", Dh);
class O_ extends Je {
  /**
  * Creates an instance of the this class.
  *
  * @param  { import('./player').default } player
  *         The `Player` that this class should be attached to.
  *
  * @param  {Object} [options]
  *         The key/value store of player options.
  */
  constructor(e, t) {
    super(e, t), this.setIcon("cancel"), this.controlText(t && t.controlText || this.localize("Close"));
  }
  /**
  * Builds the default DOM `className`.
  *
  * @return {string}
  *         The DOM `className` for this object.
  */
  buildCSSClass() {
    return `vjs-close-button ${super.buildCSSClass()}`;
  }
  /**
   * This gets called when a `CloseButton` gets clicked. See
   * {@link ClickableComponent#handleClick} for more information on when
   * this will be triggered
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @fires CloseButton#close
   */
  handleClick(e) {
    this.trigger({
      type: "close",
      bubbles: !1
    });
  }
  /**
   * Event handler that is called when a `CloseButton` receives a
   * `keydown` event.
   *
   * By default, if the key is Esc, it will trigger a `click` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    W.isEventKey(e, "Esc") ? (e.preventDefault(), e.stopPropagation(), this.trigger("click")) : super.handleKeyDown(e);
  }
}
N.registerComponent("CloseButton", O_);
class kh extends Je {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  constructor(e, t = {}) {
    super(e, t), t.replay = t.replay === void 0 || t.replay, this.setIcon("play"), this.on(e, "play", (s) => this.handlePlay(s)), this.on(e, "pause", (s) => this.handlePause(s)), t.replay && this.on(e, "ended", (s) => this.handleEnded(s));
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-play-control ${super.buildCSSClass()}`;
  }
  /**
   * This gets called when an `PlayToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    this.player_.paused() ? vt(this.player_.play()) : this.player_.pause();
  }
  /**
   * This gets called once after the video has ended and the user seeks so that
   * we can change the replay button back to a play button.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#seeked
   */
  handleSeeked(e) {
    this.removeClass("vjs-ended"), this.player_.paused() ? this.handlePause(e) : this.handlePlay(e);
  }
  /**
   * Add the vjs-playing class to the element so it can change appearance.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#play
   */
  handlePlay(e) {
    this.removeClass("vjs-ended", "vjs-paused"), this.addClass("vjs-playing"), this.setIcon("pause"), this.controlText("Pause");
  }
  /**
   * Add the vjs-paused class to the element so it can change appearance.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#pause
   */
  handlePause(e) {
    this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.setIcon("play"), this.controlText("Play");
  }
  /**
   * Add the vjs-ended class to the element so it can change appearance
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ended
   */
  handleEnded(e) {
    this.removeClass("vjs-playing"), this.addClass("vjs-ended"), this.setIcon("replay"), this.controlText("Replay"), this.one(this.player_, "seeked", (t) => this.handleSeeked(t));
  }
}
kh.prototype.controlText_ = "Play";
N.registerComponent("PlayToggle", kh);
class ns extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.on(e, ["timeupdate", "ended", "seeking"], (s) => this.update(s)), this.updateTextNode_();
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    const e = this.buildCSSClass(), t = super.createEl("div", {
      className: `${e} vjs-time-control vjs-control`
    }), s = Y("span", {
      className: "vjs-control-text",
      textContent: `${this.localize(this.labelText_)} `
    }, {
      role: "presentation"
    });
    return t.appendChild(s), this.contentEl_ = Y("span", {
      className: `${e}-display`
    }, {
      // span elements have no implicit role, but some screen readers (notably VoiceOver)
      // treat them as a break between items in the DOM when using arrow keys
      // (or left-to-right swipes on iOS) to read contents of a page. Using
      // role='presentation' causes VoiceOver to NOT treat this span as a break.
      role: "presentation"
    }), t.appendChild(this.contentEl_), t;
  }
  dispose() {
    this.contentEl_ = null, this.textNode_ = null, super.dispose();
  }
  /**
   * Updates the displayed time according to the `updateContent` function which is defined in the child class.
   *
   * @param {Event} [event]
   *          The `timeupdate`, `ended` or `seeking` (if enableSmoothSeeking is true) event that caused this function to be called.
   */
  update(e) {
    !this.player_.options_.enableSmoothSeeking && e.type === "seeking" || this.updateContent(e);
  }
  /**
   * Updates the time display text node with a new time
   *
   * @param {number} [time=0] the time to update to
   *
   * @private
   */
  updateTextNode_(e = 0) {
    e = _i(e), this.formattedTime_ !== e && (this.formattedTime_ = e, this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", () => {
      if (!this.contentEl_)
        return;
      let t = this.textNode_;
      t && this.contentEl_.firstChild !== t && (t = null, J.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.")), this.textNode_ = B.createTextNode(this.formattedTime_), this.textNode_ && (t ? this.contentEl_.replaceChild(this.textNode_, t) : this.contentEl_.appendChild(this.textNode_));
    }));
  }
  /**
   * To be filled out in the child class, should update the displayed time
   * in accordance with the fact that the current time has changed.
   *
   * @param {Event} [event]
   *        The `timeupdate`  event that caused this to run.
   *
   * @listens Player#timeupdate
   */
  updateContent(e) {
  }
}
ns.prototype.labelText_ = "Time";
ns.prototype.controlText_ = "Time";
N.registerComponent("TimeDisplay", ns);
class Go extends ns {
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return "vjs-current-time";
  }
  /**
   * Update current time display
   *
   * @param {Event} [event]
   *        The `timeupdate` event that caused this function to run.
   *
   * @listens Player#timeupdate
   */
  updateContent(e) {
    let t;
    this.player_.ended() ? t = this.player_.duration() : t = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime(), this.updateTextNode_(t);
  }
}
Go.prototype.labelText_ = "Current Time";
Go.prototype.controlText_ = "Current Time";
N.registerComponent("CurrentTimeDisplay", Go);
class Wo extends ns {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t);
    const s = (r) => this.updateContent(r);
    this.on(e, "durationchange", s), this.on(e, "loadstart", s), this.on(e, "loadedmetadata", s);
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return "vjs-duration";
  }
  /**
   * Update duration time display.
   *
   * @param {Event} [event]
   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
   *        this function to be called.
   *
   * @listens Player#durationchange
   * @listens Player#timeupdate
   * @listens Player#loadedmetadata
   */
  updateContent(e) {
    const t = this.player_.duration();
    this.updateTextNode_(t);
  }
}
Wo.prototype.labelText_ = "Duration";
Wo.prototype.controlText_ = "Duration";
N.registerComponent("DurationDisplay", Wo);
class j_ extends N {
  /**
   * Create the component's DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    const e = super.createEl("div", {
      className: "vjs-time-control vjs-time-divider"
    }, {
      // this element and its contents can be hidden from assistive techs since
      // it is made extraneous by the announcement of the control text
      // for the current time and duration displays
      "aria-hidden": !0
    }), t = super.createEl("div"), s = super.createEl("span", {
      textContent: "/"
    });
    return t.appendChild(s), e.appendChild(t), e;
  }
}
N.registerComponent("TimeDivider", j_);
class Xo extends ns {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.on(e, "durationchange", (s) => this.updateContent(s));
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return "vjs-remaining-time";
  }
  /**
   * Create the `Component`'s DOM element with the "minus" character prepend to the time
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    const e = super.createEl();
    return this.options_.displayNegative !== !1 && e.insertBefore(Y("span", {}, {
      "aria-hidden": !0
    }, "-"), this.contentEl_), e;
  }
  /**
   * Update remaining time display.
   *
   * @param {Event} [event]
   *        The `timeupdate` or `durationchange` event that caused this to run.
   *
   * @listens Player#timeupdate
   * @listens Player#durationchange
   */
  updateContent(e) {
    if (typeof this.player_.duration() != "number")
      return;
    let t;
    this.player_.ended() ? t = 0 : this.player_.remainingTimeDisplay ? t = this.player_.remainingTimeDisplay() : t = this.player_.remainingTime(), this.updateTextNode_(t);
  }
}
Xo.prototype.labelText_ = "Remaining Time";
Xo.prototype.controlText_ = "Remaining Time";
N.registerComponent("RemainingTimeDisplay", Xo);
class R_ extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.updateShowing(), this.on(this.player(), "durationchange", (s) => this.updateShowing(s));
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    const e = super.createEl("div", {
      className: "vjs-live-control vjs-control"
    });
    return this.contentEl_ = Y("div", {
      className: "vjs-live-display"
    }, {
      "aria-live": "off"
    }), this.contentEl_.appendChild(Y("span", {
      className: "vjs-control-text",
      textContent: `${this.localize("Stream Type")} `
    })), this.contentEl_.appendChild(B.createTextNode(this.localize("LIVE"))), e.appendChild(this.contentEl_), e;
  }
  dispose() {
    this.contentEl_ = null, super.dispose();
  }
  /**
   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
   * it accordingly
   *
   * @param {Event} [event]
   *        The {@link Player#durationchange} event that caused this function to run.
   *
   * @listens Player#durationchange
   */
  updateShowing(e) {
    this.player().duration() === 1 / 0 ? this.show() : this.hide();
  }
}
N.registerComponent("LiveDisplay", R_);
class Ih extends Je {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.updateLiveEdgeStatus(), this.player_.liveTracker && (this.updateLiveEdgeStatusHandler_ = (s) => this.updateLiveEdgeStatus(s), this.on(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_));
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    const e = super.createEl("button", {
      className: "vjs-seek-to-live-control vjs-control"
    });
    return this.setIcon("circle", e), this.textEl_ = Y("span", {
      className: "vjs-seek-to-live-text",
      textContent: this.localize("LIVE")
    }, {
      "aria-hidden": "true"
    }), e.appendChild(this.textEl_), e;
  }
  /**
   * Update the state of this button if we are at the live edge
   * or not
   */
  updateLiveEdgeStatus() {
    !this.player_.liveTracker || this.player_.liveTracker.atLiveEdge() ? (this.setAttribute("aria-disabled", !0), this.addClass("vjs-at-live-edge"), this.controlText("Seek to live, currently playing live")) : (this.setAttribute("aria-disabled", !1), this.removeClass("vjs-at-live-edge"), this.controlText("Seek to live, currently behind live"));
  }
  /**
   * On click bring us as near to the live point as possible.
   * This requires that we wait for the next `live-seekable-change`
   * event which will happen every segment length seconds.
   */
  handleClick() {
    this.player_.liveTracker.seekToLiveEdge();
  }
  /**
   * Dispose of the element and stop tracking
   */
  dispose() {
    this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_), this.textEl_ = null, super.dispose();
  }
}
Ih.prototype.controlText_ = "Seek to live, currently playing live";
N.registerComponent("SeekToLive", Ih);
function tr(i, e, t) {
  return i = Number(i), Math.min(t, Math.max(e, isNaN(i) ? e : i));
}
var N_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  clamp: tr
});
class Ko extends N {
  /**
  * Create an instance of this class
  *
  * @param { import('../player').default } player
  *        The `Player` that this class should be attached to.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  */
  constructor(e, t) {
    super(e, t), this.handleMouseDown_ = (s) => this.handleMouseDown(s), this.handleMouseUp_ = (s) => this.handleMouseUp(s), this.handleKeyDown_ = (s) => this.handleKeyDown(s), this.handleClick_ = (s) => this.handleClick(s), this.handleMouseMove_ = (s) => this.handleMouseMove(s), this.update_ = (s) => this.update(s), this.bar = this.getChild(this.options_.barName), this.vertical(!!this.options_.vertical), this.enable();
  }
  /**
   * Are controls are currently enabled for this slider or not.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */
  enabled() {
    return this.enabled_;
  }
  /**
   * Enable controls for this slider if they are disabled
   */
  enable() {
    this.enabled() || (this.on("mousedown", this.handleMouseDown_), this.on("touchstart", this.handleMouseDown_), this.on("keydown", this.handleKeyDown_), this.on("click", this.handleClick_), this.on(this.player_, "controlsvisible", this.update), this.playerEvent && this.on(this.player_, this.playerEvent, this.update), this.removeClass("disabled"), this.setAttribute("tabindex", 0), this.enabled_ = !0);
  }
  /**
   * Disable controls for this slider if they are enabled
   */
  disable() {
    if (!this.enabled())
      return;
    const e = this.bar.el_.ownerDocument;
    this.off("mousedown", this.handleMouseDown_), this.off("touchstart", this.handleMouseDown_), this.off("keydown", this.handleKeyDown_), this.off("click", this.handleClick_), this.off(this.player_, "controlsvisible", this.update_), this.off(e, "mousemove", this.handleMouseMove_), this.off(e, "mouseup", this.handleMouseUp_), this.off(e, "touchmove", this.handleMouseMove_), this.off(e, "touchend", this.handleMouseUp_), this.removeAttribute("tabindex"), this.addClass("disabled"), this.playerEvent && this.off(this.player_, this.playerEvent, this.update), this.enabled_ = !1;
  }
  /**
   * Create the `Slider`s DOM element.
   *
   * @param {string} type
   *        Type of element to create.
   *
   * @param {Object} [props={}]
   *        List of properties in Object form.
   *
   * @param {Object} [attributes={}]
   *        list of attributes in Object form.
   *
   * @return {Element}
   *         The element that gets created.
   */
  createEl(e, t = {}, s = {}) {
    return t.className = t.className + " vjs-slider", t = Object.assign({
      tabIndex: 0
    }, t), s = Object.assign({
      role: "slider",
      "aria-valuenow": 0,
      "aria-valuemin": 0,
      "aria-valuemax": 100
    }, s), super.createEl(e, t, s);
  }
  /**
   * Handle `mousedown` or `touchstart` events on the `Slider`.
   *
   * @param {MouseEvent} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   * @fires Slider#slideractive
   */
  handleMouseDown(e) {
    const t = this.bar.el_.ownerDocument;
    e.type === "mousedown" && e.preventDefault(), e.type === "touchstart" && !wt && e.preventDefault(), sh(), this.addClass("vjs-sliding"), this.trigger("slideractive"), this.on(t, "mousemove", this.handleMouseMove_), this.on(t, "mouseup", this.handleMouseUp_), this.on(t, "touchmove", this.handleMouseMove_), this.on(t, "touchend", this.handleMouseUp_), this.handleMouseMove(e, !0);
  }
  /**
   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
   * The `mousemove` and `touchmove` events will only only trigger this function during
   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
   * {@link Slider#handleMouseUp}.
   *
   * @param {MouseEvent} event
   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
   *        this function
   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false.
   *
   * @listens mousemove
   * @listens touchmove
   */
  handleMouseMove(e) {
  }
  /**
   * Handle `mouseup` or `touchend` events on the `Slider`.
   *
   * @param {MouseEvent} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   * @fires Slider#sliderinactive
   */
  handleMouseUp(e) {
    const t = this.bar.el_.ownerDocument;
    rh(), this.removeClass("vjs-sliding"), this.trigger("sliderinactive"), this.off(t, "mousemove", this.handleMouseMove_), this.off(t, "mouseup", this.handleMouseUp_), this.off(t, "touchmove", this.handleMouseMove_), this.off(t, "touchend", this.handleMouseUp_), this.update();
  }
  /**
   * Update the progress bar of the `Slider`.
   *
   * @return {number}
   *          The percentage of progress the progress bar represents as a
   *          number from 0 to 1.
   */
  update() {
    if (!this.el_ || !this.bar)
      return;
    const e = this.getProgress();
    return e === this.progress_ || (this.progress_ = e, this.requestNamedAnimationFrame("Slider#update", () => {
      const t = this.vertical() ? "height" : "width";
      this.bar.el().style[t] = (e * 100).toFixed(2) + "%";
    })), e;
  }
  /**
   * Get the percentage of the bar that should be filled
   * but clamped and rounded.
   *
   * @return {number}
   *         percentage filled that the slider is
   */
  getProgress() {
    return Number(tr(this.getPercent(), 0, 1).toFixed(4));
  }
  /**
   * Calculate distance for slider
   *
   * @param {Event} event
   *        The event that caused this function to run.
   *
   * @return {number}
   *         The current position of the Slider.
   *         - position.x for vertical `Slider`s
   *         - position.y for horizontal `Slider`s
   */
  calculateDistance(e) {
    const t = In(this.el_, e);
    return this.vertical() ? t.y : t.x;
  }
  /**
   * Handle a `keydown` event on the `Slider`. Watches for left, right, up, and down
   * arrow keys. This function will only be called when the slider has focus. See
   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
   *
   * @param {KeyboardEvent} event
   *        the `keydown` event that caused this function to run.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    W.isEventKey(e, "Left") || W.isEventKey(e, "Down") ? (e.preventDefault(), e.stopPropagation(), this.stepBack()) : W.isEventKey(e, "Right") || W.isEventKey(e, "Up") ? (e.preventDefault(), e.stopPropagation(), this.stepForward()) : super.handleKeyDown(e);
  }
  /**
   * Listener for click events on slider, used to prevent clicks
   *   from bubbling up to parent elements like button menus.
   *
   * @param {Object} event
   *        Event that caused this object to run
   */
  handleClick(e) {
    e.stopPropagation(), e.preventDefault();
  }
  /**
   * Get/set if slider is horizontal for vertical
   *
   * @param {boolean} [bool]
   *        - true if slider is vertical,
   *        - false is horizontal
   *
   * @return {boolean}
   *         - true if slider is vertical, and getting
   *         - false if the slider is horizontal, and getting
   */
  vertical(e) {
    if (e === void 0)
      return this.vertical_ || !1;
    this.vertical_ = !!e, this.vertical_ ? this.addClass("vjs-slider-vertical") : this.addClass("vjs-slider-horizontal");
  }
}
N.registerComponent("Slider", Ko);
const xa = (i, e) => tr(i / e * 100, 0, 100).toFixed(2) + "%";
class M_ extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.partEls_ = [], this.on(e, "progress", (s) => this.update(s));
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    const e = super.createEl("div", {
      className: "vjs-load-progress"
    }), t = Y("span", {
      className: "vjs-control-text"
    }), s = Y("span", {
      textContent: this.localize("Loaded")
    }), r = B.createTextNode(": ");
    return this.percentageEl_ = Y("span", {
      className: "vjs-control-text-loaded-percentage",
      textContent: "0%"
    }), e.appendChild(t), t.appendChild(s), t.appendChild(r), t.appendChild(this.percentageEl_), e;
  }
  dispose() {
    this.partEls_ = null, this.percentageEl_ = null, super.dispose();
  }
  /**
   * Update progress bar
   *
   * @param {Event} [event]
   *        The `progress` event that caused this function to run.
   *
   * @listens Player#progress
   */
  update(e) {
    this.requestNamedAnimationFrame("LoadProgressBar#update", () => {
      const t = this.player_.liveTracker, s = this.player_.buffered(), r = t && t.isLive() ? t.seekableEnd() : this.player_.duration(), n = this.player_.bufferedEnd(), a = this.partEls_, l = xa(n, r);
      this.percent_ !== l && (this.el_.style.width = l, ei(this.percentageEl_, l), this.percent_ = l);
      for (let u = 0; u < s.length; u++) {
        const f = s.start(u), m = s.end(u);
        let v = a[u];
        v || (v = this.el_.appendChild(Y()), a[u] = v), !(v.dataset.start === f && v.dataset.end === m) && (v.dataset.start = f, v.dataset.end = m, v.style.left = xa(f, n), v.style.width = xa(m - f, n));
      }
      for (let u = a.length; u > s.length; u--)
        this.el_.removeChild(a[u - 1]);
      a.length = s.length;
    });
  }
}
N.registerComponent("LoadProgressBar", M_);
class B_ extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.update = At(ue(this, this.update), rt);
  }
  /**
   * Create the time tooltip DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-time-tooltip"
    }, {
      "aria-hidden": "true"
    });
  }
  /**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */
  update(e, t, s) {
    const r = Ws(this.el_), n = Yi(this.player_.el()), a = e.width * t;
    if (!n || !r)
      return;
    let l = e.left - n.left + a, u = e.width - a + (n.right - e.right);
    u || (u = e.width - a, l = a);
    let f = r.width / 2;
    l < f ? f += f - l : u < f && (f = u), f < 0 ? f = 0 : f > r.width && (f = r.width), f = Math.round(f), this.el_.style.right = `-${f}px`, this.write(s);
  }
  /**
   * Write the time to the tooltip DOM element.
   *
   * @param {string} content
   *        The formatted time for the tooltip.
   */
  write(e) {
    ei(this.el_, e);
  }
  /**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   *
   * @param {number} time
   *        The time to update the tooltip to, not used during live playback
   *
   * @param {Function} cb
   *        A function that will be called during the request animation frame
   *        for tooltips that need to do additional animations from the default
   */
  updateTime(e, t, s, r) {
    this.requestNamedAnimationFrame("TimeTooltip#updateTime", () => {
      let n;
      const a = this.player_.duration();
      if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {
        const l = this.player_.liveTracker.liveWindow(), u = l - t * l;
        n = (u < 1 ? "" : "-") + _i(u, l);
      } else
        n = _i(s, a);
      this.update(e, t, n), r && r();
    });
  }
}
N.registerComponent("TimeTooltip", B_);
class Yo extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.setIcon("circle"), this.update = At(ue(this, this.update), rt);
  }
  /**
   * Create the the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-play-progress vjs-slider-bar"
    }, {
      "aria-hidden": "true"
    });
  }
  /**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */
  update(e, t) {
    const s = this.getChild("timeTooltip");
    if (!s)
      return;
    const r = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    s.updateTime(e, t, r);
  }
}
Yo.prototype.options_ = {
  children: []
};
!Be && !Ct && Yo.prototype.options_.children.push("timeTooltip");
N.registerComponent("PlayProgressBar", Yo);
class Ph extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.update = At(ue(this, this.update), rt);
  }
  /**
   * Create the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-mouse-display"
    });
  }
  /**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */
  update(e, t) {
    const s = t * this.player_.duration();
    this.getChild("timeTooltip").updateTime(e, t, s, () => {
      this.el_.style.left = `${e.width * t}px`;
    });
  }
}
Ph.prototype.options_ = {
  children: ["timeTooltip"]
};
N.registerComponent("MouseTimeDisplay", Ph);
const Rr = 5, rc = 12;
class Qo extends Ko {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.setEventHandlers_();
  }
  /**
   * Sets the event handlers
   *
   * @private
   */
  setEventHandlers_() {
    this.update_ = ue(this, this.update), this.update = At(this.update_, rt), this.on(this.player_, ["ended", "durationchange", "timeupdate"], this.update), this.player_.liveTracker && this.on(this.player_.liveTracker, "liveedgechange", this.update), this.updateInterval = null, this.enableIntervalHandler_ = (e) => this.enableInterval_(e), this.disableIntervalHandler_ = (e) => this.disableInterval_(e), this.on(this.player_, ["playing"], this.enableIntervalHandler_), this.on(this.player_, ["ended", "pause", "waiting"], this.disableIntervalHandler_), "hidden" in B && "visibilityState" in B && this.on(B, "visibilitychange", this.toggleVisibility_);
  }
  toggleVisibility_(e) {
    B.visibilityState === "hidden" ? (this.cancelNamedAnimationFrame("SeekBar#update"), this.cancelNamedAnimationFrame("Slider#update"), this.disableInterval_(e)) : (!this.player_.ended() && !this.player_.paused() && this.enableInterval_(), this.update());
  }
  enableInterval_() {
    this.updateInterval || (this.updateInterval = this.setInterval(this.update, rt));
  }
  disableInterval_(e) {
    this.player_.liveTracker && this.player_.liveTracker.isLive() && e && e.type !== "ended" || this.updateInterval && (this.clearInterval(this.updateInterval), this.updateInterval = null);
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-progress-holder"
    }, {
      "aria-label": this.localize("Progress Bar")
    });
  }
  /**
   * This function updates the play progress bar and accessibility
   * attributes to whatever is passed in.
   *
   * @param {Event} [event]
   *        The `timeupdate` or `ended` event that caused this to run.
   *
   * @listens Player#timeupdate
   *
   * @return {number}
   *          The current percent at a number from 0-1
   */
  update(e) {
    if (B.visibilityState === "hidden")
      return;
    const t = super.update();
    return this.requestNamedAnimationFrame("SeekBar#update", () => {
      const s = this.player_.ended() ? this.player_.duration() : this.getCurrentTime_(), r = this.player_.liveTracker;
      let n = this.player_.duration();
      r && r.isLive() && (n = this.player_.liveTracker.liveCurrentTime()), this.percent_ !== t && (this.el_.setAttribute("aria-valuenow", (t * 100).toFixed(2)), this.percent_ = t), (this.currentTime_ !== s || this.duration_ !== n) && (this.el_.setAttribute("aria-valuetext", this.localize("progress bar timing: currentTime={1} duration={2}", [_i(s, n), _i(n, n)], "{1} of {2}")), this.currentTime_ = s, this.duration_ = n), this.bar && this.bar.update(Yi(this.el()), this.getProgress());
    }), t;
  }
  /**
   * Prevent liveThreshold from causing seeks to seem like they
   * are not happening from a user perspective.
   *
   * @param {number} ct
   *        current time to seek to
   */
  userSeek_(e) {
    this.player_.liveTracker && this.player_.liveTracker.isLive() && this.player_.liveTracker.nextSeekedFromUser(), this.player_.currentTime(e);
  }
  /**
   * Get the value of current time but allows for smooth scrubbing,
   * when player can't keep up.
   *
   * @return {number}
   *         The current time value to display
   *
   * @private
   */
  getCurrentTime_() {
    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
  }
  /**
   * Get the percentage of media played so far.
   *
   * @return {number}
   *         The percentage of media played so far (0 to 1).
   */
  getPercent() {
    const e = this.getCurrentTime_();
    let t;
    const s = this.player_.liveTracker;
    return s && s.isLive() ? (t = (e - s.seekableStart()) / s.liveWindow(), s.atLiveEdge() && (t = 1)) : t = e / this.player_.duration(), t;
  }
  /**
   * Handle mouse down on seek bar
   *
   * @param {MouseEvent} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */
  handleMouseDown(e) {
    Xs(e) && (e.stopPropagation(), this.videoWasPlaying = !this.player_.paused(), this.player_.pause(), super.handleMouseDown(e));
  }
  /**
   * Handle mouse move on seek bar
   *
   * @param {MouseEvent} event
   *        The `mousemove` event that caused this to run.
   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false
   *
   * @listens mousemove
   */
  handleMouseMove(e, t = !1) {
    if (!Xs(e) || isNaN(this.player_.duration()))
      return;
    !t && !this.player_.scrubbing() && this.player_.scrubbing(!0);
    let s;
    const r = this.calculateDistance(e), n = this.player_.liveTracker;
    if (!n || !n.isLive())
      s = r * this.player_.duration(), s === this.player_.duration() && (s = s - 0.1);
    else {
      if (r >= 0.99) {
        n.seekToLiveEdge();
        return;
      }
      const a = n.seekableStart(), l = n.liveCurrentTime();
      if (s = a + r * n.liveWindow(), s >= l && (s = l), s <= a && (s = a + 0.1), s === 1 / 0)
        return;
    }
    this.userSeek_(s), this.player_.options_.enableSmoothSeeking && this.update();
  }
  enable() {
    super.enable();
    const e = this.getChild("mouseTimeDisplay");
    e && e.show();
  }
  disable() {
    super.disable();
    const e = this.getChild("mouseTimeDisplay");
    e && e.hide();
  }
  /**
   * Handle mouse up on seek bar
   *
   * @param {MouseEvent} event
   *        The `mouseup` event that caused this to run.
   *
   * @listens mouseup
   */
  handleMouseUp(e) {
    super.handleMouseUp(e), e && e.stopPropagation(), this.player_.scrubbing(!1), this.player_.trigger({
      type: "timeupdate",
      target: this,
      manuallyTriggered: !0
    }), this.videoWasPlaying ? vt(this.player_.play()) : this.update_();
  }
  /**
   * Move more quickly fast forward for keyboard-only users
   */
  stepForward() {
    this.userSeek_(this.player_.currentTime() + Rr);
  }
  /**
   * Move more quickly rewind for keyboard-only users
   */
  stepBack() {
    this.userSeek_(this.player_.currentTime() - Rr);
  }
  /**
   * Toggles the playback state of the player
   * This gets called when enter or space is used on the seekbar
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called
   *
   */
  handleAction(e) {
    this.player_.paused() ? this.player_.play() : this.player_.pause();
  }
  /**
   * Called when this SeekBar has focus and a key gets pressed down.
   * Supports the following keys:
   *
   *   Space or Enter key fire a click event
   *   Home key moves to start of the timeline
   *   End key moves to end of the timeline
   *   Digit "0" through "9" keys move to 0%, 10% ... 80%, 90% of the timeline
   *   PageDown key moves back a larger step than ArrowDown
   *   PageUp key moves forward a large step
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    const t = this.player_.liveTracker;
    if (W.isEventKey(e, "Space") || W.isEventKey(e, "Enter"))
      e.preventDefault(), e.stopPropagation(), this.handleAction(e);
    else if (W.isEventKey(e, "Home"))
      e.preventDefault(), e.stopPropagation(), this.userSeek_(0);
    else if (W.isEventKey(e, "End"))
      e.preventDefault(), e.stopPropagation(), t && t.isLive() ? this.userSeek_(t.liveCurrentTime()) : this.userSeek_(this.player_.duration());
    else if (/^[0-9]$/.test(W(e))) {
      e.preventDefault(), e.stopPropagation();
      const s = (W.codes[W(e)] - W.codes[0]) * 10 / 100;
      t && t.isLive() ? this.userSeek_(t.seekableStart() + t.liveWindow() * s) : this.userSeek_(this.player_.duration() * s);
    } else
      W.isEventKey(e, "PgDn") ? (e.preventDefault(), e.stopPropagation(), this.userSeek_(this.player_.currentTime() - Rr * rc)) : W.isEventKey(e, "PgUp") ? (e.preventDefault(), e.stopPropagation(), this.userSeek_(this.player_.currentTime() + Rr * rc)) : super.handleKeyDown(e);
  }
  dispose() {
    this.disableInterval_(), this.off(this.player_, ["ended", "durationchange", "timeupdate"], this.update), this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.update), this.off(this.player_, ["playing"], this.enableIntervalHandler_), this.off(this.player_, ["ended", "pause", "waiting"], this.disableIntervalHandler_), "hidden" in B && "visibilityState" in B && this.off(B, "visibilitychange", this.toggleVisibility_), super.dispose();
  }
}
Qo.prototype.options_ = {
  children: ["loadProgressBar", "playProgressBar"],
  barName: "playProgressBar"
};
!Be && !Ct && Qo.prototype.options_.children.splice(1, 0, "mouseTimeDisplay");
N.registerComponent("SeekBar", Qo);
class Lh extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.handleMouseMove = At(ue(this, this.handleMouseMove), rt), this.throttledHandleMouseSeek = At(ue(this, this.handleMouseSeek), rt), this.handleMouseUpHandler_ = (s) => this.handleMouseUp(s), this.handleMouseDownHandler_ = (s) => this.handleMouseDown(s), this.enable();
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-progress-control vjs-control"
    });
  }
  /**
   * When the mouse moves over the `ProgressControl`, the pointer position
   * gets passed down to the `MouseTimeDisplay` component.
   *
   * @param {Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   */
  handleMouseMove(e) {
    const t = this.getChild("seekBar");
    if (!t)
      return;
    const s = t.getChild("playProgressBar"), r = t.getChild("mouseTimeDisplay");
    if (!s && !r)
      return;
    const n = t.el(), a = Ws(n);
    let l = In(n, e).x;
    l = tr(l, 0, 1), r && r.update(a, l), s && s.update(a, t.getProgress());
  }
  /**
   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
   *
   * @method ProgressControl#throttledHandleMouseSeek
   * @param {Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   * @listen touchmove
   */
  /**
   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousemove
   * @listens touchmove
   */
  handleMouseSeek(e) {
    const t = this.getChild("seekBar");
    t && t.handleMouseMove(e);
  }
  /**
   * Are controls are currently enabled for this progress control.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */
  enabled() {
    return this.enabled_;
  }
  /**
   * Disable all controls on the progress control and its children
   */
  disable() {
    if (this.children().forEach((e) => e.disable && e.disable()), !!this.enabled() && (this.off(["mousedown", "touchstart"], this.handleMouseDownHandler_), this.off(this.el_, "mousemove", this.handleMouseMove), this.removeListenersAddedOnMousedownAndTouchstart(), this.addClass("disabled"), this.enabled_ = !1, this.player_.scrubbing())) {
      const e = this.getChild("seekBar");
      this.player_.scrubbing(!1), e.videoWasPlaying && vt(this.player_.play());
    }
  }
  /**
   * Enable all controls on the progress control and its children
   */
  enable() {
    this.children().forEach((e) => e.enable && e.enable()), !this.enabled() && (this.on(["mousedown", "touchstart"], this.handleMouseDownHandler_), this.on(this.el_, "mousemove", this.handleMouseMove), this.removeClass("disabled"), this.enabled_ = !0);
  }
  /**
   * Cleanup listeners after the user finishes interacting with the progress controls
   */
  removeListenersAddedOnMousedownAndTouchstart() {
    const e = this.el_.ownerDocument;
    this.off(e, "mousemove", this.throttledHandleMouseSeek), this.off(e, "touchmove", this.throttledHandleMouseSeek), this.off(e, "mouseup", this.handleMouseUpHandler_), this.off(e, "touchend", this.handleMouseUpHandler_);
  }
  /**
   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */
  handleMouseDown(e) {
    const t = this.el_.ownerDocument, s = this.getChild("seekBar");
    s && s.handleMouseDown(e), this.on(t, "mousemove", this.throttledHandleMouseSeek), this.on(t, "touchmove", this.throttledHandleMouseSeek), this.on(t, "mouseup", this.handleMouseUpHandler_), this.on(t, "touchend", this.handleMouseUpHandler_);
  }
  /**
   * Handle `mouseup` or `touchend` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */
  handleMouseUp(e) {
    const t = this.getChild("seekBar");
    t && t.handleMouseUp(e), this.removeListenersAddedOnMousedownAndTouchstart();
  }
}
Lh.prototype.options_ = {
  children: ["seekBar"]
};
N.registerComponent("ProgressControl", Lh);
class Oh extends Je {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @listens Player#enterpictureinpicture
   * @listens Player#leavepictureinpicture
   */
  constructor(e, t) {
    super(e, t), this.setIcon("picture-in-picture-enter"), this.on(e, ["enterpictureinpicture", "leavepictureinpicture"], (s) => this.handlePictureInPictureChange(s)), this.on(e, ["disablepictureinpicturechanged", "loadedmetadata"], (s) => this.handlePictureInPictureEnabledChange(s)), this.on(e, ["loadedmetadata", "audioonlymodechange", "audiopostermodechange"], () => this.handlePictureInPictureAudioModeChange()), this.disable();
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-picture-in-picture-control vjs-hidden ${super.buildCSSClass()}`;
  }
  /**
   * Displays or hides the button depending on the audio mode detection.
   * Exits picture-in-picture if it is enabled when switching to audio mode.
   */
  handlePictureInPictureAudioModeChange() {
    if (!(this.player_.currentType().substring(0, 5) === "audio" || this.player_.audioPosterMode() || this.player_.audioOnlyMode())) {
      this.show();
      return;
    }
    this.player_.isInPictureInPicture() && this.player_.exitPictureInPicture(), this.hide();
  }
  /**
   * Enables or disables button based on availability of a Picture-In-Picture mode.
   *
   * Enabled if
   * - `player.options().enableDocumentPictureInPicture` is true and
   *   window.documentPictureInPicture is available; or
   * - `player.disablePictureInPicture()` is false and
   *   element.requestPictureInPicture is available
   */
  handlePictureInPictureEnabledChange() {
    B.pictureInPictureEnabled && this.player_.disablePictureInPicture() === !1 || this.player_.options_.enableDocumentPictureInPicture && "documentPictureInPicture" in E ? this.enable() : this.disable();
  }
  /**
   * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.
   *
   * @param {Event} [event]
   *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be
   *        called.
   *
   * @listens Player#enterpictureinpicture
   * @listens Player#leavepictureinpicture
   */
  handlePictureInPictureChange(e) {
    this.player_.isInPictureInPicture() ? (this.setIcon("picture-in-picture-exit"), this.controlText("Exit Picture-in-Picture")) : (this.setIcon("picture-in-picture-enter"), this.controlText("Picture-in-Picture")), this.handlePictureInPictureEnabledChange();
  }
  /**
   * This gets called when an `PictureInPictureToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    this.player_.isInPictureInPicture() ? this.player_.exitPictureInPicture() : this.player_.requestPictureInPicture();
  }
  /**
   * Show the `Component`s element if it is hidden by removing the
   * 'vjs-hidden' class name from it only in browsers that support the Picture-in-Picture API.
   */
  show() {
    typeof B.exitPictureInPicture == "function" && super.show();
  }
}
Oh.prototype.controlText_ = "Picture-in-Picture";
N.registerComponent("PictureInPictureToggle", Oh);
class jh extends Je {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.setIcon("fullscreen-enter"), this.on(e, "fullscreenchange", (s) => this.handleFullscreenChange(s)), B[e.fsApi_.fullscreenEnabled] === !1 && this.disable();
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-fullscreen-control ${super.buildCSSClass()}`;
  }
  /**
   * Handles fullscreenchange on the player and change control text accordingly.
   *
   * @param {Event} [event]
   *        The {@link Player#fullscreenchange} event that caused this function to be
   *        called.
   *
   * @listens Player#fullscreenchange
   */
  handleFullscreenChange(e) {
    this.player_.isFullscreen() ? (this.controlText("Exit Fullscreen"), this.setIcon("fullscreen-exit")) : (this.controlText("Fullscreen"), this.setIcon("fullscreen-enter"));
  }
  /**
   * This gets called when an `FullscreenToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    this.player_.isFullscreen() ? this.player_.exitFullscreen() : this.player_.requestFullscreen();
  }
}
jh.prototype.controlText_ = "Fullscreen";
N.registerComponent("FullscreenToggle", jh);
const F_ = function(i, e) {
  e.tech_ && !e.tech_.featuresVolumeControl && i.addClass("vjs-hidden"), i.on(e, "loadstart", function() {
    e.tech_.featuresVolumeControl ? i.removeClass("vjs-hidden") : i.addClass("vjs-hidden");
  });
};
class U_ extends N {
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    const e = super.createEl("div", {
      className: "vjs-volume-level"
    });
    return this.setIcon("circle", e), e.appendChild(super.createEl("span", {
      className: "vjs-control-text"
    })), e;
  }
}
N.registerComponent("VolumeLevel", U_);
class q_ extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.update = At(ue(this, this.update), rt);
  }
  /**
   * Create the volume tooltip DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-volume-tooltip"
    }, {
      "aria-hidden": "true"
    });
  }
  /**
   * Updates the position of the tooltip relative to the `VolumeBar` and
   * its content text.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   */
  update(e, t, s, r) {
    if (!s) {
      const n = Yi(this.el_), a = Yi(this.player_.el()), l = e.width * t;
      if (!a || !n)
        return;
      const u = e.left - a.left + l, f = e.width - l + (a.right - e.right);
      let m = n.width / 2;
      u < m ? m += m - u : f < m && (m = f), m < 0 ? m = 0 : m > n.width && (m = n.width), this.el_.style.right = `-${m}px`;
    }
    this.write(`${r}%`);
  }
  /**
   * Write the volume to the tooltip DOM element.
   *
   * @param {string} content
   *        The formatted volume for the tooltip.
   */
  write(e) {
    ei(this.el_, e);
  }
  /**
   * Updates the position of the volume tooltip relative to the `VolumeBar`.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   * @param {number} volume
   *        The volume level to update the tooltip to
   *
   * @param {Function} cb
   *        A function that will be called during the request animation frame
   *        for tooltips that need to do additional animations from the default
   */
  updateVolume(e, t, s, r, n) {
    this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume", () => {
      this.update(e, t, s, r.toFixed(0)), n && n();
    });
  }
}
N.registerComponent("VolumeLevelTooltip", q_);
class Rh extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.update = At(ue(this, this.update), rt);
  }
  /**
   * Create the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-mouse-display"
    });
  }
  /**
   * Enquires updates to its own DOM as well as the DOM of its
   * {@link VolumeLevelTooltip} child.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   */
  update(e, t, s) {
    const r = 100 * t;
    this.getChild("volumeLevelTooltip").updateVolume(e, t, s, r, () => {
      s ? this.el_.style.bottom = `${e.height * t}px` : this.el_.style.left = `${e.width * t}px`;
    });
  }
}
Rh.prototype.options_ = {
  children: ["volumeLevelTooltip"]
};
N.registerComponent("MouseVolumeLevelDisplay", Rh);
class Mn extends Ko {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.on("slideractive", (s) => this.updateLastVolume_(s)), this.on(e, "volumechange", (s) => this.updateARIAAttributes(s)), e.ready(() => this.updateARIAAttributes());
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-volume-bar vjs-slider-bar"
    }, {
      "aria-label": this.localize("Volume Level"),
      "aria-live": "polite"
    });
  }
  /**
   * Handle mouse down on volume bar
   *
   * @param {Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */
  handleMouseDown(e) {
    Xs(e) && super.handleMouseDown(e);
  }
  /**
   * Handle movement events on the {@link VolumeMenuButton}.
   *
   * @param {Event} event
   *        The event that caused this function to run.
   *
   * @listens mousemove
   */
  handleMouseMove(e) {
    const t = this.getChild("mouseVolumeLevelDisplay");
    if (t) {
      const s = this.el(), r = Yi(s), n = this.vertical();
      let a = In(s, e);
      a = n ? a.y : a.x, a = tr(a, 0, 1), t.update(r, a, n);
    }
    Xs(e) && (this.checkMuted(), this.player_.volume(this.calculateDistance(e)));
  }
  /**
   * If the player is muted unmute it.
   */
  checkMuted() {
    this.player_.muted() && this.player_.muted(!1);
  }
  /**
   * Get percent of volume level
   *
   * @return {number}
   *         Volume level percent as a decimal number.
   */
  getPercent() {
    return this.player_.muted() ? 0 : this.player_.volume();
  }
  /**
   * Increase volume level for keyboard users
   */
  stepForward() {
    this.checkMuted(), this.player_.volume(this.player_.volume() + 0.1);
  }
  /**
   * Decrease volume level for keyboard users
   */
  stepBack() {
    this.checkMuted(), this.player_.volume(this.player_.volume() - 0.1);
  }
  /**
   * Update ARIA accessibility attributes
   *
   * @param {Event} [event]
   *        The `volumechange` event that caused this function to run.
   *
   * @listens Player#volumechange
   */
  updateARIAAttributes(e) {
    const t = this.player_.muted() ? 0 : this.volumeAsPercentage_();
    this.el_.setAttribute("aria-valuenow", t), this.el_.setAttribute("aria-valuetext", t + "%");
  }
  /**
   * Returns the current value of the player volume as a percentage
   *
   * @private
   */
  volumeAsPercentage_() {
    return Math.round(this.player_.volume() * 100);
  }
  /**
   * When user starts dragging the VolumeBar, store the volume and listen for
   * the end of the drag. When the drag ends, if the volume was set to zero,
   * set lastVolume to the stored volume.
   *
   * @listens slideractive
   * @private
   */
  updateLastVolume_() {
    const e = this.player_.volume();
    this.one("sliderinactive", () => {
      this.player_.volume() === 0 && this.player_.lastVolume_(e);
    });
  }
}
Mn.prototype.options_ = {
  children: ["volumeLevel"],
  barName: "volumeLevel"
};
!Be && !Ct && Mn.prototype.options_.children.splice(0, 0, "mouseVolumeLevelDisplay");
Mn.prototype.playerEvent = "volumechange";
N.registerComponent("VolumeBar", Mn);
class Nh extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  constructor(e, t = {}) {
    t.vertical = t.vertical || !1, (typeof t.volumeBar > "u" || Xi(t.volumeBar)) && (t.volumeBar = t.volumeBar || {}, t.volumeBar.vertical = t.vertical), super(e, t), F_(this, e), this.throttledHandleMouseMove = At(ue(this, this.handleMouseMove), rt), this.handleMouseUpHandler_ = (s) => this.handleMouseUp(s), this.on("mousedown", (s) => this.handleMouseDown(s)), this.on("touchstart", (s) => this.handleMouseDown(s)), this.on("mousemove", (s) => this.handleMouseMove(s)), this.on(this.volumeBar, ["focus", "slideractive"], () => {
      this.volumeBar.addClass("vjs-slider-active"), this.addClass("vjs-slider-active"), this.trigger("slideractive");
    }), this.on(this.volumeBar, ["blur", "sliderinactive"], () => {
      this.volumeBar.removeClass("vjs-slider-active"), this.removeClass("vjs-slider-active"), this.trigger("sliderinactive");
    });
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    let e = "vjs-volume-horizontal";
    return this.options_.vertical && (e = "vjs-volume-vertical"), super.createEl("div", {
      className: `vjs-volume-control vjs-control ${e}`
    });
  }
  /**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */
  handleMouseDown(e) {
    const t = this.el_.ownerDocument;
    this.on(t, "mousemove", this.throttledHandleMouseMove), this.on(t, "touchmove", this.throttledHandleMouseMove), this.on(t, "mouseup", this.handleMouseUpHandler_), this.on(t, "touchend", this.handleMouseUpHandler_);
  }
  /**
   * Handle `mouseup` or `touchend` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */
  handleMouseUp(e) {
    const t = this.el_.ownerDocument;
    this.off(t, "mousemove", this.throttledHandleMouseMove), this.off(t, "touchmove", this.throttledHandleMouseMove), this.off(t, "mouseup", this.handleMouseUpHandler_), this.off(t, "touchend", this.handleMouseUpHandler_);
  }
  /**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */
  handleMouseMove(e) {
    this.volumeBar.handleMouseMove(e);
  }
}
Nh.prototype.options_ = {
  children: ["volumeBar"]
};
N.registerComponent("VolumeControl", Nh);
const $_ = function(i, e) {
  e.tech_ && !e.tech_.featuresMuteControl && i.addClass("vjs-hidden"), i.on(e, "loadstart", function() {
    e.tech_.featuresMuteControl ? i.removeClass("vjs-hidden") : i.addClass("vjs-hidden");
  });
};
class Mh extends Je {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), $_(this, e), this.on(e, ["loadstart", "volumechange"], (s) => this.update(s));
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-mute-control ${super.buildCSSClass()}`;
  }
  /**
   * This gets called when an `MuteToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    const t = this.player_.volume(), s = this.player_.lastVolume_();
    if (t === 0) {
      const r = s < 0.1 ? 0.1 : s;
      this.player_.volume(r), this.player_.muted(!1);
    } else
      this.player_.muted(!this.player_.muted());
  }
  /**
   * Update the `MuteToggle` button based on the state of `volume` and `muted`
   * on the player.
   *
   * @param {Event} [event]
   *        The {@link Player#loadstart} event if this function was called
   *        through an event.
   *
   * @listens Player#loadstart
   * @listens Player#volumechange
   */
  update(e) {
    this.updateIcon_(), this.updateControlText_();
  }
  /**
   * Update the appearance of the `MuteToggle` icon.
   *
   * Possible states (given `level` variable below):
   * - 0: crossed out
   * - 1: zero bars of volume
   * - 2: one bar of volume
   * - 3: two bars of volume
   *
   * @private
   */
  updateIcon_() {
    const e = this.player_.volume();
    let t = 3;
    this.setIcon("volume-high"), Be && this.player_.tech_ && this.player_.tech_.el_ && this.player_.muted(this.player_.tech_.el_.muted), e === 0 || this.player_.muted() ? (this.setIcon("volume-mute"), t = 0) : e < 0.33 ? (this.setIcon("volume-low"), t = 1) : e < 0.67 && (this.setIcon("volume-medium"), t = 2), Dn(this.el_, [0, 1, 2, 3].reduce((s, r) => s + `${r ? " " : ""}vjs-vol-${r}`, "")), gi(this.el_, `vjs-vol-${t}`);
  }
  /**
   * If `muted` has changed on the player, update the control text
   * (`title` attribute on `vjs-mute-control` element and content of
   * `vjs-control-text` element).
   *
   * @private
   */
  updateControlText_() {
    const t = this.player_.muted() || this.player_.volume() === 0 ? "Unmute" : "Mute";
    this.controlText() !== t && this.controlText(t);
  }
}
Mh.prototype.controlText_ = "Mute";
N.registerComponent("MuteToggle", Mh);
class Bh extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  constructor(e, t = {}) {
    typeof t.inline < "u" ? t.inline = t.inline : t.inline = !0, (typeof t.volumeControl > "u" || Xi(t.volumeControl)) && (t.volumeControl = t.volumeControl || {}, t.volumeControl.vertical = !t.inline), super(e, t), this.handleKeyPressHandler_ = (s) => this.handleKeyPress(s), this.on(e, ["loadstart"], (s) => this.volumePanelState_(s)), this.on(this.muteToggle, "keyup", (s) => this.handleKeyPress(s)), this.on(this.volumeControl, "keyup", (s) => this.handleVolumeControlKeyUp(s)), this.on("keydown", (s) => this.handleKeyPress(s)), this.on("mouseover", (s) => this.handleMouseOver(s)), this.on("mouseout", (s) => this.handleMouseOut(s)), this.on(this.volumeControl, ["slideractive"], this.sliderActive_), this.on(this.volumeControl, ["sliderinactive"], this.sliderInactive_);
  }
  /**
   * Add vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#slideractive
   * @private
   */
  sliderActive_() {
    this.addClass("vjs-slider-active");
  }
  /**
   * Removes vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#sliderinactive
   * @private
   */
  sliderInactive_() {
    this.removeClass("vjs-slider-active");
  }
  /**
   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel
   * depending on MuteToggle and VolumeControl state
   *
   * @listens Player#loadstart
   * @private
   */
  volumePanelState_() {
    this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-hidden"), this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-mute-toggle-only");
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    let e = "vjs-volume-panel-horizontal";
    return this.options_.inline || (e = "vjs-volume-panel-vertical"), super.createEl("div", {
      className: `vjs-volume-panel vjs-control ${e}`
    });
  }
  /**
   * Dispose of the `volume-panel` and all child components.
   */
  dispose() {
    this.handleMouseOut(), super.dispose();
  }
  /**
   * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes
   * the volume panel and sets focus on `MuteToggle`.
   *
   * @param {Event} event
   *        The `keyup` event that caused this function to be called.
   *
   * @listens keyup
   */
  handleVolumeControlKeyUp(e) {
    W.isEventKey(e, "Esc") && this.muteToggle.focus();
  }
  /**
   * This gets called when a `VolumePanel` gains hover via a `mouseover` event.
   * Turns on listening for `mouseover` event. When they happen it
   * calls `this.handleMouseOver`.
   *
   * @param {Event} event
   *        The `mouseover` event that caused this function to be called.
   *
   * @listens mouseover
   */
  handleMouseOver(e) {
    this.addClass("vjs-hover"), Ze(B, "keyup", this.handleKeyPressHandler_);
  }
  /**
   * This gets called when a `VolumePanel` gains hover via a `mouseout` event.
   * Turns on listening for `mouseout` event. When they happen it
   * calls `this.handleMouseOut`.
   *
   * @param {Event} event
   *        The `mouseout` event that caused this function to be called.
   *
   * @listens mouseout
   */
  handleMouseOut(e) {
    this.removeClass("vjs-hover"), Pe(B, "keyup", this.handleKeyPressHandler_);
  }
  /**
   * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,
   * looking for ESC, which hides the `VolumeControl`.
   *
   * @param {Event} event
   *        The keypress that triggered this event.
   *
   * @listens keydown | keyup
   */
  handleKeyPress(e) {
    W.isEventKey(e, "Esc") && this.handleMouseOut();
  }
}
Bh.prototype.options_ = {
  children: ["muteToggle", "volumeControl"]
};
N.registerComponent("VolumePanel", Bh);
class Fh extends Je {
  constructor(e, t) {
    super(e, t), this.validOptions = [5, 10, 30], this.skipTime = this.getSkipForwardTime(), this.skipTime && this.validOptions.includes(this.skipTime) ? (this.setIcon(`forward-${this.skipTime}`), this.controlText(this.localize("Skip forward {1} seconds", [this.skipTime.toLocaleString(e.language())])), this.show()) : this.hide();
  }
  getSkipForwardTime() {
    const e = this.options_.playerOptions;
    return e.controlBar && e.controlBar.skipButtons && e.controlBar.skipButtons.forward;
  }
  buildCSSClass() {
    return `vjs-skip-forward-${this.getSkipForwardTime()} ${super.buildCSSClass()}`;
  }
  /**
   * On click, skips forward in the duration/seekable range by a configurable amount of seconds.
   * If the time left in the duration/seekable range is less than the configured 'skip forward' time,
   * skips to end of duration/seekable range.
   *
   * Handle a click on a `SkipForward` button
   *
   * @param {EventTarget~Event} event
   *        The `click` event that caused this function
   *        to be called
   */
  handleClick(e) {
    if (isNaN(this.player_.duration()))
      return;
    const t = this.player_.currentTime(), s = this.player_.liveTracker, r = s && s.isLive() ? s.seekableEnd() : this.player_.duration();
    let n;
    t + this.skipTime <= r ? n = t + this.skipTime : n = r, this.player_.currentTime(n);
  }
  /**
   * Update control text on languagechange
   */
  handleLanguagechange() {
    this.controlText(this.localize("Skip forward {1} seconds", [this.skipTime]));
  }
}
Fh.prototype.controlText_ = "Skip Forward";
N.registerComponent("SkipForward", Fh);
class Uh extends Je {
  constructor(e, t) {
    super(e, t), this.validOptions = [5, 10, 30], this.skipTime = this.getSkipBackwardTime(), this.skipTime && this.validOptions.includes(this.skipTime) ? (this.setIcon(`replay-${this.skipTime}`), this.controlText(this.localize("Skip backward {1} seconds", [this.skipTime.toLocaleString(e.language())])), this.show()) : this.hide();
  }
  getSkipBackwardTime() {
    const e = this.options_.playerOptions;
    return e.controlBar && e.controlBar.skipButtons && e.controlBar.skipButtons.backward;
  }
  buildCSSClass() {
    return `vjs-skip-backward-${this.getSkipBackwardTime()} ${super.buildCSSClass()}`;
  }
  /**
   * On click, skips backward in the video by a configurable amount of seconds.
   * If the current time in the video is less than the configured 'skip backward' time,
   * skips to beginning of video or seekable range.
   *
   * Handle a click on a `SkipBackward` button
   *
   * @param {EventTarget~Event} event
   *        The `click` event that caused this function
   *        to be called
   */
  handleClick(e) {
    const t = this.player_.currentTime(), s = this.player_.liveTracker, r = s && s.isLive() && s.seekableStart();
    let n;
    r && t - this.skipTime <= r ? n = r : t >= this.skipTime ? n = t - this.skipTime : n = 0, this.player_.currentTime(n);
  }
  /**
   * Update control text on languagechange
   */
  handleLanguagechange() {
    this.controlText(this.localize("Skip backward {1} seconds", [this.skipTime]));
  }
}
Uh.prototype.controlText_ = "Skip Backward";
N.registerComponent("SkipBackward", Uh);
class qh extends N {
  /**
   * Create an instance of this class.
   *
   * @param { import('../player').default } player
   *        the player that this component should attach to
   *
   * @param {Object} [options]
   *        Object of option names and values
   *
   */
  constructor(e, t) {
    super(e, t), t && (this.menuButton_ = t.menuButton), this.focusedChild_ = -1, this.on("keydown", (s) => this.handleKeyDown(s)), this.boundHandleBlur_ = (s) => this.handleBlur(s), this.boundHandleTapClick_ = (s) => this.handleTapClick(s);
  }
  /**
   * Add event listeners to the {@link MenuItem}.
   *
   * @param {Object} component
   *        The instance of the `MenuItem` to add listeners to.
   *
   */
  addEventListenerForItem(e) {
    e instanceof N && (this.on(e, "blur", this.boundHandleBlur_), this.on(e, ["tap", "click"], this.boundHandleTapClick_));
  }
  /**
   * Remove event listeners from the {@link MenuItem}.
   *
   * @param {Object} component
   *        The instance of the `MenuItem` to remove listeners.
   *
   */
  removeEventListenerForItem(e) {
    e instanceof N && (this.off(e, "blur", this.boundHandleBlur_), this.off(e, ["tap", "click"], this.boundHandleTapClick_));
  }
  /**
   * This method will be called indirectly when the component has been added
   * before the component adds to the new menu instance by `addItem`.
   * In this case, the original menu instance will remove the component
   * by calling `removeChild`.
   *
   * @param {Object} component
   *        The instance of the `MenuItem`
   */
  removeChild(e) {
    typeof e == "string" && (e = this.getChild(e)), this.removeEventListenerForItem(e), super.removeChild(e);
  }
  /**
   * Add a {@link MenuItem} to the menu.
   *
   * @param {Object|string} component
   *        The name or instance of the `MenuItem` to add.
   *
   */
  addItem(e) {
    const t = this.addChild(e);
    t && this.addEventListenerForItem(t);
  }
  /**
   * Create the `Menu`s DOM element.
   *
   * @return {Element}
   *         the element that was created
   */
  createEl() {
    const e = this.options_.contentElType || "ul";
    this.contentEl_ = Y(e, {
      className: "vjs-menu-content"
    }), this.contentEl_.setAttribute("role", "menu");
    const t = super.createEl("div", {
      append: this.contentEl_,
      className: "vjs-menu"
    });
    return t.appendChild(this.contentEl_), Ze(t, "click", function(s) {
      s.preventDefault(), s.stopImmediatePropagation();
    }), t;
  }
  dispose() {
    this.contentEl_ = null, this.boundHandleBlur_ = null, this.boundHandleTapClick_ = null, super.dispose();
  }
  /**
   * Called when a `MenuItem` loses focus.
   *
   * @param {Event} event
   *        The `blur` event that caused this function to be called.
   *
   * @listens blur
   */
  handleBlur(e) {
    const t = e.relatedTarget || B.activeElement;
    if (!this.children().some((s) => s.el() === t)) {
      const s = this.menuButton_;
      s && s.buttonPressed_ && t !== s.el().firstChild && s.unpressButton();
    }
  }
  /**
   * Called when a `MenuItem` gets clicked or tapped.
   *
   * @param {Event} event
   *        The `click` or `tap` event that caused this function to be called.
   *
   * @listens click,tap
   */
  handleTapClick(e) {
    if (this.menuButton_) {
      this.menuButton_.unpressButton();
      const t = this.children();
      if (!Array.isArray(t))
        return;
      const s = t.filter((r) => r.el() === e.target)[0];
      if (!s)
        return;
      s.name() !== "CaptionSettingsMenuItem" && this.menuButton_.focus();
    }
  }
  /**
   * Handle a `keydown` event on this menu. This listener is added in the constructor.
   *
   * @param {KeyboardEvent} event
   *        A `keydown` event that happened on the menu.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    W.isEventKey(e, "Left") || W.isEventKey(e, "Down") ? (e.preventDefault(), e.stopPropagation(), this.stepForward()) : (W.isEventKey(e, "Right") || W.isEventKey(e, "Up")) && (e.preventDefault(), e.stopPropagation(), this.stepBack());
  }
  /**
   * Move to next (lower) menu item for keyboard users.
   */
  stepForward() {
    let e = 0;
    this.focusedChild_ !== void 0 && (e = this.focusedChild_ + 1), this.focus(e);
  }
  /**
   * Move to previous (higher) menu item for keyboard users.
   */
  stepBack() {
    let e = 0;
    this.focusedChild_ !== void 0 && (e = this.focusedChild_ - 1), this.focus(e);
  }
  /**
   * Set focus on a {@link MenuItem} in the `Menu`.
   *
   * @param {Object|string} [item=0]
   *        Index of child item set focus on.
   */
  focus(e = 0) {
    const t = this.children().slice();
    t.length && t[0].hasClass("vjs-menu-title") && t.shift(), t.length > 0 && (e < 0 ? e = 0 : e >= t.length && (e = t.length - 1), this.focusedChild_ = e, t[e].el_.focus());
  }
}
N.registerComponent("Menu", qh);
class Jo extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  constructor(e, t = {}) {
    super(e, t), this.menuButton_ = new Je(e, t), this.menuButton_.controlText(this.controlText_), this.menuButton_.el_.setAttribute("aria-haspopup", "true");
    const s = Je.prototype.buildCSSClass();
    this.menuButton_.el_.className = this.buildCSSClass() + " " + s, this.menuButton_.removeClass("vjs-control"), this.addChild(this.menuButton_), this.update(), this.enabled_ = !0;
    const r = (n) => this.handleClick(n);
    this.handleMenuKeyUp_ = (n) => this.handleMenuKeyUp(n), this.on(this.menuButton_, "tap", r), this.on(this.menuButton_, "click", r), this.on(this.menuButton_, "keydown", (n) => this.handleKeyDown(n)), this.on(this.menuButton_, "mouseenter", () => {
      this.addClass("vjs-hover"), this.menu.show(), Ze(B, "keyup", this.handleMenuKeyUp_);
    }), this.on("mouseleave", (n) => this.handleMouseLeave(n)), this.on("keydown", (n) => this.handleSubmenuKeyDown(n));
  }
  /**
   * Update the menu based on the current state of its items.
   */
  update() {
    const e = this.createMenu();
    this.menu && (this.menu.dispose(), this.removeChild(this.menu)), this.menu = e, this.addChild(e), this.buttonPressed_ = !1, this.menuButton_.el_.setAttribute("aria-expanded", "false"), this.items && this.items.length <= this.hideThreshold_ ? (this.hide(), this.menu.contentEl_.removeAttribute("role")) : (this.show(), this.menu.contentEl_.setAttribute("role", "menu"));
  }
  /**
   * Create the menu and add all items to it.
   *
   * @return {Menu}
   *         The constructed menu
   */
  createMenu() {
    const e = new qh(this.player_, {
      menuButton: this
    });
    if (this.hideThreshold_ = 0, this.options_.title) {
      const t = Y("li", {
        className: "vjs-menu-title",
        textContent: ye(this.options_.title),
        tabIndex: -1
      }), s = new N(this.player_, {
        el: t
      });
      e.addItem(s);
    }
    if (this.items = this.createItems(), this.items)
      for (let t = 0; t < this.items.length; t++)
        e.addItem(this.items[t]);
    return e;
  }
  /**
   * Create the list of menu items. Specific to each subclass.
   *
   * @abstract
   */
  createItems() {
  }
  /**
   * Create the `MenuButtons`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */
  createEl() {
    return super.createEl("div", {
      className: this.buildWrapperCSSClass()
    }, {});
  }
  /**
   * Overwrites the `setIcon` method from `Component`.
   * In this case, we want the icon to be appended to the menuButton.
   *
   * @param {string} name
   *         The icon name to be added.
   */
  setIcon(e) {
    super.setIcon(e, this.menuButton_.el_);
  }
  /**
   * Allow sub components to stack CSS class names for the wrapper element
   *
   * @return {string}
   *         The constructed wrapper DOM `className`
   */
  buildWrapperCSSClass() {
    let e = "vjs-menu-button";
    this.options_.inline === !0 ? e += "-inline" : e += "-popup";
    const t = Je.prototype.buildCSSClass();
    return `vjs-menu-button ${e} ${t} ${super.buildCSSClass()}`;
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    let e = "vjs-menu-button";
    return this.options_.inline === !0 ? e += "-inline" : e += "-popup", `vjs-menu-button ${e} ${super.buildCSSClass()}`;
  }
  /**
   * Get or set the localized control text that will be used for accessibility.
   *
   * > NOTE: This will come from the internal `menuButton_` element.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.menuButton_.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */
  controlText(e, t = this.menuButton_.el()) {
    return this.menuButton_.controlText(e, t);
  }
  /**
   * Dispose of the `menu-button` and all child components.
   */
  dispose() {
    this.handleMouseLeave(), super.dispose();
  }
  /**
   * Handle a click on a `MenuButton`.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    this.buttonPressed_ ? this.unpressButton() : this.pressButton();
  }
  /**
   * Handle `mouseleave` for `MenuButton`.
   *
   * @param {Event} event
   *        The `mouseleave` event that caused this function to be called.
   *
   * @listens mouseleave
   */
  handleMouseLeave(e) {
    this.removeClass("vjs-hover"), Pe(B, "keyup", this.handleMenuKeyUp_);
  }
  /**
   * Set the focus to the actual button, not to this element
   */
  focus() {
    this.menuButton_.focus();
  }
  /**
   * Remove the focus from the actual button, not this element
   */
  blur() {
    this.menuButton_.blur();
  }
  /**
   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
   * {@link ClickableComponent#handleKeyDown} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    W.isEventKey(e, "Esc") || W.isEventKey(e, "Tab") ? (this.buttonPressed_ && this.unpressButton(), W.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus())) : (W.isEventKey(e, "Up") || W.isEventKey(e, "Down")) && (this.buttonPressed_ || (e.preventDefault(), this.pressButton()));
  }
  /**
   * Handle a `keyup` event on a `MenuButton`. The listener for this is added in
   * the constructor.
   *
   * @param {Event} event
   *        Key press event
   *
   * @listens keyup
   */
  handleMenuKeyUp(e) {
    (W.isEventKey(e, "Esc") || W.isEventKey(e, "Tab")) && this.removeClass("vjs-hover");
  }
  /**
   * This method name now delegates to `handleSubmenuKeyDown`. This means
   * anyone calling `handleSubmenuKeyPress` will not see their method calls
   * stop working.
   *
   * @param {Event} event
   *        The event that caused this function to be called.
   */
  handleSubmenuKeyPress(e) {
    this.handleSubmenuKeyDown(e);
  }
  /**
   * Handle a `keydown` event on a sub-menu. The listener for this is added in
   * the constructor.
   *
   * @param {Event} event
   *        Key press event
   *
   * @listens keydown
   */
  handleSubmenuKeyDown(e) {
    (W.isEventKey(e, "Esc") || W.isEventKey(e, "Tab")) && (this.buttonPressed_ && this.unpressButton(), W.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus()));
  }
  /**
   * Put the current `MenuButton` into a pressed state.
   */
  pressButton() {
    if (this.enabled_) {
      if (this.buttonPressed_ = !0, this.menu.show(), this.menu.lockShowing(), this.menuButton_.el_.setAttribute("aria-expanded", "true"), Be && Jd())
        return;
      this.menu.focus();
    }
  }
  /**
   * Take the current `MenuButton` out of a pressed state.
   */
  unpressButton() {
    this.enabled_ && (this.buttonPressed_ = !1, this.menu.unlockShowing(), this.menu.hide(), this.menuButton_.el_.setAttribute("aria-expanded", "false"));
  }
  /**
   * Disable the `MenuButton`. Don't allow it to be clicked.
   */
  disable() {
    this.unpressButton(), this.enabled_ = !1, this.addClass("vjs-disabled"), this.menuButton_.disable();
  }
  /**
   * Enable the `MenuButton`. Allow it to be clicked.
   */
  enable() {
    this.enabled_ = !0, this.removeClass("vjs-disabled"), this.menuButton_.enable();
  }
}
N.registerComponent("MenuButton", Jo);
class Zo extends Jo {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    const s = t.tracks;
    if (super(e, t), this.items.length <= 1 && this.hide(), !s)
      return;
    const r = ue(this, this.update);
    s.addEventListener("removetrack", r), s.addEventListener("addtrack", r), s.addEventListener("labelchange", r), this.player_.on("ready", r), this.player_.on("dispose", function() {
      s.removeEventListener("removetrack", r), s.removeEventListener("addtrack", r), s.removeEventListener("labelchange", r);
    });
  }
}
N.registerComponent("TrackButton", Zo);
const V_ = ["Tab", "Esc", "Up", "Down", "Right", "Left"];
class ir extends Nn {
  /**
   * Creates an instance of the this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   *
   */
  constructor(e, t) {
    super(e, t), this.selectable = t.selectable, this.isSelected_ = t.selected || !1, this.multiSelectable = t.multiSelectable, this.selected(this.isSelected_), this.selectable ? this.multiSelectable ? this.el_.setAttribute("role", "menuitemcheckbox") : this.el_.setAttribute("role", "menuitemradio") : this.el_.setAttribute("role", "menuitem");
  }
  /**
   * Create the `MenuItem's DOM element
   *
   * @param {string} [type=li]
   *        Element's node type, not actually used, always set to `li`.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element
   *
   * @param {Object} [attrs={}]
   *        An object of attributes that should be set on the element
   *
   * @return {Element}
   *         The element that gets created.
   */
  createEl(e, t, s) {
    this.nonIconControl = !0;
    const r = super.createEl("li", Object.assign({
      className: "vjs-menu-item",
      tabIndex: -1
    }, t), s), n = Y("span", {
      className: "vjs-menu-item-text",
      textContent: this.localize(this.options_.label)
    });
    return this.player_.options_.experimentalSvgIcons ? r.appendChild(n) : r.replaceChild(n, r.querySelector(".vjs-icon-placeholder")), r;
  }
  /**
   * Ignore keys which are used by the menu, but pass any other ones up. See
   * {@link ClickableComponent#handleKeyDown} for instances where this is called.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    V_.some((t) => W.isEventKey(e, t)) || super.handleKeyDown(e);
  }
  /**
   * Any click on a `MenuItem` puts it into the selected state.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    this.selected(!0);
  }
  /**
   * Set the state for this menu item as selected or not.
   *
   * @param {boolean} selected
   *        if the menu item is selected or not
   */
  selected(e) {
    this.selectable && (e ? (this.addClass("vjs-selected"), this.el_.setAttribute("aria-checked", "true"), this.controlText(", selected"), this.isSelected_ = !0) : (this.removeClass("vjs-selected"), this.el_.setAttribute("aria-checked", "false"), this.controlText(""), this.isSelected_ = !1));
  }
}
N.registerComponent("MenuItem", ir);
class sr extends ir {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    const s = t.track, r = e.textTracks();
    t.label = s.label || s.language || "Unknown", t.selected = s.mode === "showing", super(e, t), this.track = s, this.kinds = (t.kinds || [t.kind || this.track.kind]).filter(Boolean);
    const n = (...l) => {
      this.handleTracksChange.apply(this, l);
    }, a = (...l) => {
      this.handleSelectedLanguageChange.apply(this, l);
    };
    if (e.on(["loadstart", "texttrackchange"], n), r.addEventListener("change", n), r.addEventListener("selectedlanguagechange", a), this.on("dispose", function() {
      e.off(["loadstart", "texttrackchange"], n), r.removeEventListener("change", n), r.removeEventListener("selectedlanguagechange", a);
    }), r.onchange === void 0) {
      let l;
      this.on(["tap", "click"], function() {
        if (typeof E.Event != "object")
          try {
            l = new E.Event("change");
          } catch {
          }
        l || (l = B.createEvent("Event"), l.initEvent("change", !0, !0)), r.dispatchEvent(l);
      });
    }
    this.handleTracksChange();
  }
  /**
   * This gets called when an `TextTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    const t = this.track, s = this.player_.textTracks();
    if (super.handleClick(e), !!s)
      for (let r = 0; r < s.length; r++) {
        const n = s[r];
        this.kinds.indexOf(n.kind) !== -1 && (n === t ? n.mode !== "showing" && (n.mode = "showing") : n.mode !== "disabled" && (n.mode = "disabled"));
      }
  }
  /**
   * Handle text track list change
   *
   * @param {Event} event
   *        The `change` event that caused this function to be called.
   *
   * @listens TextTrackList#change
   */
  handleTracksChange(e) {
    const t = this.track.mode === "showing";
    t !== this.isSelected_ && this.selected(t);
  }
  handleSelectedLanguageChange(e) {
    if (this.track.mode === "showing") {
      const t = this.player_.cache_.selectedLanguage;
      if (t && t.enabled && t.language === this.track.language && t.kind !== this.track.kind)
        return;
      this.player_.cache_.selectedLanguage = {
        enabled: !0,
        language: this.track.language,
        kind: this.track.kind
      };
    }
  }
  dispose() {
    this.track = null, super.dispose();
  }
}
N.registerComponent("TextTrackMenuItem", sr);
class $h extends sr {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    t.track = {
      player: e,
      // it is no longer necessary to store `kind` or `kinds` on the track itself
      // since they are now stored in the `kinds` property of all instances of
      // TextTrackMenuItem, but this will remain for backwards compatibility
      kind: t.kind,
      kinds: t.kinds,
      default: !1,
      mode: "disabled"
    }, t.kinds || (t.kinds = [t.kind]), t.label ? t.track.label = t.label : t.track.label = t.kinds.join(" and ") + " off", t.selectable = !0, t.multiSelectable = !1, super(e, t);
  }
  /**
   * Handle text track change
   *
   * @param {Event} event
   *        The event that caused this function to run
   */
  handleTracksChange(e) {
    const t = this.player().textTracks();
    let s = !0;
    for (let r = 0, n = t.length; r < n; r++) {
      const a = t[r];
      if (this.options_.kinds.indexOf(a.kind) > -1 && a.mode === "showing") {
        s = !1;
        break;
      }
    }
    s !== this.isSelected_ && this.selected(s);
  }
  handleSelectedLanguageChange(e) {
    const t = this.player().textTracks();
    let s = !0;
    for (let r = 0, n = t.length; r < n; r++) {
      const a = t[r];
      if (["captions", "descriptions", "subtitles"].indexOf(a.kind) > -1 && a.mode === "showing") {
        s = !1;
        break;
      }
    }
    s && (this.player_.cache_.selectedLanguage = {
      enabled: !1
    });
  }
  /**
   * Update control text and label on languagechange
   */
  handleLanguagechange() {
    this.$(".vjs-menu-item-text").textContent = this.player_.localize(this.options_.label), super.handleLanguagechange();
  }
}
N.registerComponent("OffTextTrackMenuItem", $h);
class as extends Zo {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  constructor(e, t = {}) {
    t.tracks = e.textTracks(), super(e, t);
  }
  /**
   * Create a menu item for each text track
   *
   * @param {TextTrackMenuItem[]} [items=[]]
   *        Existing array of items to use during creation
   *
   * @return {TextTrackMenuItem[]}
   *         Array of menu items that were created
   */
  createItems(e = [], t = sr) {
    let s;
    this.label_ && (s = `${this.label_} off`), e.push(new $h(this.player_, {
      kinds: this.kinds_,
      kind: this.kind_,
      label: s
    })), this.hideThreshold_ += 1;
    const r = this.player_.textTracks();
    Array.isArray(this.kinds_) || (this.kinds_ = [this.kind_]);
    for (let n = 0; n < r.length; n++) {
      const a = r[n];
      if (this.kinds_.indexOf(a.kind) > -1) {
        const l = new t(this.player_, {
          track: a,
          kinds: this.kinds_,
          kind: this.kind_,
          // MenuItem is selectable
          selectable: !0,
          // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
          multiSelectable: !1
        });
        l.addClass(`vjs-${a.kind}-menu-item`), e.push(l);
      }
    }
    return e;
  }
}
N.registerComponent("TextTrackButton", as);
class Vh extends ir {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    const s = t.track, r = t.cue, n = e.currentTime();
    t.selectable = !0, t.multiSelectable = !1, t.label = r.text, t.selected = r.startTime <= n && n < r.endTime, super(e, t), this.track = s, this.cue = r;
  }
  /**
   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    super.handleClick(), this.player_.currentTime(this.cue.startTime);
  }
}
N.registerComponent("ChaptersTrackMenuItem", Vh);
class el extends as {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this function is ready.
   */
  constructor(e, t, s) {
    super(e, t, s), this.setIcon("chapters"), this.selectCurrentItem_ = () => {
      this.items.forEach((r) => {
        r.selected(this.track_.activeCues[0] === r.cue);
      });
    };
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-chapters-button ${super.buildCSSClass()}`;
  }
  buildWrapperCSSClass() {
    return `vjs-chapters-button ${super.buildWrapperCSSClass()}`;
  }
  /**
   * Update the menu based on the current state of its items.
   *
   * @param {Event} [event]
   *        An event that triggered this function to run.
   *
   * @listens TextTrackList#addtrack
   * @listens TextTrackList#removetrack
   * @listens TextTrackList#change
   */
  update(e) {
    if (e && e.track && e.track.kind !== "chapters")
      return;
    const t = this.findChaptersTrack();
    t !== this.track_ ? (this.setTrack(t), super.update()) : (!this.items || t && t.cues && t.cues.length !== this.items.length) && super.update();
  }
  /**
   * Set the currently selected track for the chapters button.
   *
   * @param {TextTrack} track
   *        The new track to select. Nothing will change if this is the currently selected
   *        track.
   */
  setTrack(e) {
    if (this.track_ !== e) {
      if (this.updateHandler_ || (this.updateHandler_ = this.update.bind(this)), this.track_) {
        const t = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
        t && t.removeEventListener("load", this.updateHandler_), this.track_.removeEventListener("cuechange", this.selectCurrentItem_), this.track_ = null;
      }
      if (this.track_ = e, this.track_) {
        this.track_.mode = "hidden";
        const t = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
        t && t.addEventListener("load", this.updateHandler_), this.track_.addEventListener("cuechange", this.selectCurrentItem_);
      }
    }
  }
  /**
   * Find the track object that is currently in use by this ChaptersButton
   *
   * @return {TextTrack|undefined}
   *         The current track or undefined if none was found.
   */
  findChaptersTrack() {
    const e = this.player_.textTracks() || [];
    for (let t = e.length - 1; t >= 0; t--) {
      const s = e[t];
      if (s.kind === this.kind_)
        return s;
    }
  }
  /**
   * Get the caption for the ChaptersButton based on the track label. This will also
   * use the current tracks localized kind as a fallback if a label does not exist.
   *
   * @return {string}
   *         The tracks current label or the localized track kind.
   */
  getMenuCaption() {
    return this.track_ && this.track_.label ? this.track_.label : this.localize(ye(this.kind_));
  }
  /**
   * Create menu from chapter track
   *
   * @return { import('../../menu/menu').default }
   *         New menu for the chapter buttons
   */
  createMenu() {
    return this.options_.title = this.getMenuCaption(), super.createMenu();
  }
  /**
   * Create a menu item for each text track
   *
   * @return  { import('./text-track-menu-item').default[] }
   *         Array of menu items
   */
  createItems() {
    const e = [];
    if (!this.track_)
      return e;
    const t = this.track_.cues;
    if (!t)
      return e;
    for (let s = 0, r = t.length; s < r; s++) {
      const n = t[s], a = new Vh(this.player_, {
        track: this.track_,
        cue: n
      });
      e.push(a);
    }
    return e;
  }
}
el.prototype.kind_ = "chapters";
el.prototype.controlText_ = "Chapters";
N.registerComponent("ChaptersButton", el);
class tl extends as {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */
  constructor(e, t, s) {
    super(e, t, s), this.setIcon("audio-description");
    const r = e.textTracks(), n = ue(this, this.handleTracksChange);
    r.addEventListener("change", n), this.on("dispose", function() {
      r.removeEventListener("change", n);
    });
  }
  /**
   * Handle text track change
   *
   * @param {Event} event
   *        The event that caused this function to run
   *
   * @listens TextTrackList#change
   */
  handleTracksChange(e) {
    const t = this.player().textTracks();
    let s = !1;
    for (let r = 0, n = t.length; r < n; r++) {
      const a = t[r];
      if (a.kind !== this.kind_ && a.mode === "showing") {
        s = !0;
        break;
      }
    }
    s ? this.disable() : this.enable();
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-descriptions-button ${super.buildCSSClass()}`;
  }
  buildWrapperCSSClass() {
    return `vjs-descriptions-button ${super.buildWrapperCSSClass()}`;
  }
}
tl.prototype.kind_ = "descriptions";
tl.prototype.controlText_ = "Descriptions";
N.registerComponent("DescriptionsButton", tl);
class il extends as {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */
  constructor(e, t, s) {
    super(e, t, s), this.setIcon("subtitles");
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-subtitles-button ${super.buildCSSClass()}`;
  }
  buildWrapperCSSClass() {
    return `vjs-subtitles-button ${super.buildWrapperCSSClass()}`;
  }
}
il.prototype.kind_ = "subtitles";
il.prototype.controlText_ = "Subtitles";
N.registerComponent("SubtitlesButton", il);
class sl extends sr {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    t.track = {
      player: e,
      kind: t.kind,
      label: t.kind + " settings",
      selectable: !1,
      default: !1,
      mode: "disabled"
    }, t.selectable = !1, t.name = "CaptionSettingsMenuItem", super(e, t), this.addClass("vjs-texttrack-settings"), this.controlText(", opens " + t.kind + " settings dialog");
  }
  /**
   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    this.player().getChild("textTrackSettings").open();
  }
  /**
   * Update control text and label on languagechange
   */
  handleLanguagechange() {
    this.$(".vjs-menu-item-text").textContent = this.player_.localize(this.options_.kind + " settings"), super.handleLanguagechange();
  }
}
N.registerComponent("CaptionSettingsMenuItem", sl);
class rl extends as {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */
  constructor(e, t, s) {
    super(e, t, s), this.setIcon("captions");
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-captions-button ${super.buildCSSClass()}`;
  }
  buildWrapperCSSClass() {
    return `vjs-captions-button ${super.buildWrapperCSSClass()}`;
  }
  /**
   * Create caption menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */
  createItems() {
    const e = [];
    return !(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings") && (e.push(new sl(this.player_, {
      kind: this.kind_
    })), this.hideThreshold_ += 1), super.createItems(e);
  }
}
rl.prototype.kind_ = "captions";
rl.prototype.controlText_ = "Captions";
N.registerComponent("CaptionsButton", rl);
class Hh extends sr {
  createEl(e, t, s) {
    const r = super.createEl(e, t, s), n = r.querySelector(".vjs-menu-item-text");
    return this.options_.track.kind === "captions" && (this.player_.options_.experimentalSvgIcons ? this.setIcon("captions", r) : n.appendChild(Y("span", {
      className: "vjs-icon-placeholder"
    }, {
      "aria-hidden": !0
    })), n.appendChild(Y("span", {
      className: "vjs-control-text",
      // space added as the text will visually flow with the
      // label
      textContent: ` ${this.localize("Captions")}`
    }))), r;
  }
}
N.registerComponent("SubsCapsMenuItem", Hh);
class nl extends as {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */
  constructor(e, t = {}) {
    super(e, t), this.label_ = "subtitles", this.setIcon("subtitles"), ["en", "en-us", "en-ca", "fr-ca"].indexOf(this.player_.language_) > -1 && (this.label_ = "captions", this.setIcon("captions")), this.menuButton_.controlText(ye(this.label_));
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-subs-caps-button ${super.buildCSSClass()}`;
  }
  buildWrapperCSSClass() {
    return `vjs-subs-caps-button ${super.buildWrapperCSSClass()}`;
  }
  /**
   * Create caption/subtitles menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */
  createItems() {
    let e = [];
    return !(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings") && (e.push(new sl(this.player_, {
      kind: this.label_
    })), this.hideThreshold_ += 1), e = super.createItems(e, Hh), e;
  }
}
nl.prototype.kinds_ = ["captions", "subtitles"];
nl.prototype.controlText_ = "Subtitles";
N.registerComponent("SubsCapsButton", nl);
class zh extends ir {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    const s = t.track, r = e.audioTracks();
    t.label = s.label || s.language || "Unknown", t.selected = s.enabled, super(e, t), this.track = s, this.addClass(`vjs-${s.kind}-menu-item`);
    const n = (...a) => {
      this.handleTracksChange.apply(this, a);
    };
    r.addEventListener("change", n), this.on("dispose", () => {
      r.removeEventListener("change", n);
    });
  }
  createEl(e, t, s) {
    const r = super.createEl(e, t, s), n = r.querySelector(".vjs-menu-item-text");
    return ["main-desc", "description"].indexOf(this.options_.track.kind) >= 0 && (n.appendChild(Y("span", {
      className: "vjs-icon-placeholder"
    }, {
      "aria-hidden": !0
    })), n.appendChild(Y("span", {
      className: "vjs-control-text",
      textContent: " " + this.localize("Descriptions")
    }))), r;
  }
  /**
   * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    if (super.handleClick(e), this.track.enabled = !0, this.player_.tech_.featuresNativeAudioTracks) {
      const t = this.player_.audioTracks();
      for (let s = 0; s < t.length; s++) {
        const r = t[s];
        r !== this.track && (r.enabled = r === this.track);
      }
    }
  }
  /**
   * Handle any {@link AudioTrack} change.
   *
   * @param {Event} [event]
   *        The {@link AudioTrackList#change} event that caused this to run.
   *
   * @listens AudioTrackList#change
   */
  handleTracksChange(e) {
    this.selected(this.track.enabled);
  }
}
N.registerComponent("AudioTrackMenuItem", zh);
class Gh extends Zo {
  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  constructor(e, t = {}) {
    t.tracks = e.audioTracks(), super(e, t), this.setIcon("audio");
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-audio-button ${super.buildCSSClass()}`;
  }
  buildWrapperCSSClass() {
    return `vjs-audio-button ${super.buildWrapperCSSClass()}`;
  }
  /**
   * Create a menu item for each audio track
   *
   * @param {AudioTrackMenuItem[]} [items=[]]
   *        An array of existing menu items to use.
   *
   * @return {AudioTrackMenuItem[]}
   *         An array of menu items
   */
  createItems(e = []) {
    this.hideThreshold_ = 1;
    const t = this.player_.audioTracks();
    for (let s = 0; s < t.length; s++) {
      const r = t[s];
      e.push(new zh(this.player_, {
        track: r,
        // MenuItem is selectable
        selectable: !0,
        // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
        multiSelectable: !1
      }));
    }
    return e;
  }
}
Gh.prototype.controlText_ = "Audio Track";
N.registerComponent("AudioTrackButton", Gh);
class al extends ir {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    const s = t.rate, r = parseFloat(s, 10);
    t.label = s, t.selected = r === e.playbackRate(), t.selectable = !0, t.multiSelectable = !1, super(e, t), this.label = s, this.rate = r, this.on(e, "ratechange", (n) => this.update(n));
  }
  /**
   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  handleClick(e) {
    super.handleClick(), this.player().playbackRate(this.rate);
  }
  /**
   * Update the PlaybackRateMenuItem when the playbackrate changes.
   *
   * @param {Event} [event]
   *        The `ratechange` event that caused this function to run.
   *
   * @listens Player#ratechange
   */
  update(e) {
    this.selected(this.player().playbackRate() === this.rate);
  }
}
al.prototype.contentElType = "button";
N.registerComponent("PlaybackRateMenuItem", al);
class Wh extends Jo {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.menuButton_.el_.setAttribute("aria-describedby", this.labelElId_), this.updateVisibility(), this.updateLabel(), this.on(e, "loadstart", (s) => this.updateVisibility(s)), this.on(e, "ratechange", (s) => this.updateLabel(s)), this.on(e, "playbackrateschange", (s) => this.handlePlaybackRateschange(s));
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    const e = super.createEl();
    return this.labelElId_ = "vjs-playback-rate-value-label-" + this.id_, this.labelEl_ = Y("div", {
      className: "vjs-playback-rate-value",
      id: this.labelElId_,
      textContent: "1x"
    }), e.appendChild(this.labelEl_), e;
  }
  dispose() {
    this.labelEl_ = null, super.dispose();
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-playback-rate ${super.buildCSSClass()}`;
  }
  buildWrapperCSSClass() {
    return `vjs-playback-rate ${super.buildWrapperCSSClass()}`;
  }
  /**
   * Create the list of menu items. Specific to each subclass.
   *
   */
  createItems() {
    const e = this.playbackRates(), t = [];
    for (let s = e.length - 1; s >= 0; s--)
      t.push(new al(this.player(), {
        rate: e[s] + "x"
      }));
    return t;
  }
  /**
   * On playbackrateschange, update the menu to account for the new items.
   *
   * @listens Player#playbackrateschange
   */
  handlePlaybackRateschange(e) {
    this.update();
  }
  /**
   * Get possible playback rates
   *
   * @return {Array}
   *         All possible playback rates
   */
  playbackRates() {
    const e = this.player();
    return e.playbackRates && e.playbackRates() || [];
  }
  /**
   * Get whether playback rates is supported by the tech
   * and an array of playback rates exists
   *
   * @return {boolean}
   *         Whether changing playback rate is supported
   */
  playbackRateSupported() {
    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
  }
  /**
   * Hide playback rate controls when they're no playback rate options to select
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#loadstart
   */
  updateVisibility(e) {
    this.playbackRateSupported() ? this.removeClass("vjs-hidden") : this.addClass("vjs-hidden");
  }
  /**
   * Update button label when rate changed
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ratechange
   */
  updateLabel(e) {
    this.playbackRateSupported() && (this.labelEl_.textContent = this.player().playbackRate() + "x");
  }
}
Wh.prototype.controlText_ = "Playback Rate";
N.registerComponent("PlaybackRateMenuButton", Wh);
class Xh extends N {
  /**
  * Builds the default DOM `className`.
  *
  * @return {string}
  *         The DOM `className` for this object.
  */
  buildCSSClass() {
    return `vjs-spacer ${super.buildCSSClass()}`;
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl(e = "div", t = {}, s = {}) {
    return t.className || (t.className = this.buildCSSClass()), super.createEl(e, t, s);
  }
}
N.registerComponent("Spacer", Xh);
class H_ extends Xh {
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-custom-control-spacer ${super.buildCSSClass()}`;
  }
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: this.buildCSSClass(),
      // No-flex/table-cell mode requires there be some content
      // in the cell to fill the remaining space of the table.
      textContent: " "
    });
  }
}
N.registerComponent("CustomControlSpacer", H_);
class Kh extends N {
  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return super.createEl("div", {
      className: "vjs-control-bar",
      dir: "ltr"
    });
  }
}
Kh.prototype.options_ = {
  children: ["playToggle", "skipBackward", "skipForward", "volumePanel", "currentTimeDisplay", "timeDivider", "durationDisplay", "progressControl", "liveDisplay", "seekToLive", "remainingTimeDisplay", "customControlSpacer", "playbackRateMenuButton", "chaptersButton", "descriptionsButton", "subsCapsButton", "audioTrackButton", "pictureInPictureToggle", "fullscreenToggle"]
};
N.registerComponent("ControlBar", Kh);
class Yh extends rs {
  /**
   * Creates an instance of this class.
   *
   * @param  { import('./player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */
  constructor(e, t) {
    super(e, t), this.on(e, "error", (s) => {
      this.open(s);
    });
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   *
   * @deprecated Since version 5.
   */
  buildCSSClass() {
    return `vjs-error-display ${super.buildCSSClass()}`;
  }
  /**
   * Gets the localized error message based on the `Player`s error.
   *
   * @return {string}
   *         The `Player`s error message localized or an empty string.
   */
  content() {
    const e = this.player().error();
    return e ? this.localize(e.message) : "";
  }
}
Yh.prototype.options_ = Object.assign({}, rs.prototype.options_, {
  pauseOnOpen: !1,
  fillAlways: !0,
  temporary: !1,
  uncloseable: !0
});
N.registerComponent("ErrorDisplay", Yh);
const Sa = "vjs-text-track-settings", nc = ["#000", "Black"], ac = ["#00F", "Blue"], oc = ["#0FF", "Cyan"], lc = ["#0F0", "Green"], uc = ["#F0F", "Magenta"], cc = ["#F00", "Red"], dc = ["#FFF", "White"], hc = ["#FF0", "Yellow"], Ea = ["1", "Opaque"], Ca = ["0.5", "Semi-Transparent"], fc = ["0", "Transparent"], hi = {
  backgroundColor: {
    selector: ".vjs-bg-color > select",
    id: "captions-background-color-%s",
    label: "Color",
    options: [nc, dc, cc, lc, ac, hc, uc, oc]
  },
  backgroundOpacity: {
    selector: ".vjs-bg-opacity > select",
    id: "captions-background-opacity-%s",
    label: "Opacity",
    options: [Ea, Ca, fc]
  },
  color: {
    selector: ".vjs-text-color > select",
    id: "captions-foreground-color-%s",
    label: "Color",
    options: [dc, nc, cc, lc, ac, hc, uc, oc]
  },
  edgeStyle: {
    selector: ".vjs-edge-style > select",
    id: "%s",
    label: "Text Edge Style",
    options: [["none", "None"], ["raised", "Raised"], ["depressed", "Depressed"], ["uniform", "Uniform"], ["dropshadow", "Drop shadow"]]
  },
  fontFamily: {
    selector: ".vjs-font-family > select",
    id: "captions-font-family-%s",
    label: "Font Family",
    options: [["proportionalSansSerif", "Proportional Sans-Serif"], ["monospaceSansSerif", "Monospace Sans-Serif"], ["proportionalSerif", "Proportional Serif"], ["monospaceSerif", "Monospace Serif"], ["casual", "Casual"], ["script", "Script"], ["small-caps", "Small Caps"]]
  },
  fontPercent: {
    selector: ".vjs-font-percent > select",
    id: "captions-font-size-%s",
    label: "Font Size",
    options: [["0.50", "50%"], ["0.75", "75%"], ["1.00", "100%"], ["1.25", "125%"], ["1.50", "150%"], ["1.75", "175%"], ["2.00", "200%"], ["3.00", "300%"], ["4.00", "400%"]],
    default: 2,
    parser: (i) => i === "1.00" ? null : Number(i)
  },
  textOpacity: {
    selector: ".vjs-text-opacity > select",
    id: "captions-foreground-opacity-%s",
    label: "Opacity",
    options: [Ea, Ca]
  },
  // Options for this object are defined below.
  windowColor: {
    selector: ".vjs-window-color > select",
    id: "captions-window-color-%s",
    label: "Color"
  },
  // Options for this object are defined below.
  windowOpacity: {
    selector: ".vjs-window-opacity > select",
    id: "captions-window-opacity-%s",
    label: "Opacity",
    options: [fc, Ca, Ea]
  }
};
hi.windowColor.options = hi.backgroundColor.options;
function Qh(i, e) {
  if (e && (i = e(i)), i && i !== "none")
    return i;
}
function z_(i, e) {
  const t = i.options[i.options.selectedIndex].value;
  return Qh(t, e);
}
function G_(i, e, t) {
  if (e) {
    for (let s = 0; s < i.options.length; s++)
      if (Qh(i.options[s].value, t) === e) {
        i.selectedIndex = s;
        break;
      }
  }
}
class W_ extends rs {
  /**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *         The key/value store of player options.
   */
  constructor(e, t) {
    t.temporary = !1, super(e, t), this.updateDisplay = this.updateDisplay.bind(this), this.fill(), this.hasBeenOpened_ = this.hasBeenFilled_ = !0, this.endDialog = Y("p", {
      className: "vjs-control-text",
      textContent: this.localize("End of dialog window.")
    }), this.el().appendChild(this.endDialog), this.setDefaults(), t.persistTextTrackSettings === void 0 && (this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings), this.on(this.$(".vjs-done-button"), "click", () => {
      this.saveSettings(), this.close();
    }), this.on(this.$(".vjs-default-button"), "click", () => {
      this.setDefaults(), this.updateDisplay();
    }), Ri(hi, (s) => {
      this.on(this.$(s.selector), "change", this.updateDisplay);
    }), this.options_.persistTextTrackSettings && this.restoreSettings();
  }
  dispose() {
    this.endDialog = null, super.dispose();
  }
  /**
   * Create a <select> element with configured options.
   *
   * @param {string} key
   *        Configuration key to use during creation.
   *
   * @param {string} [legendId]
   *        Id of associated <legend>.
   *
   * @param {string} [type=label]
   *        Type of labelling element, `label` or `legend`
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */
  createElSelect_(e, t = "", s = "label") {
    const r = hi[e], n = r.id.replace("%s", this.id_), a = [t, n].join(" ").trim(), l = `vjs_select_${ht()}`;
    return [`<${s} id="${n}"${s === "label" ? ` for="${l}" class="vjs-label"` : ""}>`, this.localize(r.label), `</${s}>`, `<select aria-labelledby="${a}" id="${l}">`].concat(r.options.map((u) => {
      const f = n + "-" + u[1].replace(/\W+/g, "");
      return [`<option id="${f}" value="${u[0]}" `, `aria-labelledby="${a} ${f}">`, this.localize(u[1]), "</option>"].join("");
    })).concat("</select>").join("");
  }
  /**
   * Create foreground color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */
  createElFgColor_() {
    const e = `captions-text-legend-${this.id_}`;
    return ['<fieldset class="vjs-fg vjs-track-setting">', `<legend id="${e}">`, this.localize("Text"), "</legend>", '<span class="vjs-text-color">', this.createElSelect_("color", e), "</span>", '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_("textOpacity", e), "</span>", "</fieldset>"].join("");
  }
  /**
   * Create background color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */
  createElBgColor_() {
    const e = `captions-background-${this.id_}`;
    return ['<fieldset class="vjs-bg vjs-track-setting">', `<legend id="${e}">`, this.localize("Text Background"), "</legend>", '<span class="vjs-bg-color">', this.createElSelect_("backgroundColor", e), "</span>", '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_("backgroundOpacity", e), "</span>", "</fieldset>"].join("");
  }
  /**
   * Create window color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */
  createElWinColor_() {
    const e = `captions-window-${this.id_}`;
    return ['<fieldset class="vjs-window vjs-track-setting">', `<legend id="${e}">`, this.localize("Caption Area Background"), "</legend>", '<span class="vjs-window-color">', this.createElSelect_("windowColor", e), "</span>", '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_("windowOpacity", e), "</span>", "</fieldset>"].join("");
  }
  /**
   * Create color elements for the component
   *
   * @return {Element}
   *         The element that was created
   *
   * @private
   */
  createElColors_() {
    return Y("div", {
      className: "vjs-track-settings-colors",
      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join("")
    });
  }
  /**
   * Create font elements for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */
  createElFont_() {
    return Y("div", {
      className: "vjs-track-settings-font",
      innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_("fontPercent", "", "legend"), "</fieldset>", '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_("edgeStyle", "", "legend"), "</fieldset>", '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_("fontFamily", "", "legend"), "</fieldset>"].join("")
    });
  }
  /**
   * Create controls for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */
  createElControls_() {
    const e = this.localize("restore all settings to the default values");
    return Y("div", {
      className: "vjs-track-settings-controls",
      innerHTML: [`<button type="button" class="vjs-default-button" title="${e}">`, this.localize("Reset"), `<span class="vjs-control-text"> ${e}</span>`, "</button>", `<button type="button" class="vjs-done-button">${this.localize("Done")}</button>`].join("")
    });
  }
  content() {
    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
  }
  label() {
    return this.localize("Caption Settings Dialog");
  }
  description() {
    return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
  }
  buildCSSClass() {
    return super.buildCSSClass() + " vjs-text-track-settings";
  }
  /**
   * Gets an object of text track settings (or null).
   *
   * @return {Object}
   *         An object with config values parsed from the DOM or localStorage.
   */
  getValues() {
    return zd(hi, (e, t, s) => {
      const r = z_(this.$(t.selector), t.parser);
      return r !== void 0 && (e[s] = r), e;
    }, {});
  }
  /**
   * Sets text track settings from an object of values.
   *
   * @param {Object} values
   *        An object with config values parsed from the DOM or localStorage.
   */
  setValues(e) {
    Ri(hi, (t, s) => {
      G_(this.$(t.selector), e[s], t.parser);
    });
  }
  /**
   * Sets all `<select>` elements to their default values.
   */
  setDefaults() {
    Ri(hi, (e) => {
      const t = e.hasOwnProperty("default") ? e.default : 0;
      this.$(e.selector).selectedIndex = t;
    });
  }
  /**
   * Restore texttrack settings from localStorage
   */
  restoreSettings() {
    let e;
    try {
      e = JSON.parse(E.localStorage.getItem(Sa));
    } catch (t) {
      J.warn(t);
    }
    e && this.setValues(e);
  }
  /**
   * Save text track settings to localStorage
   */
  saveSettings() {
    if (!this.options_.persistTextTrackSettings)
      return;
    const e = this.getValues();
    try {
      Object.keys(e).length ? E.localStorage.setItem(Sa, JSON.stringify(e)) : E.localStorage.removeItem(Sa);
    } catch (t) {
      J.warn(t);
    }
  }
  /**
   * Update display of text track settings
   */
  updateDisplay() {
    const e = this.player_.getChild("textTrackDisplay");
    e && e.updateDisplay();
  }
  /**
   * conditionally blur the element and refocus the captions button
   *
   * @private
   */
  conditionalBlur_() {
    this.previouslyActiveEl_ = null;
    const e = this.player_.controlBar, t = e && e.subsCapsButton, s = e && e.captionsButton;
    t ? t.focus() : s && s.focus();
  }
  /**
   * Repopulate dialog with new localizations on languagechange
   */
  handleLanguagechange() {
    this.fill();
  }
}
N.registerComponent("TextTrackSettings", W_);
class X_ extends N {
  /**
   * Create the ResizeManager.
   *
   * @param {Object} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of ResizeManager options.
   *
   * @param {Object} [options.ResizeObserver]
   *        A polyfill for ResizeObserver can be passed in here.
   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
   */
  constructor(e, t) {
    let s = t.ResizeObserver || E.ResizeObserver;
    t.ResizeObserver === null && (s = !1);
    const r = le({
      createEl: !s,
      reportTouchActivity: !1
    }, t);
    super(e, r), this.ResizeObserver = t.ResizeObserver || E.ResizeObserver, this.loadListener_ = null, this.resizeObserver_ = null, this.debouncedHandler_ = ph(() => {
      this.resizeHandler();
    }, 100, !1, this), s ? (this.resizeObserver_ = new this.ResizeObserver(this.debouncedHandler_), this.resizeObserver_.observe(e.el())) : (this.loadListener_ = () => {
      if (!this.el_ || !this.el_.contentWindow)
        return;
      const n = this.debouncedHandler_;
      let a = this.unloadListener_ = function() {
        Pe(this, "resize", n), Pe(this, "unload", a), a = null;
      };
      Ze(this.el_.contentWindow, "unload", a), Ze(this.el_.contentWindow, "resize", n);
    }, this.one("load", this.loadListener_));
  }
  createEl() {
    return super.createEl("iframe", {
      className: "vjs-resize-manager",
      tabIndex: -1,
      title: this.localize("No content")
    }, {
      "aria-hidden": "true"
    });
  }
  /**
   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
   *
   * @fires Player#playerresize
   */
  resizeHandler() {
    !this.player_ || !this.player_.trigger || this.player_.trigger("playerresize");
  }
  dispose() {
    this.debouncedHandler_ && this.debouncedHandler_.cancel(), this.resizeObserver_ && (this.player_.el() && this.resizeObserver_.unobserve(this.player_.el()), this.resizeObserver_.disconnect()), this.loadListener_ && this.off("load", this.loadListener_), this.el_ && this.el_.contentWindow && this.unloadListener_ && this.unloadListener_.call(this.el_.contentWindow), this.ResizeObserver = null, this.resizeObserver = null, this.debouncedHandler_ = null, this.loadListener_ = null, super.dispose();
  }
}
N.registerComponent("ResizeManager", X_);
const K_ = {
  trackingThreshold: 20,
  liveTolerance: 15
};
class Y_ extends N {
  /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {number} [options.trackingThreshold=20]
   *        Number of seconds of live window (seekableEnd - seekableStart) that
   *        media needs to have before the liveui will be shown.
   *
   * @param {number} [options.liveTolerance=15]
   *        Number of seconds behind live that we have to be
   *        before we will be considered non-live. Note that this will only
   *        be used when playing at the live edge. This allows large seekable end
   *        changes to not effect whether we are live or not.
   */
  constructor(e, t) {
    const s = le(K_, t, {
      createEl: !1
    });
    super(e, s), this.trackLiveHandler_ = () => this.trackLive_(), this.handlePlay_ = (r) => this.handlePlay(r), this.handleFirstTimeupdate_ = (r) => this.handleFirstTimeupdate(r), this.handleSeeked_ = (r) => this.handleSeeked(r), this.seekToLiveEdge_ = (r) => this.seekToLiveEdge(r), this.reset_(), this.on(this.player_, "durationchange", (r) => this.handleDurationchange(r)), this.on(this.player_, "canplay", () => this.toggleTracking());
  }
  /**
   * all the functionality for tracking when seek end changes
   * and for tracking how far past seek end we should be
   */
  trackLive_() {
    const e = this.player_.seekable();
    if (!e || !e.length)
      return;
    const t = Number(E.performance.now().toFixed(4)), s = this.lastTime_ === -1 ? 0 : (t - this.lastTime_) / 1e3;
    this.lastTime_ = t, this.pastSeekEnd_ = this.pastSeekEnd() + s;
    const r = this.liveCurrentTime(), n = this.player_.currentTime();
    let a = this.player_.paused() || this.seekedBehindLive_ || Math.abs(r - n) > this.options_.liveTolerance;
    (!this.timeupdateSeen_ || r === 1 / 0) && (a = !1), a !== this.behindLiveEdge_ && (this.behindLiveEdge_ = a, this.trigger("liveedgechange"));
  }
  /**
   * handle a durationchange event on the player
   * and start/stop tracking accordingly.
   */
  handleDurationchange() {
    this.toggleTracking();
  }
  /**
   * start/stop tracking
   */
  toggleTracking() {
    this.player_.duration() === 1 / 0 && this.liveWindow() >= this.options_.trackingThreshold ? (this.player_.options_.liveui && this.player_.addClass("vjs-liveui"), this.startTracking()) : (this.player_.removeClass("vjs-liveui"), this.stopTracking());
  }
  /**
   * start tracking live playback
   */
  startTracking() {
    this.isTracking() || (this.timeupdateSeen_ || (this.timeupdateSeen_ = this.player_.hasStarted()), this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, rt), this.trackLive_(), this.on(this.player_, ["play", "pause"], this.trackLiveHandler_), this.timeupdateSeen_ ? this.on(this.player_, "seeked", this.handleSeeked_) : (this.one(this.player_, "play", this.handlePlay_), this.one(this.player_, "timeupdate", this.handleFirstTimeupdate_)));
  }
  /**
   * handle the first timeupdate on the player if it wasn't already playing
   * when live tracker started tracking.
   */
  handleFirstTimeupdate() {
    this.timeupdateSeen_ = !0, this.on(this.player_, "seeked", this.handleSeeked_);
  }
  /**
   * Keep track of what time a seek starts, and listen for seeked
   * to find where a seek ends.
   */
  handleSeeked() {
    const e = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
    this.seekedBehindLive_ = this.nextSeekedFromUser_ && e > 2, this.nextSeekedFromUser_ = !1, this.trackLive_();
  }
  /**
   * handle the first play on the player, and make sure that we seek
   * right to the live edge.
   */
  handlePlay() {
    this.one(this.player_, "timeupdate", this.seekToLiveEdge_);
  }
  /**
   * Stop tracking, and set all internal variables to
   * their initial value.
   */
  reset_() {
    this.lastTime_ = -1, this.pastSeekEnd_ = 0, this.lastSeekEnd_ = -1, this.behindLiveEdge_ = !0, this.timeupdateSeen_ = !1, this.seekedBehindLive_ = !1, this.nextSeekedFromUser_ = !1, this.clearInterval(this.trackingInterval_), this.trackingInterval_ = null, this.off(this.player_, ["play", "pause"], this.trackLiveHandler_), this.off(this.player_, "seeked", this.handleSeeked_), this.off(this.player_, "play", this.handlePlay_), this.off(this.player_, "timeupdate", this.handleFirstTimeupdate_), this.off(this.player_, "timeupdate", this.seekToLiveEdge_);
  }
  /**
   * The next seeked event is from the user. Meaning that any seek
   * > 2s behind live will be considered behind live for real and
   * liveTolerance will be ignored.
   */
  nextSeekedFromUser() {
    this.nextSeekedFromUser_ = !0;
  }
  /**
   * stop tracking live playback
   */
  stopTracking() {
    this.isTracking() && (this.reset_(), this.trigger("liveedgechange"));
  }
  /**
   * A helper to get the player seekable end
   * so that we don't have to null check everywhere
   *
   * @return {number}
   *         The furthest seekable end or Infinity.
   */
  seekableEnd() {
    const e = this.player_.seekable(), t = [];
    let s = e ? e.length : 0;
    for (; s--; )
      t.push(e.end(s));
    return t.length ? t.sort()[t.length - 1] : 1 / 0;
  }
  /**
   * A helper to get the player seekable start
   * so that we don't have to null check everywhere
   *
   * @return {number}
   *         The earliest seekable start or 0.
   */
  seekableStart() {
    const e = this.player_.seekable(), t = [];
    let s = e ? e.length : 0;
    for (; s--; )
      t.push(e.start(s));
    return t.length ? t.sort()[0] : 0;
  }
  /**
   * Get the live time window aka
   * the amount of time between seekable start and
   * live current time.
   *
   * @return {number}
   *         The amount of seconds that are seekable in
   *         the live video.
   */
  liveWindow() {
    const e = this.liveCurrentTime();
    return e === 1 / 0 ? 0 : e - this.seekableStart();
  }
  /**
   * Determines if the player is live, only checks if this component
   * is tracking live playback or not
   *
   * @return {boolean}
   *         Whether liveTracker is tracking
   */
  isLive() {
    return this.isTracking();
  }
  /**
   * Determines if currentTime is at the live edge and won't fall behind
   * on each seekableendchange
   *
   * @return {boolean}
   *         Whether playback is at the live edge
   */
  atLiveEdge() {
    return !this.behindLiveEdge();
  }
  /**
   * get what we expect the live current time to be
   *
   * @return {number}
   *         The expected live current time
   */
  liveCurrentTime() {
    return this.pastSeekEnd() + this.seekableEnd();
  }
  /**
   * The number of seconds that have occurred after seekable end
   * changed. This will be reset to 0 once seekable end changes.
   *
   * @return {number}
   *         Seconds past the current seekable end
   */
  pastSeekEnd() {
    const e = this.seekableEnd();
    return this.lastSeekEnd_ !== -1 && e !== this.lastSeekEnd_ && (this.pastSeekEnd_ = 0), this.lastSeekEnd_ = e, this.pastSeekEnd_;
  }
  /**
   * If we are currently behind the live edge, aka currentTime will be
   * behind on a seekableendchange
   *
   * @return {boolean}
   *         If we are behind the live edge
   */
  behindLiveEdge() {
    return this.behindLiveEdge_;
  }
  /**
   * Whether live tracker is currently tracking or not.
   */
  isTracking() {
    return typeof this.trackingInterval_ == "number";
  }
  /**
   * Seek to the live edge if we are behind the live edge
   */
  seekToLiveEdge() {
    this.seekedBehindLive_ = !1, !this.atLiveEdge() && (this.nextSeekedFromUser_ = !1, this.player_.currentTime(this.liveCurrentTime()));
  }
  /**
   * Dispose of liveTracker
   */
  dispose() {
    this.stopTracking(), super.dispose();
  }
}
N.registerComponent("LiveTracker", Y_);
class Q_ extends N {
  constructor(e, t) {
    super(e, t), this.on("statechanged", (s) => this.updateDom_()), this.updateDom_();
  }
  /**
   * Create the `TitleBar`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  createEl() {
    return this.els = {
      title: Y("div", {
        className: "vjs-title-bar-title",
        id: `vjs-title-bar-title-${ht()}`
      }),
      description: Y("div", {
        className: "vjs-title-bar-description",
        id: `vjs-title-bar-description-${ht()}`
      })
    }, Y("div", {
      className: "vjs-title-bar"
    }, {}, Gd(this.els));
  }
  /**
   * Updates the DOM based on the component's state object.
   */
  updateDom_() {
    const e = this.player_.tech_, t = e && e.el_, s = {
      title: "aria-labelledby",
      description: "aria-describedby"
    };
    ["title", "description"].forEach((r) => {
      const n = this.state[r], a = this.els[r], l = s[r];
      Pn(a), n && ei(a, n), t && (t.removeAttribute(l), n && t.setAttribute(l, a.id));
    }), this.state.title || this.state.description ? this.show() : this.hide();
  }
  /**
   * Update the contents of the title bar component with new title and
   * description text.
   *
   * If both title and description are missing, the title bar will be hidden.
   *
   * If either title or description are present, the title bar will be visible.
   *
   * NOTE: Any previously set value will be preserved. To unset a previously
   * set value, you must pass an empty string or null.
   *
   * For example:
   *
   * ```
   * update({title: 'foo', description: 'bar'}) // title: 'foo', description: 'bar'
   * update({description: 'bar2'}) // title: 'foo', description: 'bar2'
   * update({title: ''}) // title: '', description: 'bar2'
   * update({title: 'foo', description: null}) // title: 'foo', description: null
   * ```
   *
   * @param  {Object} [options={}]
   *         An options object. When empty, the title bar will be hidden.
   *
   * @param  {string} [options.title]
   *         A title to display in the title bar.
   *
   * @param  {string} [options.description]
   *         A description to display in the title bar.
   */
  update(e) {
    this.setState(e);
  }
  /**
   * Dispose the component.
   */
  dispose() {
    const e = this.player_.tech_, t = e && e.el_;
    t && (t.removeAttribute("aria-labelledby"), t.removeAttribute("aria-describedby")), super.dispose(), this.els = null;
  }
}
N.registerComponent("TitleBar", Q_);
const Ja = (i) => {
  const e = i.el();
  if (e.hasAttribute("src"))
    return i.triggerSourceset(e.src), !0;
  const t = i.$$("source"), s = [];
  let r = "";
  if (!t.length)
    return !1;
  for (let n = 0; n < t.length; n++) {
    const a = t[n].src;
    a && s.indexOf(a) === -1 && s.push(a);
  }
  return s.length ? (s.length === 1 && (r = s[0]), i.triggerSourceset(r), !0) : !1;
}, J_ = Object.defineProperty({}, "innerHTML", {
  get() {
    return this.cloneNode(!0).innerHTML;
  },
  set(i) {
    const e = B.createElement(this.nodeName.toLowerCase());
    e.innerHTML = i;
    const t = B.createDocumentFragment();
    for (; e.childNodes.length; )
      t.appendChild(e.childNodes[0]);
    return this.innerText = "", E.Element.prototype.appendChild.call(this, t), this.innerHTML;
  }
}), Jh = (i, e) => {
  let t = {};
  for (let s = 0; s < i.length && (t = Object.getOwnPropertyDescriptor(i[s], e), !(t && t.set && t.get)); s++)
    ;
  return t.enumerable = !0, t.configurable = !0, t;
}, Z_ = (i) => Jh([i.el(), E.HTMLMediaElement.prototype, E.Element.prototype, J_], "innerHTML"), pc = function(i) {
  const e = i.el();
  if (e.resetSourceWatch_)
    return;
  const t = {}, s = Z_(i), r = (n) => (...a) => {
    const l = n.apply(e, a);
    return Ja(i), l;
  };
  ["append", "appendChild", "insertAdjacentHTML"].forEach((n) => {
    e[n] && (t[n] = e[n], e[n] = r(t[n]));
  }), Object.defineProperty(e, "innerHTML", le(s, {
    set: r(s.set)
  })), e.resetSourceWatch_ = () => {
    e.resetSourceWatch_ = null, Object.keys(t).forEach((n) => {
      e[n] = t[n];
    }), Object.defineProperty(e, "innerHTML", s);
  }, i.one("sourceset", e.resetSourceWatch_);
}, e2 = Object.defineProperty({}, "src", {
  get() {
    return this.hasAttribute("src") ? Eh(E.Element.prototype.getAttribute.call(this, "src")) : "";
  },
  set(i) {
    return E.Element.prototype.setAttribute.call(this, "src", i), i;
  }
}), t2 = (i) => Jh([i.el(), E.HTMLMediaElement.prototype, e2], "src"), i2 = function(i) {
  if (!i.featuresSourceset)
    return;
  const e = i.el();
  if (e.resetSourceset_)
    return;
  const t = t2(i), s = e.setAttribute, r = e.load;
  Object.defineProperty(e, "src", le(t, {
    set: (n) => {
      const a = t.set.call(e, n);
      return i.triggerSourceset(e.src), a;
    }
  })), e.setAttribute = (n, a) => {
    const l = s.call(e, n, a);
    return /src/i.test(n) && i.triggerSourceset(e.src), l;
  }, e.load = () => {
    const n = r.call(e);
    return Ja(i) || (i.triggerSourceset(""), pc(i)), n;
  }, e.currentSrc ? i.triggerSourceset(e.currentSrc) : Ja(i) || pc(i), e.resetSourceset_ = () => {
    e.resetSourceset_ = null, e.load = r, e.setAttribute = s, Object.defineProperty(e, "src", t), e.resetSourceWatch_ && e.resetSourceWatch_();
  };
};
class q extends X {
  /**
  * Create an instance of this Tech.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  *
  * @param {Function} [ready]
  *        Callback function to call when the `HTML5` Tech is ready.
  */
  constructor(e, t) {
    super(e, t);
    const s = e.source;
    let r = !1;
    if (this.featuresVideoFrameCallback = this.featuresVideoFrameCallback && this.el_.tagName === "VIDEO", s && (this.el_.currentSrc !== s.src || e.tag && e.tag.initNetworkState_ === 3) ? this.setSource(s) : this.handleLateInit_(this.el_), e.enableSourceset && this.setupSourcesetHandling_(), this.isScrubbing_ = !1, this.el_.hasChildNodes()) {
      const n = this.el_.childNodes;
      let a = n.length;
      const l = [];
      for (; a--; ) {
        const u = n[a];
        u.nodeName.toLowerCase() === "track" && (this.featuresNativeTextTracks ? (this.remoteTextTrackEls().addTrackElement_(u), this.remoteTextTracks().addTrack(u.track), this.textTracks().addTrack(u.track), !r && !this.el_.hasAttribute("crossorigin") && Rn(u.src) && (r = !0)) : l.push(u));
      }
      for (let u = 0; u < l.length; u++)
        this.el_.removeChild(l[u]);
    }
    this.proxyNativeTracks_(), this.featuresNativeTextTracks && r && J.warn(`Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.
This may prevent text tracks from loading.`), this.restoreMetadataTracksInIOSNativePlayer_(), (Gs || wn) && e.nativeControlsForTouch === !0 && this.setControls(!0), this.proxyWebkitFullscreen_(), this.triggerReady();
  }
  /**
   * Dispose of `HTML5` media element and remove all tracks.
   */
  dispose() {
    this.el_ && this.el_.resetSourceset_ && this.el_.resetSourceset_(), q.disposeMediaElement(this.el_), this.options_ = null, super.dispose();
  }
  /**
   * Modify the media element so that we can detect when
   * the source is changed. Fires `sourceset` just after the source has changed
   */
  setupSourcesetHandling_() {
    i2(this);
  }
  /**
   * When a captions track is enabled in the iOS Safari native player, all other
   * tracks are disabled (including metadata tracks), which nulls all of their
   * associated cue points. This will restore metadata tracks to their pre-fullscreen
   * state in those cases so that cue points are not needlessly lost.
   *
   * @private
   */
  restoreMetadataTracksInIOSNativePlayer_() {
    const e = this.textTracks();
    let t;
    const s = () => {
      t = [];
      for (let n = 0; n < e.length; n++) {
        const a = e[n];
        a.kind === "metadata" && t.push({
          track: a,
          storedMode: a.mode
        });
      }
    };
    s(), e.addEventListener("change", s), this.on("dispose", () => e.removeEventListener("change", s));
    const r = () => {
      for (let n = 0; n < t.length; n++) {
        const a = t[n];
        a.track.mode === "disabled" && a.track.mode !== a.storedMode && (a.track.mode = a.storedMode);
      }
      e.removeEventListener("change", r);
    };
    this.on("webkitbeginfullscreen", () => {
      e.removeEventListener("change", s), e.removeEventListener("change", r), e.addEventListener("change", r);
    }), this.on("webkitendfullscreen", () => {
      e.removeEventListener("change", s), e.addEventListener("change", s), e.removeEventListener("change", r);
    });
  }
  /**
   * Attempt to force override of tracks for the given type
   *
   * @param {string} type - Track type to override, possible values include 'Audio',
   * 'Video', and 'Text'.
   * @param {boolean} override - If set to true native audio/video will be overridden,
   * otherwise native audio/video will potentially be used.
   * @private
   */
  overrideNative_(e, t) {
    if (t !== this[`featuresNative${e}Tracks`])
      return;
    const s = e.toLowerCase();
    this[`${s}TracksListeners_`] && Object.keys(this[`${s}TracksListeners_`]).forEach((r) => {
      this.el()[`${s}Tracks`].removeEventListener(r, this[`${s}TracksListeners_`][r]);
    }), this[`featuresNative${e}Tracks`] = !t, this[`${s}TracksListeners_`] = null, this.proxyNativeTracksForType_(s);
  }
  /**
   * Attempt to force override of native audio tracks.
   *
   * @param {boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   */
  overrideNativeAudioTracks(e) {
    this.overrideNative_("Audio", e);
  }
  /**
   * Attempt to force override of native video tracks.
   *
   * @param {boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   */
  overrideNativeVideoTracks(e) {
    this.overrideNative_("Video", e);
  }
  /**
   * Proxy native track list events for the given type to our track
   * lists if the browser we are playing in supports that type of track list.
   *
   * @param {string} name - Track type; values include 'audio', 'video', and 'text'
   * @private
   */
  proxyNativeTracksForType_(e) {
    const t = st[e], s = this.el()[t.getterName], r = this[t.getterName]();
    if (!this[`featuresNative${t.capitalName}Tracks`] || !s || !s.addEventListener)
      return;
    const n = {
      change: (l) => {
        const u = {
          type: "change",
          target: r,
          currentTarget: r,
          srcElement: r
        };
        r.trigger(u), e === "text" && this[Zi.remoteText.getterName]().trigger(u);
      },
      addtrack(l) {
        r.addTrack(l.track);
      },
      removetrack(l) {
        r.removeTrack(l.track);
      }
    }, a = function() {
      const l = [];
      for (let u = 0; u < r.length; u++) {
        let f = !1;
        for (let m = 0; m < s.length; m++)
          if (s[m] === r[u]) {
            f = !0;
            break;
          }
        f || l.push(r[u]);
      }
      for (; l.length; )
        r.removeTrack(l.shift());
    };
    this[t.getterName + "Listeners_"] = n, Object.keys(n).forEach((l) => {
      const u = n[l];
      s.addEventListener(l, u), this.on("dispose", (f) => s.removeEventListener(l, u));
    }), this.on("loadstart", a), this.on("dispose", (l) => this.off("loadstart", a));
  }
  /**
   * Proxy all native track list events to our track lists if the browser we are playing
   * in supports that type of track list.
   *
   * @private
   */
  proxyNativeTracks_() {
    st.names.forEach((e) => {
      this.proxyNativeTracksForType_(e);
    });
  }
  /**
   * Create the `Html5` Tech's DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */
  createEl() {
    let e = this.options_.tag;
    if (!e || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
      if (e) {
        const s = e.cloneNode(!0);
        e.parentNode && e.parentNode.insertBefore(s, e), q.disposeMediaElement(e), e = s;
      } else {
        e = B.createElement("video");
        const s = this.options_.tag && Wt(this.options_.tag), r = le({}, s);
        (!Gs || this.options_.nativeControlsForTouch !== !0) && delete r.controls, th(e, Object.assign(r, {
          id: this.options_.techId,
          class: "vjs-tech"
        }));
      }
      e.playerId = this.options_.playerId;
    }
    typeof this.options_.preload < "u" && Ki(e, "preload", this.options_.preload), this.options_.disablePictureInPicture !== void 0 && (e.disablePictureInPicture = this.options_.disablePictureInPicture);
    const t = ["loop", "muted", "playsinline", "autoplay"];
    for (let s = 0; s < t.length; s++) {
      const r = t[s], n = this.options_[r];
      typeof n < "u" && (n ? Ki(e, r, r) : kn(e, r), e[r] = n);
    }
    return e;
  }
  /**
   * This will be triggered if the loadstart event has already fired, before videojs was
   * ready. Two known examples of when this can happen are:
   * 1. If we're loading the playback object after it has started loading
   * 2. The media is already playing the (often with autoplay on) then
   *
   * This function will fire another loadstart so that videojs can catchup.
   *
   * @fires Tech#loadstart
   *
   * @return {undefined}
   *         returns nothing.
   */
  handleLateInit_(e) {
    if (e.networkState === 0 || e.networkState === 3)
      return;
    if (e.readyState === 0) {
      let s = !1;
      const r = function() {
        s = !0;
      };
      this.on("loadstart", r);
      const n = function() {
        s || this.trigger("loadstart");
      };
      this.on("loadedmetadata", n), this.ready(function() {
        this.off("loadstart", r), this.off("loadedmetadata", n), s || this.trigger("loadstart");
      });
      return;
    }
    const t = ["loadstart"];
    t.push("loadedmetadata"), e.readyState >= 2 && t.push("loadeddata"), e.readyState >= 3 && t.push("canplay"), e.readyState >= 4 && t.push("canplaythrough"), this.ready(function() {
      t.forEach(function(s) {
        this.trigger(s);
      }, this);
    });
  }
  /**
   * Set whether we are scrubbing or not.
   * This is used to decide whether we should use `fastSeek` or not.
   * `fastSeek` is used to provide trick play on Safari browsers.
   *
   * @param {boolean} isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   */
  setScrubbing(e) {
    this.isScrubbing_ = e;
  }
  /**
   * Get whether we are scrubbing or not.
   *
   * @return {boolean} isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   */
  scrubbing() {
    return this.isScrubbing_;
  }
  /**
   * Set current time for the `HTML5` tech.
   *
   * @param {number} seconds
   *        Set the current time of the media to this.
   */
  setCurrentTime(e) {
    try {
      this.isScrubbing_ && this.el_.fastSeek && An ? this.el_.fastSeek(e) : this.el_.currentTime = e;
    } catch (t) {
      J(t, "Video is not ready. (Video.js)");
    }
  }
  /**
   * Get the current duration of the HTML5 media element.
   *
   * @return {number}
   *         The duration of the media or 0 if there is no duration.
   */
  duration() {
    if (this.el_.duration === 1 / 0 && Ct && wt && this.el_.currentTime === 0) {
      const e = () => {
        this.el_.currentTime > 0 && (this.el_.duration === 1 / 0 && this.trigger("durationchange"), this.off("timeupdate", e));
      };
      return this.on("timeupdate", e), NaN;
    }
    return this.el_.duration || NaN;
  }
  /**
   * Get the current width of the HTML5 media element.
   *
   * @return {number}
   *         The width of the HTML5 media element.
   */
  width() {
    return this.el_.offsetWidth;
  }
  /**
   * Get the current height of the HTML5 media element.
   *
   * @return {number}
   *         The height of the HTML5 media element.
   */
  height() {
    return this.el_.offsetHeight;
  }
  /**
   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
   * `fullscreenchange` event.
   *
   * @private
   * @fires fullscreenchange
   * @listens webkitendfullscreen
   * @listens webkitbeginfullscreen
   * @listens webkitbeginfullscreen
   */
  proxyWebkitFullscreen_() {
    if (!("webkitDisplayingFullscreen" in this.el_))
      return;
    const e = function() {
      this.trigger("fullscreenchange", {
        isFullscreen: !1
      }), this.el_.controls && !this.options_.nativeControlsForTouch && this.controls() && (this.el_.controls = !1);
    }, t = function() {
      "webkitPresentationMode" in this.el_ && this.el_.webkitPresentationMode !== "picture-in-picture" && (this.one("webkitendfullscreen", e), this.trigger("fullscreenchange", {
        isFullscreen: !0,
        // set a flag in case another tech triggers fullscreenchange
        nativeIOSFullscreen: !0
      }));
    };
    this.on("webkitbeginfullscreen", t), this.on("dispose", () => {
      this.off("webkitbeginfullscreen", t), this.off("webkitendfullscreen", e);
    });
  }
  /**
   * Check if fullscreen is supported on the video el.
   *
   * @return {boolean}
   *         - True if fullscreen is supported.
   *         - False if fullscreen is not supported.
   */
  supportsFullScreen() {
    return typeof this.el_.webkitEnterFullScreen == "function";
  }
  /**
   * Request that the `HTML5` Tech enter fullscreen.
   */
  enterFullScreen() {
    const e = this.el_;
    if (e.paused && e.networkState <= e.HAVE_METADATA)
      vt(this.el_.play()), this.setTimeout(function() {
        e.pause();
        try {
          e.webkitEnterFullScreen();
        } catch (t) {
          this.trigger("fullscreenerror", t);
        }
      }, 0);
    else
      try {
        e.webkitEnterFullScreen();
      } catch (t) {
        this.trigger("fullscreenerror", t);
      }
  }
  /**
   * Request that the `HTML5` Tech exit fullscreen.
   */
  exitFullScreen() {
    if (!this.el_.webkitDisplayingFullscreen) {
      this.trigger("fullscreenerror", new Error("The video is not fullscreen"));
      return;
    }
    this.el_.webkitExitFullScreen();
  }
  /**
   * Create a floating video window always on top of other windows so that users may
   * continue consuming media while they interact with other content sites, or
   * applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @return {Promise}
   *         A promise with a Picture-in-Picture window.
   */
  requestPictureInPicture() {
    return this.el_.requestPictureInPicture();
  }
  /**
   * Native requestVideoFrameCallback if supported by browser/tech, or fallback
   * Don't use rVCF on Safari when DRM is playing, as it doesn't fire
   * Needs to be checked later than the constructor
   * This will be a false positive for clear sources loaded after a Fairplay source
   *
   * @param {function} cb function to call
   * @return {number} id of request
   */
  requestVideoFrameCallback(e) {
    return this.featuresVideoFrameCallback && !this.el_.webkitKeys ? this.el_.requestVideoFrameCallback(e) : super.requestVideoFrameCallback(e);
  }
  /**
   * Native or fallback requestVideoFrameCallback
   *
   * @param {number} id request id to cancel
   */
  cancelVideoFrameCallback(e) {
    this.featuresVideoFrameCallback && !this.el_.webkitKeys ? this.el_.cancelVideoFrameCallback(e) : super.cancelVideoFrameCallback(e);
  }
  /**
   * A getter/setter for the `Html5` Tech's source object.
   * > Note: Please use {@link Html5#setSource}
   *
   * @param {Tech~SourceObject} [src]
   *        The source object you want to set on the `HTML5` techs element.
   *
   * @return {Tech~SourceObject|undefined}
   *         - The current source object when a source is not passed in.
   *         - undefined when setting
   *
   * @deprecated Since version 5.
   */
  src(e) {
    if (e === void 0)
      return this.el_.src;
    this.setSrc(e);
  }
  /**
   * Reset the tech by removing all sources and then calling
   * {@link Html5.resetMediaElement}.
   */
  reset() {
    q.resetMediaElement(this.el_);
  }
  /**
   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
   * the HTML5 media element.
   *
   * @return {Tech~SourceObject}
   *         The current source object from the HTML5 tech. With a fallback to the
   *         elements source.
   */
  currentSrc() {
    return this.currentSource_ ? this.currentSource_.src : this.el_.currentSrc;
  }
  /**
   * Set controls attribute for the HTML5 media Element.
   *
   * @param {string} val
   *        Value to set the controls attribute to
   */
  setControls(e) {
    this.el_.controls = !!e;
  }
  /**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */
  addTextTrack(e, t, s) {
    return this.featuresNativeTextTracks ? this.el_.addTextTrack(e, t, s) : super.addTextTrack(e, t, s);
  }
  /**
   * Creates either native TextTrack or an emulated TextTrack depending
   * on the value of `featuresNativeTextTracks`
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label]
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @param {boolean} [options.default]
   *        Default this track to on.
   *
   * @param {string} [options.id]
   *        The internal id to assign this track.
   *
   * @param {string} [options.src]
   *        A source url for the track.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */
  createRemoteTextTrack(e) {
    if (!this.featuresNativeTextTracks)
      return super.createRemoteTextTrack(e);
    const t = B.createElement("track");
    return e.kind && (t.kind = e.kind), e.label && (t.label = e.label), (e.language || e.srclang) && (t.srclang = e.language || e.srclang), e.default && (t.default = e.default), e.id && (t.id = e.id), e.src && (t.src = e.src), t;
  }
  /**
   * Creates a remote text track object and returns an html track element.
   *
   * @param {Object} options The object should contain values for
   * kind, language, label, and src (location of the WebVTT file)
   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack
   * will not be removed from the TextTrackList and HtmlTrackElementList
   * after a source change
   * @return {HTMLTrackElement} An Html Track Element.
   * This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   */
  addRemoteTextTrack(e, t) {
    const s = super.addRemoteTextTrack(e, t);
    return this.featuresNativeTextTracks && this.el().appendChild(s), s;
  }
  /**
   * Remove remote `TextTrack` from `TextTrackList` object
   *
   * @param {TextTrack} track
   *        `TextTrack` object to remove
   */
  removeRemoteTextTrack(e) {
    if (super.removeRemoteTextTrack(e), this.featuresNativeTextTracks) {
      const t = this.$$("track");
      let s = t.length;
      for (; s--; )
        (e === t[s] || e === t[s].track) && this.el().removeChild(t[s]);
    }
  }
  /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   */
  getVideoPlaybackQuality() {
    if (typeof this.el().getVideoPlaybackQuality == "function")
      return this.el().getVideoPlaybackQuality();
    const e = {};
    return typeof this.el().webkitDroppedFrameCount < "u" && typeof this.el().webkitDecodedFrameCount < "u" && (e.droppedVideoFrames = this.el().webkitDroppedFrameCount, e.totalVideoFrames = this.el().webkitDecodedFrameCount), E.performance && (e.creationTime = E.performance.now()), e;
  }
}
Sn(q, "TEST_VID", function() {
  if (!ts())
    return;
  const i = B.createElement("video"), e = B.createElement("track");
  return e.kind = "captions", e.srclang = "en", e.label = "English", i.appendChild(e), i;
});
q.isSupported = function() {
  try {
    q.TEST_VID.volume = 0.5;
  } catch {
    return !1;
  }
  return !!(q.TEST_VID && q.TEST_VID.canPlayType);
};
q.canPlayType = function(i) {
  return q.TEST_VID.canPlayType(i);
};
q.canPlaySource = function(i, e) {
  return q.canPlayType(i.type);
};
q.canControlVolume = function() {
  try {
    const i = q.TEST_VID.volume;
    q.TEST_VID.volume = i / 2 + 0.1;
    const e = i !== q.TEST_VID.volume;
    return e && Be ? (E.setTimeout(() => {
      q && q.prototype && (q.prototype.featuresVolumeControl = i !== q.TEST_VID.volume);
    }), !1) : e;
  } catch {
    return !1;
  }
};
q.canMuteVolume = function() {
  try {
    const i = q.TEST_VID.muted;
    return q.TEST_VID.muted = !i, q.TEST_VID.muted ? Ki(q.TEST_VID, "muted", "muted") : kn(q.TEST_VID, "muted", "muted"), i !== q.TEST_VID.muted;
  } catch {
    return !1;
  }
};
q.canControlPlaybackRate = function() {
  if (Ct && wt && En < 58)
    return !1;
  try {
    const i = q.TEST_VID.playbackRate;
    return q.TEST_VID.playbackRate = i / 2 + 0.1, i !== q.TEST_VID.playbackRate;
  } catch {
    return !1;
  }
};
q.canOverrideAttributes = function() {
  try {
    const i = () => {
    };
    Object.defineProperty(B.createElement("video"), "src", {
      get: i,
      set: i
    }), Object.defineProperty(B.createElement("audio"), "src", {
      get: i,
      set: i
    }), Object.defineProperty(B.createElement("video"), "innerHTML", {
      get: i,
      set: i
    }), Object.defineProperty(B.createElement("audio"), "innerHTML", {
      get: i,
      set: i
    });
  } catch {
    return !1;
  }
  return !0;
};
q.supportsNativeTextTracks = function() {
  return An || Be && wt;
};
q.supportsNativeVideoTracks = function() {
  return !!(q.TEST_VID && q.TEST_VID.videoTracks);
};
q.supportsNativeAudioTracks = function() {
  return !!(q.TEST_VID && q.TEST_VID.audioTracks);
};
q.Events = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange"];
[["featuresMuteControl", "canMuteVolume"], ["featuresPlaybackRate", "canControlPlaybackRate"], ["featuresSourceset", "canOverrideAttributes"], ["featuresNativeTextTracks", "supportsNativeTextTracks"], ["featuresNativeVideoTracks", "supportsNativeVideoTracks"], ["featuresNativeAudioTracks", "supportsNativeAudioTracks"]].forEach(function([i, e]) {
  Sn(q.prototype, i, () => q[e](), !0);
});
q.prototype.featuresVolumeControl = q.canControlVolume();
q.prototype.movingMediaElementInDOM = !Be;
q.prototype.featuresFullscreenResize = !0;
q.prototype.featuresProgressEvents = !0;
q.prototype.featuresTimeupdateEvents = !0;
q.prototype.featuresVideoFrameCallback = !!(q.TEST_VID && q.TEST_VID.requestVideoFrameCallback);
q.disposeMediaElement = function(i) {
  if (i) {
    for (i.parentNode && i.parentNode.removeChild(i); i.hasChildNodes(); )
      i.removeChild(i.firstChild);
    i.removeAttribute("src"), typeof i.load == "function" && function() {
      try {
        i.load();
      } catch {
      }
    }();
  }
};
q.resetMediaElement = function(i) {
  if (!i)
    return;
  const e = i.querySelectorAll("source");
  let t = e.length;
  for (; t--; )
    i.removeChild(e[t]);
  i.removeAttribute("src"), typeof i.load == "function" && function() {
    try {
      i.load();
    } catch {
    }
  }();
};
[
  /**
   * Get the value of `muted` from the media element. `muted` indicates
   * that the volume for the media should be set to silent. This does not actually change
   * the `volume` attribute.
   *
   * @method Html5#muted
   * @return {boolean}
   *         - True if the value of `volume` should be ignored and the audio set to silent.
   *         - False if the value of `volume` should be used.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
   */
  "muted",
  /**
   * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
   * whether the media should start muted or not. Only changes the default state of the
   * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
   * current state.
   *
   * @method Html5#defaultMuted
   * @return {boolean}
   *         - The value of `defaultMuted` from the media element.
   *         - True indicates that the media should start muted.
   *         - False indicates that the media should not start muted
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
   */
  "defaultMuted",
  /**
   * Get the value of `autoplay` from the media element. `autoplay` indicates
   * that the media should start to play as soon as the page is ready.
   *
   * @method Html5#autoplay
   * @return {boolean}
   *         - The value of `autoplay` from the media element.
   *         - True indicates that the media should start as soon as the page loads.
   *         - False indicates that the media should not start as soon as the page loads.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
   */
  "autoplay",
  /**
   * Get the value of `controls` from the media element. `controls` indicates
   * whether the native media controls should be shown or hidden.
   *
   * @method Html5#controls
   * @return {boolean}
   *         - The value of `controls` from the media element.
   *         - True indicates that native controls should be showing.
   *         - False indicates that native controls should be hidden.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
   */
  "controls",
  /**
   * Get the value of `loop` from the media element. `loop` indicates
   * that the media should return to the start of the media and continue playing once
   * it reaches the end.
   *
   * @method Html5#loop
   * @return {boolean}
   *         - The value of `loop` from the media element.
   *         - True indicates that playback should seek back to start once
   *           the end of a media is reached.
   *         - False indicates that playback should not loop back to the start when the
   *           end of the media is reached.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
   */
  "loop",
  /**
   * Get the value of `playsinline` from the media element. `playsinline` indicates
   * to the browser that non-fullscreen playback is preferred when fullscreen
   * playback is the native default, such as in iOS Safari.
   *
   * @method Html5#playsinline
   * @return {boolean}
   *         - The value of `playsinline` from the media element.
   *         - True indicates that the media should play inline.
   *         - False indicates that the media should not play inline.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */
  "playsinline"
].forEach(function(i) {
  q.prototype[i] = function() {
    return this.el_[i] || this.el_.hasAttribute(i);
  };
});
[
  /**
   * Set the value of `muted` on the media element. `muted` indicates that the current
   * audio level should be silent.
   *
   * @method Html5#setMuted
   * @param {boolean} muted
   *        - True if the audio should be set to silent
   *        - False otherwise
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
   */
  "muted",
  /**
   * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
   * audio level should be silent, but will only effect the muted level on initial playback..
   *
   * @method Html5.prototype.setDefaultMuted
   * @param {boolean} defaultMuted
   *        - True if the audio should be set to silent
   *        - False otherwise
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
   */
  "defaultMuted",
  /**
   * Set the value of `autoplay` on the media element. `autoplay` indicates
   * that the media should start to play as soon as the page is ready.
   *
   * @method Html5#setAutoplay
   * @param {boolean} autoplay
   *         - True indicates that the media should start as soon as the page loads.
   *         - False indicates that the media should not start as soon as the page loads.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
   */
  "autoplay",
  /**
   * Set the value of `loop` on the media element. `loop` indicates
   * that the media should return to the start of the media and continue playing once
   * it reaches the end.
   *
   * @method Html5#setLoop
   * @param {boolean} loop
   *         - True indicates that playback should seek back to start once
   *           the end of a media is reached.
   *         - False indicates that playback should not loop back to the start when the
   *           end of the media is reached.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
   */
  "loop",
  /**
   * Set the value of `playsinline` from the media element. `playsinline` indicates
   * to the browser that non-fullscreen playback is preferred when fullscreen
   * playback is the native default, such as in iOS Safari.
   *
   * @method Html5#setPlaysinline
   * @param {boolean} playsinline
   *         - True indicates that the media should play inline.
   *         - False indicates that the media should not play inline.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */
  "playsinline"
].forEach(function(i) {
  q.prototype["set" + ye(i)] = function(e) {
    this.el_[i] = e, e ? this.el_.setAttribute(i, i) : this.el_.removeAttribute(i);
  };
});
[
  /**
   * Get the value of `paused` from the media element. `paused` indicates whether the media element
   * is currently paused or not.
   *
   * @method Html5#paused
   * @return {boolean}
   *         The value of `paused` from the media element.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
   */
  "paused",
  /**
   * Get the value of `currentTime` from the media element. `currentTime` indicates
   * the current second that the media is at in playback.
   *
   * @method Html5#currentTime
   * @return {number}
   *         The value of `currentTime` from the media element.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
   */
  "currentTime",
  /**
   * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
   * object that represents the parts of the media that are already downloaded and
   * available for playback.
   *
   * @method Html5#buffered
   * @return {TimeRange}
   *         The value of `buffered` from the media element.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
   */
  "buffered",
  /**
   * Get the value of `volume` from the media element. `volume` indicates
   * the current playback volume of audio for a media. `volume` will be a value from 0
   * (silent) to 1 (loudest and default).
   *
   * @method Html5#volume
   * @return {number}
   *         The value of `volume` from the media element. Value will be between 0-1.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
   */
  "volume",
  /**
   * Get the value of `poster` from the media element. `poster` indicates
   * that the url of an image file that can/will be shown when no media data is available.
   *
   * @method Html5#poster
   * @return {string}
   *         The value of `poster` from the media element. Value will be a url to an
   *         image.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
   */
  "poster",
  /**
   * Get the value of `preload` from the media element. `preload` indicates
   * what should download before the media is interacted with. It can have the following
   * values:
   * - none: nothing should be downloaded
   * - metadata: poster and the first few frames of the media may be downloaded to get
   *   media dimensions and other metadata
   * - auto: allow the media and metadata for the media to be downloaded before
   *    interaction
   *
   * @method Html5#preload
   * @return {string}
   *         The value of `preload` from the media element. Will be 'none', 'metadata',
   *         or 'auto'.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
   */
  "preload",
  /**
   * Get the value of the `error` from the media element. `error` indicates any
   * MediaError that may have occurred during playback. If error returns null there is no
   * current error.
   *
   * @method Html5#error
   * @return {MediaError|null}
   *         The value of `error` from the media element. Will be `MediaError` if there
   *         is a current error and null otherwise.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
   */
  "error",
  /**
   * Get the value of `seeking` from the media element. `seeking` indicates whether the
   * media is currently seeking to a new position or not.
   *
   * @method Html5#seeking
   * @return {boolean}
   *         - The value of `seeking` from the media element.
   *         - True indicates that the media is currently seeking to a new position.
   *         - False indicates that the media is not seeking to a new position at this time.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
   */
  "seeking",
  /**
   * Get the value of `seekable` from the media element. `seekable` returns a
   * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
   *
   * @method Html5#seekable
   * @return {TimeRange}
   *         The value of `seekable` from the media element. A `TimeRange` object
   *         indicating the current ranges of time that can be seeked to.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
   */
  "seekable",
  /**
   * Get the value of `ended` from the media element. `ended` indicates whether
   * the media has reached the end or not.
   *
   * @method Html5#ended
   * @return {boolean}
   *         - The value of `ended` from the media element.
   *         - True indicates that the media has ended.
   *         - False indicates that the media has not ended.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
   */
  "ended",
  /**
   * Get the value of `playbackRate` from the media element. `playbackRate` indicates
   * the rate at which the media is currently playing back. Examples:
   *   - if playbackRate is set to 2, media will play twice as fast.
   *   - if playbackRate is set to 0.5, media will play half as fast.
   *
   * @method Html5#playbackRate
   * @return {number}
   *         The value of `playbackRate` from the media element. A number indicating
   *         the current playback speed of the media, where 1 is normal speed.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
   */
  "playbackRate",
  /**
   * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
   * the rate at which the media is currently playing back. This value will not indicate the current
   * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
   *
   * Examples:
   *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
   *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
   *
   * @method Html5.prototype.defaultPlaybackRate
   * @return {number}
   *         The value of `defaultPlaybackRate` from the media element. A number indicating
   *         the current playback speed of the media, where 1 is normal speed.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
   */
  "defaultPlaybackRate",
  /**
   * Get the value of 'disablePictureInPicture' from the video element.
   *
   * @method Html5#disablePictureInPicture
   * @return {boolean} value
   *         - The value of `disablePictureInPicture` from the video element.
   *         - True indicates that the video can't be played in Picture-In-Picture mode
   *         - False indicates that the video can be played in Picture-In-Picture mode
   *
   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
   */
  "disablePictureInPicture",
  /**
   * Get the value of `played` from the media element. `played` returns a `TimeRange`
   * object representing points in the media timeline that have been played.
   *
   * @method Html5#played
   * @return {TimeRange}
   *         The value of `played` from the media element. A `TimeRange` object indicating
   *         the ranges of time that have been played.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
   */
  "played",
  /**
   * Get the value of `networkState` from the media element. `networkState` indicates
   * the current network state. It returns an enumeration from the following list:
   * - 0: NETWORK_EMPTY
   * - 1: NETWORK_IDLE
   * - 2: NETWORK_LOADING
   * - 3: NETWORK_NO_SOURCE
   *
   * @method Html5#networkState
   * @return {number}
   *         The value of `networkState` from the media element. This will be a number
   *         from the list in the description.
   *
   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
   */
  "networkState",
  /**
   * Get the value of `readyState` from the media element. `readyState` indicates
   * the current state of the media element. It returns an enumeration from the
   * following list:
   * - 0: HAVE_NOTHING
   * - 1: HAVE_METADATA
   * - 2: HAVE_CURRENT_DATA
   * - 3: HAVE_FUTURE_DATA
   * - 4: HAVE_ENOUGH_DATA
   *
   * @method Html5#readyState
   * @return {number}
   *         The value of `readyState` from the media element. This will be a number
   *         from the list in the description.
   *
   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
   */
  "readyState",
  /**
   * Get the value of `videoWidth` from the video element. `videoWidth` indicates
   * the current width of the video in css pixels.
   *
   * @method Html5#videoWidth
   * @return {number}
   *         The value of `videoWidth` from the video element. This will be a number
   *         in css pixels.
   *
   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
   */
  "videoWidth",
  /**
   * Get the value of `videoHeight` from the video element. `videoHeight` indicates
   * the current height of the video in css pixels.
   *
   * @method Html5#videoHeight
   * @return {number}
   *         The value of `videoHeight` from the video element. This will be a number
   *         in css pixels.
   *
   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
   */
  "videoHeight",
  /**
   * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates
   * to the browser that should sent the cookies along with the requests for the
   * different assets/playlists
   *
   * @method Html5#crossOrigin
   * @return {string}
   *         - anonymous indicates that the media should not sent cookies.
   *         - use-credentials indicates that the media should sent cookies along the requests.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
   */
  "crossOrigin"
].forEach(function(i) {
  q.prototype[i] = function() {
    return this.el_[i];
  };
});
[
  /**
   * Set the value of `volume` on the media element. `volume` indicates the current
   * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
   * so on.
   *
   * @method Html5#setVolume
   * @param {number} percentAsDecimal
   *        The volume percent as a decimal. Valid range is from 0-1.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
   */
  "volume",
  /**
   * Set the value of `src` on the media element. `src` indicates the current
   * {@link Tech~SourceObject} for the media.
   *
   * @method Html5#setSrc
   * @param {Tech~SourceObject} src
   *        The source object to set as the current source.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
   */
  "src",
  /**
   * Set the value of `poster` on the media element. `poster` is the url to
   * an image file that can/will be shown when no media data is available.
   *
   * @method Html5#setPoster
   * @param {string} poster
   *        The url to an image that should be used as the `poster` for the media
   *        element.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
   */
  "poster",
  /**
   * Set the value of `preload` on the media element. `preload` indicates
   * what should download before the media is interacted with. It can have the following
   * values:
   * - none: nothing should be downloaded
   * - metadata: poster and the first few frames of the media may be downloaded to get
   *   media dimensions and other metadata
   * - auto: allow the media and metadata for the media to be downloaded before
   *    interaction
   *
   * @method Html5#setPreload
   * @param {string} preload
   *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
   *         or 'auto'.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
   */
  "preload",
  /**
   * Set the value of `playbackRate` on the media element. `playbackRate` indicates
   * the rate at which the media should play back. Examples:
   *   - if playbackRate is set to 2, media will play twice as fast.
   *   - if playbackRate is set to 0.5, media will play half as fast.
   *
   * @method Html5#setPlaybackRate
   * @return {number}
   *         The value of `playbackRate` from the media element. A number indicating
   *         the current playback speed of the media, where 1 is normal speed.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
   */
  "playbackRate",
  /**
   * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
   * the rate at which the media should play back upon initial startup. Changing this value
   * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
   *
   * Example Values:
   *   - if playbackRate is set to 2, media will play twice as fast.
   *   - if playbackRate is set to 0.5, media will play half as fast.
   *
   * @method Html5.prototype.setDefaultPlaybackRate
   * @return {number}
   *         The value of `defaultPlaybackRate` from the media element. A number indicating
   *         the current playback speed of the media, where 1 is normal speed.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
   */
  "defaultPlaybackRate",
  /**
   * Prevents the browser from suggesting a Picture-in-Picture context menu
   * or to request Picture-in-Picture automatically in some cases.
   *
   * @method Html5#setDisablePictureInPicture
   * @param {boolean} value
   *         The true value will disable Picture-in-Picture mode.
   *
   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
   */
  "disablePictureInPicture",
  /**
   * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates
   * to the browser that should sent the cookies along with the requests for the
   * different assets/playlists
   *
   * @method Html5#setCrossOrigin
   * @param {string} crossOrigin
   *         - anonymous indicates that the media should not sent cookies.
   *         - use-credentials indicates that the media should sent cookies along the requests.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
   */
  "crossOrigin"
].forEach(function(i) {
  q.prototype["set" + ye(i)] = function(e) {
    this.el_[i] = e;
  };
});
[
  /**
   * A wrapper around the media elements `pause` function. This will call the `HTML5`
   * media elements `pause` function.
   *
   * @method Html5#pause
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
   */
  "pause",
  /**
   * A wrapper around the media elements `load` function. This will call the `HTML5`s
   * media element `load` function.
   *
   * @method Html5#load
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
   */
  "load",
  /**
   * A wrapper around the media elements `play` function. This will call the `HTML5`s
   * media element `play` function.
   *
   * @method Html5#play
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
   */
  "play"
].forEach(function(i) {
  q.prototype[i] = function() {
    return this.el_[i]();
  };
});
X.withSourceHandlers(q);
q.nativeSourceHandler = {};
q.nativeSourceHandler.canPlayType = function(i) {
  try {
    return q.TEST_VID.canPlayType(i);
  } catch {
    return "";
  }
};
q.nativeSourceHandler.canHandleSource = function(i, e) {
  if (i.type)
    return q.nativeSourceHandler.canPlayType(i.type);
  if (i.src) {
    const t = Ho(i.src);
    return q.nativeSourceHandler.canPlayType(`video/${t}`);
  }
  return "";
};
q.nativeSourceHandler.handleSource = function(i, e, t) {
  e.setSrc(i.src);
};
q.nativeSourceHandler.dispose = function() {
};
q.registerSourceHandler(q.nativeSourceHandler);
X.registerTech("Html5", q);
const Zh = [
  /**
   * Fired while the user agent is downloading media data.
   *
   * @event Player#progress
   * @type {Event}
   */
  /**
   * Retrigger the `progress` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechProgress_
   * @fires Player#progress
   * @listens Tech#progress
   */
  "progress",
  /**
   * Fires when the loading of an audio/video is aborted.
   *
   * @event Player#abort
   * @type {Event}
   */
  /**
   * Retrigger the `abort` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechAbort_
   * @fires Player#abort
   * @listens Tech#abort
   */
  "abort",
  /**
   * Fires when the browser is intentionally not getting media data.
   *
   * @event Player#suspend
   * @type {Event}
   */
  /**
   * Retrigger the `suspend` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechSuspend_
   * @fires Player#suspend
   * @listens Tech#suspend
   */
  "suspend",
  /**
   * Fires when the current playlist is empty.
   *
   * @event Player#emptied
   * @type {Event}
   */
  /**
   * Retrigger the `emptied` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechEmptied_
   * @fires Player#emptied
   * @listens Tech#emptied
   */
  "emptied",
  /**
   * Fires when the browser is trying to get media data, but data is not available.
   *
   * @event Player#stalled
   * @type {Event}
   */
  /**
   * Retrigger the `stalled` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechStalled_
   * @fires Player#stalled
   * @listens Tech#stalled
   */
  "stalled",
  /**
   * Fires when the browser has loaded meta data for the audio/video.
   *
   * @event Player#loadedmetadata
   * @type {Event}
   */
  /**
   * Retrigger the `loadedmetadata` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechLoadedmetadata_
   * @fires Player#loadedmetadata
   * @listens Tech#loadedmetadata
   */
  "loadedmetadata",
  /**
   * Fires when the browser has loaded the current frame of the audio/video.
   *
   * @event Player#loadeddata
   * @type {event}
   */
  /**
   * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechLoaddeddata_
   * @fires Player#loadeddata
   * @listens Tech#loadeddata
   */
  "loadeddata",
  /**
   * Fires when the current playback position has changed.
   *
   * @event Player#timeupdate
   * @type {event}
   */
  /**
   * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechTimeUpdate_
   * @fires Player#timeupdate
   * @listens Tech#timeupdate
   */
  "timeupdate",
  /**
   * Fires when the video's intrinsic dimensions change
   *
   * @event Player#resize
   * @type {event}
   */
  /**
   * Retrigger the `resize` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechResize_
   * @fires Player#resize
   * @listens Tech#resize
   */
  "resize",
  /**
   * Fires when the volume has been changed
   *
   * @event Player#volumechange
   * @type {event}
   */
  /**
   * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechVolumechange_
   * @fires Player#volumechange
   * @listens Tech#volumechange
   */
  "volumechange",
  /**
   * Fires when the text track has been changed
   *
   * @event Player#texttrackchange
   * @type {event}
   */
  /**
   * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechTexttrackchange_
   * @fires Player#texttrackchange
   * @listens Tech#texttrackchange
   */
  "texttrackchange"
], wa = {
  canplay: "CanPlay",
  canplaythrough: "CanPlayThrough",
  playing: "Playing",
  seeked: "Seeked"
}, Za = ["tiny", "xsmall", "small", "medium", "large", "xlarge", "huge"], qr = {};
Za.forEach((i) => {
  const e = i.charAt(0) === "x" ? `x-${i.substring(1)}` : i;
  qr[i] = `vjs-layout-${e}`;
});
const s2 = {
  tiny: 210,
  xsmall: 320,
  small: 425,
  medium: 768,
  large: 1440,
  xlarge: 2560,
  huge: 1 / 0
};
class he extends N {
  /**
   * Create an instance of this class.
   *
   * @param {Element} tag
   *        The original video DOM element used for configuring options.
   *
   * @param {Object} [options]
   *        Object of option names and values.
   *
   * @param {Function} [ready]
   *        Ready callback function.
   */
  constructor(e, t, s) {
    if (e.id = e.id || t.id || `vjs_video_${ht()}`, t = Object.assign(he.getTagSettings(e), t), t.initChildren = !1, t.createEl = !1, t.evented = !1, t.reportTouchActivity = !1, !t.language) {
      const a = e.closest("[lang]");
      a && (t.language = a.getAttribute("lang"));
    }
    if (super(null, t, s), this.boundDocumentFullscreenChange_ = (a) => this.documentFullscreenChange_(a), this.boundFullWindowOnEscKey_ = (a) => this.fullWindowOnEscKey(a), this.boundUpdateStyleEl_ = (a) => this.updateStyleEl_(a), this.boundApplyInitTime_ = (a) => this.applyInitTime_(a), this.boundUpdateCurrentBreakpoint_ = (a) => this.updateCurrentBreakpoint_(a), this.boundHandleTechClick_ = (a) => this.handleTechClick_(a), this.boundHandleTechDoubleClick_ = (a) => this.handleTechDoubleClick_(a), this.boundHandleTechTouchStart_ = (a) => this.handleTechTouchStart_(a), this.boundHandleTechTouchMove_ = (a) => this.handleTechTouchMove_(a), this.boundHandleTechTouchEnd_ = (a) => this.handleTechTouchEnd_(a), this.boundHandleTechTap_ = (a) => this.handleTechTap_(a), this.isFullscreen_ = !1, this.log = Vd(this.id_), this.fsApi_ = Yr, this.isPosterFromTech_ = !1, this.queuedCallbacks_ = [], this.isReady_ = !1, this.hasStarted_ = !1, this.userActive_ = !1, this.debugEnabled_ = !1, this.audioOnlyMode_ = !1, this.audioPosterMode_ = !1, this.audioOnlyCache_ = {
      playerHeight: null,
      hiddenChildren: []
    }, !this.options_ || !this.options_.techOrder || !this.options_.techOrder.length)
      throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");
    if (this.tag = e, this.tagAttributes = e && Wt(e), this.language(this.options_.language), t.languages) {
      const a = {};
      Object.getOwnPropertyNames(t.languages).forEach(function(l) {
        a[l.toLowerCase()] = t.languages[l];
      }), this.languages_ = a;
    } else
      this.languages_ = he.prototype.options_.languages;
    this.resetCache_(), this.poster_ = t.poster || "", this.controls_ = !!t.controls, e.controls = !1, e.removeAttribute("controls"), this.changingSrc_ = !1, this.playCallbacks_ = [], this.playTerminatedQueue_ = [], e.hasAttribute("autoplay") ? this.autoplay(!0) : this.autoplay(this.options_.autoplay), t.plugins && Object.keys(t.plugins).forEach((a) => {
      if (typeof this[a] != "function")
        throw new Error(`plugin "${a}" does not exist`);
    }), this.scrubbing_ = !1, this.el_ = this.createEl(), Uo(this, {
      eventBusKey: "el_"
    }), this.fsApi_.requestFullscreen && (Ze(B, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_), this.on(this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_)), this.fluid_ && this.on(["playerreset", "resize"], this.boundUpdateStyleEl_);
    const r = le(this.options_);
    if (t.plugins && Object.keys(t.plugins).forEach((a) => {
      this[a](t.plugins[a]);
    }), t.debug && this.debug(!0), this.options_.playerOptions = r, this.middleware_ = [], this.playbackRates(t.playbackRates), t.experimentalSvgIcons) {
      const l = new E.DOMParser().parseFromString(D_, "image/svg+xml");
      if (l.querySelector("parsererror"))
        J.warn("Failed to load SVG Icons. Falling back to Font Icons."), this.options_.experimentalSvgIcons = null;
      else {
        const f = l.documentElement;
        f.style.display = "none", this.el_.appendChild(f), this.addClass("vjs-svg-icons-enabled");
      }
    }
    this.initChildren(), this.isAudio(e.nodeName.toLowerCase() === "audio"), this.controls() ? this.addClass("vjs-controls-enabled") : this.addClass("vjs-controls-disabled"), this.el_.setAttribute("role", "region"), this.isAudio() ? this.el_.setAttribute("aria-label", this.localize("Audio Player")) : this.el_.setAttribute("aria-label", this.localize("Video Player")), this.isAudio() && this.addClass("vjs-audio"), Gs && this.addClass("vjs-touch-enabled"), Be || this.addClass("vjs-workinghover"), he.players[this.id_] = this;
    const n = Fa.split(".")[0];
    this.addClass(`vjs-v${n}`), this.userActive(!0), this.reportUserActivity(), this.one("play", (a) => this.listenForUserActivity_(a)), this.on("keydown", (a) => this.handleKeyDown(a)), this.on("languagechange", (a) => this.handleLanguagechange(a)), this.breakpoints(this.options_.breakpoints), this.responsive(this.options_.responsive), this.on("ready", () => {
      this.audioPosterMode(this.options_.audioPosterMode), this.audioOnlyMode(this.options_.audioOnlyMode);
    });
  }
  /**
   * Destroys the video player and does any necessary cleanup.
   *
   * This is especially helpful if you are dynamically adding and removing videos
   * to/from the DOM.
   *
   * @fires Player#dispose
   */
  dispose() {
    this.trigger("dispose"), this.off("dispose"), Pe(B, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_), Pe(B, "keydown", this.boundFullWindowOnEscKey_), this.styleEl_ && this.styleEl_.parentNode && (this.styleEl_.parentNode.removeChild(this.styleEl_), this.styleEl_ = null), he.players[this.id_] = null, this.tag && this.tag.player && (this.tag.player = null), this.el_ && this.el_.player && (this.el_.player = null), this.tech_ && (this.tech_.dispose(), this.isPosterFromTech_ = !1, this.poster_ = ""), this.playerElIngest_ && (this.playerElIngest_ = null), this.tag && (this.tag = null), E_(this), Re.names.forEach((e) => {
      const t = Re[e], s = this[t.getterName]();
      s && s.off && s.off();
    }), super.dispose({
      restoreEl: this.options_.restoreEl
    });
  }
  /**
   * Create the `Player`'s DOM element.
   *
   * @return {Element}
   *         The DOM element that gets created.
   */
  createEl() {
    let e = this.tag, t, s = this.playerElIngest_ = e.parentNode && e.parentNode.hasAttribute && e.parentNode.hasAttribute("data-vjs-player");
    const r = this.tag.tagName.toLowerCase() === "video-js";
    s ? t = this.el_ = e.parentNode : r || (t = this.el_ = super.createEl("div"));
    const n = Wt(e);
    if (r) {
      for (t = this.el_ = e, e = this.tag = B.createElement("video"); t.children.length; )
        e.appendChild(t.firstChild);
      Rs(t, "video-js") || gi(t, "video-js"), t.appendChild(e), s = this.playerElIngest_ = t, Object.keys(t).forEach((u) => {
        try {
          e[u] = t[u];
        } catch {
        }
      });
    }
    e.setAttribute("tabindex", "-1"), n.tabindex = "-1", wt && Cn && (e.setAttribute("role", "application"), n.role = "application"), e.removeAttribute("width"), e.removeAttribute("height"), "width" in n && delete n.width, "height" in n && delete n.height, Object.getOwnPropertyNames(n).forEach(function(u) {
      r && u === "class" || t.setAttribute(u, n[u]), r && e.setAttribute(u, n[u]);
    }), e.playerId = e.id, e.id += "_html5_api", e.className = "vjs-tech", e.player = t.player = this, this.addClass("vjs-paused");
    const a = ["IS_SMART_TV", "IS_TIZEN", "IS_WEBOS", "IS_ANDROID", "IS_IPAD", "IS_IPHONE"].filter((u) => Qd[u]).map((u) => "vjs-device-" + u.substring(3).toLowerCase().replace(/\_/g, "-"));
    if (this.addClass(...a), E.VIDEOJS_NO_DYNAMIC_STYLE !== !0) {
      this.styleEl_ = hh("vjs-styles-dimensions");
      const u = Kt(".vjs-styles-defaults"), f = Kt("head");
      f.insertBefore(this.styleEl_, u ? u.nextSibling : f.firstChild);
    }
    this.fill_ = !1, this.fluid_ = !1, this.width(this.options_.width), this.height(this.options_.height), this.fill(this.options_.fill), this.fluid(this.options_.fluid), this.aspectRatio(this.options_.aspectRatio), this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
    const l = e.getElementsByTagName("a");
    for (let u = 0; u < l.length; u++) {
      const f = l.item(u);
      gi(f, "vjs-hidden"), f.setAttribute("hidden", "hidden");
    }
    return e.initNetworkState_ = e.networkState, e.parentNode && !s && e.parentNode.insertBefore(t, e), Ha(e, t), this.children_.unshift(e), this.el_.setAttribute("lang", this.language_), this.el_.setAttribute("translate", "no"), this.el_ = t, t;
  }
  /**
   * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this
   * sets the `crossOrigin` property on the `<video>` tag to control the CORS
   * behavior.
   *
   * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
   *
   * @param {string|null} [value]
   *        The value to set the `Player`'s crossOrigin to. If an argument is
   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.
   *
   * @return {string|null|undefined}
   *         - The current crossOrigin value of the `Player` when getting.
   *         - undefined when setting
   */
  crossOrigin(e) {
    if (typeof e > "u")
      return this.techGet_("crossOrigin");
    if (e !== null && e !== "anonymous" && e !== "use-credentials") {
      J.warn(`crossOrigin must be null,  "anonymous" or "use-credentials", given "${e}"`);
      return;
    }
    this.techCall_("setCrossOrigin", e), this.posterImage && this.posterImage.crossOrigin(e);
  }
  /**
   * A getter/setter for the `Player`'s width. Returns the player's configured value.
   * To get the current width use `currentWidth()`.
   *
   * @param {number|string} [value]
   *        CSS value to set the `Player`'s width to.
   *
   * @return {number|undefined}
   *         - The current width of the `Player` when getting.
   *         - Nothing when setting
   */
  width(e) {
    return this.dimension("width", e);
  }
  /**
   * A getter/setter for the `Player`'s height. Returns the player's configured value.
   * To get the current height use `currentheight()`.
   *
   * @param {number|string} [value]
   *        CSS value to set the `Player`'s height to.
   *
   * @return {number|undefined}
   *         - The current height of the `Player` when getting.
   *         - Nothing when setting
   */
  height(e) {
    return this.dimension("height", e);
  }
  /**
   * A getter/setter for the `Player`'s width & height.
   *
   * @param {string} dimension
   *        This string can be:
   *        - 'width'
   *        - 'height'
   *
   * @param {number|string} [value]
   *        Value for dimension specified in the first argument.
   *
   * @return {number}
   *         The dimension arguments value when getting (width/height).
   */
  dimension(e, t) {
    const s = e + "_";
    if (t === void 0)
      return this[s] || 0;
    if (t === "" || t === "auto") {
      this[s] = void 0, this.updateStyleEl_();
      return;
    }
    const r = parseFloat(t);
    if (isNaN(r)) {
      J.error(`Improper value "${t}" supplied for for ${e}`);
      return;
    }
    this[s] = r, this.updateStyleEl_();
  }
  /**
   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
   *
   * Turning this on will turn off fill mode.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will be a getter.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */
  fluid(e) {
    if (e === void 0)
      return !!this.fluid_;
    this.fluid_ = !!e, Nt(this) && this.off(["playerreset", "resize"], this.boundUpdateStyleEl_), e ? (this.addClass("vjs-fluid"), this.fill(!1), e_(this, () => {
      this.on(["playerreset", "resize"], this.boundUpdateStyleEl_);
    })) : this.removeClass("vjs-fluid"), this.updateStyleEl_();
  }
  /**
   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.
   *
   * Turning this on will turn off fluid mode.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will be a getter.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */
  fill(e) {
    if (e === void 0)
      return !!this.fill_;
    this.fill_ = !!e, e ? (this.addClass("vjs-fill"), this.fluid(!1)) : this.removeClass("vjs-fill");
  }
  /**
   * Get/Set the aspect ratio
   *
   * @param {string} [ratio]
   *        Aspect ratio for player
   *
   * @return {string|undefined}
   *         returns the current aspect ratio when getting
   */
  /**
   * A getter/setter for the `Player`'s aspect ratio.
   *
   * @param {string} [ratio]
   *        The value to set the `Player`'s aspect ratio to.
   *
   * @return {string|undefined}
   *         - The current aspect ratio of the `Player` when getting.
   *         - undefined when setting
   */
  aspectRatio(e) {
    if (e === void 0)
      return this.aspectRatio_;
    if (!/^\d+\:\d+$/.test(e))
      throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");
    this.aspectRatio_ = e, this.fluid(!0), this.updateStyleEl_();
  }
  /**
   * Update styles of the `Player` element (height, width and aspect ratio).
   *
   * @private
   * @listens Tech#loadedmetadata
   */
  updateStyleEl_() {
    if (E.VIDEOJS_NO_DYNAMIC_STYLE === !0) {
      const l = typeof this.width_ == "number" ? this.width_ : this.options_.width, u = typeof this.height_ == "number" ? this.height_ : this.options_.height, f = this.tech_ && this.tech_.el();
      f && (l >= 0 && (f.width = l), u >= 0 && (f.height = u));
      return;
    }
    let e, t, s, r;
    this.aspectRatio_ !== void 0 && this.aspectRatio_ !== "auto" ? s = this.aspectRatio_ : this.videoWidth() > 0 ? s = this.videoWidth() + ":" + this.videoHeight() : s = "16:9";
    const n = s.split(":"), a = n[1] / n[0];
    this.width_ !== void 0 ? e = this.width_ : this.height_ !== void 0 ? e = this.height_ / a : e = this.videoWidth() || 300, this.height_ !== void 0 ? t = this.height_ : t = e * a, /^[^a-zA-Z]/.test(this.id()) ? r = "dimensions-" + this.id() : r = this.id() + "-dimensions", this.addClass(r), fh(this.styleEl_, `
      .${r} {
        width: ${e}px;
        height: ${t}px;
      }

      .${r}.vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: ${a * 100}%;
      }
    `);
  }
  /**
   * Load/Create an instance of playback {@link Tech} including element
   * and API methods. Then append the `Tech` element in `Player` as a child.
   *
   * @param {string} techName
   *        name of the playback technology
   *
   * @param {string} source
   *        video source
   *
   * @private
   */
  loadTech_(e, t) {
    this.tech_ && this.unloadTech_();
    const s = ye(e), r = e.charAt(0).toLowerCase() + e.slice(1);
    s !== "Html5" && this.tag && (X.getTech("Html5").disposeMediaElement(this.tag), this.tag.player = null, this.tag = null), this.techName_ = s, this.isReady_ = !1;
    let n = this.autoplay();
    (typeof this.autoplay() == "string" || this.autoplay() === !0 && this.options_.normalizeAutoplay) && (n = !1);
    const a = {
      source: t,
      autoplay: n,
      nativeControlsForTouch: this.options_.nativeControlsForTouch,
      playerId: this.id(),
      techId: `${this.id()}_${r}_api`,
      playsinline: this.options_.playsinline,
      preload: this.options_.preload,
      loop: this.options_.loop,
      disablePictureInPicture: this.options_.disablePictureInPicture,
      muted: this.options_.muted,
      poster: this.poster(),
      language: this.language(),
      playerElIngest: this.playerElIngest_ || !1,
      "vtt.js": this.options_["vtt.js"],
      canOverridePoster: !!this.options_.techCanOverridePoster,
      enableSourceset: this.options_.enableSourceset
    };
    Re.names.forEach((u) => {
      const f = Re[u];
      a[f.getterName] = this[f.privateName];
    }), Object.assign(a, this.options_[s]), Object.assign(a, this.options_[r]), Object.assign(a, this.options_[e.toLowerCase()]), this.tag && (a.tag = this.tag), t && t.src === this.cache_.src && this.cache_.currentTime > 0 && (a.startTime = this.cache_.currentTime);
    const l = X.getTech(e);
    if (!l)
      throw new Error(`No Tech named '${s}' exists! '${s}' should be registered using videojs.registerTech()'`);
    this.tech_ = new l(a), this.tech_.ready(ue(this, this.handleTechReady_), !0), Ku.jsonToTextTracks(this.textTracksJson_ || [], this.tech_), Zh.forEach((u) => {
      this.on(this.tech_, u, (f) => this[`handleTech${ye(u)}_`](f));
    }), Object.keys(wa).forEach((u) => {
      this.on(this.tech_, u, (f) => {
        if (this.tech_.playbackRate() === 0 && this.tech_.seeking()) {
          this.queuedCallbacks_.push({
            callback: this[`handleTech${wa[u]}_`].bind(this),
            event: f
          });
          return;
        }
        this[`handleTech${wa[u]}_`](f);
      });
    }), this.on(this.tech_, "loadstart", (u) => this.handleTechLoadStart_(u)), this.on(this.tech_, "sourceset", (u) => this.handleTechSourceset_(u)), this.on(this.tech_, "waiting", (u) => this.handleTechWaiting_(u)), this.on(this.tech_, "ended", (u) => this.handleTechEnded_(u)), this.on(this.tech_, "seeking", (u) => this.handleTechSeeking_(u)), this.on(this.tech_, "play", (u) => this.handleTechPlay_(u)), this.on(this.tech_, "pause", (u) => this.handleTechPause_(u)), this.on(this.tech_, "durationchange", (u) => this.handleTechDurationChange_(u)), this.on(this.tech_, "fullscreenchange", (u, f) => this.handleTechFullscreenChange_(u, f)), this.on(this.tech_, "fullscreenerror", (u, f) => this.handleTechFullscreenError_(u, f)), this.on(this.tech_, "enterpictureinpicture", (u) => this.handleTechEnterPictureInPicture_(u)), this.on(this.tech_, "leavepictureinpicture", (u) => this.handleTechLeavePictureInPicture_(u)), this.on(this.tech_, "error", (u) => this.handleTechError_(u)), this.on(this.tech_, "posterchange", (u) => this.handleTechPosterChange_(u)), this.on(this.tech_, "textdata", (u) => this.handleTechTextData_(u)), this.on(this.tech_, "ratechange", (u) => this.handleTechRateChange_(u)), this.on(this.tech_, "loadedmetadata", this.boundUpdateStyleEl_), this.usingNativeControls(this.techGet_("controls")), this.controls() && !this.usingNativeControls() && this.addTechControlsListeners_(), this.tech_.el().parentNode !== this.el() && (s !== "Html5" || !this.tag) && Ha(this.tech_.el(), this.el()), this.tag && (this.tag.player = null, this.tag = null);
  }
  /**
   * Unload and dispose of the current playback {@link Tech}.
   *
   * @private
   */
  unloadTech_() {
    Re.names.forEach((e) => {
      const t = Re[e];
      this[t.privateName] = this[t.getterName]();
    }), this.textTracksJson_ = Ku.textTracksToJson(this.tech_), this.isReady_ = !1, this.tech_.dispose(), this.tech_ = !1, this.isPosterFromTech_ && (this.poster_ = "", this.trigger("posterchange")), this.isPosterFromTech_ = !1;
  }
  /**
   * Return a reference to the current {@link Tech}.
   * It will print a warning by default about the danger of using the tech directly
   * but any argument that is passed in will silence the warning.
   *
   * @param {*} [safety]
   *        Anything passed in to silence the warning
   *
   * @return {Tech}
   *         The Tech
   */
  tech(e) {
    return e === void 0 && J.warn(`Using the tech directly can be dangerous. I hope you know what you're doing.
See https://github.com/videojs/video.js/issues/2617 for more info.
`), this.tech_;
  }
  /**
   * An object that contains Video.js version.
   *
   * @typedef {Object} PlayerVersion
   *
   * @property {string} 'video.js' - Video.js version
   */
  /**
   * Returns an object with Video.js version.
   *
   * @return {PlayerVersion}
   *          An object with Video.js version.
   */
  version() {
    return {
      "video.js": Fa
    };
  }
  /**
   * Set up click and touch listeners for the playback element
   *
   * - On desktops: a click on the video itself will toggle playback
   * - On mobile devices: a click on the video toggles controls
   *   which is done by toggling the user state between active and
   *   inactive
   * - A tap can signal that a user has become active or has become inactive
   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
   *   quick tap should hide them again (signaling the user is in an inactive
   *   viewing state)
   * - In addition to this, we still want the user to be considered inactive after
   *   a few seconds of inactivity.
   *
   * > Note: the only part of iOS interaction we can't mimic with this setup
   * is a touch and hold on the video element counting as activity in order to
   * keep the controls showing, but that shouldn't be an issue. A touch and hold
   * on any controls will still keep the user active
   *
   * @private
   */
  addTechControlsListeners_() {
    this.removeTechControlsListeners_(), this.on(this.tech_, "click", this.boundHandleTechClick_), this.on(this.tech_, "dblclick", this.boundHandleTechDoubleClick_), this.on(this.tech_, "touchstart", this.boundHandleTechTouchStart_), this.on(this.tech_, "touchmove", this.boundHandleTechTouchMove_), this.on(this.tech_, "touchend", this.boundHandleTechTouchEnd_), this.on(this.tech_, "tap", this.boundHandleTechTap_);
  }
  /**
   * Remove the listeners used for click and tap controls. This is needed for
   * toggling to controls disabled, where a tap/touch should do nothing.
   *
   * @private
   */
  removeTechControlsListeners_() {
    this.off(this.tech_, "tap", this.boundHandleTechTap_), this.off(this.tech_, "touchstart", this.boundHandleTechTouchStart_), this.off(this.tech_, "touchmove", this.boundHandleTechTouchMove_), this.off(this.tech_, "touchend", this.boundHandleTechTouchEnd_), this.off(this.tech_, "click", this.boundHandleTechClick_), this.off(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
  }
  /**
   * Player waits for the tech to be ready
   *
   * @private
   */
  handleTechReady_() {
    this.triggerReady(), this.cache_.volume && this.techCall_("setVolume", this.cache_.volume), this.handleTechPosterChange_(), this.handleTechDurationChange_();
  }
  /**
   * Retrigger the `loadstart` event that was triggered by the {@link Tech}.
   *
   * @fires Player#loadstart
   * @listens Tech#loadstart
   * @private
   */
  handleTechLoadStart_() {
    this.removeClass("vjs-ended", "vjs-seeking"), this.error(null), this.handleTechDurationChange_(), this.paused() ? (this.hasStarted(!1), this.trigger("loadstart")) : this.trigger("loadstart"), this.manualAutoplay_(this.autoplay() === !0 && this.options_.normalizeAutoplay ? "play" : this.autoplay());
  }
  /**
   * Handle autoplay string values, rather than the typical boolean
   * values that should be handled by the tech. Note that this is not
   * part of any specification. Valid values and what they do can be
   * found on the autoplay getter at Player#autoplay()
   */
  manualAutoplay_(e) {
    if (!this.tech_ || typeof e != "string")
      return;
    const t = () => {
      const r = this.muted();
      this.muted(!0);
      const n = () => {
        this.muted(r);
      };
      this.playTerminatedQueue_.push(n);
      const a = this.play();
      if (Ms(a))
        return a.catch((l) => {
          throw n(), new Error(`Rejection at manualAutoplay. Restoring muted value. ${l || ""}`);
        });
    };
    let s;
    if (e === "any" && !this.muted() ? (s = this.play(), Ms(s) && (s = s.catch(t))) : e === "muted" && !this.muted() ? s = t() : s = this.play(), !!Ms(s))
      return s.then(() => {
        this.trigger({
          type: "autoplay-success",
          autoplay: e
        });
      }).catch(() => {
        this.trigger({
          type: "autoplay-failure",
          autoplay: e
        });
      });
  }
  /**
   * Update the internal source caches so that we return the correct source from
   * `src()`, `currentSource()`, and `currentSources()`.
   *
   * > Note: `currentSources` will not be updated if the source that is passed in exists
   *         in the current `currentSources` cache.
   *
   *
   * @param {Tech~SourceObject} srcObj
   *        A string or object source to update our caches to.
   */
  updateSourceCaches_(e = "") {
    let t = e, s = "";
    typeof t != "string" && (t = e.src, s = e.type), this.cache_.source = this.cache_.source || {}, this.cache_.sources = this.cache_.sources || [], t && !s && (s = A_(this, t)), this.cache_.source = le({}, e, {
      src: t,
      type: s
    });
    const r = this.cache_.sources.filter((u) => u.src && u.src === t), n = [], a = this.$$("source"), l = [];
    for (let u = 0; u < a.length; u++) {
      const f = Wt(a[u]);
      n.push(f), f.src && f.src === t && l.push(f.src);
    }
    l.length && !r.length ? this.cache_.sources = n : r.length || (this.cache_.sources = [this.cache_.source]), this.cache_.src = t;
  }
  /**
   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}
   * causing the media element to reload.
   *
   * It will fire for the initial source and each subsequent source.
   * This event is a custom event from Video.js and is triggered by the {@link Tech}.
   *
   * The event object for this event contains a `src` property that will contain the source
   * that was available when the event was triggered. This is generally only necessary if Video.js
   * is switching techs while the source was being changed.
   *
   * It is also fired when `load` is called on the player (or media element)
   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}
   * says that the resource selection algorithm needs to be aborted and restarted.
   * In this case, it is very likely that the `src` property will be set to the
   * empty string `""` to indicate we do not know what the source will be but
   * that it is changing.
   *
   * *This event is currently still experimental and may change in minor releases.*
   * __To use this, pass `enableSourceset` option to the player.__
   *
   * @event Player#sourceset
   * @type {Event}
   * @prop {string} src
   *                The source url available when the `sourceset` was triggered.
   *                It will be an empty string if we cannot know what the source is
   *                but know that the source will change.
   */
  /**
   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.
   *
   * @fires Player#sourceset
   * @listens Tech#sourceset
   * @private
   */
  handleTechSourceset_(e) {
    if (!this.changingSrc_) {
      let t = (n) => this.updateSourceCaches_(n);
      const s = this.currentSource().src, r = e.src;
      s && !/^blob:/.test(s) && /^blob:/.test(r) && (!this.lastSource_ || this.lastSource_.tech !== r && this.lastSource_.player !== s) && (t = () => {
      }), t(r), e.src || this.tech_.any(["sourceset", "loadstart"], (n) => {
        if (n.type === "sourceset")
          return;
        const a = this.techGet_("currentSrc");
        this.lastSource_.tech = a, this.updateSourceCaches_(a);
      });
    }
    this.lastSource_ = {
      player: this.currentSource().src,
      tech: e.src
    }, this.trigger({
      src: e.src,
      type: "sourceset"
    });
  }
  /**
   * Add/remove the vjs-has-started class
   *
   *
   * @param {boolean} request
   *        - true: adds the class
   *        - false: remove the class
   *
   * @return {boolean}
   *         the boolean value of hasStarted_
   */
  hasStarted(e) {
    if (e === void 0)
      return this.hasStarted_;
    e !== this.hasStarted_ && (this.hasStarted_ = e, this.hasStarted_ ? this.addClass("vjs-has-started") : this.removeClass("vjs-has-started"));
  }
  /**
   * Fired whenever the media begins or resumes playback
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
   * @fires Player#play
   * @listens Tech#play
   * @private
   */
  handleTechPlay_() {
    this.removeClass("vjs-ended", "vjs-paused"), this.addClass("vjs-playing"), this.hasStarted(!0), this.trigger("play");
  }
  /**
   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
   *
   * If there were any events queued while the playback rate was zero, fire
   * those events now.
   *
   * @private
   * @method Player#handleTechRateChange_
   * @fires Player#ratechange
   * @listens Tech#ratechange
   */
  handleTechRateChange_() {
    this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0 && (this.queuedCallbacks_.forEach((e) => e.callback(e.event)), this.queuedCallbacks_ = []), this.cache_.lastPlaybackRate = this.tech_.playbackRate(), this.trigger("ratechange");
  }
  /**
   * Retrigger the `waiting` event that was triggered by the {@link Tech}.
   *
   * @fires Player#waiting
   * @listens Tech#waiting
   * @private
   */
  handleTechWaiting_() {
    this.addClass("vjs-waiting"), this.trigger("waiting");
    const e = this.currentTime(), t = () => {
      e !== this.currentTime() && (this.removeClass("vjs-waiting"), this.off("timeupdate", t));
    };
    this.on("timeupdate", t);
  }
  /**
   * Retrigger the `canplay` event that was triggered by the {@link Tech}.
   * > Note: This is not consistent between browsers. See #1351
   *
   * @fires Player#canplay
   * @listens Tech#canplay
   * @private
   */
  handleTechCanPlay_() {
    this.removeClass("vjs-waiting"), this.trigger("canplay");
  }
  /**
   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
   *
   * @fires Player#canplaythrough
   * @listens Tech#canplaythrough
   * @private
   */
  handleTechCanPlayThrough_() {
    this.removeClass("vjs-waiting"), this.trigger("canplaythrough");
  }
  /**
   * Retrigger the `playing` event that was triggered by the {@link Tech}.
   *
   * @fires Player#playing
   * @listens Tech#playing
   * @private
   */
  handleTechPlaying_() {
    this.removeClass("vjs-waiting"), this.trigger("playing");
  }
  /**
   * Retrigger the `seeking` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeking
   * @listens Tech#seeking
   * @private
   */
  handleTechSeeking_() {
    this.addClass("vjs-seeking"), this.trigger("seeking");
  }
  /**
   * Retrigger the `seeked` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeked
   * @listens Tech#seeked
   * @private
   */
  handleTechSeeked_() {
    this.removeClass("vjs-seeking", "vjs-ended"), this.trigger("seeked");
  }
  /**
   * Retrigger the `pause` event that was triggered by the {@link Tech}.
   *
   * @fires Player#pause
   * @listens Tech#pause
   * @private
   */
  handleTechPause_() {
    this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.trigger("pause");
  }
  /**
   * Retrigger the `ended` event that was triggered by the {@link Tech}.
   *
   * @fires Player#ended
   * @listens Tech#ended
   * @private
   */
  handleTechEnded_() {
    this.addClass("vjs-ended"), this.removeClass("vjs-waiting"), this.options_.loop ? (this.currentTime(0), this.play()) : this.paused() || this.pause(), this.trigger("ended");
  }
  /**
   * Fired when the duration of the media resource is first known or changed
   *
   * @listens Tech#durationchange
   * @private
   */
  handleTechDurationChange_() {
    this.duration(this.techGet_("duration"));
  }
  /**
   * Handle a click on the media element to play/pause
   *
   * @param {Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#click
   * @private
   */
  handleTechClick_(e) {
    this.controls_ && (this.options_ === void 0 || this.options_.userActions === void 0 || this.options_.userActions.click === void 0 || this.options_.userActions.click !== !1) && (this.options_ !== void 0 && this.options_.userActions !== void 0 && typeof this.options_.userActions.click == "function" ? this.options_.userActions.click.call(this, e) : this.paused() ? vt(this.play()) : this.pause());
  }
  /**
   * Handle a double-click on the media element to enter/exit fullscreen
   *
   * @param {Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#dblclick
   * @private
   */
  handleTechDoubleClick_(e) {
    if (!this.controls_)
      return;
    Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), (s) => s.contains(e.target)) || (this.options_ === void 0 || this.options_.userActions === void 0 || this.options_.userActions.doubleClick === void 0 || this.options_.userActions.doubleClick !== !1) && (this.options_ !== void 0 && this.options_.userActions !== void 0 && typeof this.options_.userActions.doubleClick == "function" ? this.options_.userActions.doubleClick.call(this, e) : this.isFullscreen() ? this.exitFullscreen() : this.requestFullscreen());
  }
  /**
   * Handle a tap on the media element. It will toggle the user
   * activity state, which hides and shows the controls.
   *
   * @listens Tech#tap
   * @private
   */
  handleTechTap_() {
    this.userActive(!this.userActive());
  }
  /**
   * Handle touch to start
   *
   * @listens Tech#touchstart
   * @private
   */
  handleTechTouchStart_() {
    this.userWasActive = this.userActive();
  }
  /**
   * Handle touch to move
   *
   * @listens Tech#touchmove
   * @private
   */
  handleTechTouchMove_() {
    this.userWasActive && this.reportUserActivity();
  }
  /**
   * Handle touch to end
   *
   * @param {Event} event
   *        the touchend event that triggered
   *        this function
   *
   * @listens Tech#touchend
   * @private
   */
  handleTechTouchEnd_(e) {
    e.cancelable && e.preventDefault();
  }
  /**
   * @private
   */
  toggleFullscreenClass_() {
    this.isFullscreen() ? this.addClass("vjs-fullscreen") : this.removeClass("vjs-fullscreen");
  }
  /**
   * when the document fschange event triggers it calls this
   */
  documentFullscreenChange_(e) {
    const t = e.target.player;
    if (t && t !== this)
      return;
    const s = this.el();
    let r = B[this.fsApi_.fullscreenElement] === s;
    !r && s.matches && (r = s.matches(":" + this.fsApi_.fullscreen)), this.isFullscreen(r);
  }
  /**
   * Handle Tech Fullscreen Change
   *
   * @param {Event} event
   *        the fullscreenchange event that triggered this function
   *
   * @param {Object} data
   *        the data that was sent with the event
   *
   * @private
   * @listens Tech#fullscreenchange
   * @fires Player#fullscreenchange
   */
  handleTechFullscreenChange_(e, t) {
    t && (t.nativeIOSFullscreen && (this.addClass("vjs-ios-native-fs"), this.tech_.one("webkitendfullscreen", () => {
      this.removeClass("vjs-ios-native-fs");
    })), this.isFullscreen(t.isFullscreen));
  }
  handleTechFullscreenError_(e, t) {
    this.trigger("fullscreenerror", t);
  }
  /**
   * @private
   */
  togglePictureInPictureClass_() {
    this.isInPictureInPicture() ? this.addClass("vjs-picture-in-picture") : this.removeClass("vjs-picture-in-picture");
  }
  /**
   * Handle Tech Enter Picture-in-Picture.
   *
   * @param {Event} event
   *        the enterpictureinpicture event that triggered this function
   *
   * @private
   * @listens Tech#enterpictureinpicture
   */
  handleTechEnterPictureInPicture_(e) {
    this.isInPictureInPicture(!0);
  }
  /**
   * Handle Tech Leave Picture-in-Picture.
   *
   * @param {Event} event
   *        the leavepictureinpicture event that triggered this function
   *
   * @private
   * @listens Tech#leavepictureinpicture
   */
  handleTechLeavePictureInPicture_(e) {
    this.isInPictureInPicture(!1);
  }
  /**
   * Fires when an error occurred during the loading of an audio/video.
   *
   * @private
   * @listens Tech#error
   */
  handleTechError_() {
    const e = this.tech_.error();
    e && this.error(e);
  }
  /**
   * Retrigger the `textdata` event that was triggered by the {@link Tech}.
   *
   * @fires Player#textdata
   * @listens Tech#textdata
   * @private
   */
  handleTechTextData_() {
    let e = null;
    arguments.length > 1 && (e = arguments[1]), this.trigger("textdata", e);
  }
  /**
   * Get object for cached values.
   *
   * @return {Object}
   *         get the current object cache
   */
  getCache() {
    return this.cache_;
  }
  /**
   * Resets the internal cache object.
   *
   * Using this function outside the player constructor or reset method may
   * have unintended side-effects.
   *
   * @private
   */
  resetCache_() {
    this.cache_ = {
      // Right now, the currentTime is not _really_ cached because it is always
      // retrieved from the tech (see: currentTime). However, for completeness,
      // we set it to zero here to ensure that if we do start actually caching
      // it, we reset it along with everything else.
      currentTime: 0,
      initTime: 0,
      inactivityTimeout: this.options_.inactivityTimeout,
      duration: NaN,
      lastVolume: 1,
      lastPlaybackRate: this.defaultPlaybackRate(),
      media: null,
      src: "",
      source: {},
      sources: [],
      playbackRates: [],
      volume: 1
    };
  }
  /**
   * Pass values to the playback tech
   *
   * @param {string} [method]
   *        the method to call
   *
   * @param {Object} [arg]
   *        the argument to pass
   *
   * @private
   */
  techCall_(e, t) {
    this.ready(function() {
      if (e in x_)
        return T_(this.middleware_, this.tech_, e, t);
      if (e in ec)
        return Zu(this.middleware_, this.tech_, e, t);
      try {
        this.tech_ && this.tech_[e](t);
      } catch (s) {
        throw J(s), s;
      }
    }, !0);
  }
  /**
   * Mediate attempt to call playback tech method
   * and return the value of the method called.
   *
   * @param {string} method
   *        Tech method
   *
   * @return {*}
   *         Value returned by the tech method called, undefined if tech
   *         is not ready or tech method is not present
   *
   * @private
   */
  techGet_(e) {
    if (!(!this.tech_ || !this.tech_.isReady_)) {
      if (e in b_)
        return __(this.middleware_, this.tech_, e);
      if (e in ec)
        return Zu(this.middleware_, this.tech_, e);
      try {
        return this.tech_[e]();
      } catch (t) {
        throw this.tech_[e] === void 0 ? (J(`Video.js: ${e} method not defined for ${this.techName_} playback technology.`, t), t) : t.name === "TypeError" ? (J(`Video.js: ${e} unavailable on ${this.techName_} playback technology element.`, t), this.tech_.isReady_ = !1, t) : (J(t), t);
      }
    }
  }
  /**
   * Attempt to begin playback at the first opportunity.
   *
   * @return {Promise|undefined}
   *         Returns a promise if the browser supports Promises (or one
   *         was passed in as an option). This promise will be resolved on
   *         the return value of play. If this is undefined it will fulfill the
   *         promise chain otherwise the promise chain will be fulfilled when
   *         the promise from play is fulfilled.
   */
  play() {
    return new Promise((e) => {
      this.play_(e);
    });
  }
  /**
   * The actual logic for play, takes a callback that will be resolved on the
   * return value of play. This allows us to resolve to the play promise if there
   * is one on modern browsers.
   *
   * @private
   * @param {Function} [callback]
   *        The callback that should be called when the techs play is actually called
   */
  play_(e = vt) {
    this.playCallbacks_.push(e);
    const t = !!(!this.changingSrc_ && (this.src() || this.currentSrc())), s = !!(An || Be);
    if (this.waitToPlay_ && (this.off(["ready", "loadstart"], this.waitToPlay_), this.waitToPlay_ = null), !this.isReady_ || !t) {
      this.waitToPlay_ = (a) => {
        this.play_();
      }, this.one(["ready", "loadstart"], this.waitToPlay_), !t && s && this.load();
      return;
    }
    const r = this.techGet_("play");
    s && this.hasClass("vjs-ended") && this.resetProgressBar_(), r === null ? this.runPlayTerminatedQueue_() : this.runPlayCallbacks_(r);
  }
  /**
   * These functions will be run when if play is terminated. If play
   * runPlayCallbacks_ is run these function will not be run. This allows us
   * to differentiate between a terminated play and an actual call to play.
   */
  runPlayTerminatedQueue_() {
    const e = this.playTerminatedQueue_.slice(0);
    this.playTerminatedQueue_ = [], e.forEach(function(t) {
      t();
    });
  }
  /**
   * When a callback to play is delayed we have to run these
   * callbacks when play is actually called on the tech. This function
   * runs the callbacks that were delayed and accepts the return value
   * from the tech.
   *
   * @param {undefined|Promise} val
   *        The return value from the tech.
   */
  runPlayCallbacks_(e) {
    const t = this.playCallbacks_.slice(0);
    this.playCallbacks_ = [], this.playTerminatedQueue_ = [], t.forEach(function(s) {
      s(e);
    });
  }
  /**
   * Pause the video playback
   */
  pause() {
    this.techCall_("pause");
  }
  /**
   * Check if the player is paused or has yet to play
   *
   * @return {boolean}
   *         - false: if the media is currently playing
   *         - true: if media is not currently playing
   */
  paused() {
    return this.techGet_("paused") !== !1;
  }
  /**
   * Get a TimeRange object representing the current ranges of time that the user
   * has played.
   *
   * @return { import('./utils/time').TimeRange }
   *         A time range object that represents all the increments of time that have
   *         been played.
   */
  played() {
    return this.techGet_("played") || dt(0, 0);
  }
  /**
   * Sets or returns whether or not the user is "scrubbing". Scrubbing is
   * when the user has clicked the progress bar handle and is
   * dragging it along the progress bar.
   *
   * @param {boolean} [isScrubbing]
   *        whether the user is or is not scrubbing
   *
   * @return {boolean|undefined}
   *         - The value of scrubbing when getting
   *         - Nothing when setting
   */
  scrubbing(e) {
    if (typeof e > "u")
      return this.scrubbing_;
    this.scrubbing_ = !!e, this.techCall_("setScrubbing", this.scrubbing_), e ? this.addClass("vjs-scrubbing") : this.removeClass("vjs-scrubbing");
  }
  /**
   * Get or set the current time (in seconds)
   *
   * @param {number|string} [seconds]
   *        The time to seek to in seconds
   *
   * @return {number|undefined}
   *         - the current time in seconds when getting
   *         - Nothing when setting
   */
  currentTime(e) {
    if (e === void 0)
      return this.cache_.currentTime = this.techGet_("currentTime") || 0, this.cache_.currentTime;
    if (e < 0 && (e = 0), !this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
      this.cache_.initTime = e, this.off("canplay", this.boundApplyInitTime_), this.one("canplay", this.boundApplyInitTime_);
      return;
    }
    this.techCall_("setCurrentTime", e), this.cache_.initTime = 0, isFinite(e) && (this.cache_.currentTime = Number(e));
  }
  /**
   * Apply the value of initTime stored in cache as currentTime.
   *
   * @private
   */
  applyInitTime_() {
    this.currentTime(this.cache_.initTime);
  }
  /**
   * Normally gets the length in time of the video in seconds;
   * in all but the rarest use cases an argument will NOT be passed to the method
   *
   * > **NOTE**: The video must have started loading before the duration can be
   * known, and depending on preload behaviour may not be known until the video starts
   * playing.
   *
   * @fires Player#durationchange
   *
   * @param {number} [seconds]
   *        The duration of the video to set in seconds
   *
   * @return {number|undefined}
   *         - The duration of the video in seconds when getting
   *         - Nothing when setting
   */
  duration(e) {
    if (e === void 0)
      return this.cache_.duration !== void 0 ? this.cache_.duration : NaN;
    e = parseFloat(e), e < 0 && (e = 1 / 0), e !== this.cache_.duration && (this.cache_.duration = e, e === 1 / 0 ? this.addClass("vjs-live") : this.removeClass("vjs-live"), isNaN(e) || this.trigger("durationchange"));
  }
  /**
   * Calculates how much time is left in the video. Not part
   * of the native video API.
   *
   * @return {number}
   *         The time remaining in seconds
   */
  remainingTime() {
    return this.duration() - this.currentTime();
  }
  /**
   * A remaining time function that is intended to be used when
   * the time is to be displayed directly to the user.
   *
   * @return {number}
   *         The rounded time remaining in seconds
   */
  remainingTimeDisplay() {
    return Math.floor(this.duration()) - Math.floor(this.currentTime());
  }
  //
  // Kind of like an array of portions of the video that have been downloaded.
  /**
   * Get a TimeRange object with an array of the times of the video
   * that have been downloaded. If you just want the percent of the
   * video that's been downloaded, use bufferedPercent.
   *
   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
   *
   * @return { import('./utils/time').TimeRange }
   *         A mock {@link TimeRanges} object (following HTML spec)
   */
  buffered() {
    let e = this.techGet_("buffered");
    return (!e || !e.length) && (e = dt(0, 0)), e;
  }
  /**
   * Get the TimeRanges of the media that are currently available
   * for seeking to.
   *
   * @see [Seekable Spec]{@link https://html.spec.whatwg.org/multipage/media.html#dom-media-seekable}
   *
   * @return { import('./utils/time').TimeRange }
   *         A mock {@link TimeRanges} object (following HTML spec)
   */
  seekable() {
    let e = this.techGet_("seekable");
    return (!e || !e.length) && (e = dt(0, 0)), e;
  }
  /**
   * Returns whether the player is in the "seeking" state.
   *
   * @return {boolean} True if the player is in the seeking state, false if not.
   */
  seeking() {
    return this.techGet_("seeking");
  }
  /**
   * Returns whether the player is in the "ended" state.
   *
   * @return {boolean} True if the player is in the ended state, false if not.
   */
  ended() {
    return this.techGet_("ended");
  }
  /**
   * Returns the current state of network activity for the element, from
   * the codes in the list below.
   * - NETWORK_EMPTY (numeric value 0)
   *   The element has not yet been initialised. All attributes are in
   *   their initial states.
   * - NETWORK_IDLE (numeric value 1)
   *   The element's resource selection algorithm is active and has
   *   selected a resource, but it is not actually using the network at
   *   this time.
   * - NETWORK_LOADING (numeric value 2)
   *   The user agent is actively trying to download data.
   * - NETWORK_NO_SOURCE (numeric value 3)
   *   The element's resource selection algorithm is active, but it has
   *   not yet found a resource to use.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
   * @return {number} the current network activity state
   */
  networkState() {
    return this.techGet_("networkState");
  }
  /**
   * Returns a value that expresses the current state of the element
   * with respect to rendering the current playback position, from the
   * codes in the list below.
   * - HAVE_NOTHING (numeric value 0)
   *   No information regarding the media resource is available.
   * - HAVE_METADATA (numeric value 1)
   *   Enough of the resource has been obtained that the duration of the
   *   resource is available.
   * - HAVE_CURRENT_DATA (numeric value 2)
   *   Data for the immediate current playback position is available.
   * - HAVE_FUTURE_DATA (numeric value 3)
   *   Data for the immediate current playback position is available, as
   *   well as enough data for the user agent to advance the current
   *   playback position in the direction of playback.
   * - HAVE_ENOUGH_DATA (numeric value 4)
   *   The user agent estimates that enough data is available for
   *   playback to proceed uninterrupted.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
   * @return {number} the current playback rendering state
   */
  readyState() {
    return this.techGet_("readyState");
  }
  /**
   * Get the percent (as a decimal) of the video that's been downloaded.
   * This method is not a part of the native HTML video API.
   *
   * @return {number}
   *         A decimal between 0 and 1 representing the percent
   *         that is buffered 0 being 0% and 1 being 100%
   */
  bufferedPercent() {
    return xh(this.buffered(), this.duration());
  }
  /**
   * Get the ending time of the last buffered time range
   * This is used in the progress bar to encapsulate all time ranges.
   *
   * @return {number}
   *         The end of the last buffered time range
   */
  bufferedEnd() {
    const e = this.buffered(), t = this.duration();
    let s = e.end(e.length - 1);
    return s > t && (s = t), s;
  }
  /**
   * Get or set the current volume of the media
   *
   * @param  {number} [percentAsDecimal]
   *         The new volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number|undefined}
   *         The current volume as a percent when getting
   */
  volume(e) {
    let t;
    if (e !== void 0) {
      t = Math.max(0, Math.min(1, e)), this.cache_.volume = t, this.techCall_("setVolume", t), t > 0 && this.lastVolume_(t);
      return;
    }
    return t = parseFloat(this.techGet_("volume")), isNaN(t) ? 1 : t;
  }
  /**
   * Get the current muted state, or turn mute on or off
   *
   * @param {boolean} [muted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean|undefined}
   *         - true if mute is on and getting
   *         - false if mute is off and getting
   *         - nothing if setting
   */
  muted(e) {
    if (e !== void 0) {
      this.techCall_("setMuted", e);
      return;
    }
    return this.techGet_("muted") || !1;
  }
  /**
   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
   * indicates the state of muted on initial playback.
   *
   * ```js
   *   var myPlayer = videojs('some-player-id');
   *
   *   myPlayer.src("http://www.example.com/path/to/video.mp4");
   *
   *   // get, should be false
   *   console.log(myPlayer.defaultMuted());
   *   // set to true
   *   myPlayer.defaultMuted(true);
   *   // get should be true
   *   console.log(myPlayer.defaultMuted());
   * ```
   *
   * @param {boolean} [defaultMuted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean|undefined}
   *         - true if defaultMuted is on and getting
   *         - false if defaultMuted is off and getting
   *         - Nothing when setting
   */
  defaultMuted(e) {
    return e !== void 0 && this.techCall_("setDefaultMuted", e), this.techGet_("defaultMuted") || !1;
  }
  /**
   * Get the last volume, or set it
   *
   * @param  {number} [percentAsDecimal]
   *         The new last volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number|undefined}
   *         - The current value of lastVolume as a percent when getting
   *         - Nothing when setting
   *
   * @private
   */
  lastVolume_(e) {
    if (e !== void 0 && e !== 0) {
      this.cache_.lastVolume = e;
      return;
    }
    return this.cache_.lastVolume;
  }
  /**
   * Check if current tech can support native fullscreen
   * (e.g. with built in controls like iOS)
   *
   * @return {boolean}
   *         if native fullscreen is supported
   */
  supportsFullScreen() {
    return this.techGet_("supportsFullScreen") || !1;
  }
  /**
   * Check if the player is in fullscreen mode or tell the player that it
   * is or is not in fullscreen mode.
   *
   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
   * property and instead document.fullscreenElement is used. But isFullscreen is
   * still a valuable property for internal player workings.
   *
   * @param  {boolean} [isFS]
   *         Set the players current fullscreen state
   *
   * @return {boolean|undefined}
   *         - true if fullscreen is on and getting
   *         - false if fullscreen is off and getting
   *         - Nothing when setting
   */
  isFullscreen(e) {
    if (e !== void 0) {
      const t = this.isFullscreen_;
      this.isFullscreen_ = !!e, this.isFullscreen_ !== t && this.fsApi_.prefixed && this.trigger("fullscreenchange"), this.toggleFullscreenClass_();
      return;
    }
    return this.isFullscreen_;
  }
  /**
   * Increase the size of the video to full screen
   * In some browsers, full screen is not supported natively, so it enters
   * "full window mode", where the video fills the browser window.
   * In browsers and devices that support native full screen, sometimes the
   * browser's default controls will be shown, and not the Video.js custom skin.
   * This includes most mobile devices (iOS, Android) and older versions of
   * Safari.
   *
   * @param  {Object} [fullscreenOptions]
   *         Override the player fullscreen options
   *
   * @fires Player#fullscreenchange
   */
  requestFullscreen(e) {
    this.isInPictureInPicture() && this.exitPictureInPicture();
    const t = this;
    return new Promise((s, r) => {
      function n() {
        t.off("fullscreenerror", l), t.off("fullscreenchange", a);
      }
      function a() {
        n(), s();
      }
      function l(f, m) {
        n(), r(m);
      }
      t.one("fullscreenchange", a), t.one("fullscreenerror", l);
      const u = t.requestFullscreenHelper_(e);
      u && (u.then(n, n), u.then(s, r));
    });
  }
  requestFullscreenHelper_(e) {
    let t;
    if (this.fsApi_.prefixed || (t = this.options_.fullscreen && this.options_.fullscreen.options || {}, e !== void 0 && (t = e)), this.fsApi_.requestFullscreen) {
      const s = this.el_[this.fsApi_.requestFullscreen](t);
      return s && s.then(() => this.isFullscreen(!0), () => this.isFullscreen(!1)), s;
    } else
      this.tech_.supportsFullScreen() && !this.options_.preferFullWindow ? this.techCall_("enterFullScreen") : this.enterFullWindow();
  }
  /**
   * Return the video to its normal size after having been in full screen mode
   *
   * @fires Player#fullscreenchange
   */
  exitFullscreen() {
    const e = this;
    return new Promise((t, s) => {
      function r() {
        e.off("fullscreenerror", a), e.off("fullscreenchange", n);
      }
      function n() {
        r(), t();
      }
      function a(u, f) {
        r(), s(f);
      }
      e.one("fullscreenchange", n), e.one("fullscreenerror", a);
      const l = e.exitFullscreenHelper_();
      l && (l.then(r, r), l.then(t, s));
    });
  }
  exitFullscreenHelper_() {
    if (this.fsApi_.requestFullscreen) {
      const e = B[this.fsApi_.exitFullscreen]();
      return e && vt(e.then(() => this.isFullscreen(!1))), e;
    } else
      this.tech_.supportsFullScreen() && !this.options_.preferFullWindow ? this.techCall_("exitFullScreen") : this.exitFullWindow();
  }
  /**
   * When fullscreen isn't supported we can stretch the
   * video container to as wide as the browser will let us.
   *
   * @fires Player#enterFullWindow
   */
  enterFullWindow() {
    this.isFullscreen(!0), this.isFullWindow = !0, this.docOrigOverflow = B.documentElement.style.overflow, Ze(B, "keydown", this.boundFullWindowOnEscKey_), B.documentElement.style.overflow = "hidden", gi(B.body, "vjs-full-window"), this.trigger("enterFullWindow");
  }
  /**
   * Check for call to either exit full window or
   * full screen on ESC key
   *
   * @param {string} event
   *        Event to check for key press
   */
  fullWindowOnEscKey(e) {
    W.isEventKey(e, "Esc") && this.isFullscreen() === !0 && (this.isFullWindow ? this.exitFullWindow() : this.exitFullscreen());
  }
  /**
   * Exit full window
   *
   * @fires Player#exitFullWindow
   */
  exitFullWindow() {
    this.isFullscreen(!1), this.isFullWindow = !1, Pe(B, "keydown", this.boundFullWindowOnEscKey_), B.documentElement.style.overflow = this.docOrigOverflow, Dn(B.body, "vjs-full-window"), this.trigger("exitFullWindow");
  }
  /**
   * Get or set disable Picture-in-Picture mode.
   *
   * @param {boolean} [value]
   *                  - true will disable Picture-in-Picture mode
   *                  - false will enable Picture-in-Picture mode
   */
  disablePictureInPicture(e) {
    if (e === void 0)
      return this.techGet_("disablePictureInPicture");
    this.techCall_("setDisablePictureInPicture", e), this.options_.disablePictureInPicture = e, this.trigger("disablepictureinpicturechanged");
  }
  /**
   * Check if the player is in Picture-in-Picture mode or tell the player that it
   * is or is not in Picture-in-Picture mode.
   *
   * @param  {boolean} [isPiP]
   *         Set the players current Picture-in-Picture state
   *
   * @return {boolean|undefined}
   *         - true if Picture-in-Picture is on and getting
   *         - false if Picture-in-Picture is off and getting
   *         - nothing if setting
   */
  isInPictureInPicture(e) {
    if (e !== void 0) {
      this.isInPictureInPicture_ = !!e, this.togglePictureInPictureClass_();
      return;
    }
    return !!this.isInPictureInPicture_;
  }
  /**
   * Create a floating video window always on top of other windows so that users may
   * continue consuming media while they interact with other content sites, or
   * applications on their device.
   *
   * This can use document picture-in-picture or element picture in picture
   *
   * Set `enableDocumentPictureInPicture` to `true` to use docPiP on a supported browser
   * Else set `disablePictureInPicture` to `false` to disable elPiP on a supported browser
   *
   *
   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/}
   * @see [Spec]{@link https://wicg.github.io/document-picture-in-picture/}
   *
   * @fires Player#enterpictureinpicture
   *
   * @return {Promise}
   *         A promise with a Picture-in-Picture window.
   */
  requestPictureInPicture() {
    if (this.options_.enableDocumentPictureInPicture && E.documentPictureInPicture) {
      const e = B.createElement(this.el().tagName);
      return e.classList = this.el().classList, e.classList.add("vjs-pip-container"), this.posterImage && e.appendChild(this.posterImage.el().cloneNode(!0)), this.titleBar && e.appendChild(this.titleBar.el().cloneNode(!0)), e.appendChild(Y("p", {
        className: "vjs-pip-text"
      }, {}, this.localize("Playing in picture-in-picture"))), E.documentPictureInPicture.requestWindow({
        // The aspect ratio won't be correct, Chrome bug https://crbug.com/1407629
        width: this.videoWidth(),
        height: this.videoHeight()
      }).then((t) => (uh(t), this.el_.parentNode.insertBefore(e, this.el_), t.document.body.appendChild(this.el_), t.document.body.classList.add("vjs-pip-window"), this.player_.isInPictureInPicture(!0), this.player_.trigger({
        type: "enterpictureinpicture",
        pipWindow: t
      }), t.addEventListener("pagehide", (s) => {
        const r = s.target.querySelector(".video-js");
        e.parentNode.replaceChild(r, e), this.player_.isInPictureInPicture(!1), this.player_.trigger("leavepictureinpicture");
      }), t));
    }
    return "pictureInPictureEnabled" in B && this.disablePictureInPicture() === !1 ? this.techGet_("requestPictureInPicture") : Promise.reject("No PiP mode is available");
  }
  /**
   * Exit Picture-in-Picture mode.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @fires Player#leavepictureinpicture
   *
   * @return {Promise}
   *         A promise.
   */
  exitPictureInPicture() {
    if (E.documentPictureInPicture && E.documentPictureInPicture.window)
      return E.documentPictureInPicture.window.close(), Promise.resolve();
    if ("pictureInPictureEnabled" in B)
      return B.exitPictureInPicture();
  }
  /**
   * Called when this Player has focus and a key gets pressed down, or when
   * any Component of this player receives a key press that it doesn't handle.
   * This allows player-wide hotkeys (either as defined below, or optionally
   * by an external function).
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */
  handleKeyDown(e) {
    const {
      userActions: t
    } = this.options_;
    !t || !t.hotkeys || ((r) => {
      const n = r.tagName.toLowerCase();
      if (r.isContentEditable)
        return !0;
      const a = ["button", "checkbox", "hidden", "radio", "reset", "submit"];
      return n === "input" ? a.indexOf(r.type) === -1 : ["textarea"].indexOf(n) !== -1;
    })(this.el_.ownerDocument.activeElement) || (typeof t.hotkeys == "function" ? t.hotkeys.call(this, e) : this.handleHotkeys(e));
  }
  /**
   * Called when this Player receives a hotkey keydown event.
   * Supported player-wide hotkeys are:
   *
   *   f          - toggle fullscreen
   *   m          - toggle mute
   *   k or Space - toggle play/pause
   *
   * @param {Event} event
   *        The `keydown` event that caused this function to be called.
   */
  handleHotkeys(e) {
    const t = this.options_.userActions ? this.options_.userActions.hotkeys : {}, {
      fullscreenKey: s = (a) => W.isEventKey(a, "f"),
      muteKey: r = (a) => W.isEventKey(a, "m"),
      playPauseKey: n = (a) => W.isEventKey(a, "k") || W.isEventKey(a, "Space")
    } = t;
    if (s.call(this, e)) {
      e.preventDefault(), e.stopPropagation();
      const a = N.getComponent("FullscreenToggle");
      B[this.fsApi_.fullscreenEnabled] !== !1 && a.prototype.handleClick.call(this, e);
    } else
      r.call(this, e) ? (e.preventDefault(), e.stopPropagation(), N.getComponent("MuteToggle").prototype.handleClick.call(this, e)) : n.call(this, e) && (e.preventDefault(), e.stopPropagation(), N.getComponent("PlayToggle").prototype.handleClick.call(this, e));
  }
  /**
   * Check whether the player can play a given mimetype
   *
   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
   *
   * @param {string} type
   *        The mimetype to check
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */
  canPlayType(e) {
    let t;
    for (let s = 0, r = this.options_.techOrder; s < r.length; s++) {
      const n = r[s];
      let a = X.getTech(n);
      if (a || (a = N.getComponent(n)), !a) {
        J.error(`The "${n}" tech is undefined. Skipped browser support check for that tech.`);
        continue;
      }
      if (a.isSupported() && (t = a.canPlayType(e), t))
        return t;
    }
    return "";
  }
  /**
   * Select source based on tech-order or source-order
   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
   * defaults to tech-order selection
   *
   * @param {Array} sources
   *        The sources for a media asset
   *
   * @return {Object|boolean}
   *         Object of source and tech order or false
   */
  selectSource(e) {
    const t = this.options_.techOrder.map((l) => [l, X.getTech(l)]).filter(([l, u]) => u ? u.isSupported() : (J.error(`The "${l}" tech is undefined. Skipped browser support check for that tech.`), !1)), s = function(l, u, f) {
      let m;
      return l.some((v) => u.some((b) => {
        if (m = f(v, b), m)
          return !0;
      })), m;
    };
    let r;
    const n = (l) => (u, f) => l(f, u), a = ([l, u], f) => {
      if (u.canPlaySource(f, this.options_[l.toLowerCase()]))
        return {
          source: f,
          tech: l
        };
    };
    return this.options_.sourceOrder ? r = s(e, t, n(a)) : r = s(t, e, a), r || !1;
  }
  /**
   * Executes source setting and getting logic
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, an array of SourceObjects, or a string referencing
   *        a URL to a media source. It is _highly recommended_ that an object
   *        or array of objects is used here, so that source selection
   *        algorithms can take the `type` into account.
   *
   *        If not provided, this method acts as a getter.
   * @param {boolean} [isRetry]
   *        Indicates whether this is being called internally as a result of a retry
   *
   * @return {string|undefined}
   *         If the `source` argument is missing, returns the current source
   *         URL. Otherwise, returns nothing/undefined.
   */
  handleSrc_(e, t) {
    if (typeof e > "u")
      return this.cache_.src || "";
    this.resetRetryOnError_ && this.resetRetryOnError_();
    const s = Ah(e);
    if (!s.length) {
      this.setTimeout(function() {
        this.error({
          code: 4,
          message: this.options_.notSupportedMessage
        });
      }, 0);
      return;
    }
    if (this.changingSrc_ = !0, t || (this.cache_.sources = s), this.updateSourceCaches_(s[0]), v_(this, s[0], (r, n) => {
      if (this.middleware_ = n, t || (this.cache_.sources = s), this.updateSourceCaches_(r), this.src_(r)) {
        if (s.length > 1)
          return this.handleSrc_(s.slice(1));
        this.changingSrc_ = !1, this.setTimeout(function() {
          this.error({
            code: 4,
            message: this.options_.notSupportedMessage
          });
        }, 0), this.triggerReady();
        return;
      }
      y_(n, this.tech_);
    }), s.length > 1) {
      const r = () => {
        this.error(null), this.handleSrc_(s.slice(1), !0);
      }, n = () => {
        this.off("error", r);
      };
      this.one("error", r), this.one("playing", n), this.resetRetryOnError_ = () => {
        this.off("error", r), this.off("playing", n);
      };
    }
  }
  /**
   * Get or set the video source.
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, an array of SourceObjects, or a string referencing
   *        a URL to a media source. It is _highly recommended_ that an object
   *        or array of objects is used here, so that source selection
   *        algorithms can take the `type` into account.
   *
   *        If not provided, this method acts as a getter.
   *
   * @return {string|undefined}
   *         If the `source` argument is missing, returns the current source
   *         URL. Otherwise, returns nothing/undefined.
   */
  src(e) {
    return this.handleSrc_(e, !1);
  }
  /**
   * Set the source object on the tech, returns a boolean that indicates whether
   * there is a tech that can play the source or not
   *
   * @param {Tech~SourceObject} source
   *        The source object to set on the Tech
   *
   * @return {boolean}
   *         - True if there is no Tech to playback this source
   *         - False otherwise
   *
   * @private
   */
  src_(e) {
    const t = this.selectSource([e]);
    return t ? yh(t.tech, this.techName_) ? (this.ready(function() {
      this.tech_.constructor.prototype.hasOwnProperty("setSource") ? this.techCall_("setSource", e) : this.techCall_("src", e.src), this.changingSrc_ = !1;
    }, !0), !1) : (this.changingSrc_ = !0, this.loadTech_(t.tech, t.source), this.tech_.ready(() => {
      this.changingSrc_ = !1;
    }), !1) : !0;
  }
  /**
   * Begin loading the src data.
   */
  load() {
    if (this.tech_ && this.tech_.vhs) {
      this.src(this.currentSource());
      return;
    }
    this.techCall_("load");
  }
  /**
   * Reset the player. Loads the first tech in the techOrder,
   * removes all the text tracks in the existing `tech`,
   * and calls `reset` on the `tech`.
   */
  reset() {
    if (this.paused())
      this.doReset_();
    else {
      const e = this.play();
      vt(e.then(() => this.doReset_()));
    }
  }
  doReset_() {
    this.tech_ && this.tech_.clearTracks("text"), this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.resetCache_(), this.poster(""), this.loadTech_(this.options_.techOrder[0], null), this.techCall_("reset"), this.resetControlBarUI_(), this.error(null), this.titleBar && this.titleBar.update({
      title: void 0,
      description: void 0
    }), Nt(this) && this.trigger("playerreset");
  }
  /**
   * Reset Control Bar's UI by calling sub-methods that reset
   * all of Control Bar's components
   */
  resetControlBarUI_() {
    this.resetProgressBar_(), this.resetPlaybackRate_(), this.resetVolumeBar_();
  }
  /**
   * Reset tech's progress so progress bar is reset in the UI
   */
  resetProgressBar_() {
    this.currentTime(0);
    const {
      currentTimeDisplay: e,
      durationDisplay: t,
      progressControl: s,
      remainingTimeDisplay: r
    } = this.controlBar || {}, {
      seekBar: n
    } = s || {};
    e && e.updateContent(), t && t.updateContent(), r && r.updateContent(), n && (n.update(), n.loadProgressBar && n.loadProgressBar.update());
  }
  /**
   * Reset Playback ratio
   */
  resetPlaybackRate_() {
    this.playbackRate(this.defaultPlaybackRate()), this.handleTechRateChange_();
  }
  /**
   * Reset Volume bar
   */
  resetVolumeBar_() {
    this.volume(1), this.trigger("volumechange");
  }
  /**
   * Returns all of the current source objects.
   *
   * @return {Tech~SourceObject[]}
   *         The current source objects
   */
  currentSources() {
    const e = this.currentSource(), t = [];
    return Object.keys(e).length !== 0 && t.push(e), this.cache_.sources || t;
  }
  /**
   * Returns the current source object.
   *
   * @return {Tech~SourceObject}
   *         The current source object
   */
  currentSource() {
    return this.cache_.source || {};
  }
  /**
   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.
   *
   * @return {string}
   *         The current source
   */
  currentSrc() {
    return this.currentSource() && this.currentSource().src || "";
  }
  /**
   * Get the current source type e.g. video/mp4
   * This can allow you rebuild the current source object so that you could load the same
   * source and tech later
   *
   * @return {string}
   *         The source MIME type
   */
  currentType() {
    return this.currentSource() && this.currentSource().type || "";
  }
  /**
   * Get or set the preload attribute
   *
   * @param {'none'|'auto'|'metadata'} [value]
   *        Preload mode to pass to tech
   *
   * @return {string|undefined}
   *         - The preload attribute value when getting
   *         - Nothing when setting
   */
  preload(e) {
    if (e !== void 0) {
      this.techCall_("setPreload", e), this.options_.preload = e;
      return;
    }
    return this.techGet_("preload");
  }
  /**
   * Get or set the autoplay option. When this is a boolean it will
   * modify the attribute on the tech. When this is a string the attribute on
   * the tech will be removed and `Player` will handle autoplay on loadstarts.
   *
   * @param {boolean|'play'|'muted'|'any'} [value]
   *        - true: autoplay using the browser behavior
   *        - false: do not autoplay
   *        - 'play': call play() on every loadstart
   *        - 'muted': call muted() then play() on every loadstart
   *        - 'any': call play() on every loadstart. if that fails call muted() then play().
   *        - *: values other than those listed here will be set `autoplay` to true
   *
   * @return {boolean|string|undefined}
   *         - The current value of autoplay when getting
   *         - Nothing when setting
   */
  autoplay(e) {
    if (e === void 0)
      return this.options_.autoplay || !1;
    let t;
    typeof e == "string" && /(any|play|muted)/.test(e) || e === !0 && this.options_.normalizeAutoplay ? (this.options_.autoplay = e, this.manualAutoplay_(typeof e == "string" ? e : "play"), t = !1) : e ? this.options_.autoplay = !0 : this.options_.autoplay = !1, t = typeof t > "u" ? this.options_.autoplay : t, this.tech_ && this.techCall_("setAutoplay", t);
  }
  /**
   * Set or unset the playsinline attribute.
   * Playsinline tells the browser that non-fullscreen playback is preferred.
   *
   * @param {boolean} [value]
   *        - true means that we should try to play inline by default
   *        - false means that we should use the browser's default playback mode,
   *          which in most cases is inline. iOS Safari is a notable exception
   *          and plays fullscreen by default.
   *
   * @return {string|undefined}
   *         - the current value of playsinline
   *         - Nothing when setting
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */
  playsinline(e) {
    return e !== void 0 && (this.techCall_("setPlaysinline", e), this.options_.playsinline = e), this.techGet_("playsinline");
  }
  /**
   * Get or set the loop attribute on the video element.
   *
   * @param {boolean} [value]
   *        - true means that we should loop the video
   *        - false means that we should not loop the video
   *
   * @return {boolean|undefined}
   *         - The current value of loop when getting
   *         - Nothing when setting
   */
  loop(e) {
    if (e !== void 0) {
      this.techCall_("setLoop", e), this.options_.loop = e;
      return;
    }
    return this.techGet_("loop");
  }
  /**
   * Get or set the poster image source url
   *
   * @fires Player#posterchange
   *
   * @param {string} [src]
   *        Poster image source URL
   *
   * @return {string|undefined}
   *         - The current value of poster when getting
   *         - Nothing when setting
   */
  poster(e) {
    if (e === void 0)
      return this.poster_;
    e || (e = ""), e !== this.poster_ && (this.poster_ = e, this.techCall_("setPoster", e), this.isPosterFromTech_ = !1, this.trigger("posterchange"));
  }
  /**
   * Some techs (e.g. YouTube) can provide a poster source in an
   * asynchronous way. We want the poster component to use this
   * poster source so that it covers up the tech's controls.
   * (YouTube's play button). However we only want to use this
   * source if the player user hasn't set a poster through
   * the normal APIs.
   *
   * @fires Player#posterchange
   * @listens Tech#posterchange
   * @private
   */
  handleTechPosterChange_() {
    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
      const e = this.tech_.poster() || "";
      e !== this.poster_ && (this.poster_ = e, this.isPosterFromTech_ = !0, this.trigger("posterchange"));
    }
  }
  /**
   * Get or set whether or not the controls are showing.
   *
   * @fires Player#controlsenabled
   *
   * @param {boolean} [bool]
   *        - true to turn controls on
   *        - false to turn controls off
   *
   * @return {boolean|undefined}
   *         - The current value of controls when getting
   *         - Nothing when setting
   */
  controls(e) {
    if (e === void 0)
      return !!this.controls_;
    e = !!e, this.controls_ !== e && (this.controls_ = e, this.usingNativeControls() && this.techCall_("setControls", e), this.controls_ ? (this.removeClass("vjs-controls-disabled"), this.addClass("vjs-controls-enabled"), this.trigger("controlsenabled"), this.usingNativeControls() || this.addTechControlsListeners_()) : (this.removeClass("vjs-controls-enabled"), this.addClass("vjs-controls-disabled"), this.trigger("controlsdisabled"), this.usingNativeControls() || this.removeTechControlsListeners_()));
  }
  /**
   * Toggle native controls on/off. Native controls are the controls built into
   * devices (e.g. default iPhone controls) or other techs
   * (e.g. Vimeo Controls)
   * **This should only be set by the current tech, because only the tech knows
   * if it can support native controls**
   *
   * @fires Player#usingnativecontrols
   * @fires Player#usingcustomcontrols
   *
   * @param {boolean} [bool]
   *        - true to turn native controls on
   *        - false to turn native controls off
   *
   * @return {boolean|undefined}
   *         - The current value of native controls when getting
   *         - Nothing when setting
   */
  usingNativeControls(e) {
    if (e === void 0)
      return !!this.usingNativeControls_;
    e = !!e, this.usingNativeControls_ !== e && (this.usingNativeControls_ = e, this.usingNativeControls_ ? (this.addClass("vjs-using-native-controls"), this.trigger("usingnativecontrols")) : (this.removeClass("vjs-using-native-controls"), this.trigger("usingcustomcontrols")));
  }
  /**
   * Set or get the current MediaError
   *
   * @fires Player#error
   *
   * @param  {MediaError|string|number} [err]
   *         A MediaError or a string/number to be turned
   *         into a MediaError
   *
   * @return {MediaError|null|undefined}
   *         - The current MediaError when getting (or null)
   *         - Nothing when setting
   */
  error(e) {
    if (e === void 0)
      return this.error_ || null;
    if (Xt("beforeerror").forEach((t) => {
      const s = t(this, e);
      if (!(Et(s) && !Array.isArray(s) || typeof s == "string" || typeof s == "number" || s === null)) {
        this.log.error("please return a value that MediaError expects in beforeerror hooks");
        return;
      }
      e = s;
    }), this.options_.suppressNotSupportedError && e && e.code === 4) {
      const t = function() {
        this.error(e);
      };
      this.options_.suppressNotSupportedError = !1, this.any(["click", "touchstart"], t), this.one("loadstart", function() {
        this.off(["click", "touchstart"], t);
      });
      return;
    }
    if (e === null) {
      this.error_ = null, this.removeClass("vjs-error"), this.errorDisplay && this.errorDisplay.close();
      return;
    }
    this.error_ = new ve(e), this.addClass("vjs-error"), J.error(`(CODE:${this.error_.code} ${ve.errorTypes[this.error_.code]})`, this.error_.message, this.error_), this.trigger("error"), Xt("error").forEach((t) => t(this, this.error_));
  }
  /**
   * Report user activity
   *
   * @param {Object} event
   *        Event object
   */
  reportUserActivity(e) {
    this.userActivity_ = !0;
  }
  /**
   * Get/set if user is active
   *
   * @fires Player#useractive
   * @fires Player#userinactive
   *
   * @param {boolean} [bool]
   *        - true if the user is active
   *        - false if the user is inactive
   *
   * @return {boolean|undefined}
   *         - The current value of userActive when getting
   *         - Nothing when setting
   */
  userActive(e) {
    if (e === void 0)
      return this.userActive_;
    if (e = !!e, e !== this.userActive_) {
      if (this.userActive_ = e, this.userActive_) {
        this.userActivity_ = !0, this.removeClass("vjs-user-inactive"), this.addClass("vjs-user-active"), this.trigger("useractive");
        return;
      }
      this.tech_ && this.tech_.one("mousemove", function(t) {
        t.stopPropagation(), t.preventDefault();
      }), this.userActivity_ = !1, this.removeClass("vjs-user-active"), this.addClass("vjs-user-inactive"), this.trigger("userinactive");
    }
  }
  /**
   * Listen for user activity based on timeout value
   *
   * @private
   */
  listenForUserActivity_() {
    let e, t, s;
    const r = ue(this, this.reportUserActivity), n = function(v) {
      (v.screenX !== t || v.screenY !== s) && (t = v.screenX, s = v.screenY, r());
    }, a = function() {
      r(), this.clearInterval(e), e = this.setInterval(r, 250);
    }, l = function(v) {
      r(), this.clearInterval(e);
    };
    this.on("mousedown", a), this.on("mousemove", n), this.on("mouseup", l), this.on("mouseleave", l);
    const u = this.getChild("controlBar");
    u && !Be && !Ct && (u.on("mouseenter", function(v) {
      this.player().options_.inactivityTimeout !== 0 && (this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout), this.player().options_.inactivityTimeout = 0;
    }), u.on("mouseleave", function(v) {
      this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
    })), this.on("keydown", r), this.on("keyup", r);
    let f;
    const m = function() {
      if (!this.userActivity_)
        return;
      this.userActivity_ = !1, this.userActive(!0), this.clearTimeout(f);
      const v = this.options_.inactivityTimeout;
      v <= 0 || (f = this.setTimeout(function() {
        this.userActivity_ || this.userActive(!1);
      }, v));
    };
    this.setInterval(m, 250);
  }
  /**
   * Gets or sets the current playback rate. A playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed
   * playback, for instance.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
   *
   * @param {number} [rate]
   *       New playback rate to set.
   *
   * @return {number|undefined}
   *         - The current playback rate when getting or 1.0
   *         - Nothing when setting
   */
  playbackRate(e) {
    if (e !== void 0) {
      this.techCall_("setPlaybackRate", e);
      return;
    }
    return this.tech_ && this.tech_.featuresPlaybackRate ? this.cache_.lastPlaybackRate || this.techGet_("playbackRate") : 1;
  }
  /**
   * Gets or sets the current default playback rate. A default playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not
   * not the current playbackRate.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
   *
   * @param {number} [rate]
   *       New default playback rate to set.
   *
   * @return {number|undefined}
   *         - The default playback rate when getting or 1.0
   *         - Nothing when setting
   */
  defaultPlaybackRate(e) {
    return e !== void 0 ? this.techCall_("setDefaultPlaybackRate", e) : this.tech_ && this.tech_.featuresPlaybackRate ? this.techGet_("defaultPlaybackRate") : 1;
  }
  /**
   * Gets or sets the audio flag
   *
   * @param {boolean} [bool]
   *        - true signals that this is an audio player
   *        - false signals that this is not an audio player
   *
   * @return {boolean|undefined}
   *         - The current value of isAudio when getting
   *         - Nothing when setting
   */
  isAudio(e) {
    if (e !== void 0) {
      this.isAudio_ = !!e;
      return;
    }
    return !!this.isAudio_;
  }
  enableAudioOnlyUI_() {
    this.addClass("vjs-audio-only-mode");
    const e = this.children(), t = this.getChild("ControlBar"), s = t && t.currentHeight();
    e.forEach((r) => {
      r !== t && r.el_ && !r.hasClass("vjs-hidden") && (r.hide(), this.audioOnlyCache_.hiddenChildren.push(r));
    }), this.audioOnlyCache_.playerHeight = this.currentHeight(), this.height(s), this.trigger("audioonlymodechange");
  }
  disableAudioOnlyUI_() {
    this.removeClass("vjs-audio-only-mode"), this.audioOnlyCache_.hiddenChildren.forEach((e) => e.show()), this.height(this.audioOnlyCache_.playerHeight), this.trigger("audioonlymodechange");
  }
  /**
   * Get the current audioOnlyMode state or set audioOnlyMode to true or false.
   *
   * Setting this to `true` will hide all player components except the control bar,
   * as well as control bar components needed only for video.
   *
   * @param {boolean} [value]
   *         The value to set audioOnlyMode to.
   *
   * @return {Promise|boolean}
   *        A Promise is returned when setting the state, and a boolean when getting
   *        the present state
   */
  audioOnlyMode(e) {
    if (typeof e != "boolean" || e === this.audioOnlyMode_)
      return this.audioOnlyMode_;
    if (this.audioOnlyMode_ = e, e) {
      const t = [];
      return this.isInPictureInPicture() && t.push(this.exitPictureInPicture()), this.isFullscreen() && t.push(this.exitFullscreen()), this.audioPosterMode() && t.push(this.audioPosterMode(!1)), Promise.all(t).then(() => this.enableAudioOnlyUI_());
    }
    return Promise.resolve().then(() => this.disableAudioOnlyUI_());
  }
  enablePosterModeUI_() {
    (this.tech_ && this.tech_).hide(), this.addClass("vjs-audio-poster-mode"), this.trigger("audiopostermodechange");
  }
  disablePosterModeUI_() {
    (this.tech_ && this.tech_).show(), this.removeClass("vjs-audio-poster-mode"), this.trigger("audiopostermodechange");
  }
  /**
   * Get the current audioPosterMode state or set audioPosterMode to true or false
   *
   * @param {boolean} [value]
   *         The value to set audioPosterMode to.
   *
   * @return {Promise|boolean}
   *         A Promise is returned when setting the state, and a boolean when getting
   *        the present state
   */
  audioPosterMode(e) {
    return typeof e != "boolean" || e === this.audioPosterMode_ ? this.audioPosterMode_ : (this.audioPosterMode_ = e, e ? this.audioOnlyMode() ? this.audioOnlyMode(!1).then(() => {
      this.enablePosterModeUI_();
    }) : Promise.resolve().then(() => {
      this.enablePosterModeUI_();
    }) : Promise.resolve().then(() => {
      this.disablePosterModeUI_();
    }));
  }
  /**
   * A helper method for adding a {@link TextTrack} to our
   * {@link TextTrackList}.
   *
   * In addition to the W3C settings we allow adding additional info through options.
   *
   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
   *
   * @param {string} [kind]
   *        the kind of TextTrack you are adding
   *
   * @param {string} [label]
   *        the label to give the TextTrack label
   *
   * @param {string} [language]
   *        the language to set on the TextTrack
   *
   * @return {TextTrack|undefined}
   *         the TextTrack that was added or undefined
   *         if there is no tech
   */
  addTextTrack(e, t, s) {
    if (this.tech_)
      return this.tech_.addTextTrack(e, t, s);
  }
  /**
   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.
   *
   * @param {Object} options
   *        Options to pass to {@link HTMLTrackElement} during creation. See
   *        {@link HTMLTrackElement} for object properties that you should use.
   *
   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack will not be removed
   *                                        from the TextTrackList and HtmlTrackElementList
   *                                        after a source change
   *
   * @return { import('./tracks/html-track-element').default }
   *         the HTMLTrackElement that was created and added
   *         to the HtmlTrackElementList and the remote
   *         TextTrackList
   *
   */
  addRemoteTextTrack(e, t) {
    if (this.tech_)
      return this.tech_.addRemoteTextTrack(e, t);
  }
  /**
   * Remove a remote {@link TextTrack} from the respective
   * {@link TextTrackList} and {@link HtmlTrackElementList}.
   *
   * @param {Object} track
   *        Remote {@link TextTrack} to remove
   *
   * @return {undefined}
   *         does not return anything
   */
  removeRemoteTextTrack(e = {}) {
    let {
      track: t
    } = e;
    if (t || (t = e), this.tech_)
      return this.tech_.removeRemoteTextTrack(t);
  }
  /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object|undefined}
   *         An object with supported media playback quality metrics or undefined if there
   *         is no tech or the tech does not support it.
   */
  getVideoPlaybackQuality() {
    return this.techGet_("getVideoPlaybackQuality");
  }
  /**
   * Get video width
   *
   * @return {number}
   *         current video width
   */
  videoWidth() {
    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
  }
  /**
   * Get video height
   *
   * @return {number}
   *         current video height
   */
  videoHeight() {
    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
  }
  /**
   * Set or get the player's language code.
   *
   * Changing the language will trigger
   * [languagechange]{@link Player#event:languagechange}
   * which Components can use to update control text.
   * ClickableComponent will update its control text by default on
   * [languagechange]{@link Player#event:languagechange}.
   *
   * @fires Player#languagechange
   *
   * @param {string} [code]
   *        the language code to set the player to
   *
   * @return {string|undefined}
   *         - The current language code when getting
   *         - Nothing when setting
   */
  language(e) {
    if (e === void 0)
      return this.language_;
    this.language_ !== String(e).toLowerCase() && (this.language_ = String(e).toLowerCase(), Nt(this) && this.trigger("languagechange"));
  }
  /**
   * Get the player's language dictionary
   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
   * Languages specified directly in the player options have precedence
   *
   * @return {Array}
   *         An array of of supported languages
   */
  languages() {
    return le(he.prototype.options_.languages, this.languages_);
  }
  /**
   * returns a JavaScript object representing the current track
   * information. **DOES not return it as JSON**
   *
   * @return {Object}
   *         Object representing the current of track info
   */
  toJSON() {
    const e = le(this.options_), t = e.tracks;
    e.tracks = [];
    for (let s = 0; s < t.length; s++) {
      let r = t[s];
      r = le(r), r.player = void 0, e.tracks[s] = r;
    }
    return e;
  }
  /**
   * Creates a simple modal dialog (an instance of the {@link ModalDialog}
   * component) that immediately overlays the player with arbitrary
   * content and removes itself when closed.
   *
   * @param {string|Function|Element|Array|null} content
   *        Same as {@link ModalDialog#content}'s param of the same name.
   *        The most straight-forward usage is to provide a string or DOM
   *        element.
   *
   * @param {Object} [options]
   *        Extra options which will be passed on to the {@link ModalDialog}.
   *
   * @return {ModalDialog}
   *         the {@link ModalDialog} that was created
   */
  createModal(e, t) {
    t = t || {}, t.content = e || "";
    const s = new rs(this, t);
    return this.addChild(s), s.on("dispose", () => {
      this.removeChild(s);
    }), s.open(), s;
  }
  /**
   * Change breakpoint classes when the player resizes.
   *
   * @private
   */
  updateCurrentBreakpoint_() {
    if (!this.responsive())
      return;
    const e = this.currentBreakpoint(), t = this.currentWidth();
    for (let s = 0; s < Za.length; s++) {
      const r = Za[s], n = this.breakpoints_[r];
      if (t <= n) {
        if (e === r)
          return;
        e && this.removeClass(qr[e]), this.addClass(qr[r]), this.breakpoint_ = r;
        break;
      }
    }
  }
  /**
   * Removes the current breakpoint.
   *
   * @private
   */
  removeCurrentBreakpoint_() {
    const e = this.currentBreakpointClass();
    this.breakpoint_ = "", e && this.removeClass(e);
  }
  /**
   * Get or set breakpoints on the player.
   *
   * Calling this method with an object or `true` will remove any previous
   * custom breakpoints and start from the defaults again.
   *
   * @param  {Object|boolean} [breakpoints]
   *         If an object is given, it can be used to provide custom
   *         breakpoints. If `true` is given, will set default breakpoints.
   *         If this argument is not given, will simply return the current
   *         breakpoints.
   *
   * @param  {number} [breakpoints.tiny]
   *         The maximum width for the "vjs-layout-tiny" class.
   *
   * @param  {number} [breakpoints.xsmall]
   *         The maximum width for the "vjs-layout-x-small" class.
   *
   * @param  {number} [breakpoints.small]
   *         The maximum width for the "vjs-layout-small" class.
   *
   * @param  {number} [breakpoints.medium]
   *         The maximum width for the "vjs-layout-medium" class.
   *
   * @param  {number} [breakpoints.large]
   *         The maximum width for the "vjs-layout-large" class.
   *
   * @param  {number} [breakpoints.xlarge]
   *         The maximum width for the "vjs-layout-x-large" class.
   *
   * @param  {number} [breakpoints.huge]
   *         The maximum width for the "vjs-layout-huge" class.
   *
   * @return {Object}
   *         An object mapping breakpoint names to maximum width values.
   */
  breakpoints(e) {
    return e === void 0 ? Object.assign(this.breakpoints_) : (this.breakpoint_ = "", this.breakpoints_ = Object.assign({}, s2, e), this.updateCurrentBreakpoint_(), Object.assign(this.breakpoints_));
  }
  /**
   * Get or set a flag indicating whether or not this player should adjust
   * its UI based on its dimensions.
   *
   * @param  {boolean} [value]
   *         Should be `true` if the player should adjust its UI based on its
   *         dimensions; otherwise, should be `false`.
   *
   * @return {boolean|undefined}
   *         Will be `true` if this player should adjust its UI based on its
   *         dimensions; otherwise, will be `false`.
   *         Nothing if setting
   */
  responsive(e) {
    if (e === void 0)
      return this.responsive_;
    e = !!e;
    const t = this.responsive_;
    if (e !== t)
      return this.responsive_ = e, e ? (this.on("playerresize", this.boundUpdateCurrentBreakpoint_), this.updateCurrentBreakpoint_()) : (this.off("playerresize", this.boundUpdateCurrentBreakpoint_), this.removeCurrentBreakpoint_()), e;
  }
  /**
   * Get current breakpoint name, if any.
   *
   * @return {string}
   *         If there is currently a breakpoint set, returns a the key from the
   *         breakpoints object matching it. Otherwise, returns an empty string.
   */
  currentBreakpoint() {
    return this.breakpoint_;
  }
  /**
   * Get the current breakpoint class name.
   *
   * @return {string}
   *         The matching class name (e.g. `"vjs-layout-tiny"` or
   *         `"vjs-layout-large"`) for the current breakpoint. Empty string if
   *         there is no current breakpoint.
   */
  currentBreakpointClass() {
    return qr[this.breakpoint_] || "";
  }
  /**
   * An object that describes a single piece of media.
   *
   * Properties that are not part of this type description will be retained; so,
   * this can be viewed as a generic metadata storage mechanism as well.
   *
   * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}
   * @typedef  {Object} Player~MediaObject
   *
   * @property {string} [album]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {string} [artist]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {Object[]} [artwork]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API. If not specified, will be populated via the `poster`, if
   *           available.
   *
   * @property {string} [poster]
   *           URL to an image that will display before playback.
   *
   * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]
   *           A single source object, an array of source objects, or a string
   *           referencing a URL to a media source. It is _highly recommended_
   *           that an object or array of objects is used here, so that source
   *           selection algorithms can take the `type` into account.
   *
   * @property {string} [title]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {Object[]} [textTracks]
   *           An array of objects to be used to create text tracks, following
   *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.
   *           For ease of removal, these will be created as "remote" text
   *           tracks and set to automatically clean up on source changes.
   *
   *           These objects may have properties like `src`, `kind`, `label`,
   *           and `language`, see {@link Tech#createRemoteTextTrack}.
   */
  /**
   * Populate the player using a {@link Player~MediaObject|MediaObject}.
   *
   * @param  {Player~MediaObject} media
   *         A media object.
   *
   * @param  {Function} ready
   *         A callback to be called when the player is ready.
   */
  loadMedia(e, t) {
    if (!e || typeof e != "object")
      return;
    const s = this.crossOrigin();
    this.reset(), this.cache_.media = le(e);
    const {
      artist: r,
      artwork: n,
      description: a,
      poster: l,
      src: u,
      textTracks: f,
      title: m
    } = this.cache_.media;
    !n && l && (this.cache_.media.artwork = [{
      src: l,
      type: sn(l)
    }]), s && this.crossOrigin(s), u && this.src(u), l && this.poster(l), Array.isArray(f) && f.forEach((v) => this.addRemoteTextTrack(v, !1)), this.titleBar && this.titleBar.update({
      title: m,
      description: a || r || ""
    }), this.ready(t);
  }
  /**
   * Get a clone of the current {@link Player~MediaObject} for this player.
   *
   * If the `loadMedia` method has not been used, will attempt to return a
   * {@link Player~MediaObject} based on the current state of the player.
   *
   * @return {Player~MediaObject}
   */
  getMedia() {
    if (!this.cache_.media) {
      const e = this.poster(), t = this.currentSources(), s = Array.prototype.map.call(this.remoteTextTracks(), (n) => ({
        kind: n.kind,
        label: n.label,
        language: n.language,
        src: n.src
      })), r = {
        src: t,
        textTracks: s
      };
      return e && (r.poster = e, r.artwork = [{
        src: r.poster,
        type: sn(r.poster)
      }]), r;
    }
    return le(this.cache_.media);
  }
  /**
   * Gets tag settings
   *
   * @param {Element} tag
   *        The player tag
   *
   * @return {Object}
   *         An object containing all of the settings
   *         for a player tag
   */
  static getTagSettings(e) {
    const t = {
      sources: [],
      tracks: []
    }, s = Wt(e), r = s["data-setup"];
    if (Rs(e, "vjs-fill") && (s.fill = !0), Rs(e, "vjs-fluid") && (s.fluid = !0), r !== null) {
      const [n, a] = qg(r || "{}");
      n && J.error(n), Object.assign(s, a);
    }
    if (Object.assign(t, s), e.hasChildNodes()) {
      const n = e.childNodes;
      for (let a = 0, l = n.length; a < l; a++) {
        const u = n[a], f = u.nodeName.toLowerCase();
        f === "source" ? t.sources.push(Wt(u)) : f === "track" && t.tracks.push(Wt(u));
      }
    }
    return t;
  }
  /**
   * Set debug mode to enable/disable logs at info level.
   *
   * @param {boolean} enabled
   * @fires Player#debugon
   * @fires Player#debugoff
   * @return {boolean|undefined}
   */
  debug(e) {
    if (e === void 0)
      return this.debugEnabled_;
    e ? (this.trigger("debugon"), this.previousLogLevel_ = this.log.level, this.log.level("debug"), this.debugEnabled_ = !0) : (this.trigger("debugoff"), this.log.level(this.previousLogLevel_), this.previousLogLevel_ = void 0, this.debugEnabled_ = !1);
  }
  /**
   * Set or get current playback rates.
   * Takes an array and updates the playback rates menu with the new items.
   * Pass in an empty array to hide the menu.
   * Values other than arrays are ignored.
   *
   * @fires Player#playbackrateschange
   * @param {number[]} [newRates]
   *                   The new rates that the playback rates menu should update to.
   *                   An empty array will hide the menu
   * @return {number[]} When used as a getter will return the current playback rates
   */
  playbackRates(e) {
    if (e === void 0)
      return this.cache_.playbackRates;
    Array.isArray(e) && e.every((t) => typeof t == "number") && (this.cache_.playbackRates = e, this.trigger("playbackrateschange"));
  }
}
Re.names.forEach(function(i) {
  const e = Re[i];
  he.prototype[e.getterName] = function() {
    return this.tech_ ? this.tech_[e.getterName]() : (this[e.privateName] = this[e.privateName] || new e.ListClass(), this[e.privateName]);
  };
});
he.prototype.crossorigin = he.prototype.crossOrigin;
he.players = {};
const ws = E.navigator;
he.prototype.options_ = {
  // Default order of fallback technology
  techOrder: X.defaultTechOrder_,
  html5: {},
  // enable sourceset by default
  enableSourceset: !0,
  // default inactivity timeout
  inactivityTimeout: 2e3,
  // default playback rates
  playbackRates: [],
  // Add playback rate selection by adding rates
  // 'playbackRates': [0.5, 1, 1.5, 2],
  liveui: !1,
  // Included control sets
  children: ["mediaLoader", "posterImage", "titleBar", "textTrackDisplay", "loadingSpinner", "bigPlayButton", "liveTracker", "controlBar", "errorDisplay", "textTrackSettings", "resizeManager"],
  language: ws && (ws.languages && ws.languages[0] || ws.userLanguage || ws.language) || "en",
  // locales and their language translations
  languages: {},
  // Default message to show when a video cannot be played.
  notSupportedMessage: "No compatible source was found for this media.",
  normalizeAutoplay: !1,
  fullscreen: {
    options: {
      navigationUI: "hide"
    }
  },
  breakpoints: {},
  responsive: !1,
  audioOnlyMode: !1,
  audioPosterMode: !1,
  // Default smooth seeking to false
  enableSmoothSeeking: !1
};
Zh.forEach(function(i) {
  he.prototype[`handleTech${ye(i)}_`] = function() {
    return this.trigger(i);
  };
});
N.registerComponent("Player", he);
const rn = "plugin", Bi = "activePlugins_", Li = {}, nn = (i) => Li.hasOwnProperty(i), $r = (i) => nn(i) ? Li[i] : void 0, ef = (i, e) => {
  i[Bi] = i[Bi] || {}, i[Bi][e] = !0;
}, an = (i, e, t) => {
  const s = (t ? "before" : "") + "pluginsetup";
  i.trigger(s, e), i.trigger(s + ":" + e.name, e);
}, r2 = function(i, e) {
  const t = function() {
    an(this, {
      name: i,
      plugin: e,
      instance: null
    }, !0);
    const s = e.apply(this, arguments);
    return ef(this, i), an(this, {
      name: i,
      plugin: e,
      instance: s
    }), s;
  };
  return Object.keys(e).forEach(function(s) {
    t[s] = e[s];
  }), t;
}, mc = (i, e) => (e.prototype.name = i, function(...t) {
  an(this, {
    name: i,
    plugin: e,
    instance: null
  }, !0);
  const s = new e(this, ...t);
  return this[i] = () => s, an(this, s.getEventHash()), s;
});
class He {
  /**
   * Creates an instance of this class.
   *
   * Sub-classes should call `super` to ensure plugins are properly initialized.
   *
   * @param {Player} player
   *        A Video.js player instance.
   */
  constructor(e) {
    if (this.constructor === He)
      throw new Error("Plugin must be sub-classed; not directly instantiated.");
    this.player = e, this.log || (this.log = this.player.log.createLogger(this.name)), Uo(this), delete this.trigger, vh(this, this.constructor.defaultState), ef(e, this.name), this.dispose = this.dispose.bind(this), e.on("dispose", this.dispose);
  }
  /**
   * Get the version of the plugin that was set on <pluginName>.VERSION
   */
  version() {
    return this.constructor.VERSION;
  }
  /**
   * Each event triggered by plugins includes a hash of additional data with
   * conventional properties.
   *
   * This returns that object or mutates an existing hash.
   *
   * @param   {Object} [hash={}]
   *          An object to be used as event an event hash.
   *
   * @return {PluginEventHash}
   *          An event hash object with provided properties mixed-in.
   */
  getEventHash(e = {}) {
    return e.name = this.name, e.plugin = this.constructor, e.instance = this, e;
  }
  /**
   * Triggers an event on the plugin object and overrides
   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash={}]
   *          Additional data hash to merge with a
   *          {@link PluginEventHash|PluginEventHash}.
   *
   * @return {boolean}
   *          Whether or not default was prevented.
   */
  trigger(e, t = {}) {
    return ss(this.eventBusEl_, e, this.getEventHash(t));
  }
  /**
   * Handles "statechanged" events on the plugin. No-op by default, override by
   * subclassing.
   *
   * @abstract
   * @param    {Event} e
   *           An event object provided by a "statechanged" event.
   *
   * @param    {Object} e.changes
   *           An object describing changes that occurred with the "statechanged"
   *           event.
   */
  handleStateChanged(e) {
  }
  /**
   * Disposes a plugin.
   *
   * Subclasses can override this if they want, but for the sake of safety,
   * it's probably best to subscribe the "dispose" event.
   *
   * @fires Plugin#dispose
   */
  dispose() {
    const {
      name: e,
      player: t
    } = this;
    this.trigger("dispose"), this.off(), t.off("dispose", this.dispose), t[Bi][e] = !1, this.player = this.state = null, t[e] = mc(e, Li[e]);
  }
  /**
   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
   *
   * @param   {string|Function} plugin
   *          If a string, matches the name of a plugin. If a function, will be
   *          tested directly.
   *
   * @return {boolean}
   *          Whether or not a plugin is a basic plugin.
   */
  static isBasic(e) {
    const t = typeof e == "string" ? $r(e) : e;
    return typeof t == "function" && !He.prototype.isPrototypeOf(t.prototype);
  }
  /**
   * Register a Video.js plugin.
   *
   * @param   {string} name
   *          The name of the plugin to be registered. Must be a string and
   *          must not match an existing plugin or a method on the `Player`
   *          prototype.
   *
   * @param   {typeof Plugin|Function} plugin
   *          A sub-class of `Plugin` or a function for basic plugins.
   *
   * @return {typeof Plugin|Function}
   *          For advanced plugins, a factory function for that plugin. For
   *          basic plugins, a wrapper function that initializes the plugin.
   */
  static registerPlugin(e, t) {
    if (typeof e != "string")
      throw new Error(`Illegal plugin name, "${e}", must be a string, was ${typeof e}.`);
    if (nn(e))
      J.warn(`A plugin named "${e}" already exists. You may want to avoid re-registering plugins!`);
    else if (he.prototype.hasOwnProperty(e))
      throw new Error(`Illegal plugin name, "${e}", cannot share a name with an existing player method!`);
    if (typeof t != "function")
      throw new Error(`Illegal plugin for "${e}", must be a function, was ${typeof t}.`);
    return Li[e] = t, e !== rn && (He.isBasic(t) ? he.prototype[e] = r2(e, t) : he.prototype[e] = mc(e, t)), t;
  }
  /**
   * De-register a Video.js plugin.
   *
   * @param  {string} name
   *         The name of the plugin to be de-registered. Must be a string that
   *         matches an existing plugin.
   *
   * @throws {Error}
   *         If an attempt is made to de-register the base plugin.
   */
  static deregisterPlugin(e) {
    if (e === rn)
      throw new Error("Cannot de-register base plugin.");
    nn(e) && (delete Li[e], delete he.prototype[e]);
  }
  /**
   * Gets an object containing multiple Video.js plugins.
   *
   * @param   {Array} [names]
   *          If provided, should be an array of plugin names. Defaults to _all_
   *          plugin names.
   *
   * @return {Object|undefined}
   *          An object containing plugin(s) associated with their name(s) or
   *          `undefined` if no matching plugins exist).
   */
  static getPlugins(e = Object.keys(Li)) {
    let t;
    return e.forEach((s) => {
      const r = $r(s);
      r && (t = t || {}, t[s] = r);
    }), t;
  }
  /**
   * Gets a plugin's version, if available
   *
   * @param   {string} name
   *          The name of a plugin.
   *
   * @return {string}
   *          The plugin's version or an empty string.
   */
  static getPluginVersion(e) {
    const t = $r(e);
    return t && t.VERSION || "";
  }
}
He.getPlugin = $r;
He.BASE_PLUGIN_NAME = rn;
He.registerPlugin(rn, He);
he.prototype.usingPlugin = function(i) {
  return !!this[Bi] && this[Bi][i] === !0;
};
he.prototype.hasPlugin = function(i) {
  return !!nn(i);
};
function n2(i, e) {
  let t = !1;
  return function(...s) {
    return t || J.warn(i), t = !0, e.apply(this, s);
  };
}
function ft(i, e, t, s) {
  return n2(`${e} is deprecated and will be removed in ${i}.0; please use ${t} instead.`, s);
}
var a2 = {
  UnsupportedSidxContainer: "unsupported-sidx-container-error",
  DashManifestSidxParsingError: "dash-manifest-sidx-parsing-error",
  HlsPlaylistRequestError: "hls-playlist-request-error",
  SegmentUnsupportedMediaFormat: "segment-unsupported-media-format-error",
  UnsupportedMediaInitialization: "unsupported-media-initialization-error",
  SegmentSwitchError: "segment-switch-error",
  SegmentExceedsSourceBufferQuota: "segment-exceeds-source-buffer-quota-error",
  SegmentAppendError: "segment-append-error",
  VttLoadError: "vtt-load-error",
  VttCueParsingError: "vtt-cue-parsing-error",
  // Errors used in contrib-ads:
  AdsBeforePrerollError: "ads-before-preroll-error",
  AdsPrerollError: "ads-preroll-error",
  AdsMidrollError: "ads-midroll-error",
  AdsPostrollError: "ads-postroll-error",
  AdsMacroReplacementFailed: "ads-macro-replacement-failed",
  AdsResumeContentFailed: "ads-resume-content-failed",
  // Errors used in contrib-eme:
  EMEFailedToRequestMediaKeySystemAccess: "eme-failed-request-media-key-system-access",
  EMEFailedToCreateMediaKeys: "eme-failed-create-media-keys",
  EMEFailedToAttachMediaKeysToVideoElement: "eme-failed-attach-media-keys-to-video",
  EMEFailedToCreateMediaKeySession: "eme-failed-create-media-key-session",
  EMEFailedToSetServerCertificate: "eme-failed-set-server-certificate",
  EMEFailedToGenerateLicenseRequest: "eme-failed-generate-license-request",
  EMEFailedToUpdateSessionWithReceivedLicenseKeys: "eme-failed-update-session",
  EMEFailedToCloseSession: "eme-failed-close-session",
  EMEFailedToRemoveKeysFromSession: "eme-failed-remove-keys",
  EMEFailedToLoadSessionBySessionId: "eme-failed-load-session"
};
const tf = (i) => i.indexOf("#") === 0 ? i.slice(1) : i;
function L(i, e, t) {
  let s = L.getPlayer(i);
  if (s)
    return e && J.warn(`Player "${i}" is already initialised. Options will not be applied.`), t && s.ready(t), s;
  const r = typeof i == "string" ? Kt("#" + tf(i)) : i;
  if (!is(r))
    throw new TypeError("The element or ID supplied is not valid. (videojs)");
  const a = ("getRootNode" in r ? r.getRootNode() instanceof E.ShadowRoot : !1) ? r.getRootNode() : r.ownerDocument.body;
  (!r.ownerDocument.defaultView || !a.contains(r)) && J.warn("The element supplied is not included in the DOM"), e = e || {}, e.restoreEl === !0 && (e.restoreEl = (r.parentNode && r.parentNode.hasAttribute("data-vjs-player") ? r.parentNode : r).cloneNode(!0)), Xt("beforesetup").forEach((u) => {
    const f = u(r, le(e));
    if (!Et(f) || Array.isArray(f)) {
      J.error("please return an object in beforesetup hooks");
      return;
    }
    e = le(e, f);
  });
  const l = N.getComponent("Player");
  return s = new l(r, e, t), Xt("setup").forEach((u) => u(s)), s;
}
L.hooks_ = Ot;
L.hooks = Xt;
L.hook = qy;
L.hookOnce = $y;
L.removeHook = $d;
if (E.VIDEOJS_NO_DYNAMIC_STYLE !== !0 && ts()) {
  let i = Kt(".vjs-styles-defaults");
  if (!i) {
    i = hh("vjs-styles-defaults");
    const e = Kt("head");
    e && e.insertBefore(i, e.firstChild), fh(i, `
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: 56.25%
      }
    `);
  }
}
Ga(1, L);
L.VERSION = Fa;
L.options = he.prototype.options_;
L.getPlayers = () => he.players;
L.getPlayer = (i) => {
  const e = he.players;
  let t;
  if (typeof i == "string") {
    const s = tf(i), r = e[s];
    if (r)
      return r;
    t = Kt("#" + s);
  } else
    t = i;
  if (is(t)) {
    const {
      player: s,
      playerId: r
    } = t;
    if (s || e[r])
      return s || e[r];
  }
};
L.getAllPlayers = () => (
  // Disposed players leave a key with a `null` value, so we need to make sure
  // we filter those out.
  Object.keys(he.players).map((i) => he.players[i]).filter(Boolean)
);
L.players = he.players;
L.getComponent = N.getComponent;
L.registerComponent = (i, e) => (X.isTech(e) && J.warn(`The ${i} tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)`), N.registerComponent.call(N, i, e));
L.getTech = X.getTech;
L.registerTech = X.registerTech;
L.use = g_;
Object.defineProperty(L, "middleware", {
  value: {},
  writeable: !1,
  enumerable: !0
});
Object.defineProperty(L.middleware, "TERMINATOR", {
  value: tn,
  writeable: !1,
  enumerable: !0
});
L.browser = Qd;
L.obj = zy;
L.mergeOptions = ft(9, "videojs.mergeOptions", "videojs.obj.merge", le);
L.defineLazyProperty = ft(9, "videojs.defineLazyProperty", "videojs.obj.defineLazyProperty", Sn);
L.bind = ft(9, "videojs.bind", "native Function.prototype.bind", ue);
L.registerPlugin = He.registerPlugin;
L.deregisterPlugin = He.deregisterPlugin;
L.plugin = (i, e) => (J.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"), He.registerPlugin(i, e));
L.getPlugins = He.getPlugins;
L.getPlugin = He.getPlugin;
L.getPluginVersion = He.getPluginVersion;
L.addLanguage = function(i, e) {
  return i = ("" + i).toLowerCase(), L.options.languages = le(L.options.languages, {
    [i]: e
  }), L.options.languages[i];
};
L.log = J;
L.createLogger = Vd;
L.time = n_;
L.createTimeRange = ft(9, "videojs.createTimeRange", "videojs.time.createTimeRanges", dt);
L.createTimeRanges = ft(9, "videojs.createTimeRanges", "videojs.time.createTimeRanges", dt);
L.formatTime = ft(9, "videojs.formatTime", "videojs.time.formatTime", _i);
L.setFormatTime = ft(9, "videojs.setFormatTime", "videojs.time.setFormatTime", Th);
L.resetFormatTime = ft(9, "videojs.resetFormatTime", "videojs.time.resetFormatTime", bh);
L.parseUrl = ft(9, "videojs.parseUrl", "videojs.url.parseUrl", Vo);
L.isCrossOrigin = ft(9, "videojs.isCrossOrigin", "videojs.url.isCrossOrigin", Rn);
L.EventTarget = nt;
L.any = Fo;
L.on = Ze;
L.one = On;
L.off = Pe;
L.trigger = ss;
L.xhr = Gc;
L.TextTrack = er;
L.AudioTrack = Ch;
L.VideoTrack = wh;
["isEl", "isTextNode", "createEl", "hasClass", "addClass", "removeClass", "toggleClass", "setAttributes", "getAttributes", "emptyEl", "appendContent", "insertContent"].forEach((i) => {
  L[i] = function() {
    return J.warn(`videojs.${i}() is deprecated; use videojs.dom.${i}() instead`), ch[i].apply(null, arguments);
  };
});
L.computedStyle = ft(9, "videojs.computedStyle", "videojs.dom.computedStyle", Qi);
L.dom = ch;
L.fn = Zy;
L.num = N_;
L.str = s_;
L.url = p_;
L.Error = a2;
/*! @name videojs-contrib-quality-levels @version 4.1.0 @license Apache-2.0 */
class o2 {
  /**
   * Creates a QualityLevel
   *
   * @param {Representation|Object} representation The representation of the quality level
   * @param {string}   representation.id        Unique id of the QualityLevel
   * @param {number=}  representation.width     Resolution width of the QualityLevel
   * @param {number=}  representation.height    Resolution height of the QualityLevel
   * @param {number}   representation.bandwidth Bitrate of the QualityLevel
   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel
   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel
   */
  constructor(e) {
    let t = this;
    return t.id = e.id, t.label = t.id, t.width = e.width, t.height = e.height, t.bitrate = e.bandwidth, t.frameRate = e.frameRate, t.enabled_ = e.enabled, Object.defineProperty(t, "enabled", {
      /**
       * Get whether the QualityLevel is enabled.
       *
       * @return {boolean} True if the QualityLevel is enabled.
       */
      get() {
        return t.enabled_();
      },
      /**
       * Enable or disable the QualityLevel.
       *
       * @param {boolean} enable true to enable QualityLevel, false to disable.
       */
      set(s) {
        t.enabled_(s);
      }
    }), t;
  }
}
class on extends L.EventTarget {
  /**
   * Creates a QualityLevelList.
   */
  constructor() {
    super();
    let e = this;
    return e.levels_ = [], e.selectedIndex_ = -1, Object.defineProperty(e, "selectedIndex", {
      get() {
        return e.selectedIndex_;
      }
    }), Object.defineProperty(e, "length", {
      get() {
        return e.levels_.length;
      }
    }), e[Symbol.iterator] = () => e.levels_.values(), e;
  }
  /**
   * Adds a quality level to the list.
   *
   * @param {Representation|Object} representation The representation of the quality level
   * @param {string}   representation.id        Unique id of the QualityLevel
   * @param {number=}  representation.width     Resolution width of the QualityLevel
   * @param {number=}  representation.height    Resolution height of the QualityLevel
   * @param {number}   representation.bandwidth Bitrate of the QualityLevel
   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel
   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel
   * @return {QualityLevel} the QualityLevel added to the list
   * @method addQualityLevel
   */
  addQualityLevel(e) {
    let t = this.getQualityLevelById(e.id);
    if (t)
      return t;
    const s = this.levels_.length;
    return t = new o2(e), "" + s in this || Object.defineProperty(this, s, {
      get() {
        return this.levels_[s];
      }
    }), this.levels_.push(t), this.trigger({
      qualityLevel: t,
      type: "addqualitylevel"
    }), t;
  }
  /**
   * Removes a quality level from the list.
   *
   * @param {QualityLevel} qualityLevel The QualityLevel to remove from the list.
   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed
   * @method removeQualityLevel
   */
  removeQualityLevel(e) {
    let t = null;
    for (let s = 0, r = this.length; s < r; s++)
      if (this[s] === e) {
        t = this.levels_.splice(s, 1)[0], this.selectedIndex_ === s ? this.selectedIndex_ = -1 : this.selectedIndex_ > s && this.selectedIndex_--;
        break;
      }
    return t && this.trigger({
      qualityLevel: e,
      type: "removequalitylevel"
    }), t;
  }
  /**
   * Searches for a QualityLevel with the given id.
   *
   * @param {string} id The id of the QualityLevel to find.
   * @return {QualityLevel|null} The QualityLevel with id, or null if not found.
   * @method getQualityLevelById
   */
  getQualityLevelById(e) {
    for (let t = 0, s = this.length; t < s; t++) {
      const r = this[t];
      if (r.id === e)
        return r;
    }
    return null;
  }
  /**
   * Resets the list of QualityLevels to empty
   *
   * @method dispose
   */
  dispose() {
    this.selectedIndex_ = -1, this.levels_.length = 0;
  }
}
on.prototype.allowedEvents_ = {
  change: "change",
  addqualitylevel: "addqualitylevel",
  removequalitylevel: "removequalitylevel"
};
for (const i in on.prototype.allowedEvents_)
  on.prototype["on" + i] = null;
var sf = "4.1.0";
const l2 = function(i, e) {
  const t = i.qualityLevels, s = new on(), r = function() {
    s.dispose(), i.qualityLevels = t, i.off("dispose", r);
  };
  return i.on("dispose", r), i.qualityLevels = () => s, i.qualityLevels.VERSION = sf, s;
}, rf = function(i) {
  return l2(this, L.obj.merge({}, i));
};
L.registerPlugin("qualityLevels", rf);
rf.VERSION = sf;
/*! @name @videojs/http-streaming @version 3.12.1 @license Apache-2.0 */
const $e = gn, ln = (i, e) => e && e.responseURL && i !== e.responseURL ? e.responseURL : i, ot = (i) => L.log.debug ? L.log.debug.bind(L, "VHS:", `${i} >`) : function() {
};
function ie(...i) {
  const e = L.obj || L;
  return (e.merge || e.mergeOptions).apply(e, i);
}
function Ie(...i) {
  const e = L.time || L;
  return (e.createTimeRanges || e.createTimeRanges).apply(e, i);
}
function u2(i) {
  if (i.length === 0)
    return "Buffered Ranges are empty";
  let e = `Buffered Ranges: 
`;
  for (let t = 0; t < i.length; t++) {
    const s = i.start(t), r = i.end(t);
    e += `${s} --> ${r}. Duration (${r - s})
`;
  }
  return e;
}
const yt = 1 / 30, _t = yt * 3, nf = function(i, e) {
  const t = [];
  let s;
  if (i && i.length)
    for (s = 0; s < i.length; s++)
      e(i.start(s), i.end(s)) && t.push([i.start(s), i.end(s)]);
  return Ie(t);
}, Oi = function(i, e) {
  return nf(i, function(t, s) {
    return t - _t <= e && s + _t >= e;
  });
}, Nr = function(i, e) {
  return nf(i, function(t) {
    return t - yt >= e;
  });
}, c2 = function(i) {
  if (i.length < 2)
    return Ie();
  const e = [];
  for (let t = 1; t < i.length; t++) {
    const s = i.end(t - 1), r = i.start(t);
    e.push([s, r]);
  }
  return Ie(e);
}, d2 = function(i, e) {
  let t = null, s = null, r = 0;
  const n = [], a = [];
  if (!i || !i.length || !e || !e.length)
    return Ie();
  let l = i.length;
  for (; l--; )
    n.push({
      time: i.start(l),
      type: "start"
    }), n.push({
      time: i.end(l),
      type: "end"
    });
  for (l = e.length; l--; )
    n.push({
      time: e.start(l),
      type: "start"
    }), n.push({
      time: e.end(l),
      type: "end"
    });
  for (n.sort(function(u, f) {
    return u.time - f.time;
  }), l = 0; l < n.length; l++)
    n[l].type === "start" ? (r++, r === 2 && (t = n[l].time)) : n[l].type === "end" && (r--, r === 1 && (s = n[l].time)), t !== null && s !== null && (a.push([t, s]), t = null, s = null);
  return Ie(a);
}, af = (i) => {
  const e = [];
  if (!i || !i.length)
    return "";
  for (let t = 0; t < i.length; t++)
    e.push(i.start(t) + " => " + i.end(t));
  return e.join(", ");
}, h2 = function(i, e, t = 1) {
  return ((i.length ? i.end(i.length - 1) : 0) - e) / t;
}, pi = (i) => {
  const e = [];
  for (let t = 0; t < i.length; t++)
    e.push({
      start: i.start(t),
      end: i.end(t)
    });
  return e;
}, f2 = function(i, e) {
  if (i === e)
    return !1;
  if (!i && e || !e && i || i.length !== e.length)
    return !0;
  for (let t = 0; t < i.length; t++)
    if (i.start(t) !== e.start(t) || i.end(t) !== e.end(t))
      return !0;
  return !1;
}, Aa = function(i) {
  if (!(!i || !i.length || !i.end))
    return i.end(i.length - 1);
}, ol = function(i, e) {
  let t = 0;
  if (!i || !i.length)
    return t;
  for (let s = 0; s < i.length; s++) {
    const r = i.start(s), n = i.end(s);
    if (!(e > n)) {
      if (e > r && e <= n) {
        t += n - e;
        continue;
      }
      t += n - r;
    }
  }
  return t;
}, ll = (i, e) => {
  if (!e.preload)
    return e.duration;
  let t = 0;
  return (e.parts || []).forEach(function(s) {
    t += s.duration;
  }), (e.preloadHints || []).forEach(function(s) {
    s.type === "PART" && (t += i.partTargetDuration);
  }), t;
}, eo = (i) => (i.segments || []).reduce((e, t, s) => (t.parts ? t.parts.forEach(function(r, n) {
  e.push({
    duration: r.duration,
    segmentIndex: s,
    partIndex: n,
    part: r,
    segment: t
  });
}) : e.push({
  duration: t.duration,
  segmentIndex: s,
  partIndex: null,
  segment: t,
  part: null
}), e), []), of = (i) => {
  const e = i.segments && i.segments.length && i.segments[i.segments.length - 1];
  return e && e.parts || [];
}, lf = ({
  preloadSegment: i
}) => {
  if (!i)
    return;
  const {
    parts: e,
    preloadHints: t
  } = i;
  let s = (t || []).reduce((r, n) => r + (n.type === "PART" ? 1 : 0), 0);
  return s += e && e.length ? e.length : 0, s;
}, uf = (i, e) => {
  if (e.endList)
    return 0;
  if (i && i.suggestedPresentationDelay)
    return i.suggestedPresentationDelay;
  const t = of(e).length > 0;
  return t && e.serverControl && e.serverControl.partHoldBack ? e.serverControl.partHoldBack : t && e.partTargetDuration ? e.partTargetDuration * 3 : e.serverControl && e.serverControl.holdBack ? e.serverControl.holdBack : e.targetDuration ? e.targetDuration * 3 : 0;
}, p2 = function(i, e) {
  let t = 0, s = e - i.mediaSequence, r = i.segments[s];
  if (r) {
    if (typeof r.start < "u")
      return {
        result: r.start,
        precise: !0
      };
    if (typeof r.end < "u")
      return {
        result: r.end - r.duration,
        precise: !0
      };
  }
  for (; s--; ) {
    if (r = i.segments[s], typeof r.end < "u")
      return {
        result: t + r.end,
        precise: !0
      };
    if (t += ll(i, r), typeof r.start < "u")
      return {
        result: t + r.start,
        precise: !0
      };
  }
  return {
    result: t,
    precise: !1
  };
}, m2 = function(i, e) {
  let t = 0, s, r = e - i.mediaSequence;
  for (; r < i.segments.length; r++) {
    if (s = i.segments[r], typeof s.start < "u")
      return {
        result: s.start - t,
        precise: !0
      };
    if (t += ll(i, s), typeof s.end < "u")
      return {
        result: s.end - t,
        precise: !0
      };
  }
  return {
    result: -1,
    precise: !1
  };
}, cf = function(i, e, t) {
  if (typeof e > "u" && (e = i.mediaSequence + i.segments.length), e < i.mediaSequence)
    return 0;
  const s = p2(i, e);
  if (s.precise)
    return s.result;
  const r = m2(i, e);
  return r.precise ? r.result : s.result + t;
}, df = function(i, e, t) {
  if (!i)
    return 0;
  if (typeof t != "number" && (t = 0), typeof e > "u") {
    if (i.totalDuration)
      return i.totalDuration;
    if (!i.endList)
      return E.Infinity;
  }
  return cf(i, e, t);
}, Bs = function({
  defaultDuration: i,
  durationList: e,
  startIndex: t,
  endIndex: s
}) {
  let r = 0;
  if (t > s && ([t, s] = [s, t]), t < 0) {
    for (let n = t; n < Math.min(0, s); n++)
      r += i;
    t = 0;
  }
  for (let n = t; n < s; n++)
    r += e[n].duration;
  return r;
}, hf = function(i, e, t, s) {
  if (!i || !i.segments)
    return null;
  if (i.endList)
    return df(i);
  if (e === null)
    return null;
  e = e || 0;
  let r = cf(i, i.mediaSequence + i.segments.length, e);
  return t && (s = typeof s == "number" ? s : uf(null, i), r -= s), Math.max(0, r);
}, g2 = function(i, e, t) {
  const r = e || 0;
  let n = hf(i, e, !0, t);
  return n === null ? Ie() : (n < r && (n = r), Ie(r, n));
}, v2 = function({
  playlist: i,
  currentTime: e,
  startingSegmentIndex: t,
  startingPartIndex: s,
  startTime: r,
  exactManifestTimings: n
}) {
  let a = e - r;
  const l = eo(i);
  let u = 0;
  for (let f = 0; f < l.length; f++) {
    const m = l[f];
    if (t === m.segmentIndex && !(typeof s == "number" && typeof m.partIndex == "number" && s !== m.partIndex)) {
      u = f;
      break;
    }
  }
  if (a < 0) {
    if (u > 0)
      for (let f = u - 1; f >= 0; f--) {
        const m = l[f];
        if (a += m.duration, n) {
          if (a < 0)
            continue;
        } else if (a + yt <= 0)
          continue;
        return {
          partIndex: m.partIndex,
          segmentIndex: m.segmentIndex,
          startTime: r - Bs({
            defaultDuration: i.targetDuration,
            durationList: l,
            startIndex: u,
            endIndex: f
          })
        };
      }
    return {
      partIndex: l[0] && l[0].partIndex || null,
      segmentIndex: l[0] && l[0].segmentIndex || 0,
      startTime: e
    };
  }
  if (u < 0) {
    for (let f = u; f < 0; f++)
      if (a -= i.targetDuration, a < 0)
        return {
          partIndex: l[0] && l[0].partIndex || null,
          segmentIndex: l[0] && l[0].segmentIndex || 0,
          startTime: e
        };
    u = 0;
  }
  for (let f = u; f < l.length; f++) {
    const m = l[f];
    a -= m.duration;
    const v = m.duration > yt, b = a === 0, S = v && a + yt >= 0;
    if (!((b || S) && f !== l.length - 1)) {
      if (n) {
        if (a > 0)
          continue;
      } else if (a - yt >= 0)
        continue;
      return {
        partIndex: m.partIndex,
        segmentIndex: m.segmentIndex,
        startTime: r + Bs({
          defaultDuration: i.targetDuration,
          durationList: l,
          startIndex: u,
          endIndex: f
        })
      };
    }
  }
  return {
    segmentIndex: l[l.length - 1].segmentIndex,
    partIndex: l[l.length - 1].partIndex,
    startTime: e
  };
}, ff = function(i) {
  return i.excludeUntil && i.excludeUntil > Date.now();
}, ul = function(i) {
  return i.excludeUntil && i.excludeUntil === 1 / 0;
}, Bn = function(i) {
  const e = ff(i);
  return !i.disabled && !e;
}, y2 = function(i) {
  return i.disabled;
}, _2 = function(i) {
  for (let e = 0; e < i.segments.length; e++)
    if (i.segments[e].key)
      return !0;
  return !1;
}, pf = function(i, e) {
  return e.attributes && e.attributes[i];
}, T2 = function(i, e, t, s = 0) {
  return pf("BANDWIDTH", t) ? (i * t.attributes.BANDWIDTH - s * 8) / e : NaN;
}, to = (i, e) => {
  if (i.playlists.length === 1)
    return !0;
  const t = e.attributes.BANDWIDTH || Number.MAX_VALUE;
  return i.playlists.filter((s) => Bn(s) ? (s.attributes.BANDWIDTH || 0) < t : !1).length === 0;
}, cl = (i, e) => !i && !e || !i && e || i && !e ? !1 : !!(i === e || i.id && e.id && i.id === e.id || i.resolvedUri && e.resolvedUri && i.resolvedUri === e.resolvedUri || i.uri && e.uri && i.uri === e.uri), gc = function(i, e) {
  const t = i && i.mediaGroups && i.mediaGroups.AUDIO || {};
  let s = !1;
  for (const r in t) {
    for (const n in t[r])
      if (s = e(t[r][n]), s)
        break;
    if (s)
      break;
  }
  return !!s;
}, rr = (i) => {
  if (!i || !i.playlists || !i.playlists.length)
    return gc(i, (t) => t.playlists && t.playlists.length || t.uri);
  for (let e = 0; e < i.playlists.length; e++) {
    const t = i.playlists[e], s = t.attributes && t.attributes.CODECS;
    if (!(s && s.split(",").every((n) => Jc(n)) || gc(i, (n) => cl(t, n))))
      return !1;
  }
  return !0;
};
var Ve = {
  liveEdgeDelay: uf,
  duration: df,
  seekable: g2,
  getMediaInfoForTime: v2,
  isEnabled: Bn,
  isDisabled: y2,
  isExcluded: ff,
  isIncompatible: ul,
  playlistEnd: hf,
  isAes: _2,
  hasAttribute: pf,
  estimateSegmentRequestTime: T2,
  isLowestEnabledRendition: to,
  isAudioOnly: rr,
  playlistMatch: cl,
  segmentDurationWithParts: ll
};
const {
  log: mf
} = L, Fi = (i, e) => `${i}-${e}`, gf = (i, e, t) => `placeholder-uri-${i}-${e}-${t}`, b2 = ({
  onwarn: i,
  oninfo: e,
  manifestString: t,
  customTagParsers: s = [],
  customTagMappers: r = [],
  llhls: n
}) => {
  const a = new B0();
  i && a.on("warn", i), e && a.on("info", e), s.forEach((f) => a.addParser(f)), r.forEach((f) => a.addTagMapper(f)), a.push(t), a.end();
  const l = a.manifest;
  if (n || (["preloadSegment", "skip", "serverControl", "renditionReports", "partInf", "partTargetDuration"].forEach(function(f) {
    l.hasOwnProperty(f) && delete l[f];
  }), l.segments && l.segments.forEach(function(f) {
    ["parts", "preloadHints"].forEach(function(m) {
      f.hasOwnProperty(m) && delete f[m];
    });
  })), !l.targetDuration) {
    let f = 10;
    l.segments && l.segments.length && (f = l.segments.reduce((m, v) => Math.max(m, v.duration), 0)), i && i({
      message: `manifest has no targetDuration defaulting to ${f}`
    }), l.targetDuration = f;
  }
  const u = of(l);
  if (u.length && !l.partTargetDuration) {
    const f = u.reduce((m, v) => Math.max(m, v.duration), 0);
    i && (i({
      message: `manifest has no partTargetDuration defaulting to ${f}`
    }), mf.error("LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.")), l.partTargetDuration = f;
  }
  return l;
}, os = (i, e) => {
  i.mediaGroups && ["AUDIO", "SUBTITLES"].forEach((t) => {
    if (i.mediaGroups[t])
      for (const s in i.mediaGroups[t])
        for (const r in i.mediaGroups[t][s]) {
          const n = i.mediaGroups[t][s][r];
          e(n, t, s, r);
        }
  });
}, vf = ({
  playlist: i,
  uri: e,
  id: t
}) => {
  i.id = t, i.playlistErrors_ = 0, e && (i.uri = e), i.attributes = i.attributes || {};
}, x2 = (i) => {
  let e = i.playlists.length;
  for (; e--; ) {
    const t = i.playlists[e];
    vf({
      playlist: t,
      id: Fi(e, t.uri)
    }), t.resolvedUri = $e(i.uri, t.uri), i.playlists[t.id] = t, i.playlists[t.uri] = t, t.attributes.BANDWIDTH || mf.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.");
  }
}, S2 = (i) => {
  os(i, (e) => {
    e.uri && (e.resolvedUri = $e(i.uri, e.uri));
  });
}, E2 = (i, e) => {
  const t = Fi(0, e), s = {
    mediaGroups: {
      AUDIO: {},
      VIDEO: {},
      "CLOSED-CAPTIONS": {},
      SUBTITLES: {}
    },
    uri: E.location.href,
    resolvedUri: E.location.href,
    playlists: [{
      uri: e,
      id: t,
      resolvedUri: e,
      // m3u8-parser does not attach an attributes property to media playlists so make
      // sure that the property is attached to avoid undefined reference errors
      attributes: {}
    }]
  };
  return s.playlists[t] = s.playlists[0], s.playlists[e] = s.playlists[0], s;
}, yf = (i, e, t = gf) => {
  i.uri = e;
  for (let r = 0; r < i.playlists.length; r++)
    if (!i.playlists[r].uri) {
      const n = `placeholder-uri-${r}`;
      i.playlists[r].uri = n;
    }
  const s = rr(i);
  os(i, (r, n, a, l) => {
    if (!r.playlists || !r.playlists.length) {
      if (s && n === "AUDIO" && !r.uri)
        for (let u = 0; u < i.playlists.length; u++) {
          const f = i.playlists[u];
          if (f.attributes && f.attributes.AUDIO && f.attributes.AUDIO === a)
            return;
        }
      r.playlists = [it({}, r)];
    }
    r.playlists.forEach(function(u, f) {
      const m = t(n, a, l, u), v = Fi(f, m);
      u.uri ? u.resolvedUri = u.resolvedUri || $e(i.uri, u.uri) : (u.uri = f === 0 ? m : v, u.resolvedUri = u.uri), u.id = u.id || v, u.attributes = u.attributes || {}, i.playlists[u.id] = u, i.playlists[u.uri] = u;
    });
  }), x2(i), S2(i);
};
class vc {
  constructor() {
    this.offset_ = null, this.pendingDateRanges_ = /* @__PURE__ */ new Map(), this.processedDateRanges_ = /* @__PURE__ */ new Map();
  }
  setOffset(e = []) {
    if (this.offset_ !== null || !e.length)
      return;
    const [t] = e;
    t.programDateTime !== void 0 && (this.offset_ = t.programDateTime / 1e3);
  }
  setPendingDateRanges(e = []) {
    if (!e.length)
      return;
    const [t] = e, s = t.startDate.getTime();
    this.trimProcessedDateRanges_(s), this.pendingDateRanges_ = e.reduce((r, n) => (r.set(n.id, n), r), /* @__PURE__ */ new Map());
  }
  processDateRange(e) {
    this.pendingDateRanges_.delete(e.id), this.processedDateRanges_.set(e.id, e);
  }
  getDateRangesToProcess() {
    if (this.offset_ === null)
      return [];
    const e = {}, t = [];
    this.pendingDateRanges_.forEach((s, r) => {
      if (!this.processedDateRanges_.has(r) && (s.startTime = s.startDate.getTime() / 1e3 - this.offset_, s.processDateRange = () => this.processDateRange(s), t.push(s), !!s.class))
        if (e[s.class]) {
          const n = e[s.class].push(s);
          s.classListIndex = n - 1;
        } else
          e[s.class] = [s], s.classListIndex = 0;
    });
    for (const s of t) {
      const r = e[s.class] || [];
      s.endDate ? s.endTime = s.endDate.getTime() / 1e3 - this.offset_ : s.endOnNext && r[s.classListIndex + 1] ? s.endTime = r[s.classListIndex + 1].startTime : s.duration ? s.endTime = s.startTime + s.duration : s.plannedDuration ? s.endTime = s.startTime + s.plannedDuration : s.endTime = s.startTime;
    }
    return t;
  }
  trimProcessedDateRanges_(e) {
    new Map(this.processedDateRanges_).forEach((s, r) => {
      s.startDate.getTime() < e && this.processedDateRanges_.delete(r);
    });
  }
}
const {
  EventTarget: C2
} = L, w2 = (i, e) => {
  if (e.endList || !e.serverControl)
    return i;
  const t = {};
  if (e.serverControl.canBlockReload) {
    const {
      preloadSegment: s
    } = e;
    let r = e.mediaSequence + e.segments.length;
    if (s) {
      const n = s.parts || [], a = lf(e) - 1;
      a > -1 && a !== n.length - 1 && (t._HLS_part = a), (a > -1 || n.length) && r--;
    }
    t._HLS_msn = r;
  }
  if (e.serverControl && e.serverControl.canSkipUntil && (t._HLS_skip = e.serverControl.canSkipDateranges ? "v2" : "YES"), Object.keys(t).length) {
    const s = new E.URL(i);
    ["_HLS_skip", "_HLS_msn", "_HLS_part"].forEach(function(r) {
      t.hasOwnProperty(r) && s.searchParams.set(r, t[r]);
    }), i = s.toString();
  }
  return i;
}, A2 = (i, e) => {
  if (!i)
    return e;
  const t = ie(i, e);
  if (i.preloadHints && !e.preloadHints && delete t.preloadHints, i.parts && !e.parts)
    delete t.parts;
  else if (i.parts && e.parts)
    for (let s = 0; s < e.parts.length; s++)
      i.parts && i.parts[s] && (t.parts[s] = ie(i.parts[s], e.parts[s]));
  return !i.skipped && e.skipped && (t.skipped = !1), i.preload && !e.preload && (t.preload = !1), t;
}, D2 = (i, e, t) => {
  const s = i.slice(), r = e.slice();
  t = t || 0;
  const n = [];
  let a;
  for (let l = 0; l < r.length; l++) {
    const u = s[l + t], f = r[l];
    u ? (a = u.map || a, n.push(A2(u, f))) : (a && !f.map && (f.map = a), n.push(f));
  }
  return n;
}, _f = (i, e) => {
  !i.resolvedUri && i.uri && (i.resolvedUri = $e(e, i.uri)), i.key && !i.key.resolvedUri && (i.key.resolvedUri = $e(e, i.key.uri)), i.map && !i.map.resolvedUri && (i.map.resolvedUri = $e(e, i.map.uri)), i.map && i.map.key && !i.map.key.resolvedUri && (i.map.key.resolvedUri = $e(e, i.map.key.uri)), i.parts && i.parts.length && i.parts.forEach((t) => {
    t.resolvedUri || (t.resolvedUri = $e(e, t.uri));
  }), i.preloadHints && i.preloadHints.length && i.preloadHints.forEach((t) => {
    t.resolvedUri || (t.resolvedUri = $e(e, t.uri));
  });
}, Tf = function(i) {
  const e = i.segments || [], t = i.preloadSegment;
  if (t && t.parts && t.parts.length) {
    if (t.preloadHints) {
      for (let s = 0; s < t.preloadHints.length; s++)
        if (t.preloadHints[s].type === "MAP")
          return e;
    }
    t.duration = i.targetDuration, t.preload = !0, e.push(t);
  }
  return e;
}, bf = (i, e) => i === e || i.segments && e.segments && i.segments.length === e.segments.length && i.endList === e.endList && i.mediaSequence === e.mediaSequence && i.preloadSegment === e.preloadSegment, io = (i, e, t = bf) => {
  const s = ie(i, {}), r = s.playlists[e.id];
  if (!r || t(r, e))
    return null;
  e.segments = Tf(e);
  const n = ie(r, e);
  if (n.preloadSegment && !e.preloadSegment && delete n.preloadSegment, r.segments) {
    if (e.skip) {
      e.segments = e.segments || [];
      for (let a = 0; a < e.skip.skippedSegments; a++)
        e.segments.unshift({
          skipped: !0
        });
    }
    n.segments = D2(r.segments, e.segments, e.mediaSequence - r.mediaSequence);
  }
  n.segments.forEach((a) => {
    _f(a, n.resolvedUri);
  });
  for (let a = 0; a < s.playlists.length; a++)
    s.playlists[a].id === e.id && (s.playlists[a] = n);
  return s.playlists[e.id] = n, s.playlists[e.uri] = n, os(i, (a, l, u, f) => {
    if (a.playlists)
      for (let m = 0; m < a.playlists.length; m++)
        e.id === a.playlists[m].id && (a.playlists[m] = n);
  }), s;
}, so = (i, e) => {
  const t = i.segments || [], s = t[t.length - 1], r = s && s.parts && s.parts[s.parts.length - 1], n = r && r.duration || s && s.duration;
  return e && n ? n * 1e3 : (i.partTargetDuration || i.targetDuration || 10) * 500;
};
class ji extends C2 {
  constructor(e, t, s = {}) {
    if (super(), !e)
      throw new Error("A non-empty playlist URL or object is required");
    this.logger_ = ot("PlaylistLoader");
    const {
      withCredentials: r = !1
    } = s;
    this.src = e, this.vhs_ = t, this.withCredentials = r, this.addDateRangesToTextTrack_ = s.addDateRangesToTextTrack;
    const n = t.options_;
    this.customTagParsers = n && n.customTagParsers || [], this.customTagMappers = n && n.customTagMappers || [], this.llhls = n && n.llhls, this.dateRangesStorage_ = new vc(), this.state = "HAVE_NOTHING", this.handleMediaupdatetimeout_ = this.handleMediaupdatetimeout_.bind(this), this.on("mediaupdatetimeout", this.handleMediaupdatetimeout_), this.on("loadedplaylist", this.handleLoadedPlaylist_.bind(this));
  }
  handleLoadedPlaylist_() {
    const e = this.media();
    if (!e)
      return;
    this.dateRangesStorage_.setOffset(e.segments), this.dateRangesStorage_.setPendingDateRanges(e.dateRanges);
    const t = this.dateRangesStorage_.getDateRangesToProcess();
    !t.length || !this.addDateRangesToTextTrack_ || this.addDateRangesToTextTrack_(t);
  }
  handleMediaupdatetimeout_() {
    if (this.state !== "HAVE_METADATA")
      return;
    const e = this.media();
    let t = $e(this.main.uri, e.uri);
    this.llhls && (t = w2(t, e)), this.state = "HAVE_CURRENT_METADATA", this.request = this.vhs_.xhr({
      uri: t,
      withCredentials: this.withCredentials,
      requestType: "hls-playlist"
    }, (s, r) => {
      if (this.request) {
        if (s)
          return this.playlistRequestError(this.request, this.media(), "HAVE_METADATA");
        this.haveMetadata({
          playlistString: this.request.responseText,
          url: this.media().uri,
          id: this.media().id
        });
      }
    });
  }
  playlistRequestError(e, t, s) {
    const {
      uri: r,
      id: n
    } = t;
    this.request = null, s && (this.state = s), this.error = {
      playlist: this.main.playlists[n],
      status: e.status,
      message: `HLS playlist request error at URL: ${r}.`,
      responseText: e.responseText,
      code: e.status >= 500 ? 4 : 2,
      metadata: {
        errorType: L.Error.HlsPlaylistRequestError
      }
    }, this.trigger("error");
  }
  parseManifest_({
    url: e,
    manifestString: t
  }) {
    return b2({
      onwarn: ({
        message: s
      }) => this.logger_(`m3u8-parser warn for ${e}: ${s}`),
      oninfo: ({
        message: s
      }) => this.logger_(`m3u8-parser info for ${e}: ${s}`),
      manifestString: t,
      customTagParsers: this.customTagParsers,
      customTagMappers: this.customTagMappers,
      llhls: this.llhls
    });
  }
  /**
   * Update the playlist loader's state in response to a new or updated playlist.
   *
   * @param {string} [playlistString]
   *        Playlist string (if playlistObject is not provided)
   * @param {Object} [playlistObject]
   *        Playlist object (if playlistString is not provided)
   * @param {string} url
   *        URL of playlist
   * @param {string} id
   *        ID to use for playlist
   */
  haveMetadata({
    playlistString: e,
    playlistObject: t,
    url: s,
    id: r
  }) {
    this.request = null, this.state = "HAVE_METADATA";
    const n = t || this.parseManifest_({
      url: s,
      manifestString: e
    });
    n.lastRequest = Date.now(), vf({
      playlist: n,
      uri: s,
      id: r
    });
    const a = io(this.main, n);
    this.targetDuration = n.partTargetDuration || n.targetDuration, this.pendingMedia_ = null, a ? (this.main = a, this.media_ = this.main.playlists[r]) : this.trigger("playlistunchanged"), this.updateMediaUpdateTimeout_(so(this.media(), !!a)), this.trigger("loadedplaylist");
  }
  /**
    * Abort any outstanding work and clean up.
    */
  dispose() {
    this.trigger("dispose"), this.stopRequest(), E.clearTimeout(this.mediaUpdateTimeout), E.clearTimeout(this.finalRenditionTimeout), this.dateRangesStorage_ = new vc(), this.off();
  }
  stopRequest() {
    if (this.request) {
      const e = this.request;
      this.request = null, e.onreadystatechange = null, e.abort();
    }
  }
  /**
    * When called without any arguments, returns the currently
    * active media playlist. When called with a single argument,
    * triggers the playlist loader to asynchronously switch to the
    * specified media playlist. Calling this method while the
    * loader is in the HAVE_NOTHING causes an error to be emitted
    * but otherwise has no effect.
    *
    * @param {Object=} playlist the parsed media playlist
    * object to switch to
    * @param {boolean=} shouldDelay whether we should delay the request by half target duration
    *
    * @return {Playlist} the current loaded media
    */
  media(e, t) {
    if (!e)
      return this.media_;
    if (this.state === "HAVE_NOTHING")
      throw new Error("Cannot switch media playlist from " + this.state);
    if (typeof e == "string") {
      if (!this.main.playlists[e])
        throw new Error("Unknown playlist URI: " + e);
      e = this.main.playlists[e];
    }
    if (E.clearTimeout(this.finalRenditionTimeout), t) {
      const a = (e.partTargetDuration || e.targetDuration) / 2 * 1e3 || 5e3;
      this.finalRenditionTimeout = E.setTimeout(this.media.bind(this, e, !1), a);
      return;
    }
    const s = this.state, r = !this.media_ || e.id !== this.media_.id, n = this.main.playlists[e.id];
    if (n && n.endList || // handle the case of a playlist object (e.g., if using vhs-json with a resolved
    // media playlist or, for the case of demuxed audio, a resolved audio media group)
    e.endList && e.segments.length) {
      this.request && (this.request.onreadystatechange = null, this.request.abort(), this.request = null), this.state = "HAVE_METADATA", this.media_ = e, r && (this.trigger("mediachanging"), s === "HAVE_MAIN_MANIFEST" ? this.trigger("loadedmetadata") : this.trigger("mediachange"));
      return;
    }
    if (this.updateMediaUpdateTimeout_(so(e, !0)), !!r) {
      if (this.state = "SWITCHING_MEDIA", this.request) {
        if (e.resolvedUri === this.request.url)
          return;
        this.request.onreadystatechange = null, this.request.abort(), this.request = null;
      }
      this.media_ && this.trigger("mediachanging"), this.pendingMedia_ = e, this.request = this.vhs_.xhr({
        uri: e.resolvedUri,
        withCredentials: this.withCredentials,
        requestType: "hls-playlist"
      }, (a, l) => {
        if (this.request) {
          if (e.lastRequest = Date.now(), e.resolvedUri = ln(e.resolvedUri, l), a)
            return this.playlistRequestError(this.request, e, s);
          this.haveMetadata({
            playlistString: l.responseText,
            url: e.uri,
            id: e.id
          }), s === "HAVE_MAIN_MANIFEST" ? this.trigger("loadedmetadata") : this.trigger("mediachange");
        }
      });
    }
  }
  /**
   * pause loading of the playlist
   */
  pause() {
    this.mediaUpdateTimeout && (E.clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null), this.stopRequest(), this.state === "HAVE_NOTHING" && (this.started = !1), this.state === "SWITCHING_MEDIA" ? this.media_ ? this.state = "HAVE_METADATA" : this.state = "HAVE_MAIN_MANIFEST" : this.state === "HAVE_CURRENT_METADATA" && (this.state = "HAVE_METADATA");
  }
  /**
   * start loading of the playlist
   */
  load(e) {
    this.mediaUpdateTimeout && (E.clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null);
    const t = this.media();
    if (e) {
      const s = t ? (t.partTargetDuration || t.targetDuration) / 2 * 1e3 : 5e3;
      this.mediaUpdateTimeout = E.setTimeout(() => {
        this.mediaUpdateTimeout = null, this.load();
      }, s);
      return;
    }
    if (!this.started) {
      this.start();
      return;
    }
    t && !t.endList ? this.trigger("mediaupdatetimeout") : this.trigger("loadedplaylist");
  }
  updateMediaUpdateTimeout_(e) {
    this.mediaUpdateTimeout && (E.clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null), !(!this.media() || this.media().endList) && (this.mediaUpdateTimeout = E.setTimeout(() => {
      this.mediaUpdateTimeout = null, this.trigger("mediaupdatetimeout"), this.updateMediaUpdateTimeout_(e);
    }, e));
  }
  /**
   * start loading of the playlist
   */
  start() {
    if (this.started = !0, typeof this.src == "object") {
      this.src.uri || (this.src.uri = E.location.href), this.src.resolvedUri = this.src.uri, setTimeout(() => {
        this.setupInitialPlaylist(this.src);
      }, 0);
      return;
    }
    this.request = this.vhs_.xhr({
      uri: this.src,
      withCredentials: this.withCredentials,
      requestType: "hls-playlist"
    }, (e, t) => {
      if (!this.request)
        return;
      if (this.request = null, e)
        return this.error = {
          status: t.status,
          message: `HLS playlist request error at URL: ${this.src}.`,
          responseText: t.responseText,
          // MEDIA_ERR_NETWORK
          code: 2,
          metadata: {
            errorType: L.Error.HlsPlaylistRequestError
          }
        }, this.state === "HAVE_NOTHING" && (this.started = !1), this.trigger("error");
      this.src = ln(this.src, t);
      const s = this.parseManifest_({
        manifestString: t.responseText,
        url: this.src
      });
      this.setupInitialPlaylist(s);
    });
  }
  srcUri() {
    return typeof this.src == "string" ? this.src : this.src.uri;
  }
  /**
   * Given a manifest object that's either a main or media playlist, trigger the proper
   * events and set the state of the playlist loader.
   *
   * If the manifest object represents a main playlist, `loadedplaylist` will be
   * triggered to allow listeners to select a playlist. If none is selected, the loader
   * will default to the first one in the playlists array.
   *
   * If the manifest object represents a media playlist, `loadedplaylist` will be
   * triggered followed by `loadedmetadata`, as the only available playlist is loaded.
   *
   * In the case of a media playlist, a main playlist object wrapper with one playlist
   * will be created so that all logic can handle playlists in the same fashion (as an
   * assumed manifest object schema).
   *
   * @param {Object} manifest
   *        The parsed manifest object
   */
  setupInitialPlaylist(e) {
    if (this.state = "HAVE_MAIN_MANIFEST", e.playlists) {
      this.main = e, yf(this.main, this.srcUri()), e.playlists.forEach((s) => {
        s.segments = Tf(s), s.segments.forEach((r) => {
          _f(r, s.resolvedUri);
        });
      }), this.trigger("loadedplaylist"), this.request || this.media(this.main.playlists[0]);
      return;
    }
    const t = this.srcUri() || E.location.href;
    this.main = E2(e, t), this.haveMetadata({
      playlistObject: e,
      url: t,
      id: this.main.playlists[0].id
    }), this.trigger("loadedmetadata");
  }
  /**
   * Updates or deletes a preexisting pathway clone.
   * Ensures that all playlists related to the old pathway clone are
   * either updated or deleted.
   *
   * @param {Object} clone On update, the pathway clone object for the newly updated pathway clone.
   *        On delete, the old pathway clone object to be deleted.
   * @param {boolean} isUpdate True if the pathway is to be updated,
   *        false if it is meant to be deleted.
   */
  updateOrDeleteClone(e, t) {
    const s = this.main, r = e.ID;
    let n = s.playlists.length;
    for (; n--; ) {
      const a = s.playlists[n];
      if (a.attributes["PATHWAY-ID"] === r) {
        const l = a.resolvedUri, u = a.id;
        if (t) {
          const f = this.createCloneURI_(a.resolvedUri, e), m = Fi(r, f), v = this.createCloneAttributes_(r, a.attributes), b = this.createClonePlaylist_(a, m, e, v);
          s.playlists[n] = b, s.playlists[m] = b, s.playlists[f] = b;
        } else
          s.playlists.splice(n, 1);
        delete s.playlists[u], delete s.playlists[l];
      }
    }
    this.updateOrDeleteCloneMedia(e, t);
  }
  /**
   * Updates or deletes media data based on the pathway clone object.
   * Due to the complexity of the media groups and playlists, in all cases
   * we remove all of the old media groups and playlists.
   * On updates, we then create new media groups and playlists based on the
   * new pathway clone object.
   *
   * @param {Object} clone The pathway clone object for the newly updated pathway clone.
   * @param {boolean} isUpdate True if the pathway is to be updated,
   *        false if it is meant to be deleted.
   */
  updateOrDeleteCloneMedia(e, t) {
    const s = this.main, r = e.ID;
    ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach((n) => {
      if (!(!s.mediaGroups[n] || !s.mediaGroups[n][r])) {
        for (const a in s.mediaGroups[n])
          if (a === r) {
            for (const l in s.mediaGroups[n][a])
              s.mediaGroups[n][a][l].playlists.forEach((f, m) => {
                const v = s.playlists[f.id], b = v.id, S = v.resolvedUri;
                delete s.playlists[b], delete s.playlists[S];
              });
            delete s.mediaGroups[n][a];
          }
      }
    }), t && this.createClonedMediaGroups_(e);
  }
  /**
   * Given a pathway clone object, clones all necessary playlists.
   *
   * @param {Object} clone The pathway clone object.
   * @param {Object} basePlaylist The original playlist to clone from.
   */
  addClonePathway(e, t = {}) {
    const s = this.main, r = s.playlists.length, n = this.createCloneURI_(t.resolvedUri, e), a = Fi(e.ID, n), l = this.createCloneAttributes_(e.ID, t.attributes), u = this.createClonePlaylist_(t, a, e, l);
    s.playlists[r] = u, s.playlists[a] = u, s.playlists[n] = u, this.createClonedMediaGroups_(e);
  }
  /**
   * Given a pathway clone object we create clones of all media.
   * In this function, all necessary information and updated playlists
   * are added to the `mediaGroup` object.
   * Playlists are also added to the `playlists` array so the media groups
   * will be properly linked.
   *
   * @param {Object} clone The pathway clone object.
   */
  createClonedMediaGroups_(e) {
    const t = e.ID, s = e["BASE-ID"], r = this.main;
    ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach((n) => {
      if (!(!r.mediaGroups[n] || r.mediaGroups[n][t]))
        for (const a in r.mediaGroups[n]) {
          if (a === s)
            r.mediaGroups[n][t] = {};
          else
            continue;
          for (const l in r.mediaGroups[n][a]) {
            const u = r.mediaGroups[n][a][l];
            r.mediaGroups[n][t][l] = it({}, u);
            const f = r.mediaGroups[n][t][l], m = this.createCloneURI_(u.resolvedUri, e);
            f.resolvedUri = m, f.uri = m, f.playlists = [], u.playlists.forEach((v, b) => {
              const S = r.playlists[v.id], y = gf(n, t, l), A = Fi(t, y);
              if (S && !r.playlists[A]) {
                const w = this.createClonePlaylist_(S, A, e), k = w.resolvedUri;
                r.playlists[A] = w, r.playlists[k] = w;
              }
              f.playlists[b] = this.createClonePlaylist_(v, A, e);
            });
          }
        }
    });
  }
  /**
   * Using the original playlist to be cloned, and the pathway clone object
   * information, we create a new playlist.
   *
   * @param {Object} basePlaylist  The original playlist to be cloned from.
   * @param {string} id The desired id of the newly cloned playlist.
   * @param {Object} clone The pathway clone object.
   * @param {Object} attributes An optional object to populate the `attributes` property in the playlist.
   *
   * @return {Object} The combined cloned playlist.
   */
  createClonePlaylist_(e, t, s, r) {
    const n = this.createCloneURI_(e.resolvedUri, s), a = {
      resolvedUri: n,
      uri: n,
      id: t
    };
    return e.segments && (a.segments = []), r && (a.attributes = r), ie(e, a);
  }
  /**
   * Generates an updated URI for a cloned pathway based on the original
   * pathway's URI and the paramaters from the pathway clone object in the
   * content steering server response.
   *
   * @param {string} baseUri URI to be updated in the cloned pathway.
   * @param {Object} clone The pathway clone object.
   *
   * @return {string} The updated URI for the cloned pathway.
   */
  createCloneURI_(e, t) {
    const s = new URL(e);
    s.hostname = t["URI-REPLACEMENT"].HOST;
    const r = t["URI-REPLACEMENT"].PARAMS;
    for (const n of Object.keys(r))
      s.searchParams.set(n, r[n]);
    return s.href;
  }
  /**
   * Helper function to create the attributes needed for the new clone.
   * This mainly adds the necessary media attributes.
   *
   * @param {string} id The pathway clone object ID.
   * @param {Object} oldAttributes The old attributes to compare to.
   * @return {Object} The new attributes to add to the playlist.
   */
  createCloneAttributes_(e, t) {
    const s = {
      "PATHWAY-ID": e
    };
    return ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach((r) => {
      t[r] && (s[r] = e);
    }), s;
  }
  /**
   * Returns the key ID set from a playlist
   *
   * @param {playlist} playlist to fetch the key ID set from.
   * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.
   */
  getKeyIdSet(e) {
    if (e.contentProtection) {
      const t = /* @__PURE__ */ new Set();
      for (const s in e.contentProtection) {
        const r = e.contentProtection[s].attributes.keyId;
        r && t.add(r.toLowerCase());
      }
      return t;
    }
  }
}
const ro = function(i, e, t, s) {
  const r = i.responseType === "arraybuffer" ? i.response : i.responseText;
  !e && r && (i.responseTime = Date.now(), i.roundTripTime = i.responseTime - i.requestTime, i.bytesReceived = r.byteLength || r.length, i.bandwidth || (i.bandwidth = Math.floor(i.bytesReceived / i.roundTripTime * 8 * 1e3))), t.headers && (i.responseHeaders = t.headers), e && e.code === "ETIMEDOUT" && (i.timedout = !0), !e && !i.aborted && t.statusCode !== 200 && t.statusCode !== 206 && t.statusCode !== 0 && (e = new Error("XHR Failed with a response of: " + (i && (r || i.responseText)))), s(e, i);
}, k2 = (i, e) => {
  if (!i || !i.size)
    return;
  let t = e;
  return i.forEach((s) => {
    t = s(t);
  }), t;
}, I2 = (i, e, t, s) => {
  !i || !i.size || i.forEach((r) => {
    r(e, t, s);
  });
}, xf = function() {
  const i = function e(t, s) {
    t = ie({
      timeout: 45e3
    }, t);
    const r = e.beforeRequest || L.Vhs.xhr.beforeRequest, n = e._requestCallbackSet || L.Vhs.xhr._requestCallbackSet || /* @__PURE__ */ new Set(), a = e._responseCallbackSet || L.Vhs.xhr._responseCallbackSet;
    r && typeof r == "function" && (L.log.warn("beforeRequest is deprecated, use onRequest instead."), n.add(r));
    const l = L.Vhs.xhr.original === !0 ? L.xhr : L.Vhs.xhr, u = k2(n, t);
    n.delete(r);
    const f = l(u || t, function(v, b) {
      return I2(a, f, v, b), ro(f, v, b, s);
    }), m = f.abort;
    return f.abort = function() {
      return f.aborted = !0, m.apply(f, arguments);
    }, f.uri = t.uri, f.requestTime = Date.now(), f;
  };
  return i.original = !0, i;
}, P2 = function(i) {
  let e;
  const t = i.offset;
  return typeof i.offset == "bigint" || typeof i.length == "bigint" ? e = E.BigInt(i.offset) + E.BigInt(i.length) - E.BigInt(1) : e = i.offset + i.length - 1, "bytes=" + t + "-" + e;
}, no = function(i) {
  const e = {};
  return i.byterange && (e.Range = P2(i.byterange)), e;
}, L2 = function(i, e) {
  return i.start(e) + "-" + i.end(e);
}, O2 = function(i, e) {
  const t = i.toString(16);
  return "00".substring(0, 2 - t.length) + t + (e % 2 ? " " : "");
}, j2 = function(i) {
  return i >= 32 && i < 126 ? String.fromCharCode(i) : ".";
}, Sf = function(i) {
  const e = {};
  return Object.keys(i).forEach((t) => {
    const s = i[t];
    ed(s) ? e[t] = {
      bytes: s.buffer,
      byteOffset: s.byteOffset,
      byteLength: s.byteLength
    } : e[t] = s;
  }), e;
}, un = function(i) {
  const e = i.byterange || {
    length: 1 / 0,
    offset: 0
  };
  return [e.length, e.offset, i.resolvedUri].join(",");
}, Ef = function(i) {
  return i.resolvedUri;
}, Cf = (i) => {
  const e = Array.prototype.slice.call(i), t = 16;
  let s = "", r, n;
  for (let a = 0; a < e.length / t; a++)
    r = e.slice(a * t, a * t + t).map(O2).join(""), n = e.slice(a * t, a * t + t).map(j2).join(""), s += r + " " + n + `
`;
  return s;
}, R2 = ({
  bytes: i
}) => Cf(i), N2 = (i) => {
  let e = "", t;
  for (t = 0; t < i.length; t++)
    e += L2(i, t) + " ";
  return e;
};
var M2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  createTransferableMessage: Sf,
  initSegmentId: un,
  segmentKeyId: Ef,
  hexDump: Cf,
  tagDump: R2,
  textRanges: N2
});
const wf = 0.25, B2 = (i, e) => {
  if (!e.dateTimeObject)
    return null;
  const t = e.videoTimingInfo.transmuxerPrependedSeconds, r = e.videoTimingInfo.transmuxedPresentationStart + t, n = i - r;
  return new Date(e.dateTimeObject.getTime() + n * 1e3);
}, F2 = (i) => i.transmuxedPresentationEnd - i.transmuxedPresentationStart - i.transmuxerPrependedSeconds, U2 = (i, e) => {
  let t;
  try {
    t = new Date(i);
  } catch {
    return null;
  }
  if (!e || !e.segments || e.segments.length === 0)
    return null;
  let s = e.segments[0];
  if (t < new Date(s.dateTimeObject))
    return null;
  for (let u = 0; u < e.segments.length - 1; u++) {
    s = e.segments[u];
    const f = new Date(e.segments[u + 1].dateTimeObject);
    if (t < f)
      break;
  }
  const r = e.segments[e.segments.length - 1], n = r.dateTimeObject, a = r.videoTimingInfo ? F2(r.videoTimingInfo) : r.duration + r.duration * wf, l = new Date(n.getTime() + a * 1e3);
  return t > l ? null : (t > new Date(n) && (s = r), {
    segment: s,
    estimatedStart: s.videoTimingInfo ? s.videoTimingInfo.transmuxedPresentationStart : Ve.duration(e, e.mediaSequence + e.segments.indexOf(s)),
    // Although, given that all segments have accurate date time objects, the segment
    // selected should be accurate, unless the video has been transmuxed at some point
    // (determined by the presence of the videoTimingInfo object), the segment's "player
    // time" (the start time in the player) can't be considered accurate.
    type: s.videoTimingInfo ? "accurate" : "estimate"
  });
}, q2 = (i, e) => {
  if (!e || !e.segments || e.segments.length === 0)
    return null;
  let t = 0, s;
  for (let n = 0; n < e.segments.length && (s = e.segments[n], t = s.videoTimingInfo ? s.videoTimingInfo.transmuxedPresentationEnd : t + s.duration, !(i <= t)); n++)
    ;
  const r = e.segments[e.segments.length - 1];
  if (r.videoTimingInfo && r.videoTimingInfo.transmuxedPresentationEnd < i)
    return null;
  if (i > t) {
    if (i > t + r.duration * wf)
      return null;
    s = r;
  }
  return {
    segment: s,
    estimatedStart: s.videoTimingInfo ? s.videoTimingInfo.transmuxedPresentationStart : t - s.duration,
    // Because videoTimingInfo is only set after transmux, it is the only way to get
    // accurate timing values.
    type: s.videoTimingInfo ? "accurate" : "estimate"
  };
}, $2 = (i, e) => {
  let t, s;
  try {
    t = new Date(i), s = new Date(e);
  } catch {
  }
  const r = t.getTime();
  return (s.getTime() - r) / 1e3;
}, V2 = (i) => {
  if (!i.segments || i.segments.length === 0)
    return !1;
  for (let e = 0; e < i.segments.length; e++)
    if (!i.segments[e].dateTimeObject)
      return !1;
  return !0;
}, H2 = ({
  playlist: i,
  time: e = void 0,
  callback: t
}) => {
  if (!t)
    throw new Error("getProgramTime: callback must be provided");
  if (!i || e === void 0)
    return t({
      message: "getProgramTime: playlist and time must be provided"
    });
  const s = q2(e, i);
  if (!s)
    return t({
      message: "valid programTime was not found"
    });
  if (s.type === "estimate")
    return t({
      message: "Accurate programTime could not be determined. Please seek to e.seekTime and try again",
      seekTime: s.estimatedStart
    });
  const r = {
    mediaSeconds: e
  }, n = B2(e, s.segment);
  return n && (r.programDateTime = n.toISOString()), t(null, r);
}, Af = ({
  programTime: i,
  playlist: e,
  retryCount: t = 2,
  seekTo: s,
  pauseAfterSeek: r = !0,
  tech: n,
  callback: a
}) => {
  if (!a)
    throw new Error("seekToProgramTime: callback must be provided");
  if (typeof i > "u" || !e || !s)
    return a({
      message: "seekToProgramTime: programTime, seekTo and playlist must be provided"
    });
  if (!e.endList && !n.hasStarted_)
    return a({
      message: "player must be playing a live stream to start buffering"
    });
  if (!V2(e))
    return a({
      message: "programDateTime tags must be provided in the manifest " + e.resolvedUri
    });
  const l = U2(i, e);
  if (!l)
    return a({
      message: `${i} was not found in the stream`
    });
  const u = l.segment, f = $2(u.dateTimeObject, i);
  if (l.type === "estimate") {
    if (t === 0)
      return a({
        message: `${i} is not buffered yet. Try again`
      });
    s(l.estimatedStart + f), n.one("seeked", () => {
      Af({
        programTime: i,
        playlist: e,
        retryCount: t - 1,
        seekTo: s,
        pauseAfterSeek: r,
        tech: n,
        callback: a
      });
    });
    return;
  }
  const m = u.start + f, v = () => a(null, n.currentTime());
  n.one("seeked", v), r && n.pause(), s(m);
}, Da = (i, e) => {
  if (i.readyState === 4)
    return e();
}, z2 = (i, e, t) => {
  let s = [], r, n = !1;
  const a = function(m, v, b, S) {
    return v.abort(), n = !0, t(m, v, b, S);
  }, l = function(m, v) {
    if (n)
      return;
    if (m)
      return a(m, v, "", s);
    const b = v.responseText.substring(s && s.byteLength || 0, v.responseText.length);
    if (s = Y0(s, td(b, !0)), r = r || Ps(s), s.length < 10 || r && s.length < r + 2)
      return Da(v, () => a(m, v, "", s));
    const S = Io(s);
    return S === "ts" && s.length < 188 ? Da(v, () => a(m, v, "", s)) : !S && s.length < 376 ? Da(v, () => a(m, v, "", s)) : a(null, v, S, s);
  }, f = e({
    uri: i,
    beforeSend(m) {
      m.overrideMimeType("text/plain; charset=x-user-defined"), m.addEventListener("progress", function({
        total: v,
        loaded: b
      }) {
        return ro(m, null, {
          statusCode: m.status
        }, l);
      });
    }
  }, function(m, v) {
    return ro(f, m, v, l);
  });
  return f;
}, {
  EventTarget: G2
} = L, yc = function(i, e) {
  if (!bf(i, e) || i.sidx && e.sidx && (i.sidx.offset !== e.sidx.offset || i.sidx.length !== e.sidx.length))
    return !1;
  if (!i.sidx && e.sidx || i.sidx && !e.sidx || i.segments && !e.segments || !i.segments && e.segments)
    return !1;
  if (!i.segments && !e.segments)
    return !0;
  for (let t = 0; t < i.segments.length; t++) {
    const s = i.segments[t], r = e.segments[t];
    if (s.uri !== r.uri)
      return !1;
    if (!s.byterange && !r.byterange)
      continue;
    const n = s.byterange, a = r.byterange;
    if (n && !a || !n && a || n.offset !== a.offset || n.length !== a.length)
      return !1;
  }
  return !0;
}, W2 = (i, e, t, s) => {
  const r = s.attributes.NAME || t;
  return `placeholder-uri-${i}-${e}-${r}`;
}, X2 = ({
  mainXml: i,
  srcUrl: e,
  clientOffset: t,
  sidxMapping: s,
  previousManifest: r
}) => {
  const n = _y(i, {
    manifestUri: e,
    clientOffset: t,
    sidxMapping: s,
    previousManifest: r
  });
  return yf(n, e, W2), n;
}, K2 = (i, e) => {
  os(i, (t, s, r, n) => {
    n in e.mediaGroups[s][r] || delete i.mediaGroups[s][r][n];
  });
}, Y2 = (i, e, t) => {
  let s = !0, r = ie(i, {
    // These are top level properties that can be updated
    duration: e.duration,
    minimumUpdatePeriod: e.minimumUpdatePeriod,
    timelineStarts: e.timelineStarts
  });
  for (let n = 0; n < e.playlists.length; n++) {
    const a = e.playlists[n];
    if (a.sidx) {
      const u = Tn(a.sidx);
      t && t[u] && t[u].sidx && Ao(a, t[u].sidx, a.sidx.resolvedUri);
    }
    const l = io(r, a, yc);
    l && (r = l, s = !1);
  }
  return os(e, (n, a, l, u) => {
    if (n.playlists && n.playlists.length) {
      const f = n.playlists[0].id, m = io(r, n.playlists[0], yc);
      m && (r = m, u in r.mediaGroups[a][l] || (r.mediaGroups[a][l][u] = n), r.mediaGroups[a][l][u].playlists[0] = r.playlists[f], s = !1);
    }
  }), K2(r, e), e.minimumUpdatePeriod !== i.minimumUpdatePeriod && (s = !1), s ? null : r;
}, Q2 = (i, e) => (!i.map && !e.map || !!(i.map && e.map && i.map.byterange.offset === e.map.byterange.offset && i.map.byterange.length === e.map.byterange.length)) && i.uri === e.uri && i.byterange.offset === e.byterange.offset && i.byterange.length === e.byterange.length, _c = (i, e) => {
  const t = {};
  for (const s in i) {
    const n = i[s].sidx;
    if (n) {
      const a = Tn(n);
      if (!e[a])
        break;
      const l = e[a].sidxInfo;
      Q2(l, n) && (t[a] = e[a]);
    }
  }
  return t;
}, J2 = (i, e) => {
  let s = _c(i.playlists, e);
  return os(i, (r, n, a, l) => {
    if (r.playlists && r.playlists.length) {
      const u = r.playlists;
      s = ie(s, _c(u, e));
    }
  }), s;
};
class ao extends G2 {
  // DashPlaylistLoader must accept either a src url or a playlist because subsequent
  // playlist loader setups from media groups will expect to be able to pass a playlist
  // (since there aren't external URLs to media playlists with DASH)
  constructor(e, t, s = {}, r) {
    super(), this.mainPlaylistLoader_ = r || this, r || (this.isMain_ = !0);
    const {
      withCredentials: n = !1
    } = s;
    if (this.vhs_ = t, this.withCredentials = n, this.addMetadataToTextTrack = s.addMetadataToTextTrack, !e)
      throw new Error("A non-empty playlist URL or object is required");
    this.on("minimumUpdatePeriod", () => {
      this.refreshXml_();
    }), this.on("mediaupdatetimeout", () => {
      this.refreshMedia_(this.media().id);
    }), this.state = "HAVE_NOTHING", this.loadedPlaylists_ = {}, this.logger_ = ot("DashPlaylistLoader"), this.isMain_ ? (this.mainPlaylistLoader_.srcUrl = e, this.mainPlaylistLoader_.sidxMapping_ = {}) : this.childPlaylist_ = e;
  }
  requestErrored_(e, t, s) {
    if (!this.request)
      return !0;
    if (this.request = null, e)
      return this.error = typeof e == "object" && !(e instanceof Error) ? e : {
        status: t.status,
        message: "DASH request error at URL: " + t.uri,
        response: t.response,
        // MEDIA_ERR_NETWORK
        code: 2,
        metadata: e.metadata
      }, s && (this.state = s), this.trigger("error"), !0;
  }
  /**
   * Verify that the container of the sidx segment can be parsed
   * and if it can, get and parse that segment.
   */
  addSidxSegments_(e, t, s) {
    const r = e.sidx && Tn(e.sidx);
    if (!e.sidx || !r || this.mainPlaylistLoader_.sidxMapping_[r]) {
      this.mediaRequest_ = E.setTimeout(() => s(!1), 0);
      return;
    }
    const n = ln(e.sidx.resolvedUri), a = (l, u) => {
      if (this.requestErrored_(l, u, t))
        return;
      const f = this.mainPlaylistLoader_.sidxMapping_;
      let m;
      try {
        m = Cy(H(u.response).subarray(8));
      } catch (v) {
        v.metadata = {
          errorType: L.Error.DashManifestSidxParsingError
        }, this.requestErrored_(v, u, t);
        return;
      }
      return f[r] = {
        sidxInfo: e.sidx,
        sidx: m
      }, Ao(e, m, e.sidx.resolvedUri), s(!0);
    };
    this.request = z2(n, this.vhs_.xhr, (l, u, f, m) => {
      if (l)
        return a(l, u);
      if (!f || f !== "mp4") {
        const S = f || "unknown";
        return a({
          status: u.status,
          message: `Unsupported ${S} container type for sidx segment at URL: ${n}`,
          // response is just bytes in this case
          // but we really don't want to return that.
          response: "",
          playlist: e,
          internal: !0,
          playlistExclusionDuration: 1 / 0,
          // MEDIA_ERR_NETWORK
          code: 2,
          metadata: {
            errorType: L.Error.UnsupportedSidxContainer,
            sidxContainer: S
          }
        }, u);
      }
      const {
        offset: v,
        length: b
      } = e.sidx.byterange;
      if (m.length >= b + v)
        return a(l, {
          response: m.subarray(v, v + b),
          status: u.status,
          uri: u.uri
        });
      this.request = this.vhs_.xhr({
        uri: n,
        responseType: "arraybuffer",
        headers: no({
          byterange: e.sidx.byterange
        })
      }, a);
    });
  }
  dispose() {
    this.trigger("dispose"), this.stopRequest(), this.loadedPlaylists_ = {}, E.clearTimeout(this.minimumUpdatePeriodTimeout_), E.clearTimeout(this.mediaRequest_), E.clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null, this.mediaRequest_ = null, this.minimumUpdatePeriodTimeout_ = null, this.mainPlaylistLoader_.createMupOnMedia_ && (this.off("loadedmetadata", this.mainPlaylistLoader_.createMupOnMedia_), this.mainPlaylistLoader_.createMupOnMedia_ = null), this.off();
  }
  hasPendingRequest() {
    return this.request || this.mediaRequest_;
  }
  stopRequest() {
    if (this.request) {
      const e = this.request;
      this.request = null, e.onreadystatechange = null, e.abort();
    }
  }
  media(e) {
    if (!e)
      return this.media_;
    if (this.state === "HAVE_NOTHING")
      throw new Error("Cannot switch media playlist from " + this.state);
    const t = this.state;
    if (typeof e == "string") {
      if (!this.mainPlaylistLoader_.main.playlists[e])
        throw new Error("Unknown playlist URI: " + e);
      e = this.mainPlaylistLoader_.main.playlists[e];
    }
    const s = !this.media_ || e.id !== this.media_.id;
    if (s && this.loadedPlaylists_[e.id] && this.loadedPlaylists_[e.id].endList) {
      this.state = "HAVE_METADATA", this.media_ = e, s && (this.trigger("mediachanging"), this.trigger("mediachange"));
      return;
    }
    s && (this.media_ && this.trigger("mediachanging"), this.addSidxSegments_(e, t, (r) => {
      this.haveMetadata({
        startingState: t,
        playlist: e
      });
    }));
  }
  haveMetadata({
    startingState: e,
    playlist: t
  }) {
    this.state = "HAVE_METADATA", this.loadedPlaylists_[t.id] = t, this.mediaRequest_ = null, this.refreshMedia_(t.id), e === "HAVE_MAIN_MANIFEST" ? this.trigger("loadedmetadata") : this.trigger("mediachange");
  }
  pause() {
    this.mainPlaylistLoader_.createMupOnMedia_ && (this.off("loadedmetadata", this.mainPlaylistLoader_.createMupOnMedia_), this.mainPlaylistLoader_.createMupOnMedia_ = null), this.stopRequest(), E.clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null, this.isMain_ && (E.clearTimeout(this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_), this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_ = null), this.state === "HAVE_NOTHING" && (this.started = !1);
  }
  load(e) {
    E.clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null;
    const t = this.media();
    if (e) {
      const s = t ? t.targetDuration / 2 * 1e3 : 5e3;
      this.mediaUpdateTimeout = E.setTimeout(() => this.load(), s);
      return;
    }
    if (!this.started) {
      this.start();
      return;
    }
    t && !t.endList ? (this.isMain_ && !this.minimumUpdatePeriodTimeout_ && (this.trigger("minimumUpdatePeriod"), this.updateMinimumUpdatePeriodTimeout_()), this.trigger("mediaupdatetimeout")) : this.trigger("loadedplaylist");
  }
  start() {
    if (this.started = !0, !this.isMain_) {
      this.mediaRequest_ = E.setTimeout(() => this.haveMain_(), 0);
      return;
    }
    this.requestMain_((e, t) => {
      this.haveMain_(), !this.hasPendingRequest() && !this.media_ && this.media(this.mainPlaylistLoader_.main.playlists[0]);
    });
  }
  requestMain_(e) {
    this.request = this.vhs_.xhr({
      uri: this.mainPlaylistLoader_.srcUrl,
      withCredentials: this.withCredentials,
      requestType: "dash-manifest"
    }, (t, s) => {
      if (this.requestErrored_(t, s)) {
        this.state === "HAVE_NOTHING" && (this.started = !1);
        return;
      }
      const r = s.responseText !== this.mainPlaylistLoader_.mainXml_;
      if (this.mainPlaylistLoader_.mainXml_ = s.responseText, s.responseHeaders && s.responseHeaders.date ? this.mainLoaded_ = Date.parse(s.responseHeaders.date) : this.mainLoaded_ = Date.now(), this.mainPlaylistLoader_.srcUrl = ln(this.mainPlaylistLoader_.srcUrl, s), r) {
        this.handleMain_(), this.syncClientServerClock_(() => e(s, r));
        return;
      }
      return e(s, r);
    });
  }
  /**
   * Parses the main xml for UTCTiming node to sync the client clock to the server
   * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.
   *
   * @param {Function} done
   *        Function to call when clock sync has completed
   */
  syncClientServerClock_(e) {
    const t = Ty(this.mainPlaylistLoader_.mainXml_);
    if (t === null)
      return this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now(), e();
    if (t.method === "DIRECT")
      return this.mainPlaylistLoader_.clientOffset_ = t.value - Date.now(), e();
    this.request = this.vhs_.xhr({
      uri: $e(this.mainPlaylistLoader_.srcUrl, t.value),
      method: t.method,
      withCredentials: this.withCredentials,
      requestType: "dash-clock-sync"
    }, (s, r) => {
      if (!this.request)
        return;
      if (s)
        return this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now(), e();
      let n;
      t.method === "HEAD" ? !r.responseHeaders || !r.responseHeaders.date ? n = this.mainLoaded_ : n = Date.parse(r.responseHeaders.date) : n = Date.parse(r.responseText), this.mainPlaylistLoader_.clientOffset_ = n - Date.now(), e();
    });
  }
  haveMain_() {
    this.state = "HAVE_MAIN_MANIFEST", this.isMain_ ? this.trigger("loadedplaylist") : this.media_ || this.media(this.childPlaylist_);
  }
  handleMain_() {
    this.mediaRequest_ = null;
    const e = this.mainPlaylistLoader_.main;
    let t = X2({
      mainXml: this.mainPlaylistLoader_.mainXml_,
      srcUrl: this.mainPlaylistLoader_.srcUrl,
      clientOffset: this.mainPlaylistLoader_.clientOffset_,
      sidxMapping: this.mainPlaylistLoader_.sidxMapping_,
      previousManifest: e
    });
    e && (t = Y2(e, t, this.mainPlaylistLoader_.sidxMapping_)), this.mainPlaylistLoader_.main = t || e;
    const s = this.mainPlaylistLoader_.main.locations && this.mainPlaylistLoader_.main.locations[0];
    return s && s !== this.mainPlaylistLoader_.srcUrl && (this.mainPlaylistLoader_.srcUrl = s), (!e || t && t.minimumUpdatePeriod !== e.minimumUpdatePeriod) && this.updateMinimumUpdatePeriodTimeout_(), this.addEventStreamToMetadataTrack_(t), !!t;
  }
  updateMinimumUpdatePeriodTimeout_() {
    const e = this.mainPlaylistLoader_;
    e.createMupOnMedia_ && (e.off("loadedmetadata", e.createMupOnMedia_), e.createMupOnMedia_ = null), e.minimumUpdatePeriodTimeout_ && (E.clearTimeout(e.minimumUpdatePeriodTimeout_), e.minimumUpdatePeriodTimeout_ = null);
    let t = e.main && e.main.minimumUpdatePeriod;
    if (t === 0 && (e.media() ? t = e.media().targetDuration * 1e3 : (e.createMupOnMedia_ = e.updateMinimumUpdatePeriodTimeout_, e.one("loadedmetadata", e.createMupOnMedia_))), typeof t != "number" || t <= 0) {
      t < 0 && this.logger_(`found invalid minimumUpdatePeriod of ${t}, not setting a timeout`);
      return;
    }
    this.createMUPTimeout_(t);
  }
  createMUPTimeout_(e) {
    const t = this.mainPlaylistLoader_;
    t.minimumUpdatePeriodTimeout_ = E.setTimeout(() => {
      t.minimumUpdatePeriodTimeout_ = null, t.trigger("minimumUpdatePeriod"), t.createMUPTimeout_(e);
    }, e);
  }
  /**
   * Sends request to refresh the main xml and updates the parsed main manifest
   */
  refreshXml_() {
    this.requestMain_((e, t) => {
      t && (this.media_ && (this.media_ = this.mainPlaylistLoader_.main.playlists[this.media_.id]), this.mainPlaylistLoader_.sidxMapping_ = J2(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.sidxMapping_), this.addSidxSegments_(this.media(), this.state, (s) => {
        this.refreshMedia_(this.media().id);
      }));
    });
  }
  /**
   * Refreshes the media playlist by re-parsing the main xml and updating playlist
   * references. If this is an alternate loader, the updated parsed manifest is retrieved
   * from the main loader.
   */
  refreshMedia_(e) {
    if (!e)
      throw new Error("refreshMedia_ must take a media id");
    this.media_ && this.isMain_ && this.handleMain_();
    const t = this.mainPlaylistLoader_.main.playlists, s = !this.media_ || this.media_ !== t[e];
    if (s ? this.media_ = t[e] : this.trigger("playlistunchanged"), !this.mediaUpdateTimeout) {
      const r = () => {
        this.media().endList || (this.mediaUpdateTimeout = E.setTimeout(() => {
          this.trigger("mediaupdatetimeout"), r();
        }, so(this.media(), !!s)));
      };
      r();
    }
    this.trigger("loadedplaylist");
  }
  /**
   * Takes eventstream data from a parsed DASH manifest and adds it to the metadata text track.
   *
   * @param {manifest} newMain the newly parsed manifest
   */
  addEventStreamToMetadataTrack_(e) {
    if (e && this.mainPlaylistLoader_.main.eventStream) {
      const t = this.mainPlaylistLoader_.main.eventStream.map((s) => ({
        cueTime: s.start,
        frames: [{
          data: s.messageData
        }]
      }));
      this.addMetadataToTextTrack("EventStream", t, this.mainPlaylistLoader_.main.duration);
    }
  }
  /**
   * Returns the key ID set from a playlist
   *
   * @param {playlist} playlist to fetch the key ID set from.
   * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.
   */
  getKeyIdSet(e) {
    if (e.contentProtection) {
      const t = /* @__PURE__ */ new Set();
      for (const s in e.contentProtection) {
        const r = e.contentProtection[s].attributes["cenc:default_KID"];
        r && t.add(r.replace(/-/g, "").toLowerCase());
      }
      return t;
    }
  }
}
var Ce = {
  GOAL_BUFFER_LENGTH: 30,
  MAX_GOAL_BUFFER_LENGTH: 60,
  BACK_BUFFER_LENGTH: 30,
  GOAL_BUFFER_LENGTH_RATE: 1,
  // 0.5 MB/s
  INITIAL_BANDWIDTH: 4194304,
  // A fudge factor to apply to advertised playlist bitrates to account for
  // temporary flucations in client bandwidth
  BANDWIDTH_VARIANCE: 1.2,
  // How much of the buffer must be filled before we consider upswitching
  BUFFER_LOW_WATER_LINE: 0,
  MAX_BUFFER_LOW_WATER_LINE: 30,
  // TODO: Remove this when experimentalBufferBasedABR is removed
  EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,
  BUFFER_LOW_WATER_LINE_RATE: 1,
  // If the buffer is greater than the high water line, we won't switch down
  BUFFER_HIGH_WATER_LINE: 30
};
const Z2 = (i) => {
  const e = new Uint8Array(new ArrayBuffer(i.length));
  for (let t = 0; t < i.length; t++)
    e[t] = i.charCodeAt(t);
  return e.buffer;
}, Df = function(i) {
  return i.on = i.addEventListener, i.off = i.removeEventListener, i;
}, e1 = function(i) {
  try {
    return URL.createObjectURL(new Blob([i], {
      type: "application/javascript"
    }));
  } catch {
    const t = new BlobBuilder();
    return t.append(i), URL.createObjectURL(t.getBlob());
  }
}, kf = function(i) {
  return function() {
    const e = e1(i), t = Df(new Worker(e));
    t.objURL = e;
    const s = t.terminate;
    return t.on = t.addEventListener, t.off = t.removeEventListener, t.terminate = function() {
      return URL.revokeObjectURL(e), s.call(this);
    }, t;
  };
}, If = function(i) {
  return `var browserWorkerPolyFill = ${Df.toString()};
browserWorkerPolyFill(self);
` + i;
}, Pf = function(i) {
  return i.toString().replace(/^function.+?{/, "").slice(0, -1);
}, t1 = If(Pf(function() {
  var i = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {}, e = function() {
    this.init = function() {
      var o = {};
      this.on = function(c, h) {
        o[c] || (o[c] = []), o[c] = o[c].concat(h);
      }, this.off = function(c, h) {
        var d;
        return o[c] ? (d = o[c].indexOf(h), o[c] = o[c].slice(), o[c].splice(d, 1), d > -1) : !1;
      }, this.trigger = function(c) {
        var h, d, p, g;
        if (h = o[c], !!h)
          if (arguments.length === 2)
            for (p = h.length, d = 0; d < p; ++d)
              h[d].call(this, arguments[1]);
          else {
            for (g = [], d = arguments.length, d = 1; d < arguments.length; ++d)
              g.push(arguments[d]);
            for (p = h.length, d = 0; d < p; ++d)
              h[d].apply(this, g);
          }
      }, this.dispose = function() {
        o = {};
      };
    };
  };
  e.prototype.pipe = function(o) {
    return this.on("data", function(c) {
      o.push(c);
    }), this.on("done", function(c) {
      o.flush(c);
    }), this.on("partialdone", function(c) {
      o.partialFlush(c);
    }), this.on("endedtimeline", function(c) {
      o.endTimeline(c);
    }), this.on("reset", function(c) {
      o.reset(c);
    }), o;
  }, e.prototype.push = function(o) {
    this.trigger("data", o);
  }, e.prototype.flush = function(o) {
    this.trigger("done", o);
  }, e.prototype.partialFlush = function(o) {
    this.trigger("partialdone", o);
  }, e.prototype.endTimeline = function(o) {
    this.trigger("endedtimeline", o);
  }, e.prototype.reset = function(o) {
    this.trigger("reset", o);
  };
  var t = e, s = Math.pow(2, 32), r = function(o) {
    var c = new DataView(o.buffer, o.byteOffset, o.byteLength), h;
    return c.getBigUint64 ? (h = c.getBigUint64(0), h < Number.MAX_SAFE_INTEGER ? Number(h) : h) : c.getUint32(0) * s + c.getUint32(4);
  }, n = {
    getUint64: r,
    MAX_UINT32: s
  }, a = n.MAX_UINT32, l, u, f, m, v, b, S, y, A, w, k, D, R, j, P, F, $, Q, K, oe, Z, ce, V, ee, We, te, _e, kt, ti, ii, si, ri, nr, fl, pl, ml;
  (function() {
    var o;
    if (V = {
      avc1: [],
      // codingname
      avcC: [],
      btrt: [],
      dinf: [],
      dref: [],
      esds: [],
      ftyp: [],
      hdlr: [],
      mdat: [],
      mdhd: [],
      mdia: [],
      mfhd: [],
      minf: [],
      moof: [],
      moov: [],
      mp4a: [],
      // codingname
      mvex: [],
      mvhd: [],
      pasp: [],
      sdtp: [],
      smhd: [],
      stbl: [],
      stco: [],
      stsc: [],
      stsd: [],
      stsz: [],
      stts: [],
      styp: [],
      tfdt: [],
      tfhd: [],
      traf: [],
      trak: [],
      trun: [],
      trex: [],
      tkhd: [],
      vmhd: []
    }, !(typeof Uint8Array > "u")) {
      for (o in V)
        V.hasOwnProperty(o) && (V[o] = [o.charCodeAt(0), o.charCodeAt(1), o.charCodeAt(2), o.charCodeAt(3)]);
      ee = new Uint8Array([105, 115, 111, 109]), te = new Uint8Array([97, 118, 99, 49]), We = new Uint8Array([0, 0, 0, 1]), _e = new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0,
        // pre_defined
        118,
        105,
        100,
        101,
        // handler_type: 'vide'
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        86,
        105,
        100,
        101,
        111,
        72,
        97,
        110,
        100,
        108,
        101,
        114,
        0
        // name: 'VideoHandler'
      ]), kt = new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0,
        // pre_defined
        115,
        111,
        117,
        110,
        // handler_type: 'soun'
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        83,
        111,
        117,
        110,
        100,
        72,
        97,
        110,
        100,
        108,
        101,
        114,
        0
        // name: 'SoundHandler'
      ]), ti = {
        video: _e,
        audio: kt
      }, ri = new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        1,
        // entry_count
        0,
        0,
        0,
        12,
        // entry_size
        117,
        114,
        108,
        32,
        // 'url' type
        0,
        // version 0
        0,
        0,
        1
        // entry_flags
      ]), si = new Uint8Array([
        0,
        // version
        0,
        0,
        0,
        // flags
        0,
        0,
        // balance, 0 means centered
        0,
        0
        // reserved
      ]), nr = new Uint8Array([
        0,
        // version
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0
        // entry_count
      ]), fl = nr, pl = new Uint8Array([
        0,
        // version
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0,
        // sample_size
        0,
        0,
        0,
        0
        // sample_count
      ]), ml = nr, ii = new Uint8Array([
        0,
        // version
        0,
        0,
        1,
        // flags
        0,
        0,
        // graphicsmode
        0,
        0,
        0,
        0,
        0,
        0
        // opcolor
      ]);
    }
  })(), l = function(o) {
    var c = [], h = 0, d, p, g;
    for (d = 1; d < arguments.length; d++)
      c.push(arguments[d]);
    for (d = c.length; d--; )
      h += c[d].byteLength;
    for (p = new Uint8Array(h + 8), g = new DataView(p.buffer, p.byteOffset, p.byteLength), g.setUint32(0, p.byteLength), p.set(o, 4), d = 0, h = 8; d < c.length; d++)
      p.set(c[d], h), h += c[d].byteLength;
    return p;
  }, u = function() {
    return l(V.dinf, l(V.dref, ri));
  }, f = function(o) {
    return l(V.esds, new Uint8Array([
      0,
      // version
      0,
      0,
      0,
      // flags
      // ES_Descriptor
      3,
      // tag, ES_DescrTag
      25,
      // length
      0,
      0,
      // ES_ID
      0,
      // streamDependenceFlag, URL_flag, reserved, streamPriority
      // DecoderConfigDescriptor
      4,
      // tag, DecoderConfigDescrTag
      17,
      // length
      64,
      // object type
      21,
      // streamType
      0,
      6,
      0,
      // bufferSizeDB
      0,
      0,
      218,
      192,
      // maxBitrate
      0,
      0,
      218,
      192,
      // avgBitrate
      // DecoderSpecificInfo
      5,
      // tag, DecoderSpecificInfoTag
      2,
      // length
      // ISO/IEC 14496-3, AudioSpecificConfig
      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35
      o.audioobjecttype << 3 | o.samplingfrequencyindex >>> 1,
      o.samplingfrequencyindex << 7 | o.channelcount << 3,
      6,
      1,
      2
      // GASpecificConfig
    ]));
  }, m = function() {
    return l(V.ftyp, ee, We, ee, te);
  }, F = function(o) {
    return l(V.hdlr, ti[o]);
  }, v = function(o) {
    return l(V.mdat, o);
  }, P = function(o) {
    var c = new Uint8Array([
      0,
      // version 0
      0,
      0,
      0,
      // flags
      0,
      0,
      0,
      2,
      // creation_time
      0,
      0,
      0,
      3,
      // modification_time
      0,
      1,
      95,
      144,
      // timescale, 90,000 "ticks" per second
      o.duration >>> 24 & 255,
      o.duration >>> 16 & 255,
      o.duration >>> 8 & 255,
      o.duration & 255,
      // duration
      85,
      196,
      // 'und' language (undetermined)
      0,
      0
    ]);
    return o.samplerate && (c[12] = o.samplerate >>> 24 & 255, c[13] = o.samplerate >>> 16 & 255, c[14] = o.samplerate >>> 8 & 255, c[15] = o.samplerate & 255), l(V.mdhd, c);
  }, j = function(o) {
    return l(V.mdia, P(o), F(o.type), S(o));
  }, b = function(o) {
    return l(V.mfhd, new Uint8Array([
      0,
      0,
      0,
      0,
      // flags
      (o & 4278190080) >> 24,
      (o & 16711680) >> 16,
      (o & 65280) >> 8,
      o & 255
      // sequence_number
    ]));
  }, S = function(o) {
    return l(V.minf, o.type === "video" ? l(V.vmhd, ii) : l(V.smhd, si), u(), Q(o));
  }, y = function(o, c) {
    for (var h = [], d = c.length; d--; )
      h[d] = oe(c[d]);
    return l.apply(null, [V.moof, b(o)].concat(h));
  }, A = function(o) {
    for (var c = o.length, h = []; c--; )
      h[c] = D(o[c]);
    return l.apply(null, [V.moov, k(4294967295)].concat(h).concat(w(o)));
  }, w = function(o) {
    for (var c = o.length, h = []; c--; )
      h[c] = Z(o[c]);
    return l.apply(null, [V.mvex].concat(h));
  }, k = function(o) {
    var c = new Uint8Array([
      0,
      // version 0
      0,
      0,
      0,
      // flags
      0,
      0,
      0,
      1,
      // creation_time
      0,
      0,
      0,
      2,
      // modification_time
      0,
      1,
      95,
      144,
      // timescale, 90,000 "ticks" per second
      (o & 4278190080) >> 24,
      (o & 16711680) >> 16,
      (o & 65280) >> 8,
      o & 255,
      // duration
      0,
      1,
      0,
      0,
      // 1.0 rate
      1,
      0,
      // 1.0 volume
      0,
      0,
      // reserved
      0,
      0,
      0,
      0,
      // reserved
      0,
      0,
      0,
      0,
      // reserved
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      64,
      0,
      0,
      0,
      // transformation: unity matrix
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      // pre_defined
      255,
      255,
      255,
      255
      // next_track_ID
    ]);
    return l(V.mvhd, c);
  }, $ = function(o) {
    var c = o.samples || [], h = new Uint8Array(4 + c.length), d, p;
    for (p = 0; p < c.length; p++)
      d = c[p].flags, h[p + 4] = d.dependsOn << 4 | d.isDependedOn << 2 | d.hasRedundancy;
    return l(V.sdtp, h);
  }, Q = function(o) {
    return l(V.stbl, K(o), l(V.stts, ml), l(V.stsc, fl), l(V.stsz, pl), l(V.stco, nr));
  }, function() {
    var o, c;
    K = function(h) {
      return l(V.stsd, new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        1
      ]), h.type === "video" ? o(h) : c(h));
    }, o = function(h) {
      var d = h.sps || [], p = h.pps || [], g = [], _ = [], T, x;
      for (T = 0; T < d.length; T++)
        g.push((d[T].byteLength & 65280) >>> 8), g.push(d[T].byteLength & 255), g = g.concat(Array.prototype.slice.call(d[T]));
      for (T = 0; T < p.length; T++)
        _.push((p[T].byteLength & 65280) >>> 8), _.push(p[T].byteLength & 255), _ = _.concat(Array.prototype.slice.call(p[T]));
      if (x = [V.avc1, new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        // reserved
        0,
        1,
        // data_reference_index
        0,
        0,
        // pre_defined
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // pre_defined
        (h.width & 65280) >> 8,
        h.width & 255,
        // width
        (h.height & 65280) >> 8,
        h.height & 255,
        // height
        0,
        72,
        0,
        0,
        // horizresolution
        0,
        72,
        0,
        0,
        // vertresolution
        0,
        0,
        0,
        0,
        // reserved
        0,
        1,
        // frame_count
        19,
        118,
        105,
        100,
        101,
        111,
        106,
        115,
        45,
        99,
        111,
        110,
        116,
        114,
        105,
        98,
        45,
        104,
        108,
        115,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // compressorname
        0,
        24,
        // depth = 24
        17,
        17
        // pre_defined = -1
      ]), l(V.avcC, new Uint8Array([
        1,
        // configurationVersion
        h.profileIdc,
        // AVCProfileIndication
        h.profileCompatibility,
        // profile_compatibility
        h.levelIdc,
        // AVCLevelIndication
        255
        // lengthSizeMinusOne, hard-coded to 4 bytes
      ].concat(
        [d.length],
        // numOfSequenceParameterSets
        g,
        // "SPS"
        [p.length],
        // numOfPictureParameterSets
        _
        // "PPS"
      ))), l(V.btrt, new Uint8Array([
        0,
        28,
        156,
        128,
        // bufferSizeDB
        0,
        45,
        198,
        192,
        // maxBitrate
        0,
        45,
        198,
        192
        // avgBitrate
      ]))], h.sarRatio) {
        var C = h.sarRatio[0], I = h.sarRatio[1];
        x.push(l(V.pasp, new Uint8Array([(C & 4278190080) >> 24, (C & 16711680) >> 16, (C & 65280) >> 8, C & 255, (I & 4278190080) >> 24, (I & 16711680) >> 16, (I & 65280) >> 8, I & 255])));
      }
      return l.apply(null, x);
    }, c = function(h) {
      return l(V.mp4a, new Uint8Array([
        // SampleEntry, ISO/IEC 14496-12
        0,
        0,
        0,
        0,
        0,
        0,
        // reserved
        0,
        1,
        // data_reference_index
        // AudioSampleEntry, ISO/IEC 14496-12
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        (h.channelcount & 65280) >> 8,
        h.channelcount & 255,
        // channelcount
        (h.samplesize & 65280) >> 8,
        h.samplesize & 255,
        // samplesize
        0,
        0,
        // pre_defined
        0,
        0,
        // reserved
        (h.samplerate & 65280) >> 8,
        h.samplerate & 255,
        0,
        0
        // samplerate, 16.16
        // MP4AudioSampleEntry, ISO/IEC 14496-14
      ]), f(h));
    };
  }(), R = function(o) {
    var c = new Uint8Array([
      0,
      // version 0
      0,
      0,
      7,
      // flags
      0,
      0,
      0,
      0,
      // creation_time
      0,
      0,
      0,
      0,
      // modification_time
      (o.id & 4278190080) >> 24,
      (o.id & 16711680) >> 16,
      (o.id & 65280) >> 8,
      o.id & 255,
      // track_ID
      0,
      0,
      0,
      0,
      // reserved
      (o.duration & 4278190080) >> 24,
      (o.duration & 16711680) >> 16,
      (o.duration & 65280) >> 8,
      o.duration & 255,
      // duration
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      // reserved
      0,
      0,
      // layer
      0,
      0,
      // alternate_group
      1,
      0,
      // non-audio track volume
      0,
      0,
      // reserved
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      64,
      0,
      0,
      0,
      // transformation: unity matrix
      (o.width & 65280) >> 8,
      o.width & 255,
      0,
      0,
      // width
      (o.height & 65280) >> 8,
      o.height & 255,
      0,
      0
      // height
    ]);
    return l(V.tkhd, c);
  }, oe = function(o) {
    var c, h, d, p, g, _, T;
    return c = l(V.tfhd, new Uint8Array([
      0,
      // version 0
      0,
      0,
      58,
      // flags
      (o.id & 4278190080) >> 24,
      (o.id & 16711680) >> 16,
      (o.id & 65280) >> 8,
      o.id & 255,
      // track_ID
      0,
      0,
      0,
      1,
      // sample_description_index
      0,
      0,
      0,
      0,
      // default_sample_duration
      0,
      0,
      0,
      0,
      // default_sample_size
      0,
      0,
      0,
      0
      // default_sample_flags
    ])), _ = Math.floor(o.baseMediaDecodeTime / a), T = Math.floor(o.baseMediaDecodeTime % a), h = l(V.tfdt, new Uint8Array([
      1,
      // version 1
      0,
      0,
      0,
      // flags
      // baseMediaDecodeTime
      _ >>> 24 & 255,
      _ >>> 16 & 255,
      _ >>> 8 & 255,
      _ & 255,
      T >>> 24 & 255,
      T >>> 16 & 255,
      T >>> 8 & 255,
      T & 255
    ])), g = 92, o.type === "audio" ? (d = ce(o, g), l(V.traf, c, h, d)) : (p = $(o), d = ce(o, p.length + g), l(V.traf, c, h, d, p));
  }, D = function(o) {
    return o.duration = o.duration || 4294967295, l(V.trak, R(o), j(o));
  }, Z = function(o) {
    var c = new Uint8Array([
      0,
      // version 0
      0,
      0,
      0,
      // flags
      (o.id & 4278190080) >> 24,
      (o.id & 16711680) >> 16,
      (o.id & 65280) >> 8,
      o.id & 255,
      // track_ID
      0,
      0,
      0,
      1,
      // default_sample_description_index
      0,
      0,
      0,
      0,
      // default_sample_duration
      0,
      0,
      0,
      0,
      // default_sample_size
      0,
      1,
      0,
      1
      // default_sample_flags
    ]);
    return o.type !== "video" && (c[c.length - 1] = 0), l(V.trex, c);
  }, function() {
    var o, c, h;
    h = function(d, p) {
      var g = 0, _ = 0, T = 0, x = 0;
      return d.length && (d[0].duration !== void 0 && (g = 1), d[0].size !== void 0 && (_ = 2), d[0].flags !== void 0 && (T = 4), d[0].compositionTimeOffset !== void 0 && (x = 8)), [
        0,
        // version 0
        0,
        g | _ | T | x,
        1,
        // flags
        (d.length & 4278190080) >>> 24,
        (d.length & 16711680) >>> 16,
        (d.length & 65280) >>> 8,
        d.length & 255,
        // sample_count
        (p & 4278190080) >>> 24,
        (p & 16711680) >>> 16,
        (p & 65280) >>> 8,
        p & 255
        // data_offset
      ];
    }, c = function(d, p) {
      var g, _, T, x, C, I;
      for (x = d.samples || [], p += 20 + 16 * x.length, T = h(x, p), _ = new Uint8Array(T.length + x.length * 16), _.set(T), g = T.length, I = 0; I < x.length; I++)
        C = x[I], _[g++] = (C.duration & 4278190080) >>> 24, _[g++] = (C.duration & 16711680) >>> 16, _[g++] = (C.duration & 65280) >>> 8, _[g++] = C.duration & 255, _[g++] = (C.size & 4278190080) >>> 24, _[g++] = (C.size & 16711680) >>> 16, _[g++] = (C.size & 65280) >>> 8, _[g++] = C.size & 255, _[g++] = C.flags.isLeading << 2 | C.flags.dependsOn, _[g++] = C.flags.isDependedOn << 6 | C.flags.hasRedundancy << 4 | C.flags.paddingValue << 1 | C.flags.isNonSyncSample, _[g++] = C.flags.degradationPriority & 61440, _[g++] = C.flags.degradationPriority & 15, _[g++] = (C.compositionTimeOffset & 4278190080) >>> 24, _[g++] = (C.compositionTimeOffset & 16711680) >>> 16, _[g++] = (C.compositionTimeOffset & 65280) >>> 8, _[g++] = C.compositionTimeOffset & 255;
      return l(V.trun, _);
    }, o = function(d, p) {
      var g, _, T, x, C, I;
      for (x = d.samples || [], p += 20 + 8 * x.length, T = h(x, p), g = new Uint8Array(T.length + x.length * 8), g.set(T), _ = T.length, I = 0; I < x.length; I++)
        C = x[I], g[_++] = (C.duration & 4278190080) >>> 24, g[_++] = (C.duration & 16711680) >>> 16, g[_++] = (C.duration & 65280) >>> 8, g[_++] = C.duration & 255, g[_++] = (C.size & 4278190080) >>> 24, g[_++] = (C.size & 16711680) >>> 16, g[_++] = (C.size & 65280) >>> 8, g[_++] = C.size & 255;
      return l(V.trun, g);
    }, ce = function(d, p) {
      return d.type === "audio" ? o(d, p) : c(d, p);
    };
  }();
  var rp = {
    ftyp: m,
    mdat: v,
    moof: y,
    moov: A,
    initSegment: function(o) {
      var c = m(), h = A(o), d;
      return d = new Uint8Array(c.byteLength + h.byteLength), d.set(c), d.set(h, c.byteLength), d;
    }
  }, np = function(o) {
    var c, h, d = [], p = [];
    for (p.byteLength = 0, p.nalCount = 0, p.duration = 0, d.byteLength = 0, c = 0; c < o.length; c++)
      h = o[c], h.nalUnitType === "access_unit_delimiter_rbsp" ? (d.length && (d.duration = h.dts - d.dts, p.byteLength += d.byteLength, p.nalCount += d.length, p.duration += d.duration, p.push(d)), d = [h], d.byteLength = h.data.byteLength, d.pts = h.pts, d.dts = h.dts) : (h.nalUnitType === "slice_layer_without_partitioning_rbsp_idr" && (d.keyFrame = !0), d.duration = h.dts - d.dts, d.byteLength += h.data.byteLength, d.push(h));
    return p.length && (!d.duration || d.duration <= 0) && (d.duration = p[p.length - 1].duration), p.byteLength += d.byteLength, p.nalCount += d.length, p.duration += d.duration, p.push(d), p;
  }, ap = function(o) {
    var c, h, d = [], p = [];
    for (d.byteLength = 0, d.nalCount = 0, d.duration = 0, d.pts = o[0].pts, d.dts = o[0].dts, p.byteLength = 0, p.nalCount = 0, p.duration = 0, p.pts = o[0].pts, p.dts = o[0].dts, c = 0; c < o.length; c++)
      h = o[c], h.keyFrame ? (d.length && (p.push(d), p.byteLength += d.byteLength, p.nalCount += d.nalCount, p.duration += d.duration), d = [h], d.nalCount = h.length, d.byteLength = h.byteLength, d.pts = h.pts, d.dts = h.dts, d.duration = h.duration) : (d.duration += h.duration, d.nalCount += h.length, d.byteLength += h.byteLength, d.push(h));
    return p.length && d.duration <= 0 && (d.duration = p[p.length - 1].duration), p.byteLength += d.byteLength, p.nalCount += d.nalCount, p.duration += d.duration, p.push(d), p;
  }, op = function(o) {
    var c;
    return !o[0][0].keyFrame && o.length > 1 && (c = o.shift(), o.byteLength -= c.byteLength, o.nalCount -= c.nalCount, o[0][0].dts = c.dts, o[0][0].pts = c.pts, o[0][0].duration += c.duration), o;
  }, lp = function() {
    return {
      size: 0,
      flags: {
        isLeading: 0,
        dependsOn: 1,
        isDependedOn: 0,
        hasRedundancy: 0,
        degradationPriority: 0,
        isNonSyncSample: 1
      }
    };
  }, gl = function(o, c) {
    var h = lp();
    return h.dataOffset = c, h.compositionTimeOffset = o.pts - o.dts, h.duration = o.duration, h.size = 4 * o.length, h.size += o.byteLength, o.keyFrame && (h.flags.dependsOn = 2, h.flags.isNonSyncSample = 0), h;
  }, up = function(o, c) {
    var h, d, p, g, _, T = c || 0, x = [];
    for (h = 0; h < o.length; h++)
      for (g = o[h], d = 0; d < g.length; d++)
        _ = g[d], p = gl(_, T), T += p.size, x.push(p);
    return x;
  }, cp = function(o) {
    var c, h, d, p, g, _, T = 0, x = o.byteLength, C = o.nalCount, I = x + 4 * C, O = new Uint8Array(I), U = new DataView(O.buffer);
    for (c = 0; c < o.length; c++)
      for (p = o[c], h = 0; h < p.length; h++)
        for (g = p[h], d = 0; d < g.length; d++)
          _ = g[d], U.setUint32(T, _.data.byteLength), T += 4, O.set(_.data, T), T += _.data.byteLength;
    return O;
  }, dp = function(o, c) {
    var h, d = c || 0, p = [];
    return h = gl(o, d), p.push(h), p;
  }, hp = function(o) {
    var c, h, d = 0, p = o.byteLength, g = o.length, _ = p + 4 * g, T = new Uint8Array(_), x = new DataView(T.buffer);
    for (c = 0; c < o.length; c++)
      h = o[c], x.setUint32(d, h.data.byteLength), d += 4, T.set(h.data, d), d += h.data.byteLength;
    return T;
  }, fp = {
    groupNalsIntoFrames: np,
    groupFramesIntoGops: ap,
    extendFirstKeyFrame: op,
    generateSampleTable: up,
    concatenateNalData: cp,
    generateSampleTableForFrame: dp,
    concatenateNalDataForFrame: hp
  }, $t = [33, 16, 5, 32, 164, 27], Fn = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252], se = function(o) {
    for (var c = []; o--; )
      c.push(0);
    return c;
  }, pp = function(o) {
    return Object.keys(o).reduce(function(c, h) {
      return c[h] = new Uint8Array(o[h].reduce(function(d, p) {
        return d.concat(p);
      }, [])), c;
    }, {});
  }, Un, mp = function() {
    if (!Un) {
      var o = {
        96e3: [$t, [227, 64], se(154), [56]],
        88200: [$t, [231], se(170), [56]],
        64e3: [$t, [248, 192], se(240), [56]],
        48e3: [$t, [255, 192], se(268), [55, 148, 128], se(54), [112]],
        44100: [$t, [255, 192], se(268), [55, 163, 128], se(84), [112]],
        32e3: [$t, [255, 192], se(268), [55, 234], se(226), [112]],
        24e3: [$t, [255, 192], se(268), [55, 255, 128], se(268), [111, 112], se(126), [224]],
        16e3: [$t, [255, 192], se(268), [55, 255, 128], se(268), [111, 255], se(269), [223, 108], se(195), [1, 192]],
        12e3: [Fn, se(268), [3, 127, 248], se(268), [6, 255, 240], se(268), [13, 255, 224], se(268), [27, 253, 128], se(259), [56]],
        11025: [Fn, se(268), [3, 127, 248], se(268), [6, 255, 240], se(268), [13, 255, 224], se(268), [27, 255, 192], se(268), [55, 175, 128], se(108), [112]],
        8e3: [Fn, se(268), [3, 121, 16], se(47), [7]]
      };
      Un = pp(o);
    }
    return Un;
  }, qn = 9e4, $n, Vn, ar, Hn, vl, yl, _l;
  $n = function(o) {
    return o * qn;
  }, Vn = function(o, c) {
    return o * c;
  }, ar = function(o) {
    return o / qn;
  }, Hn = function(o, c) {
    return o / c;
  }, vl = function(o, c) {
    return $n(Hn(o, c));
  }, yl = function(o, c) {
    return Vn(ar(o), c);
  }, _l = function(o, c, h) {
    return ar(h ? o : o - c);
  };
  var de = {
    ONE_SECOND_IN_TS: qn,
    secondsToVideoTs: $n,
    secondsToAudioTs: Vn,
    videoTsToSeconds: ar,
    audioTsToSeconds: Hn,
    audioTsToVideoTs: vl,
    videoTsToAudioTs: yl,
    metadataTsToSeconds: _l
  }, gp = mp, or = de, vp = function(o) {
    var c, h, d = 0;
    for (c = 0; c < o.length; c++)
      h = o[c], d += h.data.byteLength;
    return d;
  }, yp = function(o, c, h, d) {
    var p, g = 0, _ = 0, T = 0, x = 0, C, I, O;
    if (c.length && (p = or.audioTsToVideoTs(o.baseMediaDecodeTime, o.samplerate), g = Math.ceil(or.ONE_SECOND_IN_TS / (o.samplerate / 1024)), h && d && (_ = p - Math.max(h, d), T = Math.floor(_ / g), x = T * g), !(T < 1 || x > or.ONE_SECOND_IN_TS / 2))) {
      for (C = gp()[o.samplerate], C || (C = c[0].data), I = 0; I < T; I++)
        O = c[0], c.splice(0, 0, {
          data: C,
          dts: O.dts - g,
          pts: O.pts - g
        });
      return o.baseMediaDecodeTime -= Math.floor(or.videoTsToAudioTs(x, o.samplerate)), x;
    }
  }, _p = function(o, c, h) {
    return c.minSegmentDts >= h ? o : (c.minSegmentDts = 1 / 0, o.filter(function(d) {
      return d.dts >= h ? (c.minSegmentDts = Math.min(c.minSegmentDts, d.dts), c.minSegmentPts = c.minSegmentDts, !0) : !1;
    }));
  }, Tp = function(o) {
    var c, h, d = [];
    for (c = 0; c < o.length; c++)
      h = o[c], d.push({
        size: h.data.byteLength,
        duration: 1024
        // For AAC audio, all samples contain 1024 samples
      });
    return d;
  }, bp = function(o) {
    var c, h, d = 0, p = new Uint8Array(vp(o));
    for (c = 0; c < o.length; c++)
      h = o[c], p.set(h.data, d), d += h.data.byteLength;
    return p;
  }, xp = {
    prefixWithSilence: yp,
    trimAdtsFramesByEarliestDts: _p,
    generateSampleTable: Tp,
    concatenateFrameData: bp
  }, Sp = de.ONE_SECOND_IN_TS, Ep = function(o, c) {
    typeof c.pts == "number" && (o.timelineStartInfo.pts === void 0 && (o.timelineStartInfo.pts = c.pts), o.minSegmentPts === void 0 ? o.minSegmentPts = c.pts : o.minSegmentPts = Math.min(o.minSegmentPts, c.pts), o.maxSegmentPts === void 0 ? o.maxSegmentPts = c.pts : o.maxSegmentPts = Math.max(o.maxSegmentPts, c.pts)), typeof c.dts == "number" && (o.timelineStartInfo.dts === void 0 && (o.timelineStartInfo.dts = c.dts), o.minSegmentDts === void 0 ? o.minSegmentDts = c.dts : o.minSegmentDts = Math.min(o.minSegmentDts, c.dts), o.maxSegmentDts === void 0 ? o.maxSegmentDts = c.dts : o.maxSegmentDts = Math.max(o.maxSegmentDts, c.dts));
  }, Cp = function(o) {
    delete o.minSegmentDts, delete o.maxSegmentDts, delete o.minSegmentPts, delete o.maxSegmentPts;
  }, wp = function(o, c) {
    var h, d, p = o.minSegmentDts;
    return c || (p -= o.timelineStartInfo.dts), h = o.timelineStartInfo.baseMediaDecodeTime, h += p, h = Math.max(0, h), o.type === "audio" && (d = o.samplerate / Sp, h *= d, h = Math.floor(h)), h;
  }, Ap = {
    clearDtsInfo: Cp,
    calculateTrackBaseMediaDecodeTime: wp,
    collectDtsInfo: Ep
  }, Tl = 4, Dp = 128, kp = function(o) {
    for (var c = 0, h = {
      payloadType: -1,
      payloadSize: 0
    }, d = 0, p = 0; c < o.byteLength && o[c] !== Dp; ) {
      for (; o[c] === 255; )
        d += 255, c++;
      for (d += o[c++]; o[c] === 255; )
        p += 255, c++;
      if (p += o[c++], !h.payload && d === Tl) {
        var g = String.fromCharCode(o[c + 3], o[c + 4], o[c + 5], o[c + 6]);
        if (g === "GA94") {
          h.payloadType = d, h.payloadSize = p, h.payload = o.subarray(c, c + p);
          break;
        } else
          h.payload = void 0;
      }
      c += p, d = 0, p = 0;
    }
    return h;
  }, Ip = function(o) {
    return o.payload[0] !== 181 || (o.payload[1] << 8 | o.payload[2]) !== 49 || String.fromCharCode(o.payload[3], o.payload[4], o.payload[5], o.payload[6]) !== "GA94" || o.payload[7] !== 3 ? null : o.payload.subarray(8, o.payload.length - 1);
  }, Pp = function(o, c) {
    var h = [], d, p, g, _;
    if (!(c[0] & 64))
      return h;
    for (p = c[0] & 31, d = 0; d < p; d++)
      g = d * 3, _ = {
        type: c[g + 2] & 3,
        pts: o
      }, c[g + 2] & 4 && (_.ccData = c[g + 3] << 8 | c[g + 4], h.push(_));
    return h;
  }, Lp = function(o) {
    for (var c = o.byteLength, h = [], d = 1, p, g; d < c - 2; )
      o[d] === 0 && o[d + 1] === 0 && o[d + 2] === 3 ? (h.push(d + 2), d += 2) : d++;
    if (h.length === 0)
      return o;
    p = c - h.length, g = new Uint8Array(p);
    var _ = 0;
    for (d = 0; d < p; _++, d++)
      _ === h[0] && (_++, h.shift()), g[d] = o[_];
    return g;
  }, bl = {
    parseSei: kp,
    parseUserData: Ip,
    parseCaptionPackets: Pp,
    discardEmulationPreventionBytes: Lp,
    USER_DATA_REGISTERED_ITU_T_T35: Tl
  }, zn = t, lr = bl, Fe = function(o) {
    o = o || {}, Fe.prototype.init.call(this), this.parse708captions_ = typeof o.parse708captions == "boolean" ? o.parse708captions : !0, this.captionPackets_ = [], this.ccStreams_ = [
      new fe(0, 0),
      // eslint-disable-line no-use-before-define
      new fe(0, 1),
      // eslint-disable-line no-use-before-define
      new fe(1, 0),
      // eslint-disable-line no-use-before-define
      new fe(1, 1)
      // eslint-disable-line no-use-before-define
    ], this.parse708captions_ && (this.cc708Stream_ = new ae({
      captionServices: o.captionServices
    })), this.reset(), this.ccStreams_.forEach(function(c) {
      c.on("data", this.trigger.bind(this, "data")), c.on("partialdone", this.trigger.bind(this, "partialdone")), c.on("done", this.trigger.bind(this, "done"));
    }, this), this.parse708captions_ && (this.cc708Stream_.on("data", this.trigger.bind(this, "data")), this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone")), this.cc708Stream_.on("done", this.trigger.bind(this, "done")));
  };
  Fe.prototype = new zn(), Fe.prototype.push = function(o) {
    var c, h, d;
    if (o.nalUnitType === "sei_rbsp" && (c = lr.parseSei(o.escapedRBSP), !!c.payload && c.payloadType === lr.USER_DATA_REGISTERED_ITU_T_T35 && (h = lr.parseUserData(c), !!h))) {
      if (o.dts < this.latestDts_) {
        this.ignoreNextEqualDts_ = !0;
        return;
      } else if (o.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
        this.numSameDts_--, this.numSameDts_ || (this.ignoreNextEqualDts_ = !1);
        return;
      }
      d = lr.parseCaptionPackets(o.pts, h), this.captionPackets_ = this.captionPackets_.concat(d), this.latestDts_ !== o.dts && (this.numSameDts_ = 0), this.numSameDts_++, this.latestDts_ = o.dts;
    }
  }, Fe.prototype.flushCCStreams = function(o) {
    this.ccStreams_.forEach(function(c) {
      return o === "flush" ? c.flush() : c.partialFlush();
    }, this);
  }, Fe.prototype.flushStream = function(o) {
    if (!this.captionPackets_.length) {
      this.flushCCStreams(o);
      return;
    }
    this.captionPackets_.forEach(function(c, h) {
      c.presortIndex = h;
    }), this.captionPackets_.sort(function(c, h) {
      return c.pts === h.pts ? c.presortIndex - h.presortIndex : c.pts - h.pts;
    }), this.captionPackets_.forEach(function(c) {
      c.type < 2 ? this.dispatchCea608Packet(c) : this.dispatchCea708Packet(c);
    }, this), this.captionPackets_.length = 0, this.flushCCStreams(o);
  }, Fe.prototype.flush = function() {
    return this.flushStream("flush");
  }, Fe.prototype.partialFlush = function() {
    return this.flushStream("partialFlush");
  }, Fe.prototype.reset = function() {
    this.latestDts_ = null, this.ignoreNextEqualDts_ = !1, this.numSameDts_ = 0, this.activeCea608Channel_ = [null, null], this.ccStreams_.forEach(function(o) {
      o.reset();
    });
  }, Fe.prototype.dispatchCea608Packet = function(o) {
    this.setsTextOrXDSActive(o) ? this.activeCea608Channel_[o.type] = null : this.setsChannel1Active(o) ? this.activeCea608Channel_[o.type] = 0 : this.setsChannel2Active(o) && (this.activeCea608Channel_[o.type] = 1), this.activeCea608Channel_[o.type] !== null && this.ccStreams_[(o.type << 1) + this.activeCea608Channel_[o.type]].push(o);
  }, Fe.prototype.setsChannel1Active = function(o) {
    return (o.ccData & 30720) === 4096;
  }, Fe.prototype.setsChannel2Active = function(o) {
    return (o.ccData & 30720) === 6144;
  }, Fe.prototype.setsTextOrXDSActive = function(o) {
    return (o.ccData & 28928) === 256 || (o.ccData & 30974) === 4138 || (o.ccData & 30974) === 6186;
  }, Fe.prototype.dispatchCea708Packet = function(o) {
    this.parse708captions_ && this.cc708Stream_.push(o);
  };
  var Op = {
    127: 9834,
    // ♪
    4128: 32,
    // Transparent Space
    4129: 160,
    // Nob-breaking Transparent Space
    4133: 8230,
    // …
    4138: 352,
    // Š
    4140: 338,
    // Œ
    4144: 9608,
    // █
    4145: 8216,
    // ‘
    4146: 8217,
    // ’
    4147: 8220,
    // “
    4148: 8221,
    // ”
    4149: 8226,
    // •
    4153: 8482,
    // ™
    4154: 353,
    // š
    4156: 339,
    // œ
    4157: 8480,
    // ℠
    4159: 376,
    // Ÿ
    4214: 8539,
    // ⅛
    4215: 8540,
    // ⅜
    4216: 8541,
    // ⅝
    4217: 8542,
    // ⅞
    4218: 9168,
    // ⏐
    4219: 9124,
    // ⎤
    4220: 9123,
    // ⎣
    4221: 9135,
    // ⎯
    4222: 9126,
    // ⎦
    4223: 9121,
    // ⎡
    4256: 12600
    // ㄸ (CC char)
  }, jp = function(o) {
    var c = Op[o] || o;
    return o & 4096 && o === c ? "" : String.fromCharCode(c);
  }, ur = function(o) {
    return 32 <= o && o <= 127 || 160 <= o && o <= 255;
  }, It = function(o) {
    this.windowNum = o, this.reset();
  };
  It.prototype.reset = function() {
    this.clearText(), this.pendingNewLine = !1, this.winAttr = {}, this.penAttr = {}, this.penLoc = {}, this.penColor = {}, this.visible = 0, this.rowLock = 0, this.columnLock = 0, this.priority = 0, this.relativePositioning = 0, this.anchorVertical = 0, this.anchorHorizontal = 0, this.anchorPoint = 0, this.rowCount = 1, this.virtualRowCount = this.rowCount + 1, this.columnCount = 41, this.windowStyle = 0, this.penStyle = 0;
  }, It.prototype.getText = function() {
    return this.rows.join(`
`);
  }, It.prototype.clearText = function() {
    this.rows = [""], this.rowIdx = 0;
  }, It.prototype.newLine = function(o) {
    for (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow == "function" && this.beforeRowOverflow(o), this.rows.length > 0 && (this.rows.push(""), this.rowIdx++); this.rows.length > this.virtualRowCount; )
      this.rows.shift(), this.rowIdx--;
  }, It.prototype.isEmpty = function() {
    return this.rows.length === 0 ? !0 : this.rows.length === 1 ? this.rows[0] === "" : !1;
  }, It.prototype.addText = function(o) {
    this.rows[this.rowIdx] += o;
  }, It.prototype.backspace = function() {
    if (!this.isEmpty()) {
      var o = this.rows[this.rowIdx];
      this.rows[this.rowIdx] = o.substr(0, o.length - 1);
    }
  };
  var cr = function(o, c, h) {
    this.serviceNum = o, this.text = "", this.currentWindow = new It(-1), this.windows = [], this.stream = h, typeof c == "string" && this.createTextDecoder(c);
  };
  cr.prototype.init = function(o, c) {
    this.startPts = o;
    for (var h = 0; h < 8; h++)
      this.windows[h] = new It(h), typeof c == "function" && (this.windows[h].beforeRowOverflow = c);
  }, cr.prototype.setCurrentWindow = function(o) {
    this.currentWindow = this.windows[o];
  }, cr.prototype.createTextDecoder = function(o) {
    if (typeof TextDecoder > "u")
      this.stream.trigger("log", {
        level: "warn",
        message: "The `encoding` option is unsupported without TextDecoder support"
      });
    else
      try {
        this.textDecoder_ = new TextDecoder(o);
      } catch (c) {
        this.stream.trigger("log", {
          level: "warn",
          message: "TextDecoder could not be created with " + o + " encoding. " + c
        });
      }
  };
  var ae = function(o) {
    o = o || {}, ae.prototype.init.call(this);
    var c = this, h = o.captionServices || {}, d = {}, p;
    Object.keys(h).forEach((g) => {
      p = h[g], /^SERVICE/.test(g) && (d[g] = p.encoding);
    }), this.serviceEncodings = d, this.current708Packet = null, this.services = {}, this.push = function(g) {
      g.type === 3 ? (c.new708Packet(), c.add708Bytes(g)) : (c.current708Packet === null && c.new708Packet(), c.add708Bytes(g));
    };
  };
  ae.prototype = new zn(), ae.prototype.new708Packet = function() {
    this.current708Packet !== null && this.push708Packet(), this.current708Packet = {
      data: [],
      ptsVals: []
    };
  }, ae.prototype.add708Bytes = function(o) {
    var c = o.ccData, h = c >>> 8, d = c & 255;
    this.current708Packet.ptsVals.push(o.pts), this.current708Packet.data.push(h), this.current708Packet.data.push(d);
  }, ae.prototype.push708Packet = function() {
    var o = this.current708Packet, c = o.data, h = null, d = null, p = 0, g = c[p++];
    for (o.seq = g >> 6, o.sizeCode = g & 63; p < c.length; p++)
      g = c[p++], h = g >> 5, d = g & 31, h === 7 && d > 0 && (g = c[p++], h = g), this.pushServiceBlock(h, p, d), d > 0 && (p += d - 1);
  }, ae.prototype.pushServiceBlock = function(o, c, h) {
    var d, p = c, g = this.current708Packet.data, _ = this.services[o];
    for (_ || (_ = this.initService(o, p)); p < c + h && p < g.length; p++)
      d = g[p], ur(d) ? p = this.handleText(p, _) : d === 24 ? p = this.multiByteCharacter(p, _) : d === 16 ? p = this.extendedCommands(p, _) : 128 <= d && d <= 135 ? p = this.setCurrentWindow(p, _) : 152 <= d && d <= 159 ? p = this.defineWindow(p, _) : d === 136 ? p = this.clearWindows(p, _) : d === 140 ? p = this.deleteWindows(p, _) : d === 137 ? p = this.displayWindows(p, _) : d === 138 ? p = this.hideWindows(p, _) : d === 139 ? p = this.toggleWindows(p, _) : d === 151 ? p = this.setWindowAttributes(p, _) : d === 144 ? p = this.setPenAttributes(p, _) : d === 145 ? p = this.setPenColor(p, _) : d === 146 ? p = this.setPenLocation(p, _) : d === 143 ? _ = this.reset(p, _) : d === 8 ? _.currentWindow.backspace() : d === 12 ? _.currentWindow.clearText() : d === 13 ? _.currentWindow.pendingNewLine = !0 : d === 14 ? _.currentWindow.clearText() : d === 141 && p++;
  }, ae.prototype.extendedCommands = function(o, c) {
    var h = this.current708Packet.data, d = h[++o];
    return ur(d) && (o = this.handleText(o, c, {
      isExtended: !0
    })), o;
  }, ae.prototype.getPts = function(o) {
    return this.current708Packet.ptsVals[Math.floor(o / 2)];
  }, ae.prototype.initService = function(o, c) {
    var d = "SERVICE" + o, h = this, d, p;
    return d in this.serviceEncodings && (p = this.serviceEncodings[d]), this.services[o] = new cr(o, p, h), this.services[o].init(this.getPts(c), function(g) {
      h.flushDisplayed(g, h.services[o]);
    }), this.services[o];
  }, ae.prototype.handleText = function(o, c, h) {
    var d = h && h.isExtended, p = h && h.isMultiByte, g = this.current708Packet.data, _ = d ? 4096 : 0, T = g[o], x = g[o + 1], C = c.currentWindow, I, O;
    function U(M) {
      return M.map((z) => ("0" + (z & 255).toString(16)).slice(-2)).join("");
    }
    if (p ? (O = [T, x], o++) : O = [T], c.textDecoder_ && !d)
      I = c.textDecoder_.decode(new Uint8Array(O));
    else if (p) {
      const M = U(O);
      I = String.fromCharCode(parseInt(M, 16));
    } else
      I = jp(_ | T);
    return C.pendingNewLine && !C.isEmpty() && C.newLine(this.getPts(o)), C.pendingNewLine = !1, C.addText(I), o;
  }, ae.prototype.multiByteCharacter = function(o, c) {
    var h = this.current708Packet.data, d = h[o + 1], p = h[o + 2];
    return ur(d) && ur(p) && (o = this.handleText(++o, c, {
      isMultiByte: !0
    })), o;
  }, ae.prototype.setCurrentWindow = function(o, c) {
    var h = this.current708Packet.data, d = h[o], p = d & 7;
    return c.setCurrentWindow(p), o;
  }, ae.prototype.defineWindow = function(o, c) {
    var h = this.current708Packet.data, d = h[o], p = d & 7;
    c.setCurrentWindow(p);
    var g = c.currentWindow;
    return d = h[++o], g.visible = (d & 32) >> 5, g.rowLock = (d & 16) >> 4, g.columnLock = (d & 8) >> 3, g.priority = d & 7, d = h[++o], g.relativePositioning = (d & 128) >> 7, g.anchorVertical = d & 127, d = h[++o], g.anchorHorizontal = d, d = h[++o], g.anchorPoint = (d & 240) >> 4, g.rowCount = d & 15, d = h[++o], g.columnCount = d & 63, d = h[++o], g.windowStyle = (d & 56) >> 3, g.penStyle = d & 7, g.virtualRowCount = g.rowCount + 1, o;
  }, ae.prototype.setWindowAttributes = function(o, c) {
    var h = this.current708Packet.data, d = h[o], p = c.currentWindow.winAttr;
    return d = h[++o], p.fillOpacity = (d & 192) >> 6, p.fillRed = (d & 48) >> 4, p.fillGreen = (d & 12) >> 2, p.fillBlue = d & 3, d = h[++o], p.borderType = (d & 192) >> 6, p.borderRed = (d & 48) >> 4, p.borderGreen = (d & 12) >> 2, p.borderBlue = d & 3, d = h[++o], p.borderType += (d & 128) >> 5, p.wordWrap = (d & 64) >> 6, p.printDirection = (d & 48) >> 4, p.scrollDirection = (d & 12) >> 2, p.justify = d & 3, d = h[++o], p.effectSpeed = (d & 240) >> 4, p.effectDirection = (d & 12) >> 2, p.displayEffect = d & 3, o;
  }, ae.prototype.flushDisplayed = function(o, c) {
    for (var h = [], d = 0; d < 8; d++)
      c.windows[d].visible && !c.windows[d].isEmpty() && h.push(c.windows[d].getText());
    c.endPts = o, c.text = h.join(`

`), this.pushCaption(c), c.startPts = o;
  }, ae.prototype.pushCaption = function(o) {
    o.text !== "" && (this.trigger("data", {
      startPts: o.startPts,
      endPts: o.endPts,
      text: o.text,
      stream: "cc708_" + o.serviceNum
    }), o.text = "", o.startPts = o.endPts);
  }, ae.prototype.displayWindows = function(o, c) {
    var h = this.current708Packet.data, d = h[++o], p = this.getPts(o);
    this.flushDisplayed(p, c);
    for (var g = 0; g < 8; g++)
      d & 1 << g && (c.windows[g].visible = 1);
    return o;
  }, ae.prototype.hideWindows = function(o, c) {
    var h = this.current708Packet.data, d = h[++o], p = this.getPts(o);
    this.flushDisplayed(p, c);
    for (var g = 0; g < 8; g++)
      d & 1 << g && (c.windows[g].visible = 0);
    return o;
  }, ae.prototype.toggleWindows = function(o, c) {
    var h = this.current708Packet.data, d = h[++o], p = this.getPts(o);
    this.flushDisplayed(p, c);
    for (var g = 0; g < 8; g++)
      d & 1 << g && (c.windows[g].visible ^= 1);
    return o;
  }, ae.prototype.clearWindows = function(o, c) {
    var h = this.current708Packet.data, d = h[++o], p = this.getPts(o);
    this.flushDisplayed(p, c);
    for (var g = 0; g < 8; g++)
      d & 1 << g && c.windows[g].clearText();
    return o;
  }, ae.prototype.deleteWindows = function(o, c) {
    var h = this.current708Packet.data, d = h[++o], p = this.getPts(o);
    this.flushDisplayed(p, c);
    for (var g = 0; g < 8; g++)
      d & 1 << g && c.windows[g].reset();
    return o;
  }, ae.prototype.setPenAttributes = function(o, c) {
    var h = this.current708Packet.data, d = h[o], p = c.currentWindow.penAttr;
    return d = h[++o], p.textTag = (d & 240) >> 4, p.offset = (d & 12) >> 2, p.penSize = d & 3, d = h[++o], p.italics = (d & 128) >> 7, p.underline = (d & 64) >> 6, p.edgeType = (d & 56) >> 3, p.fontStyle = d & 7, o;
  }, ae.prototype.setPenColor = function(o, c) {
    var h = this.current708Packet.data, d = h[o], p = c.currentWindow.penColor;
    return d = h[++o], p.fgOpacity = (d & 192) >> 6, p.fgRed = (d & 48) >> 4, p.fgGreen = (d & 12) >> 2, p.fgBlue = d & 3, d = h[++o], p.bgOpacity = (d & 192) >> 6, p.bgRed = (d & 48) >> 4, p.bgGreen = (d & 12) >> 2, p.bgBlue = d & 3, d = h[++o], p.edgeRed = (d & 48) >> 4, p.edgeGreen = (d & 12) >> 2, p.edgeBlue = d & 3, o;
  }, ae.prototype.setPenLocation = function(o, c) {
    var h = this.current708Packet.data, d = h[o], p = c.currentWindow.penLoc;
    return c.currentWindow.pendingNewLine = !0, d = h[++o], p.row = d & 15, d = h[++o], p.column = d & 63, o;
  }, ae.prototype.reset = function(o, c) {
    var h = this.getPts(o);
    return this.flushDisplayed(h, c), this.initService(c.serviceNum, o);
  };
  var Rp = {
    42: 225,
    // á
    92: 233,
    // é
    94: 237,
    // í
    95: 243,
    // ó
    96: 250,
    // ú
    123: 231,
    // ç
    124: 247,
    // ÷
    125: 209,
    // Ñ
    126: 241,
    // ñ
    127: 9608,
    // █
    304: 174,
    // ®
    305: 176,
    // °
    306: 189,
    // ½
    307: 191,
    // ¿
    308: 8482,
    // ™
    309: 162,
    // ¢
    310: 163,
    // £
    311: 9834,
    // ♪
    312: 224,
    // à
    313: 160,
    //
    314: 232,
    // è
    315: 226,
    // â
    316: 234,
    // ê
    317: 238,
    // î
    318: 244,
    // ô
    319: 251,
    // û
    544: 193,
    // Á
    545: 201,
    // É
    546: 211,
    // Ó
    547: 218,
    // Ú
    548: 220,
    // Ü
    549: 252,
    // ü
    550: 8216,
    // ‘
    551: 161,
    // ¡
    552: 42,
    // *
    553: 39,
    // '
    554: 8212,
    // —
    555: 169,
    // ©
    556: 8480,
    // ℠
    557: 8226,
    // •
    558: 8220,
    // “
    559: 8221,
    // ”
    560: 192,
    // À
    561: 194,
    // Â
    562: 199,
    // Ç
    563: 200,
    // È
    564: 202,
    // Ê
    565: 203,
    // Ë
    566: 235,
    // ë
    567: 206,
    // Î
    568: 207,
    // Ï
    569: 239,
    // ï
    570: 212,
    // Ô
    571: 217,
    // Ù
    572: 249,
    // ù
    573: 219,
    // Û
    574: 171,
    // «
    575: 187,
    // »
    800: 195,
    // Ã
    801: 227,
    // ã
    802: 205,
    // Í
    803: 204,
    // Ì
    804: 236,
    // ì
    805: 210,
    // Ò
    806: 242,
    // ò
    807: 213,
    // Õ
    808: 245,
    // õ
    809: 123,
    // {
    810: 125,
    // }
    811: 92,
    // \
    812: 94,
    // ^
    813: 95,
    // _
    814: 124,
    // |
    815: 126,
    // ~
    816: 196,
    // Ä
    817: 228,
    // ä
    818: 214,
    // Ö
    819: 246,
    // ö
    820: 223,
    // ß
    821: 165,
    // ¥
    822: 164,
    // ¤
    823: 9474,
    // │
    824: 197,
    // Å
    825: 229,
    // å
    826: 216,
    // Ø
    827: 248,
    // ø
    828: 9484,
    // ┌
    829: 9488,
    // ┐
    830: 9492,
    // └
    831: 9496
    // ┘
  }, dr = function(o) {
    return o === null ? "" : (o = Rp[o] || o, String.fromCharCode(o));
  }, hr = 14, Np = [4352, 4384, 4608, 4640, 5376, 5408, 5632, 5664, 5888, 5920, 4096, 4864, 4896, 5120, 5152], ni = function() {
    for (var o = [], c = hr + 1; c--; )
      o.push({
        text: "",
        indent: 0,
        offset: 0
      });
    return o;
  }, fe = function(o, c) {
    fe.prototype.init.call(this), this.field_ = o || 0, this.dataChannel_ = c || 0, this.name_ = "CC" + ((this.field_ << 1 | this.dataChannel_) + 1), this.setConstants(), this.reset(), this.push = function(h) {
      var d, p, g, _, T;
      if (d = h.ccData & 32639, d === this.lastControlCode_) {
        this.lastControlCode_ = null;
        return;
      }
      if ((d & 61440) === 4096 ? this.lastControlCode_ = d : d !== this.PADDING_ && (this.lastControlCode_ = null), g = d >>> 8, _ = d & 255, d !== this.PADDING_)
        if (d === this.RESUME_CAPTION_LOADING_)
          this.mode_ = "popOn";
        else if (d === this.END_OF_CAPTION_)
          this.mode_ = "popOn", this.clearFormatting(h.pts), this.flushDisplayed(h.pts), p = this.displayed_, this.displayed_ = this.nonDisplayed_, this.nonDisplayed_ = p, this.startPts_ = h.pts;
        else if (d === this.ROLL_UP_2_ROWS_)
          this.rollUpRows_ = 2, this.setRollUp(h.pts);
        else if (d === this.ROLL_UP_3_ROWS_)
          this.rollUpRows_ = 3, this.setRollUp(h.pts);
        else if (d === this.ROLL_UP_4_ROWS_)
          this.rollUpRows_ = 4, this.setRollUp(h.pts);
        else if (d === this.CARRIAGE_RETURN_)
          this.clearFormatting(h.pts), this.flushDisplayed(h.pts), this.shiftRowsUp_(), this.startPts_ = h.pts;
        else if (d === this.BACKSPACE_)
          this.mode_ === "popOn" ? this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1) : this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);
        else if (d === this.ERASE_DISPLAYED_MEMORY_)
          this.flushDisplayed(h.pts), this.displayed_ = ni();
        else if (d === this.ERASE_NON_DISPLAYED_MEMORY_)
          this.nonDisplayed_ = ni();
        else if (d === this.RESUME_DIRECT_CAPTIONING_)
          this.mode_ !== "paintOn" && (this.flushDisplayed(h.pts), this.displayed_ = ni()), this.mode_ = "paintOn", this.startPts_ = h.pts;
        else if (this.isSpecialCharacter(g, _))
          g = (g & 3) << 8, T = dr(g | _), this[this.mode_](h.pts, T), this.column_++;
        else if (this.isExtCharacter(g, _))
          this.mode_ === "popOn" ? this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1) : this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1), g = (g & 3) << 8, T = dr(g | _), this[this.mode_](h.pts, T), this.column_++;
        else if (this.isMidRowCode(g, _))
          this.clearFormatting(h.pts), this[this.mode_](h.pts, " "), this.column_++, (_ & 14) === 14 && this.addFormatting(h.pts, ["i"]), (_ & 1) === 1 && this.addFormatting(h.pts, ["u"]);
        else if (this.isOffsetControlCode(g, _)) {
          const C = _ & 3;
          this.nonDisplayed_[this.row_].offset = C, this.column_ += C;
        } else if (this.isPAC(g, _)) {
          var x = Np.indexOf(d & 7968);
          if (this.mode_ === "rollUp" && (x - this.rollUpRows_ + 1 < 0 && (x = this.rollUpRows_ - 1), this.setRollUp(h.pts, x)), x !== this.row_ && x >= 0 && x <= 14 && (this.clearFormatting(h.pts), this.row_ = x), _ & 1 && this.formatting_.indexOf("u") === -1 && this.addFormatting(h.pts, ["u"]), (d & 16) === 16) {
            const C = (d & 14) >> 1;
            this.column_ = C * 4, this.nonDisplayed_[this.row_].indent += C;
          }
          this.isColorPAC(_) && (_ & 14) === 14 && this.addFormatting(h.pts, ["i"]);
        } else
          this.isNormalChar(g) && (_ === 0 && (_ = null), T = dr(g), T += dr(_), this[this.mode_](h.pts, T), this.column_ += T.length);
    };
  };
  fe.prototype = new zn(), fe.prototype.flushDisplayed = function(o) {
    const c = (d) => {
      this.trigger("log", {
        level: "warn",
        message: "Skipping a malformed 608 caption at index " + d + "."
      });
    }, h = [];
    this.displayed_.forEach((d, p) => {
      if (d && d.text && d.text.length) {
        try {
          d.text = d.text.trim();
        } catch {
          c(p);
        }
        d.text.length && h.push({
          // The text to be displayed in the caption from this specific row, with whitespace removed.
          text: d.text,
          // Value between 1 and 15 representing the PAC row used to calculate line height.
          line: p + 1,
          // A number representing the indent position by percentage (CEA-608 PAC indent code).
          // The value will be a number between 10 and 80. Offset is used to add an aditional
          // value to the position if necessary.
          position: 10 + Math.min(70, d.indent * 10) + d.offset * 2.5
        });
      } else
        d == null && c(p);
    }), h.length && this.trigger("data", {
      startPts: this.startPts_,
      endPts: o,
      content: h,
      stream: this.name_
    });
  }, fe.prototype.reset = function() {
    this.mode_ = "popOn", this.topRow_ = 0, this.startPts_ = 0, this.displayed_ = ni(), this.nonDisplayed_ = ni(), this.lastControlCode_ = null, this.column_ = 0, this.row_ = hr, this.rollUpRows_ = 2, this.formatting_ = [];
  }, fe.prototype.setConstants = function() {
    this.dataChannel_ === 0 ? (this.BASE_ = 16, this.EXT_ = 17, this.CONTROL_ = (20 | this.field_) << 8, this.OFFSET_ = 23) : this.dataChannel_ === 1 && (this.BASE_ = 24, this.EXT_ = 25, this.CONTROL_ = (28 | this.field_) << 8, this.OFFSET_ = 31), this.PADDING_ = 0, this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 32, this.END_OF_CAPTION_ = this.CONTROL_ | 47, this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 37, this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 38, this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 39, this.CARRIAGE_RETURN_ = this.CONTROL_ | 45, this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 41, this.BACKSPACE_ = this.CONTROL_ | 33, this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 44, this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 46;
  }, fe.prototype.isSpecialCharacter = function(o, c) {
    return o === this.EXT_ && c >= 48 && c <= 63;
  }, fe.prototype.isExtCharacter = function(o, c) {
    return (o === this.EXT_ + 1 || o === this.EXT_ + 2) && c >= 32 && c <= 63;
  }, fe.prototype.isMidRowCode = function(o, c) {
    return o === this.EXT_ && c >= 32 && c <= 47;
  }, fe.prototype.isOffsetControlCode = function(o, c) {
    return o === this.OFFSET_ && c >= 33 && c <= 35;
  }, fe.prototype.isPAC = function(o, c) {
    return o >= this.BASE_ && o < this.BASE_ + 8 && c >= 64 && c <= 127;
  }, fe.prototype.isColorPAC = function(o) {
    return o >= 64 && o <= 79 || o >= 96 && o <= 127;
  }, fe.prototype.isNormalChar = function(o) {
    return o >= 32 && o <= 127;
  }, fe.prototype.setRollUp = function(o, c) {
    if (this.mode_ !== "rollUp" && (this.row_ = hr, this.mode_ = "rollUp", this.flushDisplayed(o), this.nonDisplayed_ = ni(), this.displayed_ = ni()), c !== void 0 && c !== this.row_)
      for (var h = 0; h < this.rollUpRows_; h++)
        this.displayed_[c - h] = this.displayed_[this.row_ - h], this.displayed_[this.row_ - h] = {
          text: "",
          indent: 0,
          offset: 0
        };
    c === void 0 && (c = this.row_), this.topRow_ = c - this.rollUpRows_ + 1;
  }, fe.prototype.addFormatting = function(o, c) {
    this.formatting_ = this.formatting_.concat(c);
    var h = c.reduce(function(d, p) {
      return d + "<" + p + ">";
    }, "");
    this[this.mode_](o, h);
  }, fe.prototype.clearFormatting = function(o) {
    if (this.formatting_.length) {
      var c = this.formatting_.reverse().reduce(function(h, d) {
        return h + "</" + d + ">";
      }, "");
      this.formatting_ = [], this[this.mode_](o, c);
    }
  }, fe.prototype.popOn = function(o, c) {
    var h = this.nonDisplayed_[this.row_].text;
    h += c, this.nonDisplayed_[this.row_].text = h;
  }, fe.prototype.rollUp = function(o, c) {
    var h = this.displayed_[this.row_].text;
    h += c, this.displayed_[this.row_].text = h;
  }, fe.prototype.shiftRowsUp_ = function() {
    var o;
    for (o = 0; o < this.topRow_; o++)
      this.displayed_[o] = {
        text: "",
        indent: 0,
        offset: 0
      };
    for (o = this.row_ + 1; o < hr + 1; o++)
      this.displayed_[o] = {
        text: "",
        indent: 0,
        offset: 0
      };
    for (o = this.topRow_; o < this.row_; o++)
      this.displayed_[o] = this.displayed_[o + 1];
    this.displayed_[this.row_] = {
      text: "",
      indent: 0,
      offset: 0
    };
  }, fe.prototype.paintOn = function(o, c) {
    var h = this.displayed_[this.row_].text;
    h += c, this.displayed_[this.row_].text = h;
  };
  var xl = {
    CaptionStream: Fe,
    Cea608Stream: fe,
    Cea708Stream: ae
  }, fr = {
    H264_STREAM_TYPE: 27,
    ADTS_STREAM_TYPE: 15,
    METADATA_STREAM_TYPE: 21
  }, Mp = t, Bp = 8589934592, Fp = 4294967296, Sl = "shared", Gn = function(o, c) {
    var h = 1;
    for (o > c && (h = -1); Math.abs(c - o) > Fp; )
      o += h * Bp;
    return o;
  }, Wn = function(o) {
    var c, h;
    Wn.prototype.init.call(this), this.type_ = o || Sl, this.push = function(d) {
      if (d.type === "metadata") {
        this.trigger("data", d);
        return;
      }
      this.type_ !== Sl && d.type !== this.type_ || (h === void 0 && (h = d.dts), d.dts = Gn(d.dts, h), d.pts = Gn(d.pts, h), c = d.dts, this.trigger("data", d));
    }, this.flush = function() {
      h = c, this.trigger("done");
    }, this.endTimeline = function() {
      this.flush(), this.trigger("endedtimeline");
    }, this.discontinuity = function() {
      h = void 0, c = void 0;
    }, this.reset = function() {
      this.discontinuity(), this.trigger("reset");
    };
  };
  Wn.prototype = new Mp();
  var El = {
    TimestampRolloverStream: Wn,
    handleRollover: Gn
  }, Up = (o, c, h) => {
    if (!o)
      return -1;
    for (var d = h; d < o.length; d++)
      if (o[d] === c)
        return d;
    return -1;
  }, qp = {
    typedArrayIndexOf: Up
  }, pr = qp.typedArrayIndexOf, mr = {
    Iso88591: 0,
    // ISO-8859-1, terminated with \0.
    Utf16: 1,
    // UTF-16 encoded Unicode BOM, terminated with \0\0
    Utf16be: 2,
    // UTF-16BE encoded Unicode, without BOM, terminated with \0\0
    Utf8: 3
    // UTF-8 encoded Unicode, terminated with \0
  }, Cl = function(o, c, h) {
    var d, p = "";
    for (d = c; d < h; d++)
      p += "%" + ("00" + o[d].toString(16)).slice(-2);
    return p;
  }, ls = function(o, c, h) {
    return decodeURIComponent(Cl(o, c, h));
  }, us = function(o, c, h) {
    return unescape(Cl(o, c, h));
  }, cs = function(o) {
    return o[0] << 21 | o[1] << 14 | o[2] << 7 | o[3];
  }, ds = {
    APIC: function(o) {
      var c = 1, h, d, p = "-->";
      o.data[0] === mr.Utf8 && (h = pr(o.data, 0, c), !(h < 0) && (o.mimeType = us(o.data, c, h), c = h + 1, o.pictureType = o.data[c], c++, d = pr(o.data, 0, c), !(d < 0) && (o.description = ls(o.data, c, d), c = d + 1, o.mimeType === p ? o.url = us(o.data, c, o.data.length) : o.pictureData = o.data.subarray(c, o.data.length))));
    },
    "T*": function(o) {
      o.data[0] === mr.Utf8 && (o.value = ls(o.data, 1, o.data.length).replace(/\0*$/, ""), o.values = o.value.split("\0"));
    },
    TXXX: function(o) {
      var c;
      o.data[0] === mr.Utf8 && (c = pr(o.data, 0, 1), c !== -1 && (o.description = ls(o.data, 1, c), o.value = ls(o.data, c + 1, o.data.length).replace(/\0*$/, ""), o.data = o.value));
    },
    "W*": function(o) {
      o.url = us(o.data, 0, o.data.length).replace(/\0.*$/, "");
    },
    WXXX: function(o) {
      var c;
      o.data[0] === mr.Utf8 && (c = pr(o.data, 0, 1), c !== -1 && (o.description = ls(o.data, 1, c), o.url = us(o.data, c + 1, o.data.length).replace(/\0.*$/, "")));
    },
    PRIV: function(o) {
      var c;
      for (c = 0; c < o.data.length; c++)
        if (o.data[c] === 0) {
          o.owner = us(o.data, 0, c);
          break;
        }
      o.privateData = o.data.subarray(c + 1), o.data = o.privateData;
    }
  }, $p = function(o) {
    var c, h, d = 10, p = 0, g = [];
    if (!(o.length < 10 || o[0] !== 73 || o[1] !== 68 || o[2] !== 51)) {
      p = cs(o.subarray(6, 10)), p += 10;
      var _ = o[5] & 64;
      _ && (d += 4, d += cs(o.subarray(10, 14)), p -= cs(o.subarray(16, 20)));
      do {
        if (c = cs(o.subarray(d + 4, d + 8)), c < 1)
          break;
        h = String.fromCharCode(o[d], o[d + 1], o[d + 2], o[d + 3]);
        var T = {
          id: h,
          data: o.subarray(d + 10, d + c + 10)
        };
        T.key = T.id, ds[T.id] ? ds[T.id](T) : T.id[0] === "T" ? ds["T*"](T) : T.id[0] === "W" && ds["W*"](T), g.push(T), d += 10, d += c;
      } while (d < p);
      return g;
    }
  }, wl = {
    parseId3Frames: $p,
    parseSyncSafeInteger: cs,
    frameParsers: ds
  }, Vp = t, Hp = fr, Vt = wl, gr;
  gr = function(o) {
    var c = {
      // the bytes of the program-level descriptor field in MP2T
      // see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and
      // program element descriptors"
      descriptor: o && o.descriptor
    }, h = 0, d = [], p = 0, g;
    if (gr.prototype.init.call(this), this.dispatchType = Hp.METADATA_STREAM_TYPE.toString(16), c.descriptor)
      for (g = 0; g < c.descriptor.length; g++)
        this.dispatchType += ("00" + c.descriptor[g].toString(16)).slice(-2);
    this.push = function(_) {
      var T, x, C, I, O, U;
      if (_.type === "timed-metadata") {
        if (_.dataAlignmentIndicator && (p = 0, d.length = 0), d.length === 0 && (_.data.length < 10 || _.data[0] !== 73 || _.data[1] !== 68 || _.data[2] !== 51)) {
          this.trigger("log", {
            level: "warn",
            message: "Skipping unrecognized metadata packet"
          });
          return;
        }
        if (d.push(_), p += _.data.byteLength, d.length === 1 && (h = Vt.parseSyncSafeInteger(_.data.subarray(6, 10)), h += 10), !(p < h)) {
          for (T = {
            data: new Uint8Array(h),
            frames: [],
            pts: d[0].pts,
            dts: d[0].dts
          }, O = 0; O < h; )
            T.data.set(d[0].data.subarray(0, h - O), O), O += d[0].data.byteLength, p -= d[0].data.byteLength, d.shift();
          x = 10, T.data[5] & 64 && (x += 4, x += Vt.parseSyncSafeInteger(T.data.subarray(10, 14)), h -= Vt.parseSyncSafeInteger(T.data.subarray(16, 20)));
          do {
            if (C = Vt.parseSyncSafeInteger(T.data.subarray(x + 4, x + 8)), C < 1) {
              this.trigger("log", {
                level: "warn",
                message: "Malformed ID3 frame encountered. Skipping remaining metadata parsing."
              });
              break;
            }
            if (U = String.fromCharCode(T.data[x], T.data[x + 1], T.data[x + 2], T.data[x + 3]), I = {
              id: U,
              data: T.data.subarray(x + 10, x + C + 10)
            }, I.key = I.id, Vt.frameParsers[I.id] ? Vt.frameParsers[I.id](I) : I.id[0] === "T" ? Vt.frameParsers["T*"](I) : I.id[0] === "W" && Vt.frameParsers["W*"](I), I.owner === "com.apple.streaming.transportStreamTimestamp") {
              var M = I.data, z = (M[3] & 1) << 30 | M[4] << 22 | M[5] << 14 | M[6] << 6 | M[7] >>> 2;
              z *= 4, z += M[7] & 3, I.timeStamp = z, T.pts === void 0 && T.dts === void 0 && (T.pts = I.timeStamp, T.dts = I.timeStamp), this.trigger("timestamp", I);
            }
            T.frames.push(I), x += 10, x += C;
          } while (x < h);
          this.trigger("data", T);
        }
      }
    };
  }, gr.prototype = new Vp();
  var zp = gr, Xn = t, Kn = xl, lt = fr, Gp = El.TimestampRolloverStream, vr, hs, yr, bi = 188, Yn = 71;
  vr = function() {
    var o = new Uint8Array(bi), c = 0;
    vr.prototype.init.call(this), this.push = function(h) {
      var d = 0, p = bi, g;
      for (c ? (g = new Uint8Array(h.byteLength + c), g.set(o.subarray(0, c)), g.set(h, c), c = 0) : g = h; p < g.byteLength; ) {
        if (g[d] === Yn && g[p] === Yn) {
          this.trigger("data", g.subarray(d, p)), d += bi, p += bi;
          continue;
        }
        d++, p++;
      }
      d < g.byteLength && (o.set(g.subarray(d), 0), c = g.byteLength - d);
    }, this.flush = function() {
      c === bi && o[0] === Yn && (this.trigger("data", o), c = 0), this.trigger("done");
    }, this.endTimeline = function() {
      this.flush(), this.trigger("endedtimeline");
    }, this.reset = function() {
      c = 0, this.trigger("reset");
    };
  }, vr.prototype = new Xn(), hs = function() {
    var o, c, h, d;
    hs.prototype.init.call(this), d = this, this.packetsWaitingForPmt = [], this.programMapTable = void 0, o = function(p, g) {
      var _ = 0;
      g.payloadUnitStartIndicator && (_ += p[_] + 1), g.type === "pat" ? c(p.subarray(_), g) : h(p.subarray(_), g);
    }, c = function(p, g) {
      g.section_number = p[7], g.last_section_number = p[8], d.pmtPid = (p[10] & 31) << 8 | p[11], g.pmtPid = d.pmtPid;
    }, h = function(p, g) {
      var _, T, x, C;
      if (p[5] & 1) {
        for (d.programMapTable = {
          video: null,
          audio: null,
          "timed-metadata": {}
        }, _ = (p[1] & 15) << 8 | p[2], T = 3 + _ - 4, x = (p[10] & 15) << 8 | p[11], C = 12 + x; C < T; ) {
          var I = p[C], O = (p[C + 1] & 31) << 8 | p[C + 2];
          I === lt.H264_STREAM_TYPE && d.programMapTable.video === null ? d.programMapTable.video = O : I === lt.ADTS_STREAM_TYPE && d.programMapTable.audio === null ? d.programMapTable.audio = O : I === lt.METADATA_STREAM_TYPE && (d.programMapTable["timed-metadata"][O] = I), C += ((p[C + 3] & 15) << 8 | p[C + 4]) + 5;
        }
        g.programMapTable = d.programMapTable;
      }
    }, this.push = function(p) {
      var g = {}, _ = 4;
      if (g.payloadUnitStartIndicator = !!(p[1] & 64), g.pid = p[1] & 31, g.pid <<= 8, g.pid |= p[2], (p[3] & 48) >>> 4 > 1 && (_ += p[_] + 1), g.pid === 0)
        g.type = "pat", o(p.subarray(_), g), this.trigger("data", g);
      else if (g.pid === this.pmtPid)
        for (g.type = "pmt", o(p.subarray(_), g), this.trigger("data", g); this.packetsWaitingForPmt.length; )
          this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
      else
        this.programMapTable === void 0 ? this.packetsWaitingForPmt.push([p, _, g]) : this.processPes_(p, _, g);
    }, this.processPes_ = function(p, g, _) {
      _.pid === this.programMapTable.video ? _.streamType = lt.H264_STREAM_TYPE : _.pid === this.programMapTable.audio ? _.streamType = lt.ADTS_STREAM_TYPE : _.streamType = this.programMapTable["timed-metadata"][_.pid], _.type = "pes", _.data = p.subarray(g), this.trigger("data", _);
    };
  }, hs.prototype = new Xn(), hs.STREAM_TYPES = {
    h264: 27,
    adts: 15
  }, yr = function() {
    var o = this, c = !1, h = {
      data: [],
      size: 0
    }, d = {
      data: [],
      size: 0
    }, p = {
      data: [],
      size: 0
    }, g, _ = function(x, C) {
      var I;
      const O = x[0] << 16 | x[1] << 8 | x[2];
      C.data = new Uint8Array(), O === 1 && (C.packetLength = 6 + (x[4] << 8 | x[5]), C.dataAlignmentIndicator = (x[6] & 4) !== 0, I = x[7], I & 192 && (C.pts = (x[9] & 14) << 27 | (x[10] & 255) << 20 | (x[11] & 254) << 12 | (x[12] & 255) << 5 | (x[13] & 254) >>> 3, C.pts *= 4, C.pts += (x[13] & 6) >>> 1, C.dts = C.pts, I & 64 && (C.dts = (x[14] & 14) << 27 | (x[15] & 255) << 20 | (x[16] & 254) << 12 | (x[17] & 255) << 5 | (x[18] & 254) >>> 3, C.dts *= 4, C.dts += (x[18] & 6) >>> 1)), C.data = x.subarray(9 + x[8]));
    }, T = function(x, C, I) {
      var O = new Uint8Array(x.size), U = {
        type: C
      }, M = 0, z = 0, G = !1, Ee;
      if (!(!x.data.length || x.size < 9)) {
        for (U.trackId = x.data[0].pid, M = 0; M < x.data.length; M++)
          Ee = x.data[M], O.set(Ee.data, z), z += Ee.data.byteLength;
        _(O, U), G = C === "video" || U.packetLength <= x.size, (I || G) && (x.size = 0, x.data.length = 0), G && o.trigger("data", U);
      }
    };
    yr.prototype.init.call(this), this.push = function(x) {
      ({
        pat: function() {
        },
        pes: function() {
          var C, I;
          switch (x.streamType) {
            case lt.H264_STREAM_TYPE:
              C = h, I = "video";
              break;
            case lt.ADTS_STREAM_TYPE:
              C = d, I = "audio";
              break;
            case lt.METADATA_STREAM_TYPE:
              C = p, I = "timed-metadata";
              break;
            default:
              return;
          }
          x.payloadUnitStartIndicator && T(C, I, !0), C.data.push(x), C.size += x.data.byteLength;
        },
        pmt: function() {
          var C = {
            type: "metadata",
            tracks: []
          };
          g = x.programMapTable, g.video !== null && C.tracks.push({
            timelineStartInfo: {
              baseMediaDecodeTime: 0
            },
            id: +g.video,
            codec: "avc",
            type: "video"
          }), g.audio !== null && C.tracks.push({
            timelineStartInfo: {
              baseMediaDecodeTime: 0
            },
            id: +g.audio,
            codec: "adts",
            type: "audio"
          }), c = !0, o.trigger("data", C);
        }
      })[x.type]();
    }, this.reset = function() {
      h.size = 0, h.data.length = 0, d.size = 0, d.data.length = 0, this.trigger("reset");
    }, this.flushStreams_ = function() {
      T(h, "video"), T(d, "audio"), T(p, "timed-metadata");
    }, this.flush = function() {
      if (!c && g) {
        var x = {
          type: "metadata",
          tracks: []
        };
        g.video !== null && x.tracks.push({
          timelineStartInfo: {
            baseMediaDecodeTime: 0
          },
          id: +g.video,
          codec: "avc",
          type: "video"
        }), g.audio !== null && x.tracks.push({
          timelineStartInfo: {
            baseMediaDecodeTime: 0
          },
          id: +g.audio,
          codec: "adts",
          type: "audio"
        }), o.trigger("data", x);
      }
      c = !1, this.flushStreams_(), this.trigger("done");
    };
  }, yr.prototype = new Xn();
  var Al = {
    PAT_PID: 0,
    MP2T_PACKET_LENGTH: bi,
    TransportPacketStream: vr,
    TransportParseStream: hs,
    ElementaryStream: yr,
    TimestampRolloverStream: Gp,
    CaptionStream: Kn.CaptionStream,
    Cea608Stream: Kn.Cea608Stream,
    Cea708Stream: Kn.Cea708Stream,
    MetadataStream: zp
  };
  for (var Qn in lt)
    lt.hasOwnProperty(Qn) && (Al[Qn] = lt[Qn]);
  var Wp = Al, Xp = t, Kp = de.ONE_SECOND_IN_TS, _r, Dl = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
  _r = function(o) {
    var c, h = 0;
    _r.prototype.init.call(this), this.skipWarn_ = function(d, p) {
      this.trigger("log", {
        level: "warn",
        message: `adts skiping bytes ${d} to ${p} in frame ${h} outside syncword`
      });
    }, this.push = function(d) {
      var p = 0, g, _, T, x, C;
      if (o || (h = 0), d.type === "audio") {
        c && c.length ? (T = c, c = new Uint8Array(T.byteLength + d.data.byteLength), c.set(T), c.set(d.data, T.byteLength)) : c = d.data;
        for (var I; p + 7 < c.length; ) {
          if (c[p] !== 255 || (c[p + 1] & 246) !== 240) {
            typeof I != "number" && (I = p), p++;
            continue;
          }
          if (typeof I == "number" && (this.skipWarn_(I, p), I = null), _ = (~c[p + 1] & 1) * 2, g = (c[p + 3] & 3) << 11 | c[p + 4] << 3 | (c[p + 5] & 224) >> 5, x = ((c[p + 6] & 3) + 1) * 1024, C = x * Kp / Dl[(c[p + 2] & 60) >>> 2], c.byteLength - p < g)
            break;
          this.trigger("data", {
            pts: d.pts + h * C,
            dts: d.dts + h * C,
            sampleCount: x,
            audioobjecttype: (c[p + 2] >>> 6 & 3) + 1,
            channelcount: (c[p + 2] & 1) << 2 | (c[p + 3] & 192) >>> 6,
            samplerate: Dl[(c[p + 2] & 60) >>> 2],
            samplingfrequencyindex: (c[p + 2] & 60) >>> 2,
            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16
            samplesize: 16,
            // data is the frame without it's header
            data: c.subarray(p + 7 + _, p + g)
          }), h++, p += g;
        }
        typeof I == "number" && (this.skipWarn_(I, p), I = null), c = c.subarray(p);
      }
    }, this.flush = function() {
      h = 0, this.trigger("done");
    }, this.reset = function() {
      c = void 0, this.trigger("reset");
    }, this.endTimeline = function() {
      c = void 0, this.trigger("endedtimeline");
    };
  }, _r.prototype = new Xp();
  var Yp = _r, kl;
  kl = function(o) {
    var c = o.byteLength, h = 0, d = 0;
    this.length = function() {
      return 8 * c;
    }, this.bitsAvailable = function() {
      return 8 * c + d;
    }, this.loadWord = function() {
      var p = o.byteLength - c, g = new Uint8Array(4), _ = Math.min(4, c);
      if (_ === 0)
        throw new Error("no bytes available");
      g.set(o.subarray(p, p + _)), h = new DataView(g.buffer).getUint32(0), d = _ * 8, c -= _;
    }, this.skipBits = function(p) {
      var g;
      d > p ? (h <<= p, d -= p) : (p -= d, g = Math.floor(p / 8), p -= g * 8, c -= g, this.loadWord(), h <<= p, d -= p);
    }, this.readBits = function(p) {
      var g = Math.min(d, p), _ = h >>> 32 - g;
      return d -= g, d > 0 ? h <<= g : c > 0 && this.loadWord(), g = p - g, g > 0 ? _ << g | this.readBits(g) : _;
    }, this.skipLeadingZeros = function() {
      var p;
      for (p = 0; p < d; ++p)
        if (h & 2147483648 >>> p)
          return h <<= p, d -= p, p;
      return this.loadWord(), p + this.skipLeadingZeros();
    }, this.skipUnsignedExpGolomb = function() {
      this.skipBits(1 + this.skipLeadingZeros());
    }, this.skipExpGolomb = function() {
      this.skipBits(1 + this.skipLeadingZeros());
    }, this.readUnsignedExpGolomb = function() {
      var p = this.skipLeadingZeros();
      return this.readBits(p + 1) - 1;
    }, this.readExpGolomb = function() {
      var p = this.readUnsignedExpGolomb();
      return 1 & p ? 1 + p >>> 1 : -1 * (p >>> 1);
    }, this.readBoolean = function() {
      return this.readBits(1) === 1;
    }, this.readUnsignedByte = function() {
      return this.readBits(8);
    }, this.loadWord();
  };
  var Qp = kl, Il = t, Jp = Qp, Tr, fs, Pl;
  fs = function() {
    var o = 0, c, h;
    fs.prototype.init.call(this), this.push = function(d) {
      var p;
      h ? (p = new Uint8Array(h.byteLength + d.data.byteLength), p.set(h), p.set(d.data, h.byteLength), h = p) : h = d.data;
      for (var g = h.byteLength; o < g - 3; o++)
        if (h[o + 2] === 1) {
          c = o + 5;
          break;
        }
      for (; c < g; )
        switch (h[c]) {
          case 0:
            if (h[c - 1] !== 0) {
              c += 2;
              break;
            } else if (h[c - 2] !== 0) {
              c++;
              break;
            }
            o + 3 !== c - 2 && this.trigger("data", h.subarray(o + 3, c - 2));
            do
              c++;
            while (h[c] !== 1 && c < g);
            o = c - 2, c += 3;
            break;
          case 1:
            if (h[c - 1] !== 0 || h[c - 2] !== 0) {
              c += 3;
              break;
            }
            this.trigger("data", h.subarray(o + 3, c - 2)), o = c - 2, c += 3;
            break;
          default:
            c += 3;
            break;
        }
      h = h.subarray(o), c -= o, o = 0;
    }, this.reset = function() {
      h = null, o = 0, this.trigger("reset");
    }, this.flush = function() {
      h && h.byteLength > 3 && this.trigger("data", h.subarray(o + 3)), h = null, o = 0, this.trigger("done");
    }, this.endTimeline = function() {
      this.flush(), this.trigger("endedtimeline");
    };
  }, fs.prototype = new Il(), Pl = {
    100: !0,
    110: !0,
    122: !0,
    244: !0,
    44: !0,
    83: !0,
    86: !0,
    118: !0,
    128: !0,
    // TODO: the three profiles below don't
    // appear to have sps data in the specificiation anymore?
    138: !0,
    139: !0,
    134: !0
  }, Tr = function() {
    var o = new fs(), c, h, d, p, g, _, T;
    Tr.prototype.init.call(this), c = this, this.push = function(x) {
      x.type === "video" && (h = x.trackId, d = x.pts, p = x.dts, o.push(x));
    }, o.on("data", function(x) {
      var C = {
        trackId: h,
        pts: d,
        dts: p,
        data: x,
        nalUnitTypeCode: x[0] & 31
      };
      switch (C.nalUnitTypeCode) {
        case 5:
          C.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
          break;
        case 6:
          C.nalUnitType = "sei_rbsp", C.escapedRBSP = g(x.subarray(1));
          break;
        case 7:
          C.nalUnitType = "seq_parameter_set_rbsp", C.escapedRBSP = g(x.subarray(1)), C.config = _(C.escapedRBSP);
          break;
        case 8:
          C.nalUnitType = "pic_parameter_set_rbsp";
          break;
        case 9:
          C.nalUnitType = "access_unit_delimiter_rbsp";
          break;
      }
      c.trigger("data", C);
    }), o.on("done", function() {
      c.trigger("done");
    }), o.on("partialdone", function() {
      c.trigger("partialdone");
    }), o.on("reset", function() {
      c.trigger("reset");
    }), o.on("endedtimeline", function() {
      c.trigger("endedtimeline");
    }), this.flush = function() {
      o.flush();
    }, this.partialFlush = function() {
      o.partialFlush();
    }, this.reset = function() {
      o.reset();
    }, this.endTimeline = function() {
      o.endTimeline();
    }, T = function(x, C) {
      var I = 8, O = 8, U, M;
      for (U = 0; U < x; U++)
        O !== 0 && (M = C.readExpGolomb(), O = (I + M + 256) % 256), I = O === 0 ? I : O;
    }, g = function(x) {
      for (var C = x.byteLength, I = [], O = 1, U, M; O < C - 2; )
        x[O] === 0 && x[O + 1] === 0 && x[O + 2] === 3 ? (I.push(O + 2), O += 2) : O++;
      if (I.length === 0)
        return x;
      U = C - I.length, M = new Uint8Array(U);
      var z = 0;
      for (O = 0; O < U; z++, O++)
        z === I[0] && (z++, I.shift()), M[O] = x[z];
      return M;
    }, _ = function(x) {
      var C = 0, I = 0, O = 0, U = 0, M, z, G, Ee, et, li, nu, au, ou, la, lu, be = [1, 1], uu, ui;
      if (M = new Jp(x), z = M.readUnsignedByte(), Ee = M.readUnsignedByte(), G = M.readUnsignedByte(), M.skipUnsignedExpGolomb(), Pl[z] && (et = M.readUnsignedExpGolomb(), et === 3 && M.skipBits(1), M.skipUnsignedExpGolomb(), M.skipUnsignedExpGolomb(), M.skipBits(1), M.readBoolean()))
        for (lu = et !== 3 ? 8 : 12, ui = 0; ui < lu; ui++)
          M.readBoolean() && (ui < 6 ? T(16, M) : T(64, M));
      if (M.skipUnsignedExpGolomb(), li = M.readUnsignedExpGolomb(), li === 0)
        M.readUnsignedExpGolomb();
      else if (li === 1)
        for (M.skipBits(1), M.skipExpGolomb(), M.skipExpGolomb(), nu = M.readUnsignedExpGolomb(), ui = 0; ui < nu; ui++)
          M.skipExpGolomb();
      if (M.skipUnsignedExpGolomb(), M.skipBits(1), au = M.readUnsignedExpGolomb(), ou = M.readUnsignedExpGolomb(), la = M.readBits(1), la === 0 && M.skipBits(1), M.skipBits(1), M.readBoolean() && (C = M.readUnsignedExpGolomb(), I = M.readUnsignedExpGolomb(), O = M.readUnsignedExpGolomb(), U = M.readUnsignedExpGolomb()), M.readBoolean() && M.readBoolean()) {
        switch (uu = M.readUnsignedByte(), uu) {
          case 1:
            be = [1, 1];
            break;
          case 2:
            be = [12, 11];
            break;
          case 3:
            be = [10, 11];
            break;
          case 4:
            be = [16, 11];
            break;
          case 5:
            be = [40, 33];
            break;
          case 6:
            be = [24, 11];
            break;
          case 7:
            be = [20, 11];
            break;
          case 8:
            be = [32, 11];
            break;
          case 9:
            be = [80, 33];
            break;
          case 10:
            be = [18, 11];
            break;
          case 11:
            be = [15, 11];
            break;
          case 12:
            be = [64, 33];
            break;
          case 13:
            be = [160, 99];
            break;
          case 14:
            be = [4, 3];
            break;
          case 15:
            be = [3, 2];
            break;
          case 16:
            be = [2, 1];
            break;
          case 255: {
            be = [M.readUnsignedByte() << 8 | M.readUnsignedByte(), M.readUnsignedByte() << 8 | M.readUnsignedByte()];
            break;
          }
        }
        be && be[0] / be[1];
      }
      return {
        profileIdc: z,
        levelIdc: G,
        profileCompatibility: Ee,
        width: (au + 1) * 16 - C * 2 - I * 2,
        height: (2 - la) * (ou + 1) * 16 - O * 2 - U * 2,
        // sar is sample aspect ratio
        sarRatio: be
      };
    };
  }, Tr.prototype = new Il();
  var Zp = {
    H264Stream: Tr,
    NalByteStream: fs
  }, em = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350], Ll = function(o, c) {
    var h = o[c + 6] << 21 | o[c + 7] << 14 | o[c + 8] << 7 | o[c + 9], d = o[c + 5], p = (d & 16) >> 4;
    return h = h >= 0 ? h : 0, p ? h + 20 : h + 10;
  }, Ol = function(o, c) {
    return o.length - c < 10 || o[c] !== 73 || o[c + 1] !== 68 || o[c + 2] !== 51 ? c : (c += Ll(o, c), Ol(o, c));
  }, tm = function(o) {
    var c = Ol(o, 0);
    return o.length >= c + 2 && (o[c] & 255) === 255 && (o[c + 1] & 240) === 240 && // verify that the 2 layer bits are 0, aka this
    // is not mp3 data but aac data.
    (o[c + 1] & 22) === 16;
  }, jl = function(o) {
    return o[0] << 21 | o[1] << 14 | o[2] << 7 | o[3];
  }, im = function(o, c, h) {
    var d, p = "";
    for (d = c; d < h; d++)
      p += "%" + ("00" + o[d].toString(16)).slice(-2);
    return p;
  }, sm = function(o, c, h) {
    return unescape(im(o, c, h));
  }, rm = function(o, c) {
    var h = (o[c + 5] & 224) >> 5, d = o[c + 4] << 3, p = o[c + 3] & 6144;
    return p | d | h;
  }, nm = function(o, c) {
    return o[c] === 73 && o[c + 1] === 68 && o[c + 2] === 51 ? "timed-metadata" : o[c] & !0 && (o[c + 1] & 240) === 240 ? "audio" : null;
  }, am = function(o) {
    for (var c = 0; c + 5 < o.length; ) {
      if (o[c] !== 255 || (o[c + 1] & 246) !== 240) {
        c++;
        continue;
      }
      return em[(o[c + 2] & 60) >>> 2];
    }
    return null;
  }, om = function(o) {
    var c, h, d, p;
    c = 10, o[5] & 64 && (c += 4, c += jl(o.subarray(10, 14)));
    do {
      if (h = jl(o.subarray(c + 4, c + 8)), h < 1)
        return null;
      if (p = String.fromCharCode(o[c], o[c + 1], o[c + 2], o[c + 3]), p === "PRIV") {
        d = o.subarray(c + 10, c + h + 10);
        for (var g = 0; g < d.byteLength; g++)
          if (d[g] === 0) {
            var _ = sm(d, 0, g);
            if (_ === "com.apple.streaming.transportStreamTimestamp") {
              var T = d.subarray(g + 1), x = (T[3] & 1) << 30 | T[4] << 22 | T[5] << 14 | T[6] << 6 | T[7] >>> 2;
              return x *= 4, x += T[7] & 3, x;
            }
            break;
          }
      }
      c += 10, c += h;
    } while (c < o.byteLength);
    return null;
  }, Jn = {
    isLikelyAacData: tm,
    parseId3TagSize: Ll,
    parseAdtsSize: rm,
    parseType: nm,
    parseSampleRate: am,
    parseAacTimestamp: om
  }, lm = t, Rl = Jn, br;
  br = function() {
    var o = new Uint8Array(), c = 0;
    br.prototype.init.call(this), this.setTimestamp = function(h) {
      c = h;
    }, this.push = function(h) {
      var d = 0, p = 0, g, _, T, x;
      for (o.length ? (x = o.length, o = new Uint8Array(h.byteLength + x), o.set(o.subarray(0, x)), o.set(h, x)) : o = h; o.length - p >= 3; ) {
        if (o[p] === 73 && o[p + 1] === 68 && o[p + 2] === 51) {
          if (o.length - p < 10 || (d = Rl.parseId3TagSize(o, p), p + d > o.length))
            break;
          _ = {
            type: "timed-metadata",
            data: o.subarray(p, p + d)
          }, this.trigger("data", _), p += d;
          continue;
        } else if ((o[p] & 255) === 255 && (o[p + 1] & 240) === 240) {
          if (o.length - p < 7 || (d = Rl.parseAdtsSize(o, p), p + d > o.length))
            break;
          T = {
            type: "audio",
            data: o.subarray(p, p + d),
            pts: c,
            dts: c
          }, this.trigger("data", T), p += d;
          continue;
        }
        p++;
      }
      g = o.length - p, g > 0 ? o = o.subarray(p) : o = new Uint8Array();
    }, this.reset = function() {
      o = new Uint8Array(), this.trigger("reset");
    }, this.endTimeline = function() {
      o = new Uint8Array(), this.trigger("endedtimeline");
    };
  }, br.prototype = new lm();
  var um = br, cm = ["audioobjecttype", "channelcount", "samplerate", "samplingfrequencyindex", "samplesize"], dm = cm, hm = ["width", "height", "profileIdc", "levelIdc", "profileCompatibility", "sarRatio"], fm = hm, xr = t, ps = rp, ms = fp, Sr = xp, ut = Ap, Pt = Wp, Er = de, Nl = Yp, pm = Zp.H264Stream, mm = um, gm = Jn.isLikelyAacData, vm = de.ONE_SECOND_IN_TS, Zn = dm, ea = fm, gs, xi, Cr, ai, ym = function(o, c) {
    c.stream = o, this.trigger("log", c);
  }, Ml = function(o, c) {
    for (var h = Object.keys(c), d = 0; d < h.length; d++) {
      var p = h[d];
      p === "headOfPipeline" || !c[p].on || c[p].on("log", ym.bind(o, p));
    }
  }, Bl = function(o, c) {
    var h;
    if (o.length !== c.length)
      return !1;
    for (h = 0; h < o.length; h++)
      if (o[h] !== c[h])
        return !1;
    return !0;
  }, ta = function(o, c, h, d, p, g) {
    var _ = h - c, T = d - c, x = p - h;
    return {
      start: {
        dts: o,
        pts: o + _
      },
      end: {
        dts: o + T,
        pts: o + x
      },
      prependedContentDuration: g,
      baseMediaDecodeTime: o
    };
  };
  xi = function(o, c) {
    var h = [], d, p = 0, g = 0, _ = 1 / 0;
    c = c || {}, d = c.firstSequenceNumber || 0, xi.prototype.init.call(this), this.push = function(T) {
      ut.collectDtsInfo(o, T), o && Zn.forEach(function(x) {
        o[x] = T[x];
      }), h.push(T);
    }, this.setEarliestDts = function(T) {
      p = T;
    }, this.setVideoBaseMediaDecodeTime = function(T) {
      _ = T;
    }, this.setAudioAppendStart = function(T) {
      g = T;
    }, this.flush = function() {
      var T, x, C, I, O, U, M;
      if (h.length === 0) {
        this.trigger("done", "AudioSegmentStream");
        return;
      }
      T = Sr.trimAdtsFramesByEarliestDts(h, o, p), o.baseMediaDecodeTime = ut.calculateTrackBaseMediaDecodeTime(o, c.keepOriginalTimestamps), M = Sr.prefixWithSilence(o, T, g, _), o.samples = Sr.generateSampleTable(T), C = ps.mdat(Sr.concatenateFrameData(T)), h = [], x = ps.moof(d, [o]), I = new Uint8Array(x.byteLength + C.byteLength), d++, I.set(x), I.set(C, x.byteLength), ut.clearDtsInfo(o), O = Math.ceil(vm * 1024 / o.samplerate), T.length && (U = T.length * O, this.trigger("segmentTimingInfo", ta(
        // The audio track's baseMediaDecodeTime is in audio clock cycles, but the
        // frame info is in video clock cycles. Convert to match expectation of
        // listeners (that all timestamps will be based on video clock cycles).
        Er.audioTsToVideoTs(o.baseMediaDecodeTime, o.samplerate),
        // frame times are already in video clock, as is segment duration
        T[0].dts,
        T[0].pts,
        T[0].dts + U,
        T[0].pts + U,
        M || 0
      )), this.trigger("timingInfo", {
        start: T[0].pts,
        end: T[0].pts + U
      })), this.trigger("data", {
        track: o,
        boxes: I
      }), this.trigger("done", "AudioSegmentStream");
    }, this.reset = function() {
      ut.clearDtsInfo(o), h = [], this.trigger("reset");
    };
  }, xi.prototype = new xr(), gs = function(o, c) {
    var h, d = [], p = [], g, _;
    c = c || {}, h = c.firstSequenceNumber || 0, gs.prototype.init.call(this), delete o.minPTS, this.gopCache_ = [], this.push = function(T) {
      ut.collectDtsInfo(o, T), T.nalUnitType === "seq_parameter_set_rbsp" && !g && (g = T.config, o.sps = [T.data], ea.forEach(function(x) {
        o[x] = g[x];
      }, this)), T.nalUnitType === "pic_parameter_set_rbsp" && !_ && (_ = T.data, o.pps = [T.data]), d.push(T);
    }, this.flush = function() {
      for (var T, x, C, I, O, U, M = 0, z, G; d.length && d[0].nalUnitType !== "access_unit_delimiter_rbsp"; )
        d.shift();
      if (d.length === 0) {
        this.resetStream_(), this.trigger("done", "VideoSegmentStream");
        return;
      }
      if (T = ms.groupNalsIntoFrames(d), C = ms.groupFramesIntoGops(T), C[0][0].keyFrame || (x = this.getGopForFusion_(d[0], o), x ? (M = x.duration, C.unshift(x), C.byteLength += x.byteLength, C.nalCount += x.nalCount, C.pts = x.pts, C.dts = x.dts, C.duration += x.duration) : C = ms.extendFirstKeyFrame(C)), p.length) {
        var Ee;
        if (c.alignGopsAtEnd ? Ee = this.alignGopsAtEnd_(C) : Ee = this.alignGopsAtStart_(C), !Ee) {
          this.gopCache_.unshift({
            gop: C.pop(),
            pps: o.pps,
            sps: o.sps
          }), this.gopCache_.length = Math.min(6, this.gopCache_.length), d = [], this.resetStream_(), this.trigger("done", "VideoSegmentStream");
          return;
        }
        ut.clearDtsInfo(o), C = Ee;
      }
      ut.collectDtsInfo(o, C), o.samples = ms.generateSampleTable(C), O = ps.mdat(ms.concatenateNalData(C)), o.baseMediaDecodeTime = ut.calculateTrackBaseMediaDecodeTime(o, c.keepOriginalTimestamps), this.trigger("processedGopsInfo", C.map(function(et) {
        return {
          pts: et.pts,
          dts: et.dts,
          byteLength: et.byteLength
        };
      })), z = C[0], G = C[C.length - 1], this.trigger("segmentTimingInfo", ta(o.baseMediaDecodeTime, z.dts, z.pts, G.dts + G.duration, G.pts + G.duration, M)), this.trigger("timingInfo", {
        start: C[0].pts,
        end: C[C.length - 1].pts + C[C.length - 1].duration
      }), this.gopCache_.unshift({
        gop: C.pop(),
        pps: o.pps,
        sps: o.sps
      }), this.gopCache_.length = Math.min(6, this.gopCache_.length), d = [], this.trigger("baseMediaDecodeTime", o.baseMediaDecodeTime), this.trigger("timelineStartInfo", o.timelineStartInfo), I = ps.moof(h, [o]), U = new Uint8Array(I.byteLength + O.byteLength), h++, U.set(I), U.set(O, I.byteLength), this.trigger("data", {
        track: o,
        boxes: U
      }), this.resetStream_(), this.trigger("done", "VideoSegmentStream");
    }, this.reset = function() {
      this.resetStream_(), d = [], this.gopCache_.length = 0, p.length = 0, this.trigger("reset");
    }, this.resetStream_ = function() {
      ut.clearDtsInfo(o), g = void 0, _ = void 0;
    }, this.getGopForFusion_ = function(T) {
      var x = 45e3, C = 1e4, I = 1 / 0, O, U, M, z, G;
      for (G = 0; G < this.gopCache_.length; G++)
        z = this.gopCache_[G], M = z.gop, !(!(o.pps && Bl(o.pps[0], z.pps[0])) || !(o.sps && Bl(o.sps[0], z.sps[0]))) && (M.dts < o.timelineStartInfo.dts || (O = T.dts - M.dts - M.duration, O >= -C && O <= x && (!U || I > O) && (U = z, I = O)));
      return U ? U.gop : null;
    }, this.alignGopsAtStart_ = function(T) {
      var x, C, I, O, U, M, z, G;
      for (U = T.byteLength, M = T.nalCount, z = T.duration, x = C = 0; x < p.length && C < T.length && (I = p[x], O = T[C], I.pts !== O.pts); ) {
        if (O.pts > I.pts) {
          x++;
          continue;
        }
        C++, U -= O.byteLength, M -= O.nalCount, z -= O.duration;
      }
      return C === 0 ? T : C === T.length ? null : (G = T.slice(C), G.byteLength = U, G.duration = z, G.nalCount = M, G.pts = G[0].pts, G.dts = G[0].dts, G);
    }, this.alignGopsAtEnd_ = function(T) {
      var x, C, I, O, U, M;
      for (x = p.length - 1, C = T.length - 1, U = null, M = !1; x >= 0 && C >= 0; ) {
        if (I = p[x], O = T[C], I.pts === O.pts) {
          M = !0;
          break;
        }
        if (I.pts > O.pts) {
          x--;
          continue;
        }
        x === p.length - 1 && (U = C), C--;
      }
      if (!M && U === null)
        return null;
      var z;
      if (M ? z = C : z = U, z === 0)
        return T;
      var G = T.slice(z), Ee = G.reduce(function(et, li) {
        return et.byteLength += li.byteLength, et.duration += li.duration, et.nalCount += li.nalCount, et;
      }, {
        byteLength: 0,
        duration: 0,
        nalCount: 0
      });
      return G.byteLength = Ee.byteLength, G.duration = Ee.duration, G.nalCount = Ee.nalCount, G.pts = G[0].pts, G.dts = G[0].dts, G;
    }, this.alignGopsWith = function(T) {
      p = T;
    };
  }, gs.prototype = new xr(), ai = function(o, c) {
    this.numberOfTracks = 0, this.metadataStream = c, o = o || {}, typeof o.remux < "u" ? this.remuxTracks = !!o.remux : this.remuxTracks = !0, typeof o.keepOriginalTimestamps == "boolean" ? this.keepOriginalTimestamps = o.keepOriginalTimestamps : this.keepOriginalTimestamps = !1, this.pendingTracks = [], this.videoTrack = null, this.pendingBoxes = [], this.pendingCaptions = [], this.pendingMetadata = [], this.pendingBytes = 0, this.emittedTracks = 0, ai.prototype.init.call(this), this.push = function(h) {
      if (h.content || h.text)
        return this.pendingCaptions.push(h);
      if (h.frames)
        return this.pendingMetadata.push(h);
      this.pendingTracks.push(h.track), this.pendingBytes += h.boxes.byteLength, h.track.type === "video" && (this.videoTrack = h.track, this.pendingBoxes.push(h.boxes)), h.track.type === "audio" && (this.audioTrack = h.track, this.pendingBoxes.unshift(h.boxes));
    };
  }, ai.prototype = new xr(), ai.prototype.flush = function(o) {
    var c = 0, h = {
      captions: [],
      captionStreams: {},
      metadata: [],
      info: {}
    }, d, p, g, _ = 0, T;
    if (this.pendingTracks.length < this.numberOfTracks) {
      if (o !== "VideoSegmentStream" && o !== "AudioSegmentStream")
        return;
      if (this.remuxTracks)
        return;
      if (this.pendingTracks.length === 0) {
        this.emittedTracks++, this.emittedTracks >= this.numberOfTracks && (this.trigger("done"), this.emittedTracks = 0);
        return;
      }
    }
    if (this.videoTrack ? (_ = this.videoTrack.timelineStartInfo.pts, ea.forEach(function(x) {
      h.info[x] = this.videoTrack[x];
    }, this)) : this.audioTrack && (_ = this.audioTrack.timelineStartInfo.pts, Zn.forEach(function(x) {
      h.info[x] = this.audioTrack[x];
    }, this)), this.videoTrack || this.audioTrack) {
      for (this.pendingTracks.length === 1 ? h.type = this.pendingTracks[0].type : h.type = "combined", this.emittedTracks += this.pendingTracks.length, g = ps.initSegment(this.pendingTracks), h.initSegment = new Uint8Array(g.byteLength), h.initSegment.set(g), h.data = new Uint8Array(this.pendingBytes), T = 0; T < this.pendingBoxes.length; T++)
        h.data.set(this.pendingBoxes[T], c), c += this.pendingBoxes[T].byteLength;
      for (T = 0; T < this.pendingCaptions.length; T++)
        d = this.pendingCaptions[T], d.startTime = Er.metadataTsToSeconds(d.startPts, _, this.keepOriginalTimestamps), d.endTime = Er.metadataTsToSeconds(d.endPts, _, this.keepOriginalTimestamps), h.captionStreams[d.stream] = !0, h.captions.push(d);
      for (T = 0; T < this.pendingMetadata.length; T++)
        p = this.pendingMetadata[T], p.cueTime = Er.metadataTsToSeconds(p.pts, _, this.keepOriginalTimestamps), h.metadata.push(p);
      for (h.metadata.dispatchType = this.metadataStream.dispatchType, this.pendingTracks.length = 0, this.videoTrack = null, this.pendingBoxes.length = 0, this.pendingCaptions.length = 0, this.pendingBytes = 0, this.pendingMetadata.length = 0, this.trigger("data", h), T = 0; T < h.captions.length; T++)
        d = h.captions[T], this.trigger("caption", d);
      for (T = 0; T < h.metadata.length; T++)
        p = h.metadata[T], this.trigger("id3Frame", p);
    }
    this.emittedTracks >= this.numberOfTracks && (this.trigger("done"), this.emittedTracks = 0);
  }, ai.prototype.setRemux = function(o) {
    this.remuxTracks = o;
  }, Cr = function(o) {
    var c = this, h = !0, d, p;
    Cr.prototype.init.call(this), o = o || {}, this.baseMediaDecodeTime = o.baseMediaDecodeTime || 0, this.transmuxPipeline_ = {}, this.setupAacPipeline = function() {
      var g = {};
      this.transmuxPipeline_ = g, g.type = "aac", g.metadataStream = new Pt.MetadataStream(), g.aacStream = new mm(), g.audioTimestampRolloverStream = new Pt.TimestampRolloverStream("audio"), g.timedMetadataTimestampRolloverStream = new Pt.TimestampRolloverStream("timed-metadata"), g.adtsStream = new Nl(), g.coalesceStream = new ai(o, g.metadataStream), g.headOfPipeline = g.aacStream, g.aacStream.pipe(g.audioTimestampRolloverStream).pipe(g.adtsStream), g.aacStream.pipe(g.timedMetadataTimestampRolloverStream).pipe(g.metadataStream).pipe(g.coalesceStream), g.metadataStream.on("timestamp", function(_) {
        g.aacStream.setTimestamp(_.timeStamp);
      }), g.aacStream.on("data", function(_) {
        _.type !== "timed-metadata" && _.type !== "audio" || g.audioSegmentStream || (p = p || {
          timelineStartInfo: {
            baseMediaDecodeTime: c.baseMediaDecodeTime
          },
          codec: "adts",
          type: "audio"
        }, g.coalesceStream.numberOfTracks++, g.audioSegmentStream = new xi(p, o), g.audioSegmentStream.on("log", c.getLogTrigger_("audioSegmentStream")), g.audioSegmentStream.on("timingInfo", c.trigger.bind(c, "audioTimingInfo")), g.adtsStream.pipe(g.audioSegmentStream).pipe(g.coalesceStream), c.trigger("trackinfo", {
          hasAudio: !!p,
          hasVideo: !!d
        }));
      }), g.coalesceStream.on("data", this.trigger.bind(this, "data")), g.coalesceStream.on("done", this.trigger.bind(this, "done")), Ml(this, g);
    }, this.setupTsPipeline = function() {
      var g = {};
      this.transmuxPipeline_ = g, g.type = "ts", g.metadataStream = new Pt.MetadataStream(), g.packetStream = new Pt.TransportPacketStream(), g.parseStream = new Pt.TransportParseStream(), g.elementaryStream = new Pt.ElementaryStream(), g.timestampRolloverStream = new Pt.TimestampRolloverStream(), g.adtsStream = new Nl(), g.h264Stream = new pm(), g.captionStream = new Pt.CaptionStream(o), g.coalesceStream = new ai(o, g.metadataStream), g.headOfPipeline = g.packetStream, g.packetStream.pipe(g.parseStream).pipe(g.elementaryStream).pipe(g.timestampRolloverStream), g.timestampRolloverStream.pipe(g.h264Stream), g.timestampRolloverStream.pipe(g.adtsStream), g.timestampRolloverStream.pipe(g.metadataStream).pipe(g.coalesceStream), g.h264Stream.pipe(g.captionStream).pipe(g.coalesceStream), g.elementaryStream.on("data", function(_) {
        var T;
        if (_.type === "metadata") {
          for (T = _.tracks.length; T--; )
            !d && _.tracks[T].type === "video" ? (d = _.tracks[T], d.timelineStartInfo.baseMediaDecodeTime = c.baseMediaDecodeTime) : !p && _.tracks[T].type === "audio" && (p = _.tracks[T], p.timelineStartInfo.baseMediaDecodeTime = c.baseMediaDecodeTime);
          d && !g.videoSegmentStream && (g.coalesceStream.numberOfTracks++, g.videoSegmentStream = new gs(d, o), g.videoSegmentStream.on("log", c.getLogTrigger_("videoSegmentStream")), g.videoSegmentStream.on("timelineStartInfo", function(x) {
            p && !o.keepOriginalTimestamps && (p.timelineStartInfo = x, g.audioSegmentStream.setEarliestDts(x.dts - c.baseMediaDecodeTime));
          }), g.videoSegmentStream.on("processedGopsInfo", c.trigger.bind(c, "gopInfo")), g.videoSegmentStream.on("segmentTimingInfo", c.trigger.bind(c, "videoSegmentTimingInfo")), g.videoSegmentStream.on("baseMediaDecodeTime", function(x) {
            p && g.audioSegmentStream.setVideoBaseMediaDecodeTime(x);
          }), g.videoSegmentStream.on("timingInfo", c.trigger.bind(c, "videoTimingInfo")), g.h264Stream.pipe(g.videoSegmentStream).pipe(g.coalesceStream)), p && !g.audioSegmentStream && (g.coalesceStream.numberOfTracks++, g.audioSegmentStream = new xi(p, o), g.audioSegmentStream.on("log", c.getLogTrigger_("audioSegmentStream")), g.audioSegmentStream.on("timingInfo", c.trigger.bind(c, "audioTimingInfo")), g.audioSegmentStream.on("segmentTimingInfo", c.trigger.bind(c, "audioSegmentTimingInfo")), g.adtsStream.pipe(g.audioSegmentStream).pipe(g.coalesceStream)), c.trigger("trackinfo", {
            hasAudio: !!p,
            hasVideo: !!d
          });
        }
      }), g.coalesceStream.on("data", this.trigger.bind(this, "data")), g.coalesceStream.on("id3Frame", function(_) {
        _.dispatchType = g.metadataStream.dispatchType, c.trigger("id3Frame", _);
      }), g.coalesceStream.on("caption", this.trigger.bind(this, "caption")), g.coalesceStream.on("done", this.trigger.bind(this, "done")), Ml(this, g);
    }, this.setBaseMediaDecodeTime = function(g) {
      var _ = this.transmuxPipeline_;
      o.keepOriginalTimestamps || (this.baseMediaDecodeTime = g), p && (p.timelineStartInfo.dts = void 0, p.timelineStartInfo.pts = void 0, ut.clearDtsInfo(p), _.audioTimestampRolloverStream && _.audioTimestampRolloverStream.discontinuity()), d && (_.videoSegmentStream && (_.videoSegmentStream.gopCache_ = []), d.timelineStartInfo.dts = void 0, d.timelineStartInfo.pts = void 0, ut.clearDtsInfo(d), _.captionStream.reset()), _.timestampRolloverStream && _.timestampRolloverStream.discontinuity();
    }, this.setAudioAppendStart = function(g) {
      p && this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(g);
    }, this.setRemux = function(g) {
      var _ = this.transmuxPipeline_;
      o.remux = g, _ && _.coalesceStream && _.coalesceStream.setRemux(g);
    }, this.alignGopsWith = function(g) {
      d && this.transmuxPipeline_.videoSegmentStream && this.transmuxPipeline_.videoSegmentStream.alignGopsWith(g);
    }, this.getLogTrigger_ = function(g) {
      var _ = this;
      return function(T) {
        T.stream = g, _.trigger("log", T);
      };
    }, this.push = function(g) {
      if (h) {
        var _ = gm(g);
        _ && this.transmuxPipeline_.type !== "aac" ? this.setupAacPipeline() : !_ && this.transmuxPipeline_.type !== "ts" && this.setupTsPipeline(), h = !1;
      }
      this.transmuxPipeline_.headOfPipeline.push(g);
    }, this.flush = function() {
      h = !0, this.transmuxPipeline_.headOfPipeline.flush();
    }, this.endTimeline = function() {
      this.transmuxPipeline_.headOfPipeline.endTimeline();
    }, this.reset = function() {
      this.transmuxPipeline_.headOfPipeline && this.transmuxPipeline_.headOfPipeline.reset();
    }, this.resetCaptions = function() {
      this.transmuxPipeline_.captionStream && this.transmuxPipeline_.captionStream.reset();
    };
  }, Cr.prototype = new xr();
  var _m = {
    Transmuxer: Cr,
    VideoSegmentStream: gs,
    AudioSegmentStream: xi,
    AUDIO_PROPERTIES: Zn,
    VIDEO_PROPERTIES: ea,
    // exported for testing
    generateSegmentTimingInfo: ta
  }, Tm = function(o) {
    return o >>> 0;
  }, bm = function(o) {
    return ("00" + o.toString(16)).slice(-2);
  }, wr = {
    toUnsigned: Tm,
    toHexString: bm
  }, xm = function(o) {
    var c = "";
    return c += String.fromCharCode(o[0]), c += String.fromCharCode(o[1]), c += String.fromCharCode(o[2]), c += String.fromCharCode(o[3]), c;
  }, Fl = xm, Sm = wr.toUnsigned, Em = Fl, Ul = function(o, c) {
    var h = [], d, p, g, _, T;
    if (!c.length)
      return null;
    for (d = 0; d < o.byteLength; )
      p = Sm(o[d] << 24 | o[d + 1] << 16 | o[d + 2] << 8 | o[d + 3]), g = Em(o.subarray(d + 4, d + 8)), _ = p > 1 ? d + p : o.byteLength, g === c[0] && (c.length === 1 ? h.push(o.subarray(d + 8, _)) : (T = Ul(o.subarray(d + 8, _), c.slice(1)), T.length && (h = h.concat(T)))), d = _;
    return h;
  }, ql = Ul, Cm = wr.toUnsigned, wm = n.getUint64, Am = function(o) {
    var c = {
      version: o[0],
      flags: new Uint8Array(o.subarray(1, 4))
    };
    return c.version === 1 ? c.baseMediaDecodeTime = wm(o.subarray(4)) : c.baseMediaDecodeTime = Cm(o[4] << 24 | o[5] << 16 | o[6] << 8 | o[7]), c;
  }, $l = Am, Dm = function(o) {
    return {
      isLeading: (o[0] & 12) >>> 2,
      dependsOn: o[0] & 3,
      isDependedOn: (o[1] & 192) >>> 6,
      hasRedundancy: (o[1] & 48) >>> 4,
      paddingValue: (o[1] & 14) >>> 1,
      isNonSyncSample: o[1] & 1,
      degradationPriority: o[2] << 8 | o[3]
    };
  }, km = Dm, Vl = km, Im = function(o) {
    var c = {
      version: o[0],
      flags: new Uint8Array(o.subarray(1, 4)),
      samples: []
    }, h = new DataView(o.buffer, o.byteOffset, o.byteLength), d = c.flags[2] & 1, p = c.flags[2] & 4, g = c.flags[1] & 1, _ = c.flags[1] & 2, T = c.flags[1] & 4, x = c.flags[1] & 8, C = h.getUint32(4), I = 8, O;
    for (d && (c.dataOffset = h.getInt32(I), I += 4), p && C && (O = {
      flags: Vl(o.subarray(I, I + 4))
    }, I += 4, g && (O.duration = h.getUint32(I), I += 4), _ && (O.size = h.getUint32(I), I += 4), x && (c.version === 1 ? O.compositionTimeOffset = h.getInt32(I) : O.compositionTimeOffset = h.getUint32(I), I += 4), c.samples.push(O), C--); C--; )
      O = {}, g && (O.duration = h.getUint32(I), I += 4), _ && (O.size = h.getUint32(I), I += 4), T && (O.flags = Vl(o.subarray(I, I + 4)), I += 4), x && (c.version === 1 ? O.compositionTimeOffset = h.getInt32(I) : O.compositionTimeOffset = h.getUint32(I), I += 4), c.samples.push(O);
    return c;
  }, Hl = Im, Pm = function(o) {
    var c = new DataView(o.buffer, o.byteOffset, o.byteLength), h = {
      version: o[0],
      flags: new Uint8Array(o.subarray(1, 4)),
      trackId: c.getUint32(4)
    }, d = h.flags[2] & 1, p = h.flags[2] & 2, g = h.flags[2] & 8, _ = h.flags[2] & 16, T = h.flags[2] & 32, x = h.flags[0] & 65536, C = h.flags[0] & 131072, I;
    return I = 8, d && (I += 4, h.baseDataOffset = c.getUint32(12), I += 4), p && (h.sampleDescriptionIndex = c.getUint32(I), I += 4), g && (h.defaultSampleDuration = c.getUint32(I), I += 4), _ && (h.defaultSampleSize = c.getUint32(I), I += 4), T && (h.defaultSampleFlags = c.getUint32(I)), x && (h.durationIsEmpty = !0), !d && C && (h.baseDataOffsetIsMoof = !0), h;
  }, zl = Pm, vs;
  typeof window < "u" ? vs = window : typeof i < "u" ? vs = i : typeof self < "u" ? vs = self : vs = {};
  var Gl = vs, Lm = bl.discardEmulationPreventionBytes, Om = xl.CaptionStream, ys = ql, jm = $l, Rm = Hl, Nm = zl, Wl = Gl, Mm = function(o, c) {
    for (var h = o, d = 0; d < c.length; d++) {
      var p = c[d];
      if (h < p.size)
        return p;
      h -= p.size;
    }
    return null;
  }, Bm = function(o, c, h) {
    var d = new DataView(o.buffer, o.byteOffset, o.byteLength), p = {
      logs: [],
      seiNals: []
    }, g, _, T, x;
    for (_ = 0; _ + 4 < o.length; _ += T)
      if (T = d.getUint32(_), _ += 4, !(T <= 0))
        switch (o[_] & 31) {
          case 6:
            var C = o.subarray(_ + 1, _ + 1 + T), I = Mm(_, c);
            if (g = {
              nalUnitType: "sei_rbsp",
              size: T,
              data: C,
              escapedRBSP: Lm(C),
              trackId: h
            }, I)
              g.pts = I.pts, g.dts = I.dts, x = I;
            else if (x)
              g.pts = x.pts, g.dts = x.dts;
            else {
              p.logs.push({
                level: "warn",
                message: "We've encountered a nal unit without data at " + _ + " for trackId " + h + ". See mux.js#223."
              });
              break;
            }
            p.seiNals.push(g);
            break;
        }
    return p;
  }, Fm = function(o, c, h) {
    var d = c, p = h.defaultSampleDuration || 0, g = h.defaultSampleSize || 0, _ = h.trackId, T = [];
    return o.forEach(function(x) {
      var C = Rm(x), I = C.samples;
      I.forEach(function(O) {
        O.duration === void 0 && (O.duration = p), O.size === void 0 && (O.size = g), O.trackId = _, O.dts = d, O.compositionTimeOffset === void 0 && (O.compositionTimeOffset = 0), typeof d == "bigint" ? (O.pts = d + Wl.BigInt(O.compositionTimeOffset), d += Wl.BigInt(O.duration)) : (O.pts = d + O.compositionTimeOffset, d += O.duration);
      }), T = T.concat(I);
    }), T;
  }, Um = function(o, c) {
    var h = ys(o, ["moof", "traf"]), d = ys(o, ["mdat"]), p = {}, g = [];
    return d.forEach(function(_, T) {
      var x = h[T];
      g.push({
        mdat: _,
        traf: x
      });
    }), g.forEach(function(_) {
      var T = _.mdat, x = _.traf, C = ys(x, ["tfhd"]), I = Nm(C[0]), O = I.trackId, U = ys(x, ["tfdt"]), M = U.length > 0 ? jm(U[0]).baseMediaDecodeTime : 0, z = ys(x, ["trun"]), G, Ee;
      c === O && z.length > 0 && (G = Fm(z, M, I), Ee = Bm(T, G, O), p[O] || (p[O] = {
        seiNals: [],
        logs: []
      }), p[O].seiNals = p[O].seiNals.concat(Ee.seiNals), p[O].logs = p[O].logs.concat(Ee.logs));
    }), p;
  }, qm = function(o, c, h) {
    var d;
    if (c === null)
      return null;
    d = Um(o, c);
    var p = d[c] || {};
    return {
      seiNals: p.seiNals,
      logs: p.logs,
      timescale: h
    };
  }, $m = function() {
    var o = !1, c, h, d, p, g, _;
    this.isInitialized = function() {
      return o;
    }, this.init = function(T) {
      c = new Om(), o = !0, _ = T ? T.isPartial : !1, c.on("data", function(x) {
        x.startTime = x.startPts / p, x.endTime = x.endPts / p, g.captions.push(x), g.captionStreams[x.stream] = !0;
      }), c.on("log", function(x) {
        g.logs.push(x);
      });
    }, this.isNewInit = function(T, x) {
      return T && T.length === 0 || x && typeof x == "object" && Object.keys(x).length === 0 ? !1 : d !== T[0] || p !== x[d];
    }, this.parse = function(T, x, C) {
      var I;
      if (this.isInitialized()) {
        if (!x || !C)
          return null;
        if (this.isNewInit(x, C))
          d = x[0], p = C[d];
        else if (d === null || !p)
          return h.push(T), null;
      } else
        return null;
      for (; h.length > 0; ) {
        var O = h.shift();
        this.parse(O, x, C);
      }
      return I = qm(T, d, p), I && I.logs && (g.logs = g.logs.concat(I.logs)), I === null || !I.seiNals ? g.logs.length ? {
        logs: g.logs,
        captions: [],
        captionStreams: []
      } : null : (this.pushNals(I.seiNals), this.flushStream(), g);
    }, this.pushNals = function(T) {
      if (!this.isInitialized() || !T || T.length === 0)
        return null;
      T.forEach(function(x) {
        c.push(x);
      });
    }, this.flushStream = function() {
      if (!this.isInitialized())
        return null;
      _ ? c.partialFlush() : c.flush();
    }, this.clearParsedCaptions = function() {
      g.captions = [], g.captionStreams = {}, g.logs = [];
    }, this.resetCaptionStream = function() {
      if (!this.isInitialized())
        return null;
      c.reset();
    }, this.clearAllCaptions = function() {
      this.clearParsedCaptions(), this.resetCaptionStream();
    }, this.reset = function() {
      h = [], d = null, p = null, g ? this.clearParsedCaptions() : g = {
        captions: [],
        // CC1, CC2, CC3, CC4
        captionStreams: {},
        logs: []
      }, this.resetCaptionStream();
    }, this.reset();
  }, Vm = $m, Hm = function(o) {
    for (var c = 0, h = String.fromCharCode(o[c]), d = ""; h !== "\0"; )
      d += h, c++, h = String.fromCharCode(o[c]);
    return d += h, d;
  }, zm = {
    uint8ToCString: Hm
  }, Ar = zm.uint8ToCString, Gm = n.getUint64, Wm = function(o) {
    var c = 4, h = o[0], d, p, g, _, T, x, C, I;
    if (h === 0) {
      d = Ar(o.subarray(c)), c += d.length, p = Ar(o.subarray(c)), c += p.length;
      var O = new DataView(o.buffer);
      g = O.getUint32(c), c += 4, T = O.getUint32(c), c += 4, x = O.getUint32(c), c += 4, C = O.getUint32(c), c += 4;
    } else if (h === 1) {
      var O = new DataView(o.buffer);
      g = O.getUint32(c), c += 4, _ = Gm(o.subarray(c)), c += 8, x = O.getUint32(c), c += 4, C = O.getUint32(c), c += 4, d = Ar(o.subarray(c)), c += d.length, p = Ar(o.subarray(c)), c += p.length;
    }
    I = new Uint8Array(o.subarray(c, o.byteLength));
    var U = {
      scheme_id_uri: d,
      value: p,
      // if timescale is undefined or 0 set to 1 
      timescale: g || 1,
      presentation_time: _,
      presentation_time_delta: T,
      event_duration: x,
      id: C,
      message_data: I
    };
    return Km(h, U) ? U : void 0;
  }, Xm = function(o, c, h, d) {
    return o || o === 0 ? o / c : d + h / c;
  }, Km = function(o, c) {
    var h = c.scheme_id_uri !== "\0", d = o === 0 && Xl(c.presentation_time_delta) && h, p = o === 1 && Xl(c.presentation_time) && h;
    return !(o > 1) && d || p;
  }, Xl = function(o) {
    return o !== void 0 || o !== null;
  }, Ym = {
    parseEmsgBox: Wm,
    scaleTime: Xm
  }, Dr = wr.toUnsigned, _s = wr.toHexString, Te = ql, Si = Fl, ia = Ym, Qm = zl, Jm = Hl, Zm = $l, eg = n.getUint64, Kl, Yl, Ql, Jl, Zl, sa, eu, ra = Gl, tg = wl.parseId3Frames;
  Kl = function(o) {
    var c = {}, h = Te(o, ["moov", "trak"]);
    return h.reduce(function(d, p) {
      var g, _, T, x, C;
      return g = Te(p, ["tkhd"])[0], !g || (_ = g[0], T = _ === 0 ? 12 : 20, x = Dr(g[T] << 24 | g[T + 1] << 16 | g[T + 2] << 8 | g[T + 3]), C = Te(p, ["mdia", "mdhd"])[0], !C) ? null : (_ = C[0], T = _ === 0 ? 12 : 20, d[x] = Dr(C[T] << 24 | C[T + 1] << 16 | C[T + 2] << 8 | C[T + 3]), d);
    }, c);
  }, Yl = function(o, c) {
    var h;
    h = Te(c, ["moof", "traf"]);
    var d = h.reduce(function(p, g) {
      var _ = Te(g, ["tfhd"])[0], T = Dr(_[4] << 24 | _[5] << 16 | _[6] << 8 | _[7]), x = o[T] || 9e4, C = Te(g, ["tfdt"])[0], I = new DataView(C.buffer, C.byteOffset, C.byteLength), O;
      C[0] === 1 ? O = eg(C.subarray(4, 12)) : O = I.getUint32(4);
      let U;
      return typeof O == "bigint" ? U = O / ra.BigInt(x) : typeof O == "number" && !isNaN(O) && (U = O / x), U < Number.MAX_SAFE_INTEGER && (U = Number(U)), U < p && (p = U), p;
    }, 1 / 0);
    return typeof d == "bigint" || isFinite(d) ? d : 0;
  }, Ql = function(o, c) {
    var h = Te(c, ["moof", "traf"]), d = 0, p = 0, g;
    if (h && h.length) {
      var _ = Te(h[0], ["tfhd"])[0], T = Te(h[0], ["trun"])[0], x = Te(h[0], ["tfdt"])[0];
      if (_) {
        var C = Qm(_);
        g = C.trackId;
      }
      if (x) {
        var I = Zm(x);
        d = I.baseMediaDecodeTime;
      }
      if (T) {
        var O = Jm(T);
        O.samples && O.samples.length && (p = O.samples[0].compositionTimeOffset || 0);
      }
    }
    var U = o[g] || 9e4;
    typeof d == "bigint" && (p = ra.BigInt(p), U = ra.BigInt(U));
    var M = (d + p) / U;
    return typeof M == "bigint" && M < Number.MAX_SAFE_INTEGER && (M = Number(M)), M;
  }, Jl = function(o) {
    var c = Te(o, ["moov", "trak"]), h = [];
    return c.forEach(function(d) {
      var p = Te(d, ["mdia", "hdlr"]), g = Te(d, ["tkhd"]);
      p.forEach(function(_, T) {
        var x = Si(_.subarray(8, 12)), C = g[T], I, O, U;
        x === "vide" && (I = new DataView(C.buffer, C.byteOffset, C.byteLength), O = I.getUint8(0), U = O === 0 ? I.getUint32(12) : I.getUint32(20), h.push(U));
      });
    }), h;
  }, sa = function(o) {
    var c = o[0], h = c === 0 ? 12 : 20;
    return Dr(o[h] << 24 | o[h + 1] << 16 | o[h + 2] << 8 | o[h + 3]);
  }, Zl = function(o) {
    var c = Te(o, ["moov", "trak"]), h = [];
    return c.forEach(function(d) {
      var p = {}, g = Te(d, ["tkhd"])[0], _, T;
      g && (_ = new DataView(g.buffer, g.byteOffset, g.byteLength), T = _.getUint8(0), p.id = T === 0 ? _.getUint32(12) : _.getUint32(20));
      var x = Te(d, ["mdia", "hdlr"])[0];
      if (x) {
        var C = Si(x.subarray(8, 12));
        C === "vide" ? p.type = "video" : C === "soun" ? p.type = "audio" : p.type = C;
      }
      var I = Te(d, ["mdia", "minf", "stbl", "stsd"])[0];
      if (I) {
        var O = I.subarray(8);
        p.codec = Si(O.subarray(4, 8));
        var U = Te(O, [p.codec])[0], M, z;
        U && (/^[asm]vc[1-9]$/i.test(p.codec) ? (M = U.subarray(78), z = Si(M.subarray(4, 8)), z === "avcC" && M.length > 11 ? (p.codec += ".", p.codec += _s(M[9]), p.codec += _s(M[10]), p.codec += _s(M[11])) : p.codec = "avc1.4d400d") : /^mp4[a,v]$/i.test(p.codec) ? (M = U.subarray(28), z = Si(M.subarray(4, 8)), z === "esds" && M.length > 20 && M[19] !== 0 ? (p.codec += "." + _s(M[19]), p.codec += "." + _s(M[20] >>> 2 & 63).replace(/^0/, "")) : p.codec = "mp4a.40.2") : p.codec = p.codec.toLowerCase());
      }
      var G = Te(d, ["mdia", "mdhd"])[0];
      G && (p.timescale = sa(G)), h.push(p);
    }), h;
  }, eu = function(o, c = 0) {
    var h = Te(o, ["emsg"]);
    return h.map((d) => {
      var p = ia.parseEmsgBox(new Uint8Array(d)), g = tg(p.message_data);
      return {
        cueTime: ia.scaleTime(p.presentation_time, p.timescale, p.presentation_time_delta, c),
        duration: ia.scaleTime(p.event_duration, p.timescale),
        frames: g
      };
    });
  };
  var na = {
    // export mp4 inspector's findBox and parseType for backwards compatibility
    findBox: Te,
    parseType: Si,
    timescale: Kl,
    startTime: Yl,
    compositionStartTime: Ql,
    videoTrackIds: Jl,
    tracks: Zl,
    getTimescaleFromMediaHeader: sa,
    getEmsgID3: eu
  }, aa = fr, tu = function(o) {
    var c = o[1] & 31;
    return c <<= 8, c |= o[2], c;
  }, kr = function(o) {
    return !!(o[1] & 64);
  }, Ir = function(o) {
    var c = 0;
    return (o[3] & 48) >>> 4 > 1 && (c += o[4] + 1), c;
  }, ig = function(o, c) {
    var h = tu(o);
    return h === 0 ? "pat" : h === c ? "pmt" : c ? "pes" : null;
  }, sg = function(o) {
    var c = kr(o), h = 4 + Ir(o);
    return c && (h += o[h] + 1), (o[h + 10] & 31) << 8 | o[h + 11];
  }, rg = function(o) {
    var c = {}, h = kr(o), d = 4 + Ir(o);
    if (h && (d += o[d] + 1), !!(o[d + 5] & 1)) {
      var p, g, _;
      p = (o[d + 1] & 15) << 8 | o[d + 2], g = 3 + p - 4, _ = (o[d + 10] & 15) << 8 | o[d + 11];
      for (var T = 12 + _; T < g; ) {
        var x = d + T;
        c[(o[x + 1] & 31) << 8 | o[x + 2]] = o[x], T += ((o[x + 3] & 15) << 8 | o[x + 4]) + 5;
      }
      return c;
    }
  }, ng = function(o, c) {
    var h = tu(o), d = c[h];
    switch (d) {
      case aa.H264_STREAM_TYPE:
        return "video";
      case aa.ADTS_STREAM_TYPE:
        return "audio";
      case aa.METADATA_STREAM_TYPE:
        return "timed-metadata";
      default:
        return null;
    }
  }, ag = function(o) {
    var c = kr(o);
    if (!c)
      return null;
    var h = 4 + Ir(o);
    if (h >= o.byteLength)
      return null;
    var d = null, p;
    return p = o[h + 7], p & 192 && (d = {}, d.pts = (o[h + 9] & 14) << 27 | (o[h + 10] & 255) << 20 | (o[h + 11] & 254) << 12 | (o[h + 12] & 255) << 5 | (o[h + 13] & 254) >>> 3, d.pts *= 4, d.pts += (o[h + 13] & 6) >>> 1, d.dts = d.pts, p & 64 && (d.dts = (o[h + 14] & 14) << 27 | (o[h + 15] & 255) << 20 | (o[h + 16] & 254) << 12 | (o[h + 17] & 255) << 5 | (o[h + 18] & 254) >>> 3, d.dts *= 4, d.dts += (o[h + 18] & 6) >>> 1)), d;
  }, oa = function(o) {
    switch (o) {
      case 5:
        return "slice_layer_without_partitioning_rbsp_idr";
      case 6:
        return "sei_rbsp";
      case 7:
        return "seq_parameter_set_rbsp";
      case 8:
        return "pic_parameter_set_rbsp";
      case 9:
        return "access_unit_delimiter_rbsp";
      default:
        return null;
    }
  }, og = function(o) {
    for (var c = 4 + Ir(o), h = o.subarray(c), d = 0, p = 0, g = !1, _; p < h.byteLength - 3; p++)
      if (h[p + 2] === 1) {
        d = p + 5;
        break;
      }
    for (; d < h.byteLength; )
      switch (h[d]) {
        case 0:
          if (h[d - 1] !== 0) {
            d += 2;
            break;
          } else if (h[d - 2] !== 0) {
            d++;
            break;
          }
          p + 3 !== d - 2 && (_ = oa(h[p + 3] & 31), _ === "slice_layer_without_partitioning_rbsp_idr" && (g = !0));
          do
            d++;
          while (h[d] !== 1 && d < h.length);
          p = d - 2, d += 3;
          break;
        case 1:
          if (h[d - 1] !== 0 || h[d - 2] !== 0) {
            d += 3;
            break;
          }
          _ = oa(h[p + 3] & 31), _ === "slice_layer_without_partitioning_rbsp_idr" && (g = !0), p = d - 2, d += 3;
          break;
        default:
          d += 3;
          break;
      }
    return h = h.subarray(p), d -= p, p = 0, h && h.byteLength > 3 && (_ = oa(h[p + 3] & 31), _ === "slice_layer_without_partitioning_rbsp_idr" && (g = !0)), g;
  }, lg = {
    parseType: ig,
    parsePat: sg,
    parsePmt: rg,
    parsePayloadUnitStartIndicator: kr,
    parsePesType: ng,
    parsePesTime: ag,
    videoPacketContainsKeyFrame: og
  }, iu = fr, Ei = El.handleRollover, re = {};
  re.ts = lg, re.aac = Jn;
  var oi = de.ONE_SECOND_IN_TS, Oe = 188, pt = 71, ug = function(o, c) {
    for (var h = 0, d = Oe, p, g; d < o.byteLength; ) {
      if (o[h] === pt && o[d] === pt) {
        switch (p = o.subarray(h, d), g = re.ts.parseType(p, c.pid), g) {
          case "pat":
            c.pid = re.ts.parsePat(p);
            break;
          case "pmt":
            var _ = re.ts.parsePmt(p);
            c.table = c.table || {}, Object.keys(_).forEach(function(T) {
              c.table[T] = _[T];
            });
            break;
        }
        h += Oe, d += Oe;
        continue;
      }
      h++, d++;
    }
  }, su = function(o, c, h) {
    for (var d = 0, p = Oe, g, _, T, x, C, I = !1; p <= o.byteLength; ) {
      if (o[d] === pt && (o[p] === pt || p === o.byteLength)) {
        switch (g = o.subarray(d, p), _ = re.ts.parseType(g, c.pid), _) {
          case "pes":
            T = re.ts.parsePesType(g, c.table), x = re.ts.parsePayloadUnitStartIndicator(g), T === "audio" && x && (C = re.ts.parsePesTime(g), C && (C.type = "audio", h.audio.push(C), I = !0));
            break;
        }
        if (I)
          break;
        d += Oe, p += Oe;
        continue;
      }
      d++, p++;
    }
    for (p = o.byteLength, d = p - Oe, I = !1; d >= 0; ) {
      if (o[d] === pt && (o[p] === pt || p === o.byteLength)) {
        switch (g = o.subarray(d, p), _ = re.ts.parseType(g, c.pid), _) {
          case "pes":
            T = re.ts.parsePesType(g, c.table), x = re.ts.parsePayloadUnitStartIndicator(g), T === "audio" && x && (C = re.ts.parsePesTime(g), C && (C.type = "audio", h.audio.push(C), I = !0));
            break;
        }
        if (I)
          break;
        d -= Oe, p -= Oe;
        continue;
      }
      d--, p--;
    }
  }, cg = function(o, c, h) {
    for (var d = 0, p = Oe, g, _, T, x, C, I, O, U, M = !1, z = {
      data: [],
      size: 0
    }; p < o.byteLength; ) {
      if (o[d] === pt && o[p] === pt) {
        switch (g = o.subarray(d, p), _ = re.ts.parseType(g, c.pid), _) {
          case "pes":
            if (T = re.ts.parsePesType(g, c.table), x = re.ts.parsePayloadUnitStartIndicator(g), T === "video" && (x && !M && (C = re.ts.parsePesTime(g), C && (C.type = "video", h.video.push(C), M = !0)), !h.firstKeyFrame)) {
              if (x && z.size !== 0) {
                for (I = new Uint8Array(z.size), O = 0; z.data.length; )
                  U = z.data.shift(), I.set(U, O), O += U.byteLength;
                if (re.ts.videoPacketContainsKeyFrame(I)) {
                  var G = re.ts.parsePesTime(I);
                  G ? (h.firstKeyFrame = G, h.firstKeyFrame.type = "video") : console.warn("Failed to extract PTS/DTS from PES at first keyframe. This could be an unusual TS segment, or else mux.js did not parse your TS segment correctly. If you know your TS segments do contain PTS/DTS on keyframes please file a bug report! You can try ffprobe to double check for yourself.");
                }
                z.size = 0;
              }
              z.data.push(g), z.size += g.byteLength;
            }
            break;
        }
        if (M && h.firstKeyFrame)
          break;
        d += Oe, p += Oe;
        continue;
      }
      d++, p++;
    }
    for (p = o.byteLength, d = p - Oe, M = !1; d >= 0; ) {
      if (o[d] === pt && o[p] === pt) {
        switch (g = o.subarray(d, p), _ = re.ts.parseType(g, c.pid), _) {
          case "pes":
            T = re.ts.parsePesType(g, c.table), x = re.ts.parsePayloadUnitStartIndicator(g), T === "video" && x && (C = re.ts.parsePesTime(g), C && (C.type = "video", h.video.push(C), M = !0));
            break;
        }
        if (M)
          break;
        d -= Oe, p -= Oe;
        continue;
      }
      d--, p--;
    }
  }, dg = function(o, c) {
    if (o.audio && o.audio.length) {
      var h = c;
      (typeof h > "u" || isNaN(h)) && (h = o.audio[0].dts), o.audio.forEach(function(g) {
        g.dts = Ei(g.dts, h), g.pts = Ei(g.pts, h), g.dtsTime = g.dts / oi, g.ptsTime = g.pts / oi;
      });
    }
    if (o.video && o.video.length) {
      var d = c;
      if ((typeof d > "u" || isNaN(d)) && (d = o.video[0].dts), o.video.forEach(function(g) {
        g.dts = Ei(g.dts, d), g.pts = Ei(g.pts, d), g.dtsTime = g.dts / oi, g.ptsTime = g.pts / oi;
      }), o.firstKeyFrame) {
        var p = o.firstKeyFrame;
        p.dts = Ei(p.dts, d), p.pts = Ei(p.pts, d), p.dtsTime = p.dts / oi, p.ptsTime = p.pts / oi;
      }
    }
  }, hg = function(o) {
    for (var c = !1, h = 0, d = null, p = null, g = 0, _ = 0, T; o.length - _ >= 3; ) {
      var x = re.aac.parseType(o, _);
      switch (x) {
        case "timed-metadata":
          if (o.length - _ < 10) {
            c = !0;
            break;
          }
          if (g = re.aac.parseId3TagSize(o, _), g > o.length) {
            c = !0;
            break;
          }
          p === null && (T = o.subarray(_, _ + g), p = re.aac.parseAacTimestamp(T)), _ += g;
          break;
        case "audio":
          if (o.length - _ < 7) {
            c = !0;
            break;
          }
          if (g = re.aac.parseAdtsSize(o, _), g > o.length) {
            c = !0;
            break;
          }
          d === null && (T = o.subarray(_, _ + g), d = re.aac.parseSampleRate(T)), h++, _ += g;
          break;
        default:
          _++;
          break;
      }
      if (c)
        return null;
    }
    if (d === null || p === null)
      return null;
    var C = oi / d, I = {
      audio: [{
        type: "audio",
        dts: p,
        pts: p
      }, {
        type: "audio",
        dts: p + h * 1024 * C,
        pts: p + h * 1024 * C
      }]
    };
    return I;
  }, fg = function(o) {
    var c = {
      pid: null,
      table: null
    }, h = {};
    ug(o, c);
    for (var d in c.table)
      if (c.table.hasOwnProperty(d)) {
        var p = c.table[d];
        switch (p) {
          case iu.H264_STREAM_TYPE:
            h.video = [], cg(o, c, h), h.video.length === 0 && delete h.video;
            break;
          case iu.ADTS_STREAM_TYPE:
            h.audio = [], su(o, c, h), h.audio.length === 0 && delete h.audio;
            break;
        }
      }
    return h;
  }, pg = function(o, c) {
    var h = re.aac.isLikelyAacData(o), d;
    return h ? d = hg(o) : d = fg(o), !d || !d.audio && !d.video ? null : (dg(d, c), d);
  }, mg = {
    inspect: pg,
    parseAudioPes_: su
  };
  const gg = function(o, c) {
    c.on("data", function(h) {
      const d = h.initSegment;
      h.initSegment = {
        data: d.buffer,
        byteOffset: d.byteOffset,
        byteLength: d.byteLength
      };
      const p = h.data;
      h.data = p.buffer, o.postMessage({
        action: "data",
        segment: h,
        byteOffset: p.byteOffset,
        byteLength: p.byteLength
      }, [h.data]);
    }), c.on("done", function(h) {
      o.postMessage({
        action: "done"
      });
    }), c.on("gopInfo", function(h) {
      o.postMessage({
        action: "gopInfo",
        gopInfo: h
      });
    }), c.on("videoSegmentTimingInfo", function(h) {
      const d = {
        start: {
          decode: de.videoTsToSeconds(h.start.dts),
          presentation: de.videoTsToSeconds(h.start.pts)
        },
        end: {
          decode: de.videoTsToSeconds(h.end.dts),
          presentation: de.videoTsToSeconds(h.end.pts)
        },
        baseMediaDecodeTime: de.videoTsToSeconds(h.baseMediaDecodeTime)
      };
      h.prependedContentDuration && (d.prependedContentDuration = de.videoTsToSeconds(h.prependedContentDuration)), o.postMessage({
        action: "videoSegmentTimingInfo",
        videoSegmentTimingInfo: d
      });
    }), c.on("audioSegmentTimingInfo", function(h) {
      const d = {
        start: {
          decode: de.videoTsToSeconds(h.start.dts),
          presentation: de.videoTsToSeconds(h.start.pts)
        },
        end: {
          decode: de.videoTsToSeconds(h.end.dts),
          presentation: de.videoTsToSeconds(h.end.pts)
        },
        baseMediaDecodeTime: de.videoTsToSeconds(h.baseMediaDecodeTime)
      };
      h.prependedContentDuration && (d.prependedContentDuration = de.videoTsToSeconds(h.prependedContentDuration)), o.postMessage({
        action: "audioSegmentTimingInfo",
        audioSegmentTimingInfo: d
      });
    }), c.on("id3Frame", function(h) {
      o.postMessage({
        action: "id3Frame",
        id3Frame: h
      });
    }), c.on("caption", function(h) {
      o.postMessage({
        action: "caption",
        caption: h
      });
    }), c.on("trackinfo", function(h) {
      o.postMessage({
        action: "trackinfo",
        trackInfo: h
      });
    }), c.on("audioTimingInfo", function(h) {
      o.postMessage({
        action: "audioTimingInfo",
        audioTimingInfo: {
          start: de.videoTsToSeconds(h.start),
          end: de.videoTsToSeconds(h.end)
        }
      });
    }), c.on("videoTimingInfo", function(h) {
      o.postMessage({
        action: "videoTimingInfo",
        videoTimingInfo: {
          start: de.videoTsToSeconds(h.start),
          end: de.videoTsToSeconds(h.end)
        }
      });
    }), c.on("log", function(h) {
      o.postMessage({
        action: "log",
        log: h
      });
    });
  };
  class ru {
    constructor(c, h) {
      this.options = h || {}, this.self = c, this.init();
    }
    /**
     * initialize our web worker and wire all the events.
     */
    init() {
      this.transmuxer && this.transmuxer.dispose(), this.transmuxer = new _m.Transmuxer(this.options), gg(this.self, this.transmuxer);
    }
    pushMp4Captions(c) {
      this.captionParser || (this.captionParser = new Vm(), this.captionParser.init());
      const h = new Uint8Array(c.data, c.byteOffset, c.byteLength), d = this.captionParser.parse(h, c.trackIds, c.timescales);
      this.self.postMessage({
        action: "mp4Captions",
        captions: d && d.captions || [],
        logs: d && d.logs || [],
        data: h.buffer
      }, [h.buffer]);
    }
    probeMp4StartTime({
      timescales: c,
      data: h
    }) {
      const d = na.startTime(c, h);
      this.self.postMessage({
        action: "probeMp4StartTime",
        startTime: d,
        data: h
      }, [h.buffer]);
    }
    probeMp4Tracks({
      data: c
    }) {
      const h = na.tracks(c);
      this.self.postMessage({
        action: "probeMp4Tracks",
        tracks: h,
        data: c
      }, [c.buffer]);
    }
    /**
     * Probes an mp4 segment for EMSG boxes containing ID3 data.
     * https://aomediacodec.github.io/id3-emsg/
     *
     * @param {Uint8Array} data segment data
     * @param {number} offset segment start time
     * @return {Object[]} an array of ID3 frames
     */
    probeEmsgID3({
      data: c,
      offset: h
    }) {
      const d = na.getEmsgID3(c, h);
      this.self.postMessage({
        action: "probeEmsgID3",
        id3Frames: d,
        emsgData: c
      }, [c.buffer]);
    }
    /**
     * Probe an mpeg2-ts segment to determine the start time of the segment in it's
     * internal "media time," as well as whether it contains video and/or audio.
     *
     * @private
     * @param {Uint8Array} bytes - segment bytes
     * @param {number} baseStartTime
     *        Relative reference timestamp used when adjusting frame timestamps for rollover.
     *        This value should be in seconds, as it's converted to a 90khz clock within the
     *        function body.
     * @return {Object} The start time of the current segment in "media time" as well as
     *                  whether it contains video and/or audio
     */
    probeTs({
      data: c,
      baseStartTime: h
    }) {
      const d = typeof h == "number" && !isNaN(h) ? h * de.ONE_SECOND_IN_TS : void 0, p = mg.inspect(c, d);
      let g = null;
      p && (g = {
        // each type's time info comes back as an array of 2 times, start and end
        hasVideo: p.video && p.video.length === 2 || !1,
        hasAudio: p.audio && p.audio.length === 2 || !1
      }, g.hasVideo && (g.videoStart = p.video[0].ptsTime), g.hasAudio && (g.audioStart = p.audio[0].ptsTime)), this.self.postMessage({
        action: "probeTs",
        result: g,
        data: c
      }, [c.buffer]);
    }
    clearAllMp4Captions() {
      this.captionParser && this.captionParser.clearAllCaptions();
    }
    clearParsedMp4Captions() {
      this.captionParser && this.captionParser.clearParsedCaptions();
    }
    /**
     * Adds data (a ts segment) to the start of the transmuxer pipeline for
     * processing.
     *
     * @param {ArrayBuffer} data data to push into the muxer
     */
    push(c) {
      const h = new Uint8Array(c.data, c.byteOffset, c.byteLength);
      this.transmuxer.push(h);
    }
    /**
     * Recreate the transmuxer so that the next segment added via `push`
     * start with a fresh transmuxer.
     */
    reset() {
      this.transmuxer.reset();
    }
    /**
     * Set the value that will be used as the `baseMediaDecodeTime` time for the
     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`
     * set relative to the first based on the PTS values.
     *
     * @param {Object} data used to set the timestamp offset in the muxer
     */
    setTimestampOffset(c) {
      const h = c.timestampOffset || 0;
      this.transmuxer.setBaseMediaDecodeTime(Math.round(de.secondsToVideoTs(h)));
    }
    setAudioAppendStart(c) {
      this.transmuxer.setAudioAppendStart(Math.ceil(de.secondsToVideoTs(c.appendStart)));
    }
    setRemux(c) {
      this.transmuxer.setRemux(c.remux);
    }
    /**
     * Forces the pipeline to finish processing the last segment and emit it's
     * results.
     *
     * @param {Object} data event data, not really used
     */
    flush(c) {
      this.transmuxer.flush(), self.postMessage({
        action: "done",
        type: "transmuxed"
      });
    }
    endTimeline() {
      this.transmuxer.endTimeline(), self.postMessage({
        action: "endedtimeline",
        type: "transmuxed"
      });
    }
    alignGopsWith(c) {
      this.transmuxer.alignGopsWith(c.gopsToAlignWith.slice());
    }
  }
  self.onmessage = function(o) {
    if (o.data.action === "init" && o.data.options) {
      this.messageHandlers = new ru(self, o.data.options);
      return;
    }
    this.messageHandlers || (this.messageHandlers = new ru(self)), o.data && o.data.action && o.data.action !== "init" && this.messageHandlers[o.data.action] && this.messageHandlers[o.data.action](o.data);
  };
}));
var i1 = kf(t1);
const s1 = (i, e, t) => {
  const {
    type: s,
    initSegment: r,
    captions: n,
    captionStreams: a,
    metadata: l,
    videoFrameDtsTime: u,
    videoFramePtsTime: f
  } = i.data.segment;
  e.buffer.push({
    captions: n,
    captionStreams: a,
    metadata: l
  });
  const m = i.data.segment.boxes || {
    data: i.data.segment.data
  }, v = {
    type: s,
    // cast ArrayBuffer to TypedArray
    data: new Uint8Array(m.data, m.data.byteOffset, m.data.byteLength),
    initSegment: new Uint8Array(r.data, r.byteOffset, r.byteLength)
  };
  typeof u < "u" && (v.videoFrameDtsTime = u), typeof f < "u" && (v.videoFramePtsTime = f), t(v);
}, r1 = ({
  transmuxedData: i,
  callback: e
}) => {
  i.buffer = [], e(i);
}, n1 = (i, e) => {
  e.gopInfo = i.data.gopInfo;
}, Lf = (i) => {
  const {
    transmuxer: e,
    bytes: t,
    audioAppendStart: s,
    gopsToAlignWith: r,
    remux: n,
    onData: a,
    onTrackInfo: l,
    onAudioTimingInfo: u,
    onVideoTimingInfo: f,
    onVideoSegmentTimingInfo: m,
    onAudioSegmentTimingInfo: v,
    onId3: b,
    onCaptions: S,
    onDone: y,
    onEndedTimeline: A,
    onTransmuxerLog: w,
    isEndOfTimeline: k
  } = i, D = {
    buffer: []
  };
  let R = k;
  const j = (P) => {
    e.currentTransmux === i && (P.data.action === "data" && s1(P, D, a), P.data.action === "trackinfo" && l(P.data.trackInfo), P.data.action === "gopInfo" && n1(P, D), P.data.action === "audioTimingInfo" && u(P.data.audioTimingInfo), P.data.action === "videoTimingInfo" && f(P.data.videoTimingInfo), P.data.action === "videoSegmentTimingInfo" && m(P.data.videoSegmentTimingInfo), P.data.action === "audioSegmentTimingInfo" && v(P.data.audioSegmentTimingInfo), P.data.action === "id3Frame" && b([P.data.id3Frame], P.data.id3Frame.dispatchType), P.data.action === "caption" && S(P.data.caption), P.data.action === "endedtimeline" && (R = !1, A()), P.data.action === "log" && w(P.data.log), P.data.type === "transmuxed" && (R || (e.onmessage = null, r1({
      transmuxedData: D,
      callback: y
    }), Of(e))));
  };
  if (e.onmessage = j, s && e.postMessage({
    action: "setAudioAppendStart",
    appendStart: s
  }), Array.isArray(r) && e.postMessage({
    action: "alignGopsWith",
    gopsToAlignWith: r
  }), typeof n < "u" && e.postMessage({
    action: "setRemux",
    remux: n
  }), t.byteLength) {
    const P = t instanceof ArrayBuffer ? t : t.buffer, F = t instanceof ArrayBuffer ? 0 : t.byteOffset;
    e.postMessage({
      action: "push",
      // Send the typed-array of data as an ArrayBuffer so that
      // it can be sent as a "Transferable" and avoid the costly
      // memory copy
      data: P,
      // To recreate the original typed-array, we need information
      // about what portion of the ArrayBuffer it was a view into
      byteOffset: F,
      byteLength: t.byteLength
    }, [P]);
  }
  k && e.postMessage({
    action: "endTimeline"
  }), e.postMessage({
    action: "flush"
  });
}, Of = (i) => {
  i.currentTransmux = null, i.transmuxQueue.length && (i.currentTransmux = i.transmuxQueue.shift(), typeof i.currentTransmux == "function" ? i.currentTransmux() : Lf(i.currentTransmux));
}, Tc = (i, e) => {
  i.postMessage({
    action: e
  }), Of(i);
}, jf = (i, e) => {
  if (!e.currentTransmux) {
    e.currentTransmux = i, Tc(e, i);
    return;
  }
  e.transmuxQueue.push(Tc.bind(null, e, i));
}, a1 = (i) => {
  jf("reset", i);
}, o1 = (i) => {
  jf("endTimeline", i);
}, Rf = (i) => {
  if (!i.transmuxer.currentTransmux) {
    i.transmuxer.currentTransmux = i, Lf(i);
    return;
  }
  i.transmuxer.transmuxQueue.push(i);
}, l1 = (i) => {
  const e = new i1();
  e.currentTransmux = null, e.transmuxQueue = [];
  const t = e.terminate;
  return e.terminate = () => (e.currentTransmux = null, e.transmuxQueue.length = 0, t.call(e)), e.postMessage({
    action: "init",
    options: i
  }), e;
};
var ka = {
  reset: a1,
  endTimeline: o1,
  transmux: Rf,
  createTransmuxer: l1
};
const Fs = function(i) {
  const e = i.transmuxer, t = i.endAction || i.action, s = i.callback, r = it({}, i, {
    endAction: null,
    transmuxer: null,
    callback: null
  }), n = (a) => {
    a.data.action === t && (e.removeEventListener("message", n), a.data.data && (a.data.data = new Uint8Array(a.data.data, i.byteOffset || 0, i.byteLength || a.data.data.byteLength), i.data && (i.data = a.data.data)), s(a.data));
  };
  if (e.addEventListener("message", n), i.data) {
    const a = i.data instanceof ArrayBuffer;
    r.byteOffset = a ? 0 : i.data.byteOffset, r.byteLength = i.data.byteLength;
    const l = [a ? i.data : i.data.buffer];
    e.postMessage(r, l);
  } else
    e.postMessage(r);
}, Tt = {
  FAILURE: 2,
  TIMEOUT: -101,
  ABORTED: -102
}, oo = (i) => {
  i.forEach((e) => {
    e.abort();
  });
}, u1 = (i) => ({
  bandwidth: i.bandwidth,
  bytesReceived: i.bytesReceived || 0,
  roundTripTime: i.roundTripTime || 0
}), c1 = (i) => {
  const e = i.target, s = {
    bandwidth: 1 / 0,
    bytesReceived: 0,
    roundTripTime: Date.now() - e.requestTime || 0
  };
  return s.bytesReceived = i.loaded, s.bandwidth = Math.floor(s.bytesReceived / s.roundTripTime * 8 * 1e3), s;
}, dl = (i, e) => e.timedout ? {
  status: e.status,
  message: "HLS request timed-out at URL: " + e.uri,
  code: Tt.TIMEOUT,
  xhr: e
} : e.aborted ? {
  status: e.status,
  message: "HLS request aborted at URL: " + e.uri,
  code: Tt.ABORTED,
  xhr: e
} : i ? {
  status: e.status,
  message: "HLS request errored at URL: " + e.uri,
  code: Tt.FAILURE,
  xhr: e
} : e.responseType === "arraybuffer" && e.response.byteLength === 0 ? {
  status: e.status,
  message: "Empty HLS response at URL: " + e.uri,
  code: Tt.FAILURE,
  xhr: e
} : null, bc = (i, e, t) => (s, r) => {
  const n = r.response, a = dl(s, r);
  if (a)
    return t(a, i);
  if (n.byteLength !== 16)
    return t({
      status: r.status,
      message: "Invalid HLS key at URL: " + r.uri,
      code: Tt.FAILURE,
      xhr: r
    }, i);
  const l = new DataView(n), u = new Uint32Array([l.getUint32(0), l.getUint32(4), l.getUint32(8), l.getUint32(12)]);
  for (let f = 0; f < e.length; f++)
    e[f].bytes = u;
  return t(null, i);
}, Nf = (i, e) => {
  const t = Io(i.map.bytes);
  if (t !== "mp4") {
    const s = i.map.resolvedUri || i.map.uri, r = t || "unknown";
    return e({
      internal: !0,
      message: `Found unsupported ${r} container for initialization segment at URL: ${s}`,
      code: Tt.FAILURE,
      metadata: {
        errorType: L.Error.UnsupportedMediaInitialization,
        mediaType: r
      }
    });
  }
  Fs({
    action: "probeMp4Tracks",
    data: i.map.bytes,
    transmuxer: i.transmuxer,
    callback: ({
      tracks: s,
      data: r
    }) => (i.map.bytes = r, s.forEach(function(n) {
      i.map.tracks = i.map.tracks || {}, !i.map.tracks[n.type] && (i.map.tracks[n.type] = n, typeof n.id == "number" && n.timescale && (i.map.timescales = i.map.timescales || {}, i.map.timescales[n.id] = n.timescale));
    }), e(null))
  });
}, d1 = ({
  segment: i,
  finishProcessingFn: e
}) => (t, s) => {
  const r = dl(t, s);
  if (r)
    return e(r, i);
  const n = new Uint8Array(s.response);
  if (i.map.key)
    return i.map.encryptedBytes = n, e(null, i);
  i.map.bytes = n, Nf(i, function(a) {
    if (a)
      return a.xhr = s, a.status = s.status, e(a, i);
    e(null, i);
  });
}, h1 = ({
  segment: i,
  finishProcessingFn: e,
  responseType: t
}) => (s, r) => {
  const n = dl(s, r);
  if (n)
    return e(n, i);
  const a = (
    // although responseText "should" exist, this guard serves to prevent an error being
    // thrown for two primary cases:
    // 1. the mime type override stops working, or is not implemented for a specific
    //    browser
    // 2. when using mock XHR libraries like sinon that do not allow the override behavior
    t === "arraybuffer" || !r.responseText ? r.response : Z2(r.responseText.substring(i.lastReachedChar || 0))
  );
  return i.stats = u1(r), i.key ? i.encryptedBytes = new Uint8Array(a) : i.bytes = new Uint8Array(a), e(null, i);
}, f1 = ({
  segment: i,
  bytes: e,
  trackInfoFn: t,
  timingInfoFn: s,
  videoSegmentTimingInfoFn: r,
  audioSegmentTimingInfoFn: n,
  id3Fn: a,
  captionsFn: l,
  isEndOfTimeline: u,
  endedTimelineFn: f,
  dataFn: m,
  doneFn: v,
  onTransmuxerLog: b
}) => {
  const S = i.map && i.map.tracks || {}, y = !!(S.audio && S.video);
  let A = s.bind(null, i, "audio", "start");
  const w = s.bind(null, i, "audio", "end");
  let k = s.bind(null, i, "video", "start");
  const D = s.bind(null, i, "video", "end"), R = () => Rf({
    bytes: e,
    transmuxer: i.transmuxer,
    audioAppendStart: i.audioAppendStart,
    gopsToAlignWith: i.gopsToAlignWith,
    remux: y,
    onData: (j) => {
      j.type = j.type === "combined" ? "video" : j.type, m(i, j);
    },
    onTrackInfo: (j) => {
      t && (y && (j.isMuxed = !0), t(i, j));
    },
    onAudioTimingInfo: (j) => {
      A && typeof j.start < "u" && (A(j.start), A = null), w && typeof j.end < "u" && w(j.end);
    },
    onVideoTimingInfo: (j) => {
      k && typeof j.start < "u" && (k(j.start), k = null), D && typeof j.end < "u" && D(j.end);
    },
    onVideoSegmentTimingInfo: (j) => {
      r(j);
    },
    onAudioSegmentTimingInfo: (j) => {
      n(j);
    },
    onId3: (j, P) => {
      a(i, j, P);
    },
    onCaptions: (j) => {
      l(i, [j]);
    },
    isEndOfTimeline: u,
    onEndedTimeline: () => {
      f();
    },
    onTransmuxerLog: b,
    onDone: (j) => {
      v && (j.type = j.type === "combined" ? "video" : j.type, v(null, i, j));
    }
  });
  Fs({
    action: "probeTs",
    transmuxer: i.transmuxer,
    data: e,
    baseStartTime: i.baseStartTime,
    callback: (j) => {
      i.bytes = e = j.data;
      const P = j.result;
      P && (t(i, {
        hasAudio: P.hasAudio,
        hasVideo: P.hasVideo,
        isMuxed: y
      }), t = null), R();
    }
  });
}, Mf = ({
  segment: i,
  bytes: e,
  trackInfoFn: t,
  timingInfoFn: s,
  videoSegmentTimingInfoFn: r,
  audioSegmentTimingInfoFn: n,
  id3Fn: a,
  captionsFn: l,
  isEndOfTimeline: u,
  endedTimelineFn: f,
  dataFn: m,
  doneFn: v,
  onTransmuxerLog: b
}) => {
  let S = new Uint8Array(e);
  if (Uy(S)) {
    i.isFmp4 = !0;
    const {
      tracks: y
    } = i.map, A = {
      isFmp4: !0,
      hasVideo: !!y.video,
      hasAudio: !!y.audio
    };
    y.audio && y.audio.codec && y.audio.codec !== "enca" && (A.audioCodec = y.audio.codec), y.video && y.video.codec && y.video.codec !== "encv" && (A.videoCodec = y.video.codec), y.video && y.audio && (A.isMuxed = !0), t(i, A);
    const w = (k, D) => {
      m(i, {
        data: S,
        type: A.hasAudio && !A.isMuxed ? "audio" : "video"
      }), D && D.length && a(i, D), k && k.length && l(i, k), v(null, i, {});
    };
    Fs({
      action: "probeMp4StartTime",
      timescales: i.map.timescales,
      data: S,
      transmuxer: i.transmuxer,
      callback: ({
        data: k,
        startTime: D
      }) => {
        e = k.buffer, i.bytes = S = k, A.hasAudio && !A.isMuxed && s(i, "audio", "start", D), A.hasVideo && s(i, "video", "start", D), Fs({
          action: "probeEmsgID3",
          data: S,
          transmuxer: i.transmuxer,
          offset: D,
          callback: ({
            emsgData: R,
            id3Frames: j
          }) => {
            if (e = R.buffer, i.bytes = S = R, !y.video || !R.byteLength || !i.transmuxer) {
              w(void 0, j);
              return;
            }
            Fs({
              action: "pushMp4Captions",
              endAction: "mp4Captions",
              transmuxer: i.transmuxer,
              data: S,
              timescales: i.map.timescales,
              trackIds: [y.video.id],
              callback: (P) => {
                e = P.data.buffer, i.bytes = S = P.data, P.logs.forEach(function(F) {
                  b(ie(F, {
                    stream: "mp4CaptionParser"
                  }));
                }), w(P.captions, j);
              }
            });
          }
        });
      }
    });
    return;
  }
  if (!i.transmuxer) {
    v(null, i, {});
    return;
  }
  if (typeof i.container > "u" && (i.container = Io(S)), i.container !== "ts" && i.container !== "aac") {
    t(i, {
      hasAudio: !1,
      hasVideo: !1
    }), v(null, i, {});
    return;
  }
  f1({
    segment: i,
    bytes: e,
    trackInfoFn: t,
    timingInfoFn: s,
    videoSegmentTimingInfoFn: r,
    audioSegmentTimingInfoFn: n,
    id3Fn: a,
    captionsFn: l,
    isEndOfTimeline: u,
    endedTimelineFn: f,
    dataFn: m,
    doneFn: v,
    onTransmuxerLog: b
  });
}, Bf = function({
  id: i,
  key: e,
  encryptedBytes: t,
  decryptionWorker: s
}, r) {
  const n = (l) => {
    if (l.data.source === i) {
      s.removeEventListener("message", n);
      const u = l.data.decrypted;
      r(new Uint8Array(u.bytes, u.byteOffset, u.byteLength));
    }
  };
  s.addEventListener("message", n);
  let a;
  e.bytes.slice ? a = e.bytes.slice() : a = new Uint32Array(Array.prototype.slice.call(e.bytes)), s.postMessage(Sf({
    source: i,
    encrypted: t,
    key: a,
    iv: e.iv
  }), [t.buffer, a.buffer]);
}, p1 = ({
  decryptionWorker: i,
  segment: e,
  trackInfoFn: t,
  timingInfoFn: s,
  videoSegmentTimingInfoFn: r,
  audioSegmentTimingInfoFn: n,
  id3Fn: a,
  captionsFn: l,
  isEndOfTimeline: u,
  endedTimelineFn: f,
  dataFn: m,
  doneFn: v,
  onTransmuxerLog: b
}) => {
  Bf({
    id: e.requestId,
    key: e.key,
    encryptedBytes: e.encryptedBytes,
    decryptionWorker: i
  }, (S) => {
    e.bytes = S, Mf({
      segment: e,
      bytes: e.bytes,
      trackInfoFn: t,
      timingInfoFn: s,
      videoSegmentTimingInfoFn: r,
      audioSegmentTimingInfoFn: n,
      id3Fn: a,
      captionsFn: l,
      isEndOfTimeline: u,
      endedTimelineFn: f,
      dataFn: m,
      doneFn: v,
      onTransmuxerLog: b
    });
  });
}, m1 = ({
  activeXhrs: i,
  decryptionWorker: e,
  trackInfoFn: t,
  timingInfoFn: s,
  videoSegmentTimingInfoFn: r,
  audioSegmentTimingInfoFn: n,
  id3Fn: a,
  captionsFn: l,
  isEndOfTimeline: u,
  endedTimelineFn: f,
  dataFn: m,
  doneFn: v,
  onTransmuxerLog: b
}) => {
  let S = 0, y = !1;
  return (A, w) => {
    if (!y) {
      if (A)
        return y = !0, oo(i), v(A, w);
      if (S += 1, S === i.length) {
        const k = function() {
          if (w.encryptedBytes)
            return p1({
              decryptionWorker: e,
              segment: w,
              trackInfoFn: t,
              timingInfoFn: s,
              videoSegmentTimingInfoFn: r,
              audioSegmentTimingInfoFn: n,
              id3Fn: a,
              captionsFn: l,
              isEndOfTimeline: u,
              endedTimelineFn: f,
              dataFn: m,
              doneFn: v,
              onTransmuxerLog: b
            });
          Mf({
            segment: w,
            bytes: w.bytes,
            trackInfoFn: t,
            timingInfoFn: s,
            videoSegmentTimingInfoFn: r,
            audioSegmentTimingInfoFn: n,
            id3Fn: a,
            captionsFn: l,
            isEndOfTimeline: u,
            endedTimelineFn: f,
            dataFn: m,
            doneFn: v,
            onTransmuxerLog: b
          });
        };
        if (w.endOfAllRequests = Date.now(), w.map && w.map.encryptedBytes && !w.map.bytes)
          return Bf({
            decryptionWorker: e,
            // add -init to the "id" to differentiate between segment
            // and init segment decryption, just in case they happen
            // at the same time at some point in the future.
            id: w.requestId + "-init",
            encryptedBytes: w.map.encryptedBytes,
            key: w.map.key
          }, (D) => {
            w.map.bytes = D, Nf(w, (R) => {
              if (R)
                return oo(i), v(R, w);
              k();
            });
          });
        k();
      }
    }
  };
}, g1 = ({
  loadendState: i,
  abortFn: e
}) => (t) => {
  t.target.aborted && e && !i.calledAbortFn && (e(), i.calledAbortFn = !0);
}, v1 = ({
  segment: i,
  progressFn: e,
  trackInfoFn: t,
  timingInfoFn: s,
  videoSegmentTimingInfoFn: r,
  audioSegmentTimingInfoFn: n,
  id3Fn: a,
  captionsFn: l,
  isEndOfTimeline: u,
  endedTimelineFn: f,
  dataFn: m
}) => (v) => {
  if (!v.target.aborted)
    return i.stats = ie(i.stats, c1(v)), !i.stats.firstBytesReceivedAt && i.stats.bytesReceived && (i.stats.firstBytesReceivedAt = Date.now()), e(v, i);
}, y1 = ({
  xhr: i,
  xhrOptions: e,
  decryptionWorker: t,
  segment: s,
  abortFn: r,
  progressFn: n,
  trackInfoFn: a,
  timingInfoFn: l,
  videoSegmentTimingInfoFn: u,
  audioSegmentTimingInfoFn: f,
  id3Fn: m,
  captionsFn: v,
  isEndOfTimeline: b,
  endedTimelineFn: S,
  dataFn: y,
  doneFn: A,
  onTransmuxerLog: w
}) => {
  const k = [], D = m1({
    activeXhrs: k,
    decryptionWorker: t,
    trackInfoFn: a,
    timingInfoFn: l,
    videoSegmentTimingInfoFn: u,
    audioSegmentTimingInfoFn: f,
    id3Fn: m,
    captionsFn: v,
    isEndOfTimeline: b,
    endedTimelineFn: S,
    dataFn: y,
    doneFn: A,
    onTransmuxerLog: w
  });
  if (s.key && !s.key.bytes) {
    const $ = [s.key];
    s.map && !s.map.bytes && s.map.key && s.map.key.resolvedUri === s.key.resolvedUri && $.push(s.map.key);
    const Q = ie(e, {
      uri: s.key.resolvedUri,
      responseType: "arraybuffer",
      requestType: "segment-key"
    }), K = bc(s, $, D), oe = i(Q, K);
    k.push(oe);
  }
  if (s.map && !s.map.bytes) {
    if (s.map.key && (!s.key || s.key.resolvedUri !== s.map.key.resolvedUri)) {
      const Z = ie(e, {
        uri: s.map.key.resolvedUri,
        responseType: "arraybuffer",
        requestType: "segment-key"
      }), ce = bc(s, [s.map.key], D), V = i(Z, ce);
      k.push(V);
    }
    const Q = ie(e, {
      uri: s.map.resolvedUri,
      responseType: "arraybuffer",
      headers: no(s.map),
      requestType: "segment-media-initialization"
    }), K = d1({
      segment: s,
      finishProcessingFn: D
    }), oe = i(Q, K);
    k.push(oe);
  }
  const R = ie(e, {
    uri: s.part && s.part.resolvedUri || s.resolvedUri,
    responseType: "arraybuffer",
    headers: no(s),
    requestType: "segment"
  }), j = h1({
    segment: s,
    finishProcessingFn: D,
    responseType: R.responseType
  }), P = i(R, j);
  P.addEventListener("progress", v1({
    segment: s,
    progressFn: n,
    trackInfoFn: a,
    timingInfoFn: l,
    videoSegmentTimingInfoFn: u,
    audioSegmentTimingInfoFn: f,
    id3Fn: m,
    captionsFn: v,
    isEndOfTimeline: b,
    endedTimelineFn: S,
    dataFn: y
  })), k.push(P);
  const F = {};
  return k.forEach(($) => {
    $.addEventListener("loadend", g1({
      loadendState: F,
      abortFn: r
    }));
  }), () => oo(k);
}, _1 = ot("CodecUtils"), T1 = function(i) {
  const e = i.attributes || {};
  if (e.CODECS)
    return mt(e.CODECS);
}, Ff = (i, e) => {
  const t = e.attributes || {};
  return i && i.mediaGroups && i.mediaGroups.AUDIO && t.AUDIO && i.mediaGroups.AUDIO[t.AUDIO];
}, b1 = (i, e) => {
  if (!Ff(i, e))
    return !0;
  const t = e.attributes || {}, s = i.mediaGroups.AUDIO[t.AUDIO];
  for (const r in s)
    if (!s[r].uri && !s[r].playlists)
      return !0;
  return !1;
}, cn = function(i) {
  const e = {};
  return i.forEach(({
    mediaType: t,
    type: s,
    details: r
  }) => {
    e[t] = e[t] || [], e[t].push(Qc(`${s}${r}`));
  }), Object.keys(e).forEach(function(t) {
    if (e[t].length > 1) {
      _1(`multiple ${t} codecs found as attributes: ${e[t].join(", ")}. Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.`), e[t] = null;
      return;
    }
    e[t] = e[t][0];
  }), e;
}, xc = function(i) {
  let e = 0;
  return i.audio && e++, i.video && e++, e;
}, Us = function(i, e) {
  const t = e.attributes || {}, s = cn(T1(e) || []);
  if (Ff(i, e) && !s.audio && !b1(i, e)) {
    const r = cn(U0(i, t.AUDIO) || []);
    r.audio && (s.audio = r.audio);
  }
  return s;
}, Mr = ot("PlaylistSelector"), Sc = function(i) {
  if (!i || !i.playlist)
    return;
  const e = i.playlist;
  return JSON.stringify({
    id: e.id,
    bandwidth: i.bandwidth,
    width: i.width,
    height: i.height,
    codecs: e.attributes && e.attributes.CODECS || ""
  });
}, dn = function(i, e) {
  if (!i)
    return "";
  const t = E.getComputedStyle(i);
  return t ? t[e] : "";
}, Ui = function(i, e) {
  const t = i.slice();
  i.sort(function(s, r) {
    const n = e(s, r);
    return n === 0 ? t.indexOf(s) - t.indexOf(r) : n;
  });
}, hl = function(i, e) {
  let t, s;
  return i.attributes.BANDWIDTH && (t = i.attributes.BANDWIDTH), t = t || E.Number.MAX_VALUE, e.attributes.BANDWIDTH && (s = e.attributes.BANDWIDTH), s = s || E.Number.MAX_VALUE, t - s;
}, x1 = function(i, e) {
  let t, s;
  return i.attributes.RESOLUTION && i.attributes.RESOLUTION.width && (t = i.attributes.RESOLUTION.width), t = t || E.Number.MAX_VALUE, e.attributes.RESOLUTION && e.attributes.RESOLUTION.width && (s = e.attributes.RESOLUTION.width), s = s || E.Number.MAX_VALUE, t === s && i.attributes.BANDWIDTH && e.attributes.BANDWIDTH ? i.attributes.BANDWIDTH - e.attributes.BANDWIDTH : t - s;
};
let Uf = function(i, e, t, s, r, n) {
  if (!i)
    return;
  const a = {
    bandwidth: e,
    width: t,
    height: s,
    limitRenditionByPlayerDimensions: r
  };
  let l = i.playlists;
  Ve.isAudioOnly(i) && (l = n.getAudioTrackPlaylists_(), a.audioOnly = !0);
  let u = l.map((P) => {
    let F;
    const $ = P.attributes && P.attributes.RESOLUTION && P.attributes.RESOLUTION.width, Q = P.attributes && P.attributes.RESOLUTION && P.attributes.RESOLUTION.height;
    return F = P.attributes && P.attributes.BANDWIDTH, F = F || E.Number.MAX_VALUE, {
      bandwidth: F,
      width: $,
      height: Q,
      playlist: P
    };
  });
  Ui(u, (P, F) => P.bandwidth - F.bandwidth), u = u.filter((P) => !Ve.isIncompatible(P.playlist));
  let f = u.filter((P) => Ve.isEnabled(P.playlist));
  f.length || (f = u.filter((P) => !Ve.isDisabled(P.playlist)));
  const m = f.filter((P) => P.bandwidth * Ce.BANDWIDTH_VARIANCE < e);
  let v = m[m.length - 1];
  const b = m.filter((P) => P.bandwidth === v.bandwidth)[0];
  if (r === !1) {
    const P = b || f[0] || u[0];
    if (P && P.playlist) {
      let F = "sortedPlaylistReps";
      return b && (F = "bandwidthBestRep"), f[0] && (F = "enabledPlaylistReps"), Mr(`choosing ${Sc(P)} using ${F} with options`, a), P.playlist;
    }
    return Mr("could not choose a playlist with options", a), null;
  }
  const S = m.filter((P) => P.width && P.height);
  Ui(S, (P, F) => P.width - F.width);
  const y = S.filter((P) => P.width === t && P.height === s);
  v = y[y.length - 1];
  const A = y.filter((P) => P.bandwidth === v.bandwidth)[0];
  let w, k, D;
  A || (w = S.filter((P) => P.width > t || P.height > s), k = w.filter((P) => P.width === w[0].width && P.height === w[0].height), v = k[k.length - 1], D = k.filter((P) => P.bandwidth === v.bandwidth)[0]);
  let R;
  if (n.leastPixelDiffSelector) {
    const P = S.map((F) => (F.pixelDiff = Math.abs(F.width - t) + Math.abs(F.height - s), F));
    Ui(P, (F, $) => F.pixelDiff === $.pixelDiff ? $.bandwidth - F.bandwidth : F.pixelDiff - $.pixelDiff), R = P[0];
  }
  const j = R || D || A || b || f[0] || u[0];
  if (j && j.playlist) {
    let P = "sortedPlaylistReps";
    return R ? P = "leastPixelDiffRep" : D ? P = "resolutionPlusOneRep" : A ? P = "resolutionBestRep" : b ? P = "bandwidthBestRep" : f[0] && (P = "enabledPlaylistReps"), Mr(`choosing ${Sc(j)} using ${P} with options`, a), j.playlist;
  }
  return Mr("could not choose a playlist with options", a), null;
};
const Ec = function() {
  let i = this.useDevicePixelRatio && E.devicePixelRatio || 1;
  return isNaN(this.customPixelRatio) || (i = this.customPixelRatio), Uf(this.playlists.main, this.systemBandwidth, parseInt(dn(this.tech_.el(), "width"), 10) * i, parseInt(dn(this.tech_.el(), "height"), 10) * i, this.limitRenditionByPlayerDimensions, this.playlistController_);
}, S1 = function(i) {
  let e = -1, t = -1;
  if (i < 0 || i > 1)
    throw new Error("Moving average bandwidth decay must be between 0 and 1.");
  return function() {
    let s = this.useDevicePixelRatio && E.devicePixelRatio || 1;
    return isNaN(this.customPixelRatio) || (s = this.customPixelRatio), e < 0 && (e = this.systemBandwidth, t = this.systemBandwidth), this.systemBandwidth > 0 && this.systemBandwidth !== t && (e = i * this.systemBandwidth + (1 - i) * e, t = this.systemBandwidth), Uf(this.playlists.main, e, parseInt(dn(this.tech_.el(), "width"), 10) * s, parseInt(dn(this.tech_.el(), "height"), 10) * s, this.limitRenditionByPlayerDimensions, this.playlistController_);
  };
}, E1 = function(i) {
  const {
    main: e,
    currentTime: t,
    bandwidth: s,
    duration: r,
    segmentDuration: n,
    timeUntilRebuffer: a,
    currentTimeline: l,
    syncController: u
  } = i, f = e.playlists.filter((y) => !Ve.isIncompatible(y));
  let m = f.filter(Ve.isEnabled);
  m.length || (m = f.filter((y) => !Ve.isDisabled(y)));
  const b = m.filter(Ve.hasAttribute.bind(null, "BANDWIDTH")).map((y) => {
    const w = u.getSyncPoint(y, r, l, t) ? 1 : 2, D = Ve.estimateSegmentRequestTime(n, s, y) * w - a;
    return {
      playlist: y,
      rebufferingImpact: D
    };
  }), S = b.filter((y) => y.rebufferingImpact <= 0);
  return Ui(S, (y, A) => hl(A.playlist, y.playlist)), S.length ? S[0] : (Ui(b, (y, A) => y.rebufferingImpact - A.rebufferingImpact), b[0] || null);
}, C1 = function() {
  const i = this.playlists.main.playlists.filter(Ve.isEnabled);
  return Ui(i, (t, s) => hl(t, s)), i.filter((t) => !!Us(this.playlists.main, t).video)[0] || null;
}, w1 = (i) => {
  let e = 0, t;
  return i.bytes && (t = new Uint8Array(i.bytes), i.segments.forEach((s) => {
    t.set(s, e), e += s.byteLength;
  })), t;
};
function qf(i) {
  try {
    return new URL(i).pathname.split("/").slice(-2).join("/");
  } catch {
    return "";
  }
}
const A1 = function(i, e, t) {
  if (!i[t]) {
    e.trigger({
      type: "usage",
      name: "vhs-608"
    });
    let s = t;
    /^cc708_/.test(t) && (s = "SERVICE" + t.split("_")[1]);
    const r = e.textTracks().getTrackById(s);
    if (r)
      i[t] = r;
    else {
      const n = e.options_.vhs && e.options_.vhs.captionServices || {};
      let a = t, l = t, u = !1;
      const f = n[s];
      f && (a = f.label, l = f.language, u = f.default), i[t] = e.addRemoteTextTrack({
        kind: "captions",
        id: s,
        // TODO: investigate why this doesn't seem to turn the caption on by default
        default: u,
        label: a,
        language: l
      }, !1).track;
    }
  }
}, D1 = function({
  inbandTextTracks: i,
  captionArray: e,
  timestampOffset: t
}) {
  if (!e)
    return;
  const s = E.WebKitDataCue || E.VTTCue;
  e.forEach((r) => {
    const n = r.stream;
    r.content ? r.content.forEach((a) => {
      const l = new s(r.startTime + t, r.endTime + t, a.text);
      l.line = a.line, l.align = "left", l.position = a.position, l.positionAlign = "line-left", i[n].addCue(l);
    }) : i[n].addCue(new s(r.startTime + t, r.endTime + t, r.text));
  });
}, k1 = function(i) {
  Object.defineProperties(i.frame, {
    id: {
      get() {
        return L.log.warn("cue.frame.id is deprecated. Use cue.value.key instead."), i.value.key;
      }
    },
    value: {
      get() {
        return L.log.warn("cue.frame.value is deprecated. Use cue.value.data instead."), i.value.data;
      }
    },
    privateData: {
      get() {
        return L.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead."), i.value.data;
      }
    }
  });
}, I1 = ({
  inbandTextTracks: i,
  metadataArray: e,
  timestampOffset: t,
  videoDuration: s
}) => {
  if (!e)
    return;
  const r = E.WebKitDataCue || E.VTTCue, n = i.metadataTrack_;
  if (!n || (e.forEach((m) => {
    const v = m.cueTime + t;
    typeof v != "number" || E.isNaN(v) || v < 0 || !(v < 1 / 0) || !m.frames || !m.frames.length || m.frames.forEach((b) => {
      const S = new r(v, v, b.value || b.url || b.data || "");
      S.frame = b, S.value = b, k1(S), n.addCue(S);
    });
  }), !n.cues || !n.cues.length))
    return;
  const a = n.cues, l = [];
  for (let m = 0; m < a.length; m++)
    a[m] && l.push(a[m]);
  const u = l.reduce((m, v) => {
    const b = m[v.startTime] || [];
    return b.push(v), m[v.startTime] = b, m;
  }, {}), f = Object.keys(u).sort((m, v) => Number(m) - Number(v));
  f.forEach((m, v) => {
    const b = u[m], S = isFinite(s) ? s : m, y = Number(f[v + 1]) || S;
    b.forEach((A) => {
      A.endTime = y;
    });
  });
}, P1 = {
  id: "ID",
  class: "CLASS",
  startDate: "START-DATE",
  duration: "DURATION",
  endDate: "END-DATE",
  endOnNext: "END-ON-NEXT",
  plannedDuration: "PLANNED-DURATION",
  scte35Out: "SCTE35-OUT",
  scte35In: "SCTE35-IN"
}, L1 = /* @__PURE__ */ new Set(["id", "class", "startDate", "duration", "endDate", "endOnNext", "startTime", "endTime", "processDateRange"]), O1 = ({
  inbandTextTracks: i,
  dateRanges: e
}) => {
  const t = i.metadataTrack_;
  if (!t)
    return;
  const s = E.WebKitDataCue || E.VTTCue;
  e.forEach((r) => {
    for (const n of Object.keys(r)) {
      if (L1.has(n))
        continue;
      const a = new s(r.startTime, r.endTime, "");
      a.id = r.id, a.type = "com.apple.quicktime.HLS", a.value = {
        key: P1[n],
        data: r[n]
      }, (n === "scte35Out" || n === "scte35In") && (a.value.data = new Uint8Array(a.value.data.match(/[\da-f]{2}/gi)).buffer), t.addCue(a);
    }
    r.processDateRange();
  });
}, Cc = (i, e, t) => {
  i.metadataTrack_ || (i.metadataTrack_ = t.addRemoteTextTrack({
    kind: "metadata",
    label: "Timed Metadata"
  }, !1).track, L.browser.IS_ANY_SAFARI || (i.metadataTrack_.inBandMetadataTrackDispatchType = e));
}, Os = function(i, e, t) {
  let s, r;
  if (t && t.cues)
    for (s = t.cues.length; s--; )
      r = t.cues[s], r.startTime >= i && r.endTime <= e && t.removeCue(r);
}, j1 = function(i) {
  const e = i.cues;
  if (!e)
    return;
  const t = {};
  for (let s = e.length - 1; s >= 0; s--) {
    const r = e[s], n = `${r.startTime}-${r.endTime}-${r.text}`;
    t[n] ? i.removeCue(r) : t[n] = r;
  }
}, R1 = (i, e, t) => {
  if (typeof e > "u" || e === null || !i.length)
    return [];
  const s = Math.ceil((e - t + 3) * fi.ONE_SECOND_IN_TS);
  let r;
  for (r = 0; r < i.length && !(i[r].pts > s); r++)
    ;
  return i.slice(r);
}, N1 = (i, e, t) => {
  if (!e.length)
    return i;
  if (t)
    return e.slice();
  const s = e[0].pts;
  let r = 0;
  for (r; r < i.length && !(i[r].pts >= s); r++)
    ;
  return i.slice(0, r).concat(e);
}, M1 = (i, e, t, s) => {
  const r = Math.ceil((e - s) * fi.ONE_SECOND_IN_TS), n = Math.ceil((t - s) * fi.ONE_SECOND_IN_TS), a = i.slice();
  let l = i.length;
  for (; l-- && !(i[l].pts <= n); )
    ;
  if (l === -1)
    return a;
  let u = l + 1;
  for (; u-- && !(i[u].pts <= r); )
    ;
  return u = Math.max(u, 0), a.splice(u, l - u + 1), a;
}, B1 = function(i, e) {
  if (!i && !e || !i && e || i && !e)
    return !1;
  if (i === e)
    return !0;
  const t = Object.keys(i).sort(), s = Object.keys(e).sort();
  if (t.length !== s.length)
    return !1;
  for (let r = 0; r < t.length; r++) {
    const n = t[r];
    if (n !== s[r] || i[n] !== e[n])
      return !1;
  }
  return !0;
}, $f = 22, F1 = function(i, e, t) {
  e = e || [];
  const s = [];
  let r = 0;
  for (let n = 0; n < e.length; n++) {
    const a = e[n];
    if (i === a.timeline && (s.push(n), r += a.duration, r > t))
      return n;
  }
  return s.length === 0 ? 0 : s[s.length - 1];
}, As = 1, U1 = 500, wc = (i) => typeof i == "number" && isFinite(i), Br = 1 / 60, q1 = (i, e, t) => i !== "main" || !e || !t ? null : !t.hasAudio && !t.hasVideo ? "Neither audio nor video found in segment." : e.hasVideo && !t.hasVideo ? "Only audio found in segment when we expected video. We can't switch to audio only from a stream that had video. To get rid of this message, please add codec information to the manifest." : !e.hasVideo && t.hasVideo ? "Video found in segment when we expected only audio. We can't switch to a stream with video from an audio only stream. To get rid of this message, please add codec information to the manifest." : null, $1 = (i, e, t) => {
  let s = e - Ce.BACK_BUFFER_LENGTH;
  i.length && (s = Math.max(s, i.start(0)));
  const r = e - t;
  return Math.min(r, s);
}, Ii = (i) => {
  const {
    startOfSegment: e,
    duration: t,
    segment: s,
    part: r,
    playlist: {
      mediaSequence: n,
      id: a,
      segments: l = []
    },
    mediaIndex: u,
    partIndex: f,
    timeline: m
  } = i, v = l.length - 1;
  let b = "mediaIndex/partIndex increment";
  i.getMediaInfoForTime ? b = `getMediaInfoForTime (${i.getMediaInfoForTime})` : i.isSyncRequest && (b = "getSyncSegmentCandidate (isSyncRequest)"), i.independent && (b += ` with independent ${i.independent}`);
  const S = typeof f == "number", y = i.segment.uri ? "segment" : "pre-segment", A = S ? lf({
    preloadSegment: s
  }) - 1 : 0;
  return `${y} [${n + u}/${n + v}]` + (S ? ` part [${f}/${A}]` : "") + ` segment start/end [${s.start} => ${s.end}]` + (S ? ` part start/end [${r.start} => ${r.end}]` : "") + ` startOfSegment [${e}] duration [${t}] timeline [${m}] selected by [${b}] playlist [${a}]`;
}, Ac = (i) => `${i}TimingInfo`, V1 = ({
  segmentTimeline: i,
  currentTimeline: e,
  startOfSegment: t,
  buffered: s,
  overrideCheck: r
}) => !r && i === e ? null : i < e ? t : s.length ? s.end(s.length - 1) : t, Dc = ({
  timelineChangeController: i,
  currentTimeline: e,
  segmentTimeline: t,
  loaderType: s,
  audioDisabled: r
}) => {
  if (e === t)
    return !1;
  if (s === "audio") {
    const n = i.lastTimelineChange({
      type: "main"
    });
    return !n || n.to !== t;
  }
  if (s === "main" && r) {
    const n = i.pendingTimelineChange({
      type: "audio"
    });
    return !(n && n.to === t);
  }
  return !1;
}, H1 = (i) => {
  let e = 0;
  return ["video", "audio"].forEach(function(t) {
    const s = i[`${t}TimingInfo`];
    if (!s)
      return;
    const {
      start: r,
      end: n
    } = s;
    let a;
    typeof r == "bigint" || typeof n == "bigint" ? a = E.BigInt(n) - E.BigInt(r) : typeof r == "number" && typeof n == "number" && (a = n - r), typeof a < "u" && a > e && (e = a);
  }), typeof e == "bigint" && e < Number.MAX_SAFE_INTEGER && (e = Number(e)), e;
}, kc = ({
  segmentDuration: i,
  maxDuration: e
}) => i ? Math.round(i) > e + yt : !1, z1 = (i, e) => {
  if (e !== "hls")
    return null;
  const t = H1({
    audioTimingInfo: i.audioTimingInfo,
    videoTimingInfo: i.videoTimingInfo
  });
  if (!t)
    return null;
  const s = i.playlist.targetDuration, r = kc({
    segmentDuration: t,
    maxDuration: s * 2
  }), n = kc({
    segmentDuration: t,
    maxDuration: s
  }), a = `Segment with index ${i.mediaIndex} from playlist ${i.playlist.id} has a duration of ${t} when the reported duration is ${i.duration} and the target duration is ${s}. For HLS content, a duration in excess of the target duration may result in playback issues. See the HLS specification section on EXT-X-TARGETDURATION for more details: https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1`;
  return r || n ? {
    severity: r ? "warn" : "info",
    message: a
  } : null;
};
class lo extends L.EventTarget {
  constructor(e, t = {}) {
    if (super(), !e)
      throw new TypeError("Initialization settings are required");
    if (typeof e.currentTime != "function")
      throw new TypeError("No currentTime getter specified");
    if (!e.mediaSource)
      throw new TypeError("No MediaSource specified");
    this.bandwidth = e.bandwidth, this.throughput = {
      rate: 0,
      count: 0
    }, this.roundTrip = NaN, this.resetStats_(), this.mediaIndex = null, this.partIndex = null, this.hasPlayed_ = e.hasPlayed, this.currentTime_ = e.currentTime, this.seekable_ = e.seekable, this.seeking_ = e.seeking, this.duration_ = e.duration, this.mediaSource_ = e.mediaSource, this.vhs_ = e.vhs, this.loaderType_ = e.loaderType, this.currentMediaInfo_ = void 0, this.startingMediaInfo_ = void 0, this.segmentMetadataTrack_ = e.segmentMetadataTrack, this.goalBufferLength_ = e.goalBufferLength, this.sourceType_ = e.sourceType, this.sourceUpdater_ = e.sourceUpdater, this.inbandTextTracks_ = e.inbandTextTracks, this.state_ = "INIT", this.timelineChangeController_ = e.timelineChangeController, this.shouldSaveSegmentTimingInfo_ = !0, this.parse708captions_ = e.parse708captions, this.useDtsForTimestampOffset_ = e.useDtsForTimestampOffset, this.captionServices_ = e.captionServices, this.exactManifestTimings = e.exactManifestTimings, this.addMetadataToTextTrack = e.addMetadataToTextTrack, this.checkBufferTimeout_ = null, this.error_ = void 0, this.currentTimeline_ = -1, this.shouldForceTimestampOffsetAfterResync_ = !1, this.pendingSegment_ = null, this.xhrOptions_ = null, this.pendingSegments_ = [], this.audioDisabled_ = !1, this.isPendingTimestampOffset_ = !1, this.gopBuffer_ = [], this.timeMapping_ = 0, this.safeAppend_ = !1, this.appendInitSegment_ = {
      audio: !0,
      video: !0
    }, this.playlistOfLastInitSegment_ = {
      audio: null,
      video: null
    }, this.callQueue_ = [], this.loadQueue_ = [], this.metadataQueue_ = {
      id3: [],
      caption: []
    }, this.waitingOnRemove_ = !1, this.quotaExceededErrorRetryTimeout_ = null, this.activeInitSegmentId_ = null, this.initSegments_ = {}, this.cacheEncryptionKeys_ = e.cacheEncryptionKeys, this.keyCache_ = {}, this.decrypter_ = e.decrypter, this.syncController_ = e.syncController, this.syncPoint_ = {
      segmentIndex: 0,
      time: 0
    }, this.transmuxer_ = this.createTransmuxer_(), this.triggerSyncInfoUpdate_ = () => this.trigger("syncinfoupdate"), this.syncController_.on("syncinfoupdate", this.triggerSyncInfoUpdate_), this.mediaSource_.addEventListener("sourceopen", () => {
      this.isEndOfStream_() || (this.ended_ = !1);
    }), this.fetchAtBuffer_ = !1, this.logger_ = ot(`SegmentLoader[${this.loaderType_}]`), Object.defineProperty(this, "state", {
      get() {
        return this.state_;
      },
      set(s) {
        s !== this.state_ && (this.logger_(`${this.state_} -> ${s}`), this.state_ = s, this.trigger("statechange"));
      }
    }), this.sourceUpdater_.on("ready", () => {
      this.hasEnoughInfoToAppend_() && this.processCallQueue_();
    }), this.loaderType_ === "main" && this.timelineChangeController_.on("pendingtimelinechange", () => {
      this.hasEnoughInfoToAppend_() && this.processCallQueue_();
    }), this.loaderType_ === "audio" && this.timelineChangeController_.on("timelinechange", () => {
      this.hasEnoughInfoToLoad_() && this.processLoadQueue_(), this.hasEnoughInfoToAppend_() && this.processCallQueue_();
    });
  }
  /**
   * TODO: Current sync controller consists of many hls-specific strategies
   * media sequence sync is also hls-specific, and we would like to be protocol-agnostic on this level
   * this should be a part of the sync-controller and sync controller should expect different strategy list based on the protocol.
   *
   * @return {MediaSequenceSync|null}
   * @private
   */
  get mediaSequenceSync_() {
    return this.syncController_.getMediaSequenceSync(this.loaderType_);
  }
  createTransmuxer_() {
    return ka.createTransmuxer({
      remux: !1,
      alignGopsAtEnd: this.safeAppend_,
      keepOriginalTimestamps: !0,
      parse708captions: this.parse708captions_,
      captionServices: this.captionServices_
    });
  }
  /**
   * reset all of our media stats
   *
   * @private
   */
  resetStats_() {
    this.mediaBytesTransferred = 0, this.mediaRequests = 0, this.mediaRequestsAborted = 0, this.mediaRequestsTimedout = 0, this.mediaRequestsErrored = 0, this.mediaTransferDuration = 0, this.mediaSecondsLoaded = 0, this.mediaAppends = 0;
  }
  /**
   * dispose of the SegmentLoader and reset to the default state
   */
  dispose() {
    this.trigger("dispose"), this.state = "DISPOSED", this.pause(), this.abort_(), this.transmuxer_ && this.transmuxer_.terminate(), this.resetStats_(), this.checkBufferTimeout_ && E.clearTimeout(this.checkBufferTimeout_), this.syncController_ && this.triggerSyncInfoUpdate_ && this.syncController_.off("syncinfoupdate", this.triggerSyncInfoUpdate_), this.off();
  }
  setAudio(e) {
    this.audioDisabled_ = !e, e ? this.appendInitSegment_.audio = !0 : this.sourceUpdater_.removeAudio(0, this.duration_());
  }
  /**
   * abort anything that is currently doing on with the SegmentLoader
   * and reset to a default state
   */
  abort() {
    if (this.state !== "WAITING") {
      this.pendingSegment_ && (this.pendingSegment_ = null);
      return;
    }
    this.abort_(), this.state = "READY", this.paused() || this.monitorBuffer_();
  }
  /**
   * abort all pending xhr requests and null any pending segements
   *
   * @private
   */
  abort_() {
    this.pendingSegment_ && this.pendingSegment_.abortRequests && this.pendingSegment_.abortRequests(), this.pendingSegment_ = null, this.callQueue_ = [], this.loadQueue_ = [], this.metadataQueue_.id3 = [], this.metadataQueue_.caption = [], this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_), this.waitingOnRemove_ = !1, E.clearTimeout(this.quotaExceededErrorRetryTimeout_), this.quotaExceededErrorRetryTimeout_ = null;
  }
  checkForAbort_(e) {
    return this.state === "APPENDING" && !this.pendingSegment_ ? (this.state = "READY", !0) : !this.pendingSegment_ || this.pendingSegment_.requestId !== e;
  }
  /**
   * set an error on the segment loader and null out any pending segements
   *
   * @param {Error} error the error to set on the SegmentLoader
   * @return {Error} the error that was set or that is currently set
   */
  error(e) {
    return typeof e < "u" && (this.logger_("error occurred:", e), this.error_ = e), this.pendingSegment_ = null, this.error_;
  }
  endOfStream() {
    this.ended_ = !0, this.transmuxer_ && ka.reset(this.transmuxer_), this.gopBuffer_.length = 0, this.pause(), this.trigger("ended");
  }
  /**
   * Indicates which time ranges are buffered
   *
   * @return {TimeRange}
   *         TimeRange object representing the current buffered ranges
   */
  buffered_() {
    const e = this.getMediaInfo_();
    if (!this.sourceUpdater_ || !e)
      return Ie();
    if (this.loaderType_ === "main") {
      const {
        hasAudio: t,
        hasVideo: s,
        isMuxed: r
      } = e;
      if (s && t && !this.audioDisabled_ && !r)
        return this.sourceUpdater_.buffered();
      if (s)
        return this.sourceUpdater_.videoBuffered();
    }
    return this.sourceUpdater_.audioBuffered();
  }
  /**
   * Gets and sets init segment for the provided map
   *
   * @param {Object} map
   *        The map object representing the init segment to get or set
   * @param {boolean=} set
   *        If true, the init segment for the provided map should be saved
   * @return {Object}
   *         map object for desired init segment
   */
  initSegmentForMap(e, t = !1) {
    if (!e)
      return null;
    const s = un(e);
    let r = this.initSegments_[s];
    return t && !r && e.bytes && (this.initSegments_[s] = r = {
      resolvedUri: e.resolvedUri,
      byterange: e.byterange,
      bytes: e.bytes,
      tracks: e.tracks,
      timescales: e.timescales
    }), r || e;
  }
  /**
   * Gets and sets key for the provided key
   *
   * @param {Object} key
   *        The key object representing the key to get or set
   * @param {boolean=} set
   *        If true, the key for the provided key should be saved
   * @return {Object}
   *         Key object for desired key
   */
  segmentKey(e, t = !1) {
    if (!e)
      return null;
    const s = Ef(e);
    let r = this.keyCache_[s];
    this.cacheEncryptionKeys_ && t && !r && e.bytes && (this.keyCache_[s] = r = {
      resolvedUri: e.resolvedUri,
      bytes: e.bytes
    });
    const n = {
      resolvedUri: (r || e).resolvedUri
    };
    return r && (n.bytes = r.bytes), n;
  }
  /**
   * Returns true if all configuration required for loading is present, otherwise false.
   *
   * @return {boolean} True if the all configuration is ready for loading
   * @private
   */
  couldBeginLoading_() {
    return this.playlist_ && !this.paused();
  }
  /**
   * load a playlist and start to fill the buffer
   */
  load() {
    if (this.monitorBuffer_(), !!this.playlist_) {
      if (this.state === "INIT" && this.couldBeginLoading_())
        return this.init_();
      !this.couldBeginLoading_() || this.state !== "READY" && this.state !== "INIT" || (this.state = "READY");
    }
  }
  /**
   * Once all the starting parameters have been specified, begin
   * operation. This method should only be invoked from the INIT
   * state.
   *
   * @private
   */
  init_() {
    return this.state = "READY", this.resetEverything(), this.monitorBuffer_();
  }
  /**
   * set a playlist on the segment loader
   *
   * @param {PlaylistLoader} media the playlist to set on the segment loader
   */
  playlist(e, t = {}) {
    if (!e)
      return;
    const s = this.playlist_, r = this.pendingSegment_;
    this.playlist_ = e, this.xhrOptions_ = t, this.state === "INIT" && (e.syncInfo = {
      mediaSequence: e.mediaSequence,
      time: 0
    }, this.loaderType_ === "main" && this.syncController_.setDateTimeMappingForStart(e));
    let n = null;
    if (s && (s.id ? n = s.id : s.uri && (n = s.uri)), this.logger_(`playlist update [${n} => ${e.id || e.uri}]`), this.mediaSequenceSync_ && (this.mediaSequenceSync_.update(e, this.currentTime_()), this.logger_(`Playlist update:
currentTime: ${this.currentTime_()}
bufferedEnd: ${Aa(this.buffered_())}
`, this.mediaSequenceSync_.diagnostics)), this.trigger("syncinfoupdate"), this.state === "INIT" && this.couldBeginLoading_())
      return this.init_();
    if (!s || s.uri !== e.uri) {
      this.mediaIndex !== null && (!e.endList && typeof e.partTargetDuration == "number" ? this.resetLoader() : this.resyncLoader()), this.currentMediaInfo_ = void 0, this.trigger("playlistupdate");
      return;
    }
    const a = e.mediaSequence - s.mediaSequence;
    if (this.logger_(`live window shift [${a}]`), this.mediaIndex !== null)
      if (this.mediaIndex -= a, this.mediaIndex < 0)
        this.mediaIndex = null, this.partIndex = null;
      else {
        const l = this.playlist_.segments[this.mediaIndex];
        if (this.partIndex && (!l.parts || !l.parts.length || !l.parts[this.partIndex])) {
          const u = this.mediaIndex;
          this.logger_(`currently processing part (index ${this.partIndex}) no longer exists.`), this.resetLoader(), this.mediaIndex = u;
        }
      }
    r && (r.mediaIndex -= a, r.mediaIndex < 0 ? (r.mediaIndex = null, r.partIndex = null) : (r.mediaIndex >= 0 && (r.segment = e.segments[r.mediaIndex]), r.partIndex >= 0 && r.segment.parts && (r.part = r.segment.parts[r.partIndex]))), this.syncController_.saveExpiredSegmentInfo(s, e);
  }
  /**
   * Prevent the loader from fetching additional segments. If there
   * is a segment request outstanding, it will finish processing
   * before the loader halts. A segment loader can be unpaused by
   * calling load().
   */
  pause() {
    this.checkBufferTimeout_ && (E.clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = null);
  }
  /**
   * Returns whether the segment loader is fetching additional
   * segments when given the opportunity. This property can be
   * modified through calls to pause() and load().
   */
  paused() {
    return this.checkBufferTimeout_ === null;
  }
  /**
   * Delete all the buffered data and reset the SegmentLoader
   *
   * @param {Function} [done] an optional callback to be executed when the remove
   * operation is complete
   */
  resetEverything(e) {
    this.ended_ = !1, this.activeInitSegmentId_ = null, this.appendInitSegment_ = {
      audio: !0,
      video: !0
    }, this.resetLoader(), this.remove(0, 1 / 0, e), this.transmuxer_ && (this.transmuxer_.postMessage({
      action: "clearAllMp4Captions"
    }), this.transmuxer_.postMessage({
      action: "reset"
    }));
  }
  /**
   * Force the SegmentLoader to resync and start loading around the currentTime instead
   * of starting at the end of the buffer
   *
   * Useful for fast quality changes
   */
  resetLoader() {
    this.fetchAtBuffer_ = !1, this.mediaSequenceSync_ && this.mediaSequenceSync_.resetAppendedStatus(), this.resyncLoader();
  }
  /**
   * Force the SegmentLoader to restart synchronization and make a conservative guess
   * before returning to the simple walk-forward method
   */
  resyncLoader() {
    this.transmuxer_ && ka.reset(this.transmuxer_), this.mediaIndex = null, this.partIndex = null, this.syncPoint_ = null, this.isPendingTimestampOffset_ = !1;
    const e = this.currentMediaInfo_ && this.currentMediaInfo_.isFmp4;
    this.sourceType_ === "hls" && !e && (this.shouldForceTimestampOffsetAfterResync_ = !0), this.callQueue_ = [], this.loadQueue_ = [], this.metadataQueue_.id3 = [], this.metadataQueue_.caption = [], this.abort(), this.transmuxer_ && this.transmuxer_.postMessage({
      action: "clearParsedMp4Captions"
    });
  }
  /**
   * Remove any data in the source buffer between start and end times
   *
   * @param {number} start - the start time of the region to remove from the buffer
   * @param {number} end - the end time of the region to remove from the buffer
   * @param {Function} [done] - an optional callback to be executed when the remove
   * @param {boolean} force - force all remove operations to happen
   * operation is complete
   */
  remove(e, t, s = () => {
  }, r = !1) {
    if (t === 1 / 0 && (t = this.duration_()), t <= e) {
      this.logger_("skipping remove because end ${end} is <= start ${start}");
      return;
    }
    if (!this.sourceUpdater_ || !this.getMediaInfo_()) {
      this.logger_("skipping remove because no source updater or starting media info");
      return;
    }
    let n = 1;
    const a = () => {
      n--, n === 0 && s();
    };
    (r || !this.audioDisabled_) && (n++, this.sourceUpdater_.removeAudio(e, t, a)), (r || this.loaderType_ === "main") && (this.gopBuffer_ = M1(this.gopBuffer_, e, t, this.timeMapping_), n++, this.sourceUpdater_.removeVideo(e, t, a));
    for (const l in this.inbandTextTracks_)
      Os(e, t, this.inbandTextTracks_[l]);
    Os(e, t, this.segmentMetadataTrack_), a();
  }
  /**
   * (re-)schedule monitorBufferTick_ to run as soon as possible
   *
   * @private
   */
  monitorBuffer_() {
    this.checkBufferTimeout_ && E.clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = E.setTimeout(this.monitorBufferTick_.bind(this), 1);
  }
  /**
   * As long as the SegmentLoader is in the READY state, periodically
   * invoke fillBuffer_().
   *
   * @private
   */
  monitorBufferTick_() {
    this.state === "READY" && this.fillBuffer_(), this.checkBufferTimeout_ && E.clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = E.setTimeout(this.monitorBufferTick_.bind(this), U1);
  }
  /**
   * fill the buffer with segements unless the sourceBuffers are
   * currently updating
   *
   * Note: this function should only ever be called by monitorBuffer_
   * and never directly
   *
   * @private
   */
  fillBuffer_() {
    if (this.sourceUpdater_.updating())
      return;
    const e = this.chooseNextRequest_();
    e && (typeof e.timestampOffset == "number" && (this.isPendingTimestampOffset_ = !1, this.timelineChangeController_.pendingTimelineChange({
      type: this.loaderType_,
      from: this.currentTimeline_,
      to: e.timeline
    })), this.loadSegment_(e));
  }
  /**
   * Determines if we should call endOfStream on the media source based
   * on the state of the buffer or if appened segment was the final
   * segment in the playlist.
   *
   * @param {number} [mediaIndex] the media index of segment we last appended
   * @param {Object} [playlist] a media playlist object
   * @return {boolean} do we need to call endOfStream on the MediaSource
   */
  isEndOfStream_(e = this.mediaIndex, t = this.playlist_, s = this.partIndex) {
    if (!t || !this.mediaSource_)
      return !1;
    const r = typeof e == "number" && t.segments[e], n = e + 1 === t.segments.length, a = !r || !r.parts || s + 1 === r.parts.length;
    return t.endList && this.mediaSource_.readyState === "open" && n && a;
  }
  /**
   * Determines what request should be made given current segment loader state.
   *
   * @return {Object} a request object that describes the segment/part to load
   */
  chooseNextRequest_() {
    const e = this.buffered_(), t = Aa(e) || 0, s = ol(e, this.currentTime_()), r = !this.hasPlayed_() && s >= 1, n = s >= this.goalBufferLength_(), a = this.playlist_.segments;
    if (!a.length || r || n)
      return null;
    this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_(), this.loaderType_);
    const l = {
      partIndex: null,
      mediaIndex: null,
      startOfSegment: null,
      playlist: this.playlist_,
      isSyncRequest: !this.syncPoint_
    };
    if (l.isSyncRequest)
      l.mediaIndex = F1(this.currentTimeline_, a, t), this.logger_(`choose next request. Can not find sync point. Fallback to media Index: ${l.mediaIndex}`);
    else if (this.mediaIndex !== null) {
      const b = a[this.mediaIndex], S = typeof this.partIndex == "number" ? this.partIndex : -1;
      l.startOfSegment = b.end ? b.end : t, b.parts && b.parts[S + 1] ? (l.mediaIndex = this.mediaIndex, l.partIndex = S + 1) : l.mediaIndex = this.mediaIndex + 1;
    } else {
      let b, S, y;
      const A = this.fetchAtBuffer_ ? t : this.currentTime_();
      if (this.mediaSequenceSync_ && this.logger_(`chooseNextRequest_ request after Quality Switch:
For TargetTime: ${A}.
CurrentTime: ${this.currentTime_()}
BufferedEnd: ${t}
Fetch At Buffer: ${this.fetchAtBuffer_}
`, this.mediaSequenceSync_.diagnostics), this.mediaSequenceSync_ && this.mediaSequenceSync_.isReliable) {
        const w = this.getSyncInfoFromMediaSequenceSync_(A);
        if (!w)
          return this.logger_("chooseNextRequest_ - no sync info found using media sequence sync"), null;
        this.logger_(`chooseNextRequest_ mediaSequence syncInfo (${w.start} --> ${w.end})`), b = w.segmentIndex, S = w.partIndex, y = w.start;
      } else {
        this.logger_("chooseNextRequest_ - fallback to a regular segment selection algorithm, based on a syncPoint.");
        const w = Ve.getMediaInfoForTime({
          exactManifestTimings: this.exactManifestTimings,
          playlist: this.playlist_,
          currentTime: A,
          startingPartIndex: this.syncPoint_.partIndex,
          startingSegmentIndex: this.syncPoint_.segmentIndex,
          startTime: this.syncPoint_.time
        });
        b = w.segmentIndex, S = w.partIndex, y = w.startTime;
      }
      l.getMediaInfoForTime = this.fetchAtBuffer_ ? `bufferedEnd ${A}` : `currentTime ${A}`, l.mediaIndex = b, l.startOfSegment = y, l.partIndex = S, this.logger_(`choose next request. Playlist switched and we have a sync point. Media Index: ${l.mediaIndex} `);
    }
    const u = a[l.mediaIndex];
    let f = u && typeof l.partIndex == "number" && u.parts && u.parts[l.partIndex];
    if (!u || typeof l.partIndex == "number" && !f)
      return null;
    typeof l.partIndex != "number" && u.parts && (l.partIndex = 0, f = u.parts[0]);
    const m = this.vhs_.playlists && this.vhs_.playlists.main && this.vhs_.playlists.main.independentSegments || this.playlist_.independentSegments;
    if (!s && f && !m && !f.independent)
      if (l.partIndex === 0) {
        const b = a[l.mediaIndex - 1], S = b.parts && b.parts.length && b.parts[b.parts.length - 1];
        S && S.independent && (l.mediaIndex -= 1, l.partIndex = b.parts.length - 1, l.independent = "previous segment");
      } else
        u.parts[l.partIndex - 1].independent && (l.partIndex -= 1, l.independent = "previous part");
    const v = this.mediaSource_ && this.mediaSource_.readyState === "ended";
    return l.mediaIndex >= a.length - 1 && v && !this.seeking_() ? null : (this.shouldForceTimestampOffsetAfterResync_ && (this.shouldForceTimestampOffsetAfterResync_ = !1, l.forceTimestampOffset = !0, this.logger_("choose next request. Force timestamp offset after loader resync")), this.generateSegmentInfo_(l));
  }
  getSyncInfoFromMediaSequenceSync_(e) {
    if (!this.mediaSequenceSync_)
      return null;
    const t = Math.max(e, this.mediaSequenceSync_.start);
    e !== t && this.logger_(`getSyncInfoFromMediaSequenceSync_. Pulled target time from ${e} to ${t}`);
    const s = this.mediaSequenceSync_.getSyncInfoForTime(t);
    if (!s)
      return null;
    if (!s.isAppended)
      return s;
    const r = this.mediaSequenceSync_.getSyncInfoForTime(s.end);
    return r ? (r.isAppended && this.logger_("getSyncInfoFromMediaSequenceSync_: We encounter unexpected scenario where next media sequence sync info is also appended!"), r) : null;
  }
  generateSegmentInfo_(e) {
    const {
      independent: t,
      playlist: s,
      mediaIndex: r,
      startOfSegment: n,
      isSyncRequest: a,
      partIndex: l,
      forceTimestampOffset: u,
      getMediaInfoForTime: f
    } = e, m = s.segments[r], v = typeof l == "number" && m.parts[l], b = {
      requestId: "segment-loader-" + Math.random(),
      // resolve the segment URL relative to the playlist
      uri: v && v.resolvedUri || m.resolvedUri,
      // the segment's mediaIndex at the time it was requested
      mediaIndex: r,
      partIndex: v ? l : null,
      // whether or not to update the SegmentLoader's state with this
      // segment's mediaIndex
      isSyncRequest: a,
      startOfSegment: n,
      // the segment's playlist
      playlist: s,
      // unencrypted bytes of the segment
      bytes: null,
      // when a key is defined for this segment, the encrypted bytes
      encryptedBytes: null,
      // The target timestampOffset for this segment when we append it
      // to the source buffer
      timestampOffset: null,
      // The timeline that the segment is in
      timeline: m.timeline,
      // The expected duration of the segment in seconds
      duration: v && v.duration || m.duration,
      // retain the segment in case the playlist updates while doing an async process
      segment: m,
      part: v,
      byteLength: 0,
      transmuxer: this.transmuxer_,
      // type of getMediaInfoForTime that was used to get this segment
      getMediaInfoForTime: f,
      independent: t
    }, S = typeof u < "u" ? u : this.isPendingTimestampOffset_;
    b.timestampOffset = this.timestampOffsetForSegment_({
      segmentTimeline: m.timeline,
      currentTimeline: this.currentTimeline_,
      startOfSegment: n,
      buffered: this.buffered_(),
      overrideCheck: S
    });
    const y = Aa(this.sourceUpdater_.audioBuffered());
    return typeof y == "number" && (b.audioAppendStart = y - this.sourceUpdater_.audioTimestampOffset()), this.sourceUpdater_.videoBuffered().length && (b.gopsToAlignWith = R1(
      this.gopBuffer_,
      // since the transmuxer is using the actual timing values, but the time is
      // adjusted by the timestmap offset, we must adjust the value here
      this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(),
      this.timeMapping_
    )), b;
  }
  // get the timestampoffset for a segment,
  // added so that vtt segment loader can override and prevent
  // adding timestamp offsets.
  timestampOffsetForSegment_(e) {
    return V1(e);
  }
  /**
   * Determines if the network has enough bandwidth to complete the current segment
   * request in a timely manner. If not, the request will be aborted early and bandwidth
   * updated to trigger a playlist switch.
   *
   * @param {Object} stats
   *        Object containing stats about the request timing and size
   * @private
   */
  earlyAbortWhenNeeded_(e) {
    if (this.vhs_.tech_.paused() || // Don't abort if the current playlist is on the lowestEnabledRendition
    // TODO: Replace using timeout with a boolean indicating whether this playlist is
    //       the lowestEnabledRendition.
    !this.xhrOptions_.timeout || // Don't abort if we have no bandwidth information to estimate segment sizes
    !this.playlist_.attributes.BANDWIDTH || Date.now() - (e.firstBytesReceivedAt || Date.now()) < 1e3)
      return;
    const t = this.currentTime_(), s = e.bandwidth, r = this.pendingSegment_.duration, n = Ve.estimateSegmentRequestTime(r, s, this.playlist_, e.bytesReceived), a = h2(this.buffered_(), t, this.vhs_.tech_.playbackRate()) - 1;
    if (n <= a)
      return;
    const l = E1({
      main: this.vhs_.playlists.main,
      currentTime: t,
      bandwidth: s,
      duration: this.duration_(),
      segmentDuration: r,
      timeUntilRebuffer: a,
      currentTimeline: this.currentTimeline_,
      syncController: this.syncController_
    });
    if (!l)
      return;
    const f = n - a - l.rebufferingImpact;
    let m = 0.5;
    a <= yt && (m = 1), !(!l.playlist || l.playlist.uri === this.playlist_.uri || f < m) && (this.bandwidth = l.playlist.attributes.BANDWIDTH * Ce.BANDWIDTH_VARIANCE + 1, this.trigger("earlyabort"));
  }
  handleAbort_(e) {
    this.logger_(`Aborting ${Ii(e)}`), this.mediaRequestsAborted += 1;
  }
  /**
   * XHR `progress` event handler
   *
   * @param {Event}
   *        The XHR `progress` event
   * @param {Object} simpleSegment
   *        A simplified segment object copy
   * @private
   */
  handleProgress_(e, t) {
    this.earlyAbortWhenNeeded_(t.stats), !this.checkForAbort_(t.requestId) && this.trigger("progress");
  }
  handleTrackInfo_(e, t) {
    this.earlyAbortWhenNeeded_(e.stats), !this.checkForAbort_(e.requestId) && (this.checkForIllegalMediaSwitch(t) || (t = t || {}, B1(this.currentMediaInfo_, t) || (this.appendInitSegment_ = {
      audio: !0,
      video: !0
    }, this.startingMediaInfo_ = t, this.currentMediaInfo_ = t, this.logger_("trackinfo update", t), this.trigger("trackinfo")), !this.checkForAbort_(e.requestId) && (this.pendingSegment_.trackInfo = t, this.hasEnoughInfoToAppend_() && this.processCallQueue_())));
  }
  handleTimingInfo_(e, t, s, r) {
    if (this.earlyAbortWhenNeeded_(e.stats), this.checkForAbort_(e.requestId))
      return;
    const n = this.pendingSegment_, a = Ac(t);
    n[a] = n[a] || {}, n[a][s] = r, this.logger_(`timinginfo: ${t} - ${s} - ${r}`), this.hasEnoughInfoToAppend_() && this.processCallQueue_();
  }
  handleCaptions_(e, t) {
    if (this.earlyAbortWhenNeeded_(e.stats), this.checkForAbort_(e.requestId))
      return;
    if (t.length === 0) {
      this.logger_("SegmentLoader received no captions from a caption event");
      return;
    }
    if (!this.pendingSegment_.hasAppendedData_) {
      this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, e, t));
      return;
    }
    const r = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset(), n = {};
    t.forEach((a) => {
      n[a.stream] = n[a.stream] || {
        // Infinity, as any other value will be less than this
        startTime: 1 / 0,
        captions: [],
        // 0 as an other value will be more than this
        endTime: 0
      };
      const l = n[a.stream];
      l.startTime = Math.min(l.startTime, a.startTime + r), l.endTime = Math.max(l.endTime, a.endTime + r), l.captions.push(a);
    }), Object.keys(n).forEach((a) => {
      const {
        startTime: l,
        endTime: u,
        captions: f
      } = n[a], m = this.inbandTextTracks_;
      this.logger_(`adding cues from ${l} -> ${u} for ${a}`), A1(m, this.vhs_.tech_, a), Os(l, u, m[a]), D1({
        captionArray: f,
        inbandTextTracks: m,
        timestampOffset: r
      });
    }), this.transmuxer_ && this.transmuxer_.postMessage({
      action: "clearParsedMp4Captions"
    });
  }
  handleId3_(e, t, s) {
    if (this.earlyAbortWhenNeeded_(e.stats), this.checkForAbort_(e.requestId))
      return;
    if (!this.pendingSegment_.hasAppendedData_) {
      this.metadataQueue_.id3.push(this.handleId3_.bind(this, e, t, s));
      return;
    }
    this.addMetadataToTextTrack(s, t, this.duration_());
  }
  processMetadataQueue_() {
    this.metadataQueue_.id3.forEach((e) => e()), this.metadataQueue_.caption.forEach((e) => e()), this.metadataQueue_.id3 = [], this.metadataQueue_.caption = [];
  }
  processCallQueue_() {
    const e = this.callQueue_;
    this.callQueue_ = [], e.forEach((t) => t());
  }
  processLoadQueue_() {
    const e = this.loadQueue_;
    this.loadQueue_ = [], e.forEach((t) => t());
  }
  /**
   * Determines whether the loader has enough info to load the next segment.
   *
   * @return {boolean}
   *         Whether or not the loader has enough info to load the next segment
   */
  hasEnoughInfoToLoad_() {
    if (this.loaderType_ !== "audio")
      return !0;
    const e = this.pendingSegment_;
    return e ? this.getCurrentMediaInfo_() ? (
      // Technically, instead of waiting to load a segment on timeline changes, a segment
      // can be requested and downloaded and only wait before it is transmuxed or parsed.
      // But in practice, there are a few reasons why it is better to wait until a loader
      // is ready to append that segment before requesting and downloading:
      //
      // 1. Because audio and main loaders cross discontinuities together, if this loader
      //    is waiting for the other to catch up, then instead of requesting another
      //    segment and using up more bandwidth, by not yet loading, more bandwidth is
      //    allotted to the loader currently behind.
      // 2. media-segment-request doesn't have to have logic to consider whether a segment
      // is ready to be processed or not, isolating the queueing behavior to the loader.
      // 3. The audio loader bases some of its segment properties on timing information
      //    provided by the main loader, meaning that, if the logic for waiting on
      //    processing was in media-segment-request, then it would also need to know how
      //    to re-generate the segment information after the main loader caught up.
      !Dc({
        timelineChangeController: this.timelineChangeController_,
        currentTimeline: this.currentTimeline_,
        segmentTimeline: e.timeline,
        loaderType: this.loaderType_,
        audioDisabled: this.audioDisabled_
      })
    ) : !0 : !1;
  }
  getCurrentMediaInfo_(e = this.pendingSegment_) {
    return e && e.trackInfo || this.currentMediaInfo_;
  }
  getMediaInfo_(e = this.pendingSegment_) {
    return this.getCurrentMediaInfo_(e) || this.startingMediaInfo_;
  }
  getPendingSegmentPlaylist() {
    return this.pendingSegment_ ? this.pendingSegment_.playlist : null;
  }
  hasEnoughInfoToAppend_() {
    if (!this.sourceUpdater_.ready() || this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_)
      return !1;
    const e = this.pendingSegment_, t = this.getCurrentMediaInfo_();
    if (!e || !t)
      return !1;
    const {
      hasAudio: s,
      hasVideo: r,
      isMuxed: n
    } = t;
    return !(r && !e.videoTimingInfo || s && !this.audioDisabled_ && !n && !e.audioTimingInfo || Dc({
      timelineChangeController: this.timelineChangeController_,
      currentTimeline: this.currentTimeline_,
      segmentTimeline: e.timeline,
      loaderType: this.loaderType_,
      audioDisabled: this.audioDisabled_
    }));
  }
  handleData_(e, t) {
    if (this.earlyAbortWhenNeeded_(e.stats), this.checkForAbort_(e.requestId))
      return;
    if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {
      this.callQueue_.push(this.handleData_.bind(this, e, t));
      return;
    }
    const s = this.pendingSegment_;
    if (this.setTimeMapping_(s.timeline), this.updateMediaSecondsLoaded_(s.part || s.segment), this.mediaSource_.readyState !== "closed") {
      if (e.map && (e.map = this.initSegmentForMap(e.map, !0), s.segment.map = e.map), e.key && this.segmentKey(e.key, !0), s.isFmp4 = e.isFmp4, s.timingInfo = s.timingInfo || {}, s.isFmp4)
        this.trigger("fmp4"), s.timingInfo.start = s[Ac(t.type)].start;
      else {
        const r = this.getCurrentMediaInfo_(), n = this.loaderType_ === "main" && r && r.hasVideo;
        let a;
        n && (a = s.videoTimingInfo.start), s.timingInfo.start = this.trueSegmentStart_({
          currentStart: s.timingInfo.start,
          playlist: s.playlist,
          mediaIndex: s.mediaIndex,
          currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),
          useVideoTimingInfo: n,
          firstVideoFrameTimeForData: a,
          videoTimingInfo: s.videoTimingInfo,
          audioTimingInfo: s.audioTimingInfo
        });
      }
      if (this.updateAppendInitSegmentStatus(s, t.type), this.updateSourceBufferTimestampOffset_(s), s.isSyncRequest) {
        this.updateTimingInfoEnd_(s), this.syncController_.saveSegmentTimingInfo({
          segmentInfo: s,
          shouldSaveTimelineMapping: this.loaderType_ === "main"
        });
        const r = this.chooseNextRequest_();
        if (r.mediaIndex !== s.mediaIndex || r.partIndex !== s.partIndex) {
          this.logger_("sync segment was incorrect, not appending");
          return;
        }
        this.logger_("sync segment was correct, appending");
      }
      s.hasAppendedData_ = !0, this.processMetadataQueue_(), this.appendData_(s, t);
    }
  }
  updateAppendInitSegmentStatus(e, t) {
    this.loaderType_ === "main" && typeof e.timestampOffset == "number" && // in the case that we're handling partial data, we don't want to append an init
    // segment for each chunk
    !e.changedTimestampOffset && (this.appendInitSegment_ = {
      audio: !0,
      video: !0
    }), this.playlistOfLastInitSegment_[t] !== e.playlist && (this.appendInitSegment_[t] = !0);
  }
  getInitSegmentAndUpdateState_({
    type: e,
    initSegment: t,
    map: s,
    playlist: r
  }) {
    if (s) {
      const n = un(s);
      if (this.activeInitSegmentId_ === n)
        return null;
      t = this.initSegmentForMap(s, !0).bytes, this.activeInitSegmentId_ = n;
    }
    return t && this.appendInitSegment_[e] ? (this.playlistOfLastInitSegment_[e] = r, this.appendInitSegment_[e] = !1, this.activeInitSegmentId_ = null, t) : null;
  }
  handleQuotaExceededError_({
    segmentInfo: e,
    type: t,
    bytes: s
  }, r) {
    const n = this.sourceUpdater_.audioBuffered(), a = this.sourceUpdater_.videoBuffered();
    n.length > 1 && this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: " + pi(n).join(", ")), a.length > 1 && this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: " + pi(a).join(", "));
    const l = n.length ? n.start(0) : 0, u = n.length ? n.end(n.length - 1) : 0, f = a.length ? a.start(0) : 0, m = a.length ? a.end(a.length - 1) : 0;
    if (u - l <= As && m - f <= As) {
      this.logger_(`On QUOTA_EXCEEDED_ERR, single segment too large to append to buffer, triggering an error. Appended byte length: ${s.byteLength}, audio buffer: ${pi(n).join(", ")}, video buffer: ${pi(a).join(", ")}, `), this.error({
        message: "Quota exceeded error with append of a single segment of content",
        excludeUntil: 1 / 0,
        metadata: {
          errorType: L.Error.SegmentExceedsSourceBufferQuota
        }
      }), this.trigger("error");
      return;
    }
    this.waitingOnRemove_ = !0, this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {
      segmentInfo: e,
      type: t,
      bytes: s
    }));
    const b = this.currentTime_() - As;
    this.logger_(`On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to ${b}`), this.remove(0, b, () => {
      this.logger_(`On QUOTA_EXCEEDED_ERR, retrying append in ${As}s`), this.waitingOnRemove_ = !1, this.quotaExceededErrorRetryTimeout_ = E.setTimeout(() => {
        this.logger_("On QUOTA_EXCEEDED_ERR, re-processing call queue"), this.quotaExceededErrorRetryTimeout_ = null, this.processCallQueue_();
      }, As * 1e3);
    }, !0);
  }
  handleAppendError_({
    segmentInfo: e,
    type: t,
    bytes: s
  }, r) {
    if (r) {
      if (r.code === $f) {
        this.handleQuotaExceededError_({
          segmentInfo: e,
          type: t,
          bytes: s
        });
        return;
      }
      this.logger_("Received non QUOTA_EXCEEDED_ERR on append", r), this.error({
        message: `${t} append of ${s.length}b failed for segment #${e.mediaIndex} in playlist ${e.playlist.id}`,
        metadata: {
          errorType: L.Error.SegmentAppendError
        }
      }), this.trigger("appenderror");
    }
  }
  appendToSourceBuffer_({
    segmentInfo: e,
    type: t,
    initSegment: s,
    data: r,
    bytes: n
  }) {
    if (!n) {
      const a = [r];
      let l = r.byteLength;
      s && (a.unshift(s), l += s.byteLength), n = w1({
        bytes: l,
        segments: a
      });
    }
    this.sourceUpdater_.appendBuffer({
      segmentInfo: e,
      type: t,
      bytes: n
    }, this.handleAppendError_.bind(this, {
      segmentInfo: e,
      type: t,
      bytes: n
    }));
  }
  handleSegmentTimingInfo_(e, t, s) {
    if (!this.pendingSegment_ || t !== this.pendingSegment_.requestId)
      return;
    const r = this.pendingSegment_.segment, n = `${e}TimingInfo`;
    r[n] || (r[n] = {}), r[n].transmuxerPrependedSeconds = s.prependedContentDuration || 0, r[n].transmuxedPresentationStart = s.start.presentation, r[n].transmuxedDecodeStart = s.start.decode, r[n].transmuxedPresentationEnd = s.end.presentation, r[n].transmuxedDecodeEnd = s.end.decode, r[n].baseMediaDecodeTime = s.baseMediaDecodeTime;
  }
  appendData_(e, t) {
    const {
      type: s,
      data: r
    } = t;
    if (!r || !r.byteLength || s === "audio" && this.audioDisabled_)
      return;
    const n = this.getInitSegmentAndUpdateState_({
      type: s,
      initSegment: t.initSegment,
      playlist: e.playlist,
      map: e.isFmp4 ? e.segment.map : null
    });
    this.appendToSourceBuffer_({
      segmentInfo: e,
      type: s,
      initSegment: n,
      data: r
    });
  }
  /**
   * load a specific segment from a request into the buffer
   *
   * @private
   */
  loadSegment_(e) {
    if (this.state = "WAITING", this.pendingSegment_ = e, this.trimBackBuffer_(e), typeof e.timestampOffset == "number" && this.transmuxer_ && this.transmuxer_.postMessage({
      action: "clearAllMp4Captions"
    }), !this.hasEnoughInfoToLoad_()) {
      this.loadQueue_.push(() => {
        const t = it({}, e, {
          forceTimestampOffset: !0
        });
        it(e, this.generateSegmentInfo_(t)), this.isPendingTimestampOffset_ = !1, this.updateTransmuxerAndRequestSegment_(e);
      });
      return;
    }
    this.updateTransmuxerAndRequestSegment_(e);
  }
  updateTransmuxerAndRequestSegment_(e) {
    this.shouldUpdateTransmuxerTimestampOffset_(e.timestampOffset) && (this.gopBuffer_.length = 0, e.gopsToAlignWith = [], this.timeMapping_ = 0, this.transmuxer_.postMessage({
      action: "reset"
    }), this.transmuxer_.postMessage({
      action: "setTimestampOffset",
      timestampOffset: e.timestampOffset
    }));
    const t = this.createSimplifiedSegmentObj_(e), s = this.isEndOfStream_(e.mediaIndex, e.playlist, e.partIndex), r = this.mediaIndex !== null, n = e.timeline !== this.currentTimeline_ && // currentTimeline starts at -1, so we shouldn't end the timeline switching to 0,
    // the first timeline
    e.timeline > 0, a = s || r && n;
    this.logger_(`Requesting
${qf(e.uri)}
${Ii(e)}`), t.map && !t.map.bytes && (this.logger_("going to request init segment."), this.appendInitSegment_ = {
      video: !0,
      audio: !0
    }), e.abortRequests = y1({
      xhr: this.vhs_.xhr,
      xhrOptions: this.xhrOptions_,
      decryptionWorker: this.decrypter_,
      segment: t,
      abortFn: this.handleAbort_.bind(this, e),
      progressFn: this.handleProgress_.bind(this),
      trackInfoFn: this.handleTrackInfo_.bind(this),
      timingInfoFn: this.handleTimingInfo_.bind(this),
      videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "video", e.requestId),
      audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "audio", e.requestId),
      captionsFn: this.handleCaptions_.bind(this),
      isEndOfTimeline: a,
      endedTimelineFn: () => {
        this.logger_("received endedtimeline callback");
      },
      id3Fn: this.handleId3_.bind(this),
      dataFn: this.handleData_.bind(this),
      doneFn: this.segmentRequestFinished_.bind(this),
      onTransmuxerLog: ({
        message: l,
        level: u,
        stream: f
      }) => {
        this.logger_(`${Ii(e)} logged from transmuxer stream ${f} as a ${u}: ${l}`);
      }
    });
  }
  /**
   * trim the back buffer so that we don't have too much data
   * in the source buffer
   *
   * @private
   *
   * @param {Object} segmentInfo - the current segment
   */
  trimBackBuffer_(e) {
    const t = $1(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);
    t > 0 && this.remove(0, t);
  }
  /**
   * created a simplified copy of the segment object with just the
   * information necessary to perform the XHR and decryption
   *
   * @private
   *
   * @param {Object} segmentInfo - the current segment
   * @return {Object} a simplified segment object copy
   */
  createSimplifiedSegmentObj_(e) {
    const t = e.segment, s = e.part, r = {
      resolvedUri: s ? s.resolvedUri : t.resolvedUri,
      byterange: s ? s.byterange : t.byterange,
      requestId: e.requestId,
      transmuxer: e.transmuxer,
      audioAppendStart: e.audioAppendStart,
      gopsToAlignWith: e.gopsToAlignWith,
      part: e.part
    }, n = e.playlist.segments[e.mediaIndex - 1];
    if (n && n.timeline === t.timeline && (n.videoTimingInfo ? r.baseStartTime = n.videoTimingInfo.transmuxedDecodeEnd : n.audioTimingInfo && (r.baseStartTime = n.audioTimingInfo.transmuxedDecodeEnd)), t.key) {
      const a = t.key.iv || new Uint32Array([0, 0, 0, e.mediaIndex + e.playlist.mediaSequence]);
      r.key = this.segmentKey(t.key), r.key.iv = a;
    }
    return t.map && (r.map = this.initSegmentForMap(t.map)), r;
  }
  saveTransferStats_(e) {
    this.mediaRequests += 1, e && (this.mediaBytesTransferred += e.bytesReceived, this.mediaTransferDuration += e.roundTripTime);
  }
  saveBandwidthRelatedStats_(e, t) {
    if (this.pendingSegment_.byteLength = t.bytesReceived, e < Br) {
      this.logger_(`Ignoring segment's bandwidth because its duration of ${e} is less than the min to record ${Br}`);
      return;
    }
    this.bandwidth = t.bandwidth, this.roundTrip = t.roundTripTime;
  }
  handleTimeout_() {
    this.mediaRequestsTimedout += 1, this.bandwidth = 1, this.roundTrip = NaN, this.trigger("bandwidthupdate"), this.trigger("timeout");
  }
  /**
   * Handle the callback from the segmentRequest function and set the
   * associated SegmentLoader state and errors if necessary
   *
   * @private
   */
  segmentRequestFinished_(e, t, s) {
    if (this.callQueue_.length) {
      this.callQueue_.push(this.segmentRequestFinished_.bind(this, e, t, s));
      return;
    }
    if (this.saveTransferStats_(t.stats), !this.pendingSegment_ || t.requestId !== this.pendingSegment_.requestId)
      return;
    if (e) {
      if (this.pendingSegment_ = null, this.state = "READY", e.code === Tt.ABORTED)
        return;
      if (this.pause(), e.code === Tt.TIMEOUT) {
        this.handleTimeout_();
        return;
      }
      this.mediaRequestsErrored += 1, this.error(e), this.trigger("error");
      return;
    }
    const r = this.pendingSegment_;
    this.saveBandwidthRelatedStats_(r.duration, t.stats), r.endOfAllRequests = t.endOfAllRequests, s.gopInfo && (this.gopBuffer_ = N1(this.gopBuffer_, s.gopInfo, this.safeAppend_)), this.state = "APPENDING", this.trigger("appending"), this.waitForAppendsToComplete_(r);
  }
  setTimeMapping_(e) {
    const t = this.syncController_.mappingForTimeline(e);
    t !== null && (this.timeMapping_ = t);
  }
  updateMediaSecondsLoaded_(e) {
    typeof e.start == "number" && typeof e.end == "number" ? this.mediaSecondsLoaded += e.end - e.start : this.mediaSecondsLoaded += e.duration;
  }
  shouldUpdateTransmuxerTimestampOffset_(e) {
    return e === null ? !1 : this.loaderType_ === "main" && e !== this.sourceUpdater_.videoTimestampOffset() || !this.audioDisabled_ && e !== this.sourceUpdater_.audioTimestampOffset();
  }
  trueSegmentStart_({
    currentStart: e,
    playlist: t,
    mediaIndex: s,
    firstVideoFrameTimeForData: r,
    currentVideoTimestampOffset: n,
    useVideoTimingInfo: a,
    videoTimingInfo: l,
    audioTimingInfo: u
  }) {
    if (typeof e < "u")
      return e;
    if (!a)
      return u.start;
    const f = t.segments[s - 1];
    return s === 0 || !f || typeof f.start > "u" || f.end !== r + n ? r : l.start;
  }
  waitForAppendsToComplete_(e) {
    const t = this.getCurrentMediaInfo_(e);
    if (!t) {
      this.error({
        message: "No starting media returned, likely due to an unsupported media format.",
        playlistExclusionDuration: 1 / 0,
        metadata: {
          errorType: L.Error.SegmentUnsupportedMediaFormat
        }
      }), this.trigger("error");
      return;
    }
    const {
      hasAudio: s,
      hasVideo: r,
      isMuxed: n
    } = t, a = this.loaderType_ === "main" && r, l = !this.audioDisabled_ && s && !n;
    if (e.waitingOnAppends = 0, !e.hasAppendedData_) {
      !e.timingInfo && typeof e.timestampOffset == "number" && (this.isPendingTimestampOffset_ = !0), e.timingInfo = {
        start: 0
      }, e.waitingOnAppends++, this.isPendingTimestampOffset_ || (this.updateSourceBufferTimestampOffset_(e), this.processMetadataQueue_()), this.checkAppendsDone_(e);
      return;
    }
    a && e.waitingOnAppends++, l && e.waitingOnAppends++, a && this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, e)), l && this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, e));
  }
  checkAppendsDone_(e) {
    this.checkForAbort_(e.requestId) || (e.waitingOnAppends--, e.waitingOnAppends === 0 && this.handleAppendsDone_());
  }
  checkForIllegalMediaSwitch(e) {
    const t = q1(this.loaderType_, this.getCurrentMediaInfo_(), e);
    return t ? (this.error({
      message: t,
      playlistExclusionDuration: 1 / 0,
      metadata: {
        errorType: L.Error.SegmentSwitchError
      }
    }), this.trigger("error"), !0) : !1;
  }
  updateSourceBufferTimestampOffset_(e) {
    if (e.timestampOffset === null || // we don't yet have the start for whatever media type (video or audio) has
    // priority, timing-wise, so we must wait
    typeof e.timingInfo.start != "number" || // already updated the timestamp offset for this segment
    e.changedTimestampOffset || // the alt audio loader should not be responsible for setting the timestamp offset
    this.loaderType_ !== "main")
      return;
    let t = !1;
    e.timestampOffset -= this.getSegmentStartTimeForTimestampOffsetCalculation_({
      videoTimingInfo: e.segment.videoTimingInfo,
      audioTimingInfo: e.segment.audioTimingInfo,
      timingInfo: e.timingInfo
    }), e.changedTimestampOffset = !0, e.timestampOffset !== this.sourceUpdater_.videoTimestampOffset() && (this.sourceUpdater_.videoTimestampOffset(e.timestampOffset), t = !0), e.timestampOffset !== this.sourceUpdater_.audioTimestampOffset() && (this.sourceUpdater_.audioTimestampOffset(e.timestampOffset), t = !0), t && this.trigger("timestampoffset");
  }
  getSegmentStartTimeForTimestampOffsetCalculation_({
    videoTimingInfo: e,
    audioTimingInfo: t,
    timingInfo: s
  }) {
    return this.useDtsForTimestampOffset_ ? e && typeof e.transmuxedDecodeStart == "number" ? e.transmuxedDecodeStart : t && typeof t.transmuxedDecodeStart == "number" ? t.transmuxedDecodeStart : s.start : s.start;
  }
  updateTimingInfoEnd_(e) {
    e.timingInfo = e.timingInfo || {};
    const t = this.getMediaInfo_(), r = this.loaderType_ === "main" && t && t.hasVideo && e.videoTimingInfo ? e.videoTimingInfo : e.audioTimingInfo;
    r && (e.timingInfo.end = typeof r.end == "number" ? (
      // End time may not exist in a case where we aren't parsing the full segment (one
      // current example is the case of fmp4), so use the rough duration to calculate an
      // end time.
      r.end
    ) : r.start + e.duration);
  }
  /**
   * callback to run when appendBuffer is finished. detects if we are
   * in a good state to do things with the data we got, or if we need
   * to wait for more
   *
   * @private
   */
  handleAppendsDone_() {
    if (this.pendingSegment_ && this.trigger("appendsdone"), !this.pendingSegment_) {
      this.state = "READY", this.paused() || this.monitorBuffer_();
      return;
    }
    const e = this.pendingSegment_;
    e.part && e.part.syncInfo ? e.part.syncInfo.markAppended() : e.segment.syncInfo && e.segment.syncInfo.markAppended(), this.updateTimingInfoEnd_(e), this.shouldSaveSegmentTimingInfo_ && this.syncController_.saveSegmentTimingInfo({
      segmentInfo: e,
      shouldSaveTimelineMapping: this.loaderType_ === "main"
    });
    const t = z1(e, this.sourceType_);
    if (t && (t.severity === "warn" ? L.log.warn(t.message) : this.logger_(t.message)), this.recordThroughput_(e), this.pendingSegment_ = null, this.state = "READY", e.isSyncRequest && (this.trigger("syncinfoupdate"), !e.hasAppendedData_)) {
      this.logger_(`Throwing away un-appended sync request ${Ii(e)}`);
      return;
    }
    this.logger_(`Appended ${Ii(e)}`), this.addSegmentMetadataCue_(e), this.fetchAtBuffer_ = !0, this.currentTimeline_ !== e.timeline && (this.timelineChangeController_.lastTimelineChange({
      type: this.loaderType_,
      from: this.currentTimeline_,
      to: e.timeline
    }), this.loaderType_ === "main" && !this.audioDisabled_ && this.timelineChangeController_.lastTimelineChange({
      type: "audio",
      from: this.currentTimeline_,
      to: e.timeline
    })), this.currentTimeline_ = e.timeline, this.trigger("syncinfoupdate");
    const s = e.segment, r = e.part, n = s.end && this.currentTime_() - s.end > e.playlist.targetDuration * 3, a = r && r.end && this.currentTime_() - r.end > e.playlist.partTargetDuration * 3;
    if (n || a) {
      this.logger_(`bad ${n ? "segment" : "part"} ${Ii(e)}`), this.resetEverything();
      return;
    }
    this.mediaIndex !== null && this.trigger("bandwidthupdate"), this.trigger("progress"), this.mediaIndex = e.mediaIndex, this.partIndex = e.partIndex, this.isEndOfStream_(e.mediaIndex, e.playlist, e.partIndex) && this.endOfStream(), this.trigger("appended"), e.hasAppendedData_ && this.mediaAppends++, this.paused() || this.monitorBuffer_();
  }
  /**
   * Records the current throughput of the decrypt, transmux, and append
   * portion of the semgment pipeline. `throughput.rate` is a the cumulative
   * moving average of the throughput. `throughput.count` is the number of
   * data points in the average.
   *
   * @private
   * @param {Object} segmentInfo the object returned by loadSegment
   */
  recordThroughput_(e) {
    if (e.duration < Br) {
      this.logger_(`Ignoring segment's throughput because its duration of ${e.duration} is less than the min to record ${Br}`);
      return;
    }
    const t = this.throughput.rate, s = Date.now() - e.endOfAllRequests + 1, r = Math.floor(e.byteLength / s * 8 * 1e3);
    this.throughput.rate += (r - t) / ++this.throughput.count;
  }
  /**
   * Adds a cue to the segment-metadata track with some metadata information about the
   * segment
   *
   * @private
   * @param {Object} segmentInfo
   *        the object returned by loadSegment
   * @method addSegmentMetadataCue_
   */
  addSegmentMetadataCue_(e) {
    if (!this.segmentMetadataTrack_)
      return;
    const t = e.segment, s = t.start, r = t.end;
    if (!wc(s) || !wc(r))
      return;
    Os(s, r, this.segmentMetadataTrack_);
    const n = E.WebKitDataCue || E.VTTCue, a = {
      custom: t.custom,
      dateTimeObject: t.dateTimeObject,
      dateTimeString: t.dateTimeString,
      programDateTime: t.programDateTime,
      bandwidth: e.playlist.attributes.BANDWIDTH,
      resolution: e.playlist.attributes.RESOLUTION,
      codecs: e.playlist.attributes.CODECS,
      byteLength: e.byteLength,
      uri: e.uri,
      timeline: e.timeline,
      playlist: e.playlist.id,
      start: s,
      end: r
    }, l = JSON.stringify(a), u = new n(s, r, l);
    u.value = a, this.segmentMetadataTrack_.addCue(u);
  }
}
function jt() {
}
const Vf = function(i) {
  return typeof i != "string" ? i : i.replace(/./, (e) => e.toUpperCase());
}, G1 = ["video", "audio"], uo = (i, e) => {
  const t = e[`${i}Buffer`];
  return t && t.updating || e.queuePending[i];
}, W1 = (i, e) => {
  for (let t = 0; t < e.length; t++) {
    const s = e[t];
    if (s.type === "mediaSource")
      return null;
    if (s.type === i)
      return t;
  }
  return null;
}, qi = (i, e) => {
  if (e.queue.length === 0)
    return;
  let t = 0, s = e.queue[t];
  if (s.type === "mediaSource") {
    !e.updating() && e.mediaSource.readyState !== "closed" && (e.queue.shift(), s.action(e), s.doneFn && s.doneFn(), qi("audio", e), qi("video", e));
    return;
  }
  if (i !== "mediaSource" && !(!e.ready() || e.mediaSource.readyState === "closed" || uo(i, e))) {
    if (s.type !== i) {
      if (t = W1(i, e.queue), t === null)
        return;
      s = e.queue[t];
    }
    if (e.queue.splice(t, 1), e.queuePending[i] = s, s.action(i, e), !s.doneFn) {
      e.queuePending[i] = null, qi(i, e);
      return;
    }
  }
}, Hf = (i, e) => {
  const t = e[`${i}Buffer`], s = Vf(i);
  t && (t.removeEventListener("updateend", e[`on${s}UpdateEnd_`]), t.removeEventListener("error", e[`on${s}Error_`]), e.codecs[i] = null, e[`${i}Buffer`] = null);
}, gt = (i, e) => i && e && Array.prototype.indexOf.call(i.sourceBuffers, e) !== -1, Ke = {
  appendBuffer: (i, e, t) => (s, r) => {
    const n = r[`${s}Buffer`];
    if (gt(r.mediaSource, n)) {
      r.logger_(`Appending segment ${e.mediaIndex}'s ${i.length} bytes to ${s}Buffer`);
      try {
        n.appendBuffer(i);
      } catch (a) {
        r.logger_(`Error with code ${a.code} ` + (a.code === $f ? "(QUOTA_EXCEEDED_ERR) " : "") + `when appending segment ${e.mediaIndex} to ${s}Buffer`), r.queuePending[s] = null, t(a);
      }
    }
  },
  remove: (i, e) => (t, s) => {
    const r = s[`${t}Buffer`];
    if (gt(s.mediaSource, r)) {
      s.logger_(`Removing ${i} to ${e} from ${t}Buffer`);
      try {
        r.remove(i, e);
      } catch {
        s.logger_(`Remove ${i} to ${e} from ${t}Buffer failed`);
      }
    }
  },
  timestampOffset: (i) => (e, t) => {
    const s = t[`${e}Buffer`];
    gt(t.mediaSource, s) && (t.logger_(`Setting ${e}timestampOffset to ${i}`), s.timestampOffset = i);
  },
  callback: (i) => (e, t) => {
    i();
  },
  endOfStream: (i) => (e) => {
    if (e.mediaSource.readyState === "open") {
      e.logger_(`Calling mediaSource endOfStream(${i || ""})`);
      try {
        e.mediaSource.endOfStream(i);
      } catch (t) {
        L.log.warn("Failed to call media source endOfStream", t);
      }
    }
  },
  duration: (i) => (e) => {
    e.logger_(`Setting mediaSource duration to ${i}`);
    try {
      e.mediaSource.duration = i;
    } catch (t) {
      L.log.warn("Failed to set media source duration", t);
    }
  },
  abort: () => (i, e) => {
    if (e.mediaSource.readyState !== "open")
      return;
    const t = e[`${i}Buffer`];
    if (gt(e.mediaSource, t)) {
      e.logger_(`calling abort on ${i}Buffer`);
      try {
        t.abort();
      } catch (s) {
        L.log.warn(`Failed to abort on ${i}Buffer`, s);
      }
    }
  },
  addSourceBuffer: (i, e) => (t) => {
    const s = Vf(i), r = qs(e);
    t.logger_(`Adding ${i}Buffer with codec ${e} to mediaSource`);
    const n = t.mediaSource.addSourceBuffer(r);
    n.addEventListener("updateend", t[`on${s}UpdateEnd_`]), n.addEventListener("error", t[`on${s}Error_`]), t.codecs[i] = e, t[`${i}Buffer`] = n;
  },
  removeSourceBuffer: (i) => (e) => {
    const t = e[`${i}Buffer`];
    if (Hf(i, e), !!gt(e.mediaSource, t)) {
      e.logger_(`Removing ${i}Buffer with codec ${e.codecs[i]} from mediaSource`);
      try {
        e.mediaSource.removeSourceBuffer(t);
      } catch (s) {
        L.log.warn(`Failed to removeSourceBuffer ${i}Buffer`, s);
      }
    }
  },
  changeType: (i) => (e, t) => {
    const s = t[`${e}Buffer`], r = qs(i);
    if (!gt(t.mediaSource, s))
      return;
    const n = i.substring(0, i.indexOf(".")), a = t.codecs[e];
    if (a.substring(0, a.indexOf(".")) !== n) {
      t.logger_(`changing ${e}Buffer codec from ${t.codecs[e]} to ${i}`);
      try {
        s.changeType(r), t.codecs[e] = i;
      } catch (u) {
        L.log.warn(`Failed to changeType on ${e}Buffer`, u);
      }
    }
  }
}, Ye = ({
  type: i,
  sourceUpdater: e,
  action: t,
  doneFn: s,
  name: r
}) => {
  e.queue.push({
    type: i,
    action: t,
    doneFn: s,
    name: r
  }), qi(i, e);
}, Ic = (i, e) => (t) => {
  const s = e[`${i}Buffered`](), r = u2(s);
  if (e.logger_(`received "updateend" event for ${i} Source Buffer: `, r), e.queuePending[i]) {
    const n = e.queuePending[i].doneFn;
    e.queuePending[i] = null, n && n(e[`${i}Error_`]);
  }
  qi(i, e);
};
class zf extends L.EventTarget {
  constructor(e) {
    super(), this.mediaSource = e, this.sourceopenListener_ = () => qi("mediaSource", this), this.mediaSource.addEventListener("sourceopen", this.sourceopenListener_), this.logger_ = ot("SourceUpdater"), this.audioTimestampOffset_ = 0, this.videoTimestampOffset_ = 0, this.queue = [], this.queuePending = {
      audio: null,
      video: null
    }, this.delayedAudioAppendQueue_ = [], this.videoAppendQueued_ = !1, this.codecs = {}, this.onVideoUpdateEnd_ = Ic("video", this), this.onAudioUpdateEnd_ = Ic("audio", this), this.onVideoError_ = (t) => {
      this.videoError_ = t;
    }, this.onAudioError_ = (t) => {
      this.audioError_ = t;
    }, this.createdSourceBuffers_ = !1, this.initializedEme_ = !1, this.triggeredReady_ = !1;
  }
  initializedEme() {
    this.initializedEme_ = !0, this.triggerReady();
  }
  hasCreatedSourceBuffers() {
    return this.createdSourceBuffers_;
  }
  hasInitializedAnyEme() {
    return this.initializedEme_;
  }
  ready() {
    return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme();
  }
  createSourceBuffers(e) {
    this.hasCreatedSourceBuffers() || (this.addOrChangeSourceBuffers(e), this.createdSourceBuffers_ = !0, this.trigger("createdsourcebuffers"), this.triggerReady());
  }
  triggerReady() {
    this.ready() && !this.triggeredReady_ && (this.triggeredReady_ = !0, this.trigger("ready"));
  }
  /**
   * Add a type of source buffer to the media source.
   *
   * @param {string} type
   *        The type of source buffer to add.
   *
   * @param {string} codec
   *        The codec to add the source buffer with.
   */
  addSourceBuffer(e, t) {
    Ye({
      type: "mediaSource",
      sourceUpdater: this,
      action: Ke.addSourceBuffer(e, t),
      name: "addSourceBuffer"
    });
  }
  /**
   * call abort on a source buffer.
   *
   * @param {string} type
   *        The type of source buffer to call abort on.
   */
  abort(e) {
    Ye({
      type: e,
      sourceUpdater: this,
      action: Ke.abort(e),
      name: "abort"
    });
  }
  /**
   * Call removeSourceBuffer and remove a specific type
   * of source buffer on the mediaSource.
   *
   * @param {string} type
   *        The type of source buffer to remove.
   */
  removeSourceBuffer(e) {
    if (!this.canRemoveSourceBuffer()) {
      L.log.error("removeSourceBuffer is not supported!");
      return;
    }
    Ye({
      type: "mediaSource",
      sourceUpdater: this,
      action: Ke.removeSourceBuffer(e),
      name: "removeSourceBuffer"
    });
  }
  /**
   * Whether or not the removeSourceBuffer function is supported
   * on the mediaSource.
   *
   * @return {boolean}
   *          if removeSourceBuffer can be called.
   */
  canRemoveSourceBuffer() {
    return !L.browser.IS_FIREFOX && E.MediaSource && E.MediaSource.prototype && typeof E.MediaSource.prototype.removeSourceBuffer == "function";
  }
  /**
   * Whether or not the changeType function is supported
   * on our SourceBuffers.
   *
   * @return {boolean}
   *         if changeType can be called.
   */
  static canChangeType() {
    return E.SourceBuffer && E.SourceBuffer.prototype && typeof E.SourceBuffer.prototype.changeType == "function";
  }
  /**
   * Whether or not the changeType function is supported
   * on our SourceBuffers.
   *
   * @return {boolean}
   *         if changeType can be called.
   */
  canChangeType() {
    return this.constructor.canChangeType();
  }
  /**
   * Call the changeType function on a source buffer, given the code and type.
   *
   * @param {string} type
   *        The type of source buffer to call changeType on.
   *
   * @param {string} codec
   *        The codec string to change type with on the source buffer.
   */
  changeType(e, t) {
    if (!this.canChangeType()) {
      L.log.error("changeType is not supported!");
      return;
    }
    Ye({
      type: e,
      sourceUpdater: this,
      action: Ke.changeType(t),
      name: "changeType"
    });
  }
  /**
   * Add source buffers with a codec or, if they are already created,
   * call changeType on source buffers using changeType.
   *
   * @param {Object} codecs
   *        Codecs to switch to
   */
  addOrChangeSourceBuffers(e) {
    if (!e || typeof e != "object" || Object.keys(e).length === 0)
      throw new Error("Cannot addOrChangeSourceBuffers to undefined codecs");
    Object.keys(e).forEach((t) => {
      const s = e[t];
      if (!this.hasCreatedSourceBuffers())
        return this.addSourceBuffer(t, s);
      this.canChangeType() && this.changeType(t, s);
    });
  }
  /**
   * Queue an update to append an ArrayBuffer.
   *
   * @param {MediaObject} object containing audioBytes and/or videoBytes
   * @param {Function} done the function to call when done
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data
   */
  appendBuffer(e, t) {
    const {
      segmentInfo: s,
      type: r,
      bytes: n
    } = e;
    if (this.processedAppend_ = !0, r === "audio" && this.videoBuffer && !this.videoAppendQueued_) {
      this.delayedAudioAppendQueue_.push([e, t]), this.logger_(`delayed audio append of ${n.length} until video append`);
      return;
    }
    const a = t;
    if (Ye({
      type: r,
      sourceUpdater: this,
      action: Ke.appendBuffer(n, s || {
        mediaIndex: -1
      }, a),
      doneFn: t,
      name: "appendBuffer"
    }), r === "video") {
      if (this.videoAppendQueued_ = !0, !this.delayedAudioAppendQueue_.length)
        return;
      const l = this.delayedAudioAppendQueue_.slice();
      this.logger_(`queuing delayed audio ${l.length} appendBuffers`), this.delayedAudioAppendQueue_.length = 0, l.forEach((u) => {
        this.appendBuffer.apply(this, u);
      });
    }
  }
  /**
   * Get the audio buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         The audio buffer's buffered time range
   */
  audioBuffered() {
    return gt(this.mediaSource, this.audioBuffer) && this.audioBuffer.buffered ? this.audioBuffer.buffered : Ie();
  }
  /**
   * Get the video buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         The video buffer's buffered time range
   */
  videoBuffered() {
    return gt(this.mediaSource, this.videoBuffer) && this.videoBuffer.buffered ? this.videoBuffer.buffered : Ie();
  }
  /**
   * Get a combined video/audio buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         the combined time range
   */
  buffered() {
    const e = gt(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null, t = gt(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;
    return t && !e ? this.audioBuffered() : e && !t ? this.videoBuffered() : d2(this.audioBuffered(), this.videoBuffered());
  }
  /**
   * Add a callback to the queue that will set duration on the mediaSource.
   *
   * @param {number} duration
   *        The duration to set
   *
   * @param {Function} [doneFn]
   *        function to run after duration has been set.
   */
  setDuration(e, t = jt) {
    Ye({
      type: "mediaSource",
      sourceUpdater: this,
      action: Ke.duration(e),
      name: "duration",
      doneFn: t
    });
  }
  /**
   * Add a mediaSource endOfStream call to the queue
   *
   * @param {Error} [error]
   *        Call endOfStream with an error
   *
   * @param {Function} [doneFn]
   *        A function that should be called when the
   *        endOfStream call has finished.
   */
  endOfStream(e = null, t = jt) {
    typeof e != "string" && (e = void 0), Ye({
      type: "mediaSource",
      sourceUpdater: this,
      action: Ke.endOfStream(e),
      name: "endOfStream",
      doneFn: t
    });
  }
  /**
   * Queue an update to remove a time range from the buffer.
   *
   * @param {number} start where to start the removal
   * @param {number} end where to end the removal
   * @param {Function} [done=noop] optional callback to be executed when the remove
   * operation is complete
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
   */
  removeAudio(e, t, s = jt) {
    if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {
      s();
      return;
    }
    Ye({
      type: "audio",
      sourceUpdater: this,
      action: Ke.remove(e, t),
      doneFn: s,
      name: "remove"
    });
  }
  /**
   * Queue an update to remove a time range from the buffer.
   *
   * @param {number} start where to start the removal
   * @param {number} end where to end the removal
   * @param {Function} [done=noop] optional callback to be executed when the remove
   * operation is complete
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
   */
  removeVideo(e, t, s = jt) {
    if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {
      s();
      return;
    }
    Ye({
      type: "video",
      sourceUpdater: this,
      action: Ke.remove(e, t),
      doneFn: s,
      name: "remove"
    });
  }
  /**
   * Whether the underlying sourceBuffer is updating or not
   *
   * @return {boolean} the updating status of the SourceBuffer
   */
  updating() {
    return !!(uo("audio", this) || uo("video", this));
  }
  /**
   * Set/get the timestampoffset on the audio SourceBuffer
   *
   * @return {number} the timestamp offset
   */
  audioTimestampOffset(e) {
    return typeof e < "u" && this.audioBuffer && // no point in updating if it's the same
    this.audioTimestampOffset_ !== e && (Ye({
      type: "audio",
      sourceUpdater: this,
      action: Ke.timestampOffset(e),
      name: "timestampOffset"
    }), this.audioTimestampOffset_ = e), this.audioTimestampOffset_;
  }
  /**
   * Set/get the timestampoffset on the video SourceBuffer
   *
   * @return {number} the timestamp offset
   */
  videoTimestampOffset(e) {
    return typeof e < "u" && this.videoBuffer && // no point in updating if it's the same
    this.videoTimestampOffset !== e && (Ye({
      type: "video",
      sourceUpdater: this,
      action: Ke.timestampOffset(e),
      name: "timestampOffset"
    }), this.videoTimestampOffset_ = e), this.videoTimestampOffset_;
  }
  /**
   * Add a function to the queue that will be called
   * when it is its turn to run in the audio queue.
   *
   * @param {Function} callback
   *        The callback to queue.
   */
  audioQueueCallback(e) {
    this.audioBuffer && Ye({
      type: "audio",
      sourceUpdater: this,
      action: Ke.callback(e),
      name: "callback"
    });
  }
  /**
   * Add a function to the queue that will be called
   * when it is its turn to run in the video queue.
   *
   * @param {Function} callback
   *        The callback to queue.
   */
  videoQueueCallback(e) {
    this.videoBuffer && Ye({
      type: "video",
      sourceUpdater: this,
      action: Ke.callback(e),
      name: "callback"
    });
  }
  /**
   * dispose of the source updater and the underlying sourceBuffer
   */
  dispose() {
    this.trigger("dispose"), G1.forEach((e) => {
      this.abort(e), this.canRemoveSourceBuffer() ? this.removeSourceBuffer(e) : this[`${e}QueueCallback`](() => Hf(e, this));
    }), this.videoAppendQueued_ = !1, this.delayedAudioAppendQueue_.length = 0, this.sourceopenListener_ && this.mediaSource.removeEventListener("sourceopen", this.sourceopenListener_), this.off();
  }
}
const Pc = (i) => decodeURIComponent(escape(String.fromCharCode.apply(null, i))), X1 = (i) => {
  const e = new Uint8Array(i);
  return Array.from(e).map((t) => t.toString(16).padStart(2, "0")).join("");
}, Lc = new Uint8Array(`

`.split("").map((i) => i.charCodeAt(0)));
class K1 extends Error {
  constructor() {
    super("Trying to parse received VTT cues, but there is no WebVTT. Make sure vtt.js is loaded.");
  }
}
class Y1 extends lo {
  constructor(e, t = {}) {
    super(e, t), this.mediaSource_ = null, this.subtitlesTrack_ = null, this.featuresNativeTextTracks_ = e.featuresNativeTextTracks, this.loadVttJs = e.loadVttJs, this.shouldSaveSegmentTimingInfo_ = !1;
  }
  createTransmuxer_() {
    return null;
  }
  /**
   * Indicates which time ranges are buffered
   *
   * @return {TimeRange}
   *         TimeRange object representing the current buffered ranges
   */
  buffered_() {
    if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length)
      return Ie();
    const e = this.subtitlesTrack_.cues, t = e[0].startTime, s = e[e.length - 1].startTime;
    return Ie([[t, s]]);
  }
  /**
   * Gets and sets init segment for the provided map
   *
   * @param {Object} map
   *        The map object representing the init segment to get or set
   * @param {boolean=} set
   *        If true, the init segment for the provided map should be saved
   * @return {Object}
   *         map object for desired init segment
   */
  initSegmentForMap(e, t = !1) {
    if (!e)
      return null;
    const s = un(e);
    let r = this.initSegments_[s];
    if (t && !r && e.bytes) {
      const n = Lc.byteLength + e.bytes.byteLength, a = new Uint8Array(n);
      a.set(e.bytes), a.set(Lc, e.bytes.byteLength), this.initSegments_[s] = r = {
        resolvedUri: e.resolvedUri,
        byterange: e.byterange,
        bytes: a
      };
    }
    return r || e;
  }
  /**
   * Returns true if all configuration required for loading is present, otherwise false.
   *
   * @return {boolean} True if the all configuration is ready for loading
   * @private
   */
  couldBeginLoading_() {
    return this.playlist_ && this.subtitlesTrack_ && !this.paused();
  }
  /**
   * Once all the starting parameters have been specified, begin
   * operation. This method should only be invoked from the INIT
   * state.
   *
   * @private
   */
  init_() {
    return this.state = "READY", this.resetEverything(), this.monitorBuffer_();
  }
  /**
   * Set a subtitle track on the segment loader to add subtitles to
   *
   * @param {TextTrack=} track
   *        The text track to add loaded subtitles to
   * @return {TextTrack}
   *        Returns the subtitles track
   */
  track(e) {
    return typeof e > "u" ? this.subtitlesTrack_ : (this.subtitlesTrack_ = e, this.state === "INIT" && this.couldBeginLoading_() && this.init_(), this.subtitlesTrack_);
  }
  /**
   * Remove any data in the source buffer between start and end times
   *
   * @param {number} start - the start time of the region to remove from the buffer
   * @param {number} end - the end time of the region to remove from the buffer
   */
  remove(e, t) {
    Os(e, t, this.subtitlesTrack_);
  }
  /**
   * fill the buffer with segements unless the sourceBuffers are
   * currently updating
   *
   * Note: this function should only ever be called by monitorBuffer_
   * and never directly
   *
   * @private
   */
  fillBuffer_() {
    const e = this.chooseNextRequest_();
    if (e) {
      if (this.syncController_.timestampOffsetForTimeline(e.timeline) === null) {
        const t = () => {
          this.state = "READY", this.paused() || this.monitorBuffer_();
        };
        this.syncController_.one("timestampoffset", t), this.state = "WAITING_ON_TIMELINE";
        return;
      }
      this.loadSegment_(e);
    }
  }
  // never set a timestamp offset for vtt segments.
  timestampOffsetForSegment_() {
    return null;
  }
  chooseNextRequest_() {
    return this.skipEmptySegments_(super.chooseNextRequest_());
  }
  /**
   * Prevents the segment loader from requesting segments we know contain no subtitles
   * by walking forward until we find the next segment that we don't know whether it is
   * empty or not.
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @return {Object}
   *         a segment info object that describes the current segment
   */
  skipEmptySegments_(e) {
    for (; e && e.segment.empty; ) {
      if (e.mediaIndex + 1 >= e.playlist.segments.length) {
        e = null;
        break;
      }
      e = this.generateSegmentInfo_({
        playlist: e.playlist,
        mediaIndex: e.mediaIndex + 1,
        startOfSegment: e.startOfSegment + e.duration,
        isSyncRequest: e.isSyncRequest
      });
    }
    return e;
  }
  stopForError(e) {
    this.error(e), this.state = "READY", this.pause(), this.trigger("error");
  }
  /**
   * append a decrypted segement to the SourceBuffer through a SourceUpdater
   *
   * @private
   */
  segmentRequestFinished_(e, t, s) {
    if (!this.subtitlesTrack_) {
      this.state = "READY";
      return;
    }
    if (this.saveTransferStats_(t.stats), !this.pendingSegment_) {
      this.state = "READY", this.mediaRequestsAborted += 1;
      return;
    }
    if (e) {
      e.code === Tt.TIMEOUT && this.handleTimeout_(), e.code === Tt.ABORTED ? this.mediaRequestsAborted += 1 : this.mediaRequestsErrored += 1, this.stopForError(e);
      return;
    }
    const r = this.pendingSegment_;
    this.saveBandwidthRelatedStats_(r.duration, t.stats), t.key && this.segmentKey(t.key, !0), this.state = "APPENDING", this.trigger("appending");
    const n = r.segment;
    if (n.map && (n.map.bytes = t.map.bytes), r.bytes = t.bytes, typeof E.WebVTT != "function" && typeof this.loadVttJs == "function") {
      this.state = "WAITING_ON_VTTJS", this.loadVttJs().then(() => this.segmentRequestFinished_(e, t, s), () => this.stopForError({
        message: "Error loading vtt.js",
        metadata: {
          errorType: L.Error.VttLoadError
        }
      }));
      return;
    }
    n.requested = !0;
    try {
      this.parseVTTCues_(r);
    } catch (a) {
      this.stopForError({
        message: a.message,
        metadata: {
          errorType: L.Error.VttCueParsingError
        }
      });
      return;
    }
    if (this.updateTimeMapping_(r, this.syncController_.timelines[r.timeline], this.playlist_), r.cues.length ? r.timingInfo = {
      start: r.cues[0].startTime,
      end: r.cues[r.cues.length - 1].endTime
    } : r.timingInfo = {
      start: r.startOfSegment,
      end: r.startOfSegment + r.duration
    }, r.isSyncRequest) {
      this.trigger("syncinfoupdate"), this.pendingSegment_ = null, this.state = "READY";
      return;
    }
    r.byteLength = r.bytes.byteLength, this.mediaSecondsLoaded += n.duration, r.cues.forEach((a) => {
      this.subtitlesTrack_.addCue(this.featuresNativeTextTracks_ ? new E.VTTCue(a.startTime, a.endTime, a.text) : a);
    }), j1(this.subtitlesTrack_), this.handleAppendsDone_();
  }
  handleData_() {
  }
  updateTimingInfoEnd_() {
  }
  /**
   * Uses the WebVTT parser to parse the segment response
   *
   * @throws NoVttJsError
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @private
   */
  parseVTTCues_(e) {
    let t, s = !1;
    if (typeof E.WebVTT != "function")
      throw new K1();
    typeof E.TextDecoder == "function" ? t = new E.TextDecoder("utf8") : (t = E.WebVTT.StringDecoder(), s = !0);
    const r = new E.WebVTT.Parser(E, E.vttjs, t);
    if (e.cues = [], e.timestampmap = {
      MPEGTS: 0,
      LOCAL: 0
    }, r.oncue = e.cues.push.bind(e.cues), r.ontimestampmap = (a) => {
      e.timestampmap = a;
    }, r.onparsingerror = (a) => {
      L.log.warn("Error encountered when parsing cues: " + a.message);
    }, e.segment.map) {
      let a = e.segment.map.bytes;
      s && (a = Pc(a)), r.parse(a);
    }
    let n = e.bytes;
    s && (n = Pc(n)), r.parse(n), r.flush();
  }
  /**
   * Updates the start and end times of any cues parsed by the WebVTT parser using
   * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping
   * from the SyncController
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @param {Object} mappingObj
   *        object containing a mapping from TS to media time
   * @param {Object} playlist
   *        the playlist object containing the segment
   * @private
   */
  updateTimeMapping_(e, t, s) {
    const r = e.segment;
    if (!t)
      return;
    if (!e.cues.length) {
      r.empty = !0;
      return;
    }
    const {
      MPEGTS: n,
      LOCAL: a
    } = e.timestampmap, u = n / fi.ONE_SECOND_IN_TS - a + t.mapping;
    if (e.cues.forEach((f) => {
      const m = f.endTime - f.startTime, v = n === 0 ? f.startTime + u : this.handleRollover_(f.startTime + u, t.time);
      f.startTime = Math.max(v, 0), f.endTime = Math.max(v + m, 0);
    }), !s.syncInfo) {
      const f = e.cues[0].startTime, m = e.cues[e.cues.length - 1].startTime;
      s.syncInfo = {
        mediaSequence: s.mediaSequence + e.mediaIndex,
        time: Math.min(f, m - r.duration)
      };
    }
  }
  /**
   * MPEG-TS PES timestamps are limited to 2^33.
   * Once they reach 2^33, they roll over to 0.
   * mux.js handles PES timestamp rollover for the following scenarios:
   * [forward rollover(right)] ->
   *    PES timestamps monotonically increase, and once they reach 2^33, they roll over to 0
   * [backward rollover(left)] -->
   *    we seek back to position before rollover.
   *
   * According to the HLS SPEC:
   * When synchronizing WebVTT with PES timestamps, clients SHOULD account
   * for cases where the 33-bit PES timestamps have wrapped and the WebVTT
   * cue times have not.  When the PES timestamp wraps, the WebVTT Segment
   * SHOULD have a X-TIMESTAMP-MAP header that maps the current WebVTT
   * time to the new (low valued) PES timestamp.
   *
   * So we want to handle rollover here and align VTT Cue start/end time to the player's time.
   */
  handleRollover_(e, t) {
    if (t === null)
      return e;
    let s = e * fi.ONE_SECOND_IN_TS;
    const r = t * fi.ONE_SECOND_IN_TS;
    let n;
    for (r < s ? n = -8589934592 : n = 8589934592; Math.abs(s - r) > 4294967296; )
      s += n;
    return s / fi.ONE_SECOND_IN_TS;
  }
}
const Q1 = function(i, e) {
  const t = i.cues;
  for (let s = 0; s < t.length; s++) {
    const r = t[s];
    if (e >= r.adStartTime && e <= r.adEndTime)
      return r;
  }
  return null;
}, J1 = function(i, e, t = 0) {
  if (!i.segments)
    return;
  let s = t, r;
  for (let n = 0; n < i.segments.length; n++) {
    const a = i.segments[n];
    if (r || (r = Q1(e, s + a.duration / 2)), r) {
      if ("cueIn" in a) {
        r.endTime = s, r.adEndTime = s, s += a.duration, r = null;
        continue;
      }
      if (s < r.endTime) {
        s += a.duration;
        continue;
      }
      r.endTime += a.duration;
    } else if ("cueOut" in a && (r = new E.VTTCue(s, s + a.duration, a.cueOut), r.adStartTime = s, r.adEndTime = s + parseFloat(a.cueOut), e.addCue(r)), "cueOutCont" in a) {
      const [l, u] = a.cueOutCont.split("/").map(parseFloat);
      r = new E.VTTCue(s, s + a.duration, ""), r.adStartTime = s - l, r.adEndTime = r.adStartTime + u, e.addCue(r);
    }
    s += a.duration;
  }
};
class Oc {
  /**
   * @param {number} start - media sequence start
   * @param {number} end - media sequence end
   * @param {number} segmentIndex - index for associated segment
   * @param {number|null} [partIndex] - index for associated part
   * @param {boolean} [appended] - appended indicator
   *
   */
  constructor({
    start: e,
    end: t,
    segmentIndex: s,
    partIndex: r = null,
    appended: n = !1
  }) {
    this.start_ = e, this.end_ = t, this.segmentIndex_ = s, this.partIndex_ = r, this.appended_ = n;
  }
  isInRange(e) {
    return e >= this.start && e < this.end;
  }
  markAppended() {
    this.appended_ = !0;
  }
  resetAppendedStatus() {
    this.appended_ = !1;
  }
  get isAppended() {
    return this.appended_;
  }
  get start() {
    return this.start_;
  }
  get end() {
    return this.end_;
  }
  get segmentIndex() {
    return this.segmentIndex_;
  }
  get partIndex() {
    return this.partIndex_;
  }
}
class Z1 {
  /**
   *
   * @param {SyncInfo} segmentSyncInfo - sync info for a given segment
   * @param {Array<SyncInfo>} [partsSyncInfo] - sync infos for a list of parts for a given segment
   */
  constructor(e, t = []) {
    this.segmentSyncInfo_ = e, this.partsSyncInfo_ = t;
  }
  get segmentSyncInfo() {
    return this.segmentSyncInfo_;
  }
  get partsSyncInfo() {
    return this.partsSyncInfo_;
  }
  get hasPartsSyncInfo() {
    return this.partsSyncInfo_.length > 0;
  }
  resetAppendStatus() {
    this.segmentSyncInfo_.resetAppendedStatus(), this.partsSyncInfo_.forEach((e) => e.resetAppendedStatus());
  }
}
class Ia {
  constructor() {
    this.storage_ = /* @__PURE__ */ new Map(), this.diagnostics_ = "", this.isReliable_ = !1, this.start_ = -1 / 0, this.end_ = 1 / 0;
  }
  get start() {
    return this.start_;
  }
  get end() {
    return this.end_;
  }
  get diagnostics() {
    return this.diagnostics_;
  }
  get isReliable() {
    return this.isReliable_;
  }
  resetAppendedStatus() {
    this.storage_.forEach((e) => e.resetAppendStatus());
  }
  /**
   * update sync storage
   *
   * @param {Object} playlist
   * @param {number} currentTime
   *
   * @return {void}
   */
  update(e, t) {
    const {
      mediaSequence: s,
      segments: r
    } = e;
    if (this.isReliable_ = this.isReliablePlaylist_(s, r), !!this.isReliable_)
      return this.updateStorage_(r, s, this.calculateBaseTime_(s, t));
  }
  /**
   * @param {number} targetTime
   * @return {SyncInfo|null}
   */
  getSyncInfoForTime(e) {
    for (const {
      segmentSyncInfo: t,
      partsSyncInfo: s
    } of this.storage_.values())
      if (s.length) {
        for (const r of s)
          if (r.isInRange(e))
            return r;
      } else if (t.isInRange(e))
        return t;
    return null;
  }
  updateStorage_(e, t, s) {
    const r = /* @__PURE__ */ new Map();
    let n = `
`, a = s, l = t;
    this.start_ = a, e.forEach((u, f) => {
      const m = this.storage_.get(l), v = a, b = v + u.duration, S = !!(m && m.segmentSyncInfo && m.segmentSyncInfo.isAppended), y = new Oc({
        start: v,
        end: b,
        appended: S,
        segmentIndex: f
      });
      u.syncInfo = y;
      let A = a;
      const w = (u.parts || []).map((k, D) => {
        const R = A, j = A + k.duration, P = !!(m && m.partsSyncInfo && m.partsSyncInfo[D] && m.partsSyncInfo[D].isAppended), F = new Oc({
          start: R,
          end: j,
          appended: P,
          segmentIndex: f,
          partIndex: D
        });
        return A = j, n += `Media Sequence: ${l}.${D} | Range: ${R} --> ${j} | Appended: ${P}
`, k.syncInfo = F, F;
      });
      r.set(l, new Z1(y, w)), n += `${qf(u.resolvedUri)} | Media Sequence: ${l} | Range: ${v} --> ${b} | Appended: ${S}
`, l++, a = b;
    }), this.end_ = a, this.storage_ = r, this.diagnostics_ = n;
  }
  calculateBaseTime_(e, t) {
    return this.storage_.size ? this.storage_.has(e) ? this.storage_.get(e).segmentSyncInfo.start : t : 0;
  }
  isReliablePlaylist_(e, t) {
    return e != null && Array.isArray(t) && t.length;
  }
}
const eT = 86400, Pa = [
  // Stategy "VOD": Handle the VOD-case where the sync-point is *always*
  //                the equivalence display-time 0 === segment-index 0
  {
    name: "VOD",
    run: (i, e, t, s, r) => t !== 1 / 0 ? {
      time: 0,
      segmentIndex: 0,
      partIndex: null
    } : null
  },
  {
    name: "MediaSequence",
    /**
     * run media sequence strategy
     *
     * @param {SyncController} syncController
     * @param {Object} playlist
     * @param {number} duration
     * @param {number} currentTimeline
     * @param {number} currentTime
     * @param {string} type
     */
    run: (i, e, t, s, r, n) => {
      const a = i.getMediaSequenceSync(n);
      if (!a || !a.isReliable)
        return null;
      const l = a.getSyncInfoForTime(r);
      return l ? {
        time: l.start,
        partIndex: l.partIndex,
        segmentIndex: l.segmentIndex
      } : null;
    }
  },
  // Stategy "ProgramDateTime": We have a program-date-time tag in this playlist
  {
    name: "ProgramDateTime",
    run: (i, e, t, s, r) => {
      if (!Object.keys(i.timelineToDatetimeMappings).length)
        return null;
      let n = null, a = null;
      const l = eo(e);
      r = r || 0;
      for (let u = 0; u < l.length; u++) {
        const f = e.endList || r === 0 ? u : l.length - (u + 1), m = l[f], v = m.segment, b = i.timelineToDatetimeMappings[v.timeline];
        if (!b || !v.dateTimeObject)
          continue;
        let y = v.dateTimeObject.getTime() / 1e3 + b;
        if (v.parts && typeof m.partIndex == "number")
          for (let w = 0; w < m.partIndex; w++)
            y += v.parts[w].duration;
        const A = Math.abs(r - y);
        if (a !== null && (A === 0 || a < A))
          break;
        a = A, n = {
          time: y,
          segmentIndex: m.segmentIndex,
          partIndex: m.partIndex
        };
      }
      return n;
    }
  },
  // Stategy "Segment": We have a known time mapping for a timeline and a
  //                    segment in the current timeline with timing data
  {
    name: "Segment",
    run: (i, e, t, s, r) => {
      let n = null, a = null;
      r = r || 0;
      const l = eo(e);
      for (let u = 0; u < l.length; u++) {
        const f = e.endList || r === 0 ? u : l.length - (u + 1), m = l[f], v = m.segment, b = m.part && m.part.start || v && v.start;
        if (v.timeline === s && typeof b < "u") {
          const S = Math.abs(r - b);
          if (a !== null && a < S)
            break;
          (!n || a === null || a >= S) && (a = S, n = {
            time: b,
            segmentIndex: m.segmentIndex,
            partIndex: m.partIndex
          });
        }
      }
      return n;
    }
  },
  // Stategy "Discontinuity": We have a discontinuity with a known
  //                          display-time
  {
    name: "Discontinuity",
    run: (i, e, t, s, r) => {
      let n = null;
      if (r = r || 0, e.discontinuityStarts && e.discontinuityStarts.length) {
        let a = null;
        for (let l = 0; l < e.discontinuityStarts.length; l++) {
          const u = e.discontinuityStarts[l], f = e.discontinuitySequence + l + 1, m = i.discontinuities[f];
          if (m) {
            const v = Math.abs(r - m.time);
            if (a !== null && a < v)
              break;
            (!n || a === null || a >= v) && (a = v, n = {
              time: m.time,
              segmentIndex: u,
              partIndex: null
            });
          }
        }
      }
      return n;
    }
  },
  // Stategy "Playlist": We have a playlist with a known mapping of
  //                     segment index to display time
  {
    name: "Playlist",
    run: (i, e, t, s, r) => e.syncInfo ? {
      time: e.syncInfo.time,
      segmentIndex: e.syncInfo.mediaSequence - e.mediaSequence,
      partIndex: null
    } : null
  }
];
class tT extends L.EventTarget {
  constructor(e = {}) {
    super(), this.timelines = [], this.discontinuities = [], this.timelineToDatetimeMappings = {}, this.mediaSequenceStorage_ = {
      main: new Ia(),
      audio: new Ia(),
      vtt: new Ia()
    }, this.logger_ = ot("SyncController");
  }
  /**
   *
   * @param {string} loaderType
   * @return {MediaSequenceSync|null}
   */
  getMediaSequenceSync(e) {
    return this.mediaSequenceStorage_[e] || null;
  }
  /**
   * Find a sync-point for the playlist specified
   *
   * A sync-point is defined as a known mapping from display-time to
   * a segment-index in the current playlist.
   *
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {number} duration
   *        Duration of the MediaSource (Infinite if playing a live source)
   * @param {number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @param {number} currentTime
   *        Current player's time
   * @param {string} type
   *        Segment loader type
   * @return {Object}
   *          A sync-point object
   */
  getSyncPoint(e, t, s, r, n) {
    if (t !== 1 / 0)
      return Pa.find(({
        name: u
      }) => u === "VOD").run(this, e, t);
    const a = this.runStrategies_(e, t, s, r, n);
    if (!a.length)
      return null;
    for (const l of a) {
      const {
        syncPoint: u,
        strategy: f
      } = l, {
        segmentIndex: m,
        time: v
      } = u;
      if (m < 0)
        continue;
      const b = e.segments[m], S = v, y = S + b.duration;
      if (this.logger_(`Strategy: ${f}. Current time: ${r}. selected segment: ${m}. Time: [${S} -> ${y}]}`), r >= S && r < y)
        return this.logger_("Found sync point with exact match: ", u), u;
    }
    return this.selectSyncPoint_(a, {
      key: "time",
      value: r
    });
  }
  /**
   * Calculate the amount of time that has expired off the playlist during playback
   *
   * @param {Playlist} playlist
   *        Playlist object to calculate expired from
   * @param {number} duration
   *        Duration of the MediaSource (Infinity if playling a live source)
   * @return {number|null}
   *          The amount of time that has expired off the playlist during playback. Null
   *          if no sync-points for the playlist can be found.
   */
  getExpiredTime(e, t) {
    if (!e || !e.segments)
      return null;
    const s = this.runStrategies_(e, t, e.discontinuitySequence, 0);
    if (!s.length)
      return null;
    const r = this.selectSyncPoint_(s, {
      key: "segmentIndex",
      value: 0
    });
    return r.segmentIndex > 0 && (r.time *= -1), Math.abs(r.time + Bs({
      defaultDuration: e.targetDuration,
      durationList: e.segments,
      startIndex: r.segmentIndex,
      endIndex: 0
    }));
  }
  /**
   * Runs each sync-point strategy and returns a list of sync-points returned by the
   * strategies
   *
   * @private
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {number} duration
   *        Duration of the MediaSource (Infinity if playing a live source)
   * @param {number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @param {number} currentTime
   *        Current player's time
   * @param {string} type
   *        Segment loader type
   * @return {Array}
   *          A list of sync-point objects
   */
  runStrategies_(e, t, s, r, n) {
    const a = [];
    for (let l = 0; l < Pa.length; l++) {
      const u = Pa[l], f = u.run(this, e, t, s, r, n);
      f && (f.strategy = u.name, a.push({
        strategy: u.name,
        syncPoint: f
      }));
    }
    return a;
  }
  /**
   * Selects the sync-point nearest the specified target
   *
   * @private
   * @param {Array} syncPoints
   *        List of sync-points to select from
   * @param {Object} target
   *        Object specifying the property and value we are targeting
   * @param {string} target.key
   *        Specifies the property to target. Must be either 'time' or 'segmentIndex'
   * @param {number} target.value
   *        The value to target for the specified key.
   * @return {Object}
   *          The sync-point nearest the target
   */
  selectSyncPoint_(e, t) {
    let s = e[0].syncPoint, r = Math.abs(e[0].syncPoint[t.key] - t.value), n = e[0].strategy;
    for (let a = 1; a < e.length; a++) {
      const l = Math.abs(e[a].syncPoint[t.key] - t.value);
      l < r && (r = l, s = e[a].syncPoint, n = e[a].strategy);
    }
    return this.logger_(`syncPoint for [${t.key}: ${t.value}] chosen with strategy [${n}]: [time:${s.time}, segmentIndex:${s.segmentIndex}` + (typeof s.partIndex == "number" ? `,partIndex:${s.partIndex}` : "") + "]"), s;
  }
  /**
   * Save any meta-data present on the segments when segments leave
   * the live window to the playlist to allow for synchronization at the
   * playlist level later.
   *
   * @param {Playlist} oldPlaylist - The previous active playlist
   * @param {Playlist} newPlaylist - The updated and most current playlist
   */
  saveExpiredSegmentInfo(e, t) {
    const s = t.mediaSequence - e.mediaSequence;
    if (s > eT) {
      L.log.warn(`Not saving expired segment info. Media sequence gap ${s} is too large.`);
      return;
    }
    for (let r = s - 1; r >= 0; r--) {
      const n = e.segments[r];
      if (n && typeof n.start < "u") {
        t.syncInfo = {
          mediaSequence: e.mediaSequence + r,
          time: n.start
        }, this.logger_(`playlist refresh sync: [time:${t.syncInfo.time}, mediaSequence: ${t.syncInfo.mediaSequence}]`), this.trigger("syncinfoupdate");
        break;
      }
    }
  }
  /**
   * Save the mapping from playlist's ProgramDateTime to display. This should only happen
   * before segments start to load.
   *
   * @param {Playlist} playlist - The currently active playlist
   */
  setDateTimeMappingForStart(e) {
    if (this.timelineToDatetimeMappings = {}, e.segments && e.segments.length && e.segments[0].dateTimeObject) {
      const t = e.segments[0], s = t.dateTimeObject.getTime() / 1e3;
      this.timelineToDatetimeMappings[t.timeline] = -s;
    }
  }
  /**
   * Calculates and saves timeline mappings, playlist sync info, and segment timing values
   * based on the latest timing information.
   *
   * @param {Object} options
   *        Options object
   * @param {SegmentInfo} options.segmentInfo
   *        The current active request information
   * @param {boolean} options.shouldSaveTimelineMapping
   *        If there's a timeline change, determines if the timeline mapping should be
   *        saved for timeline mapping and program date time mappings.
   */
  saveSegmentTimingInfo({
    segmentInfo: e,
    shouldSaveTimelineMapping: t
  }) {
    const s = this.calculateSegmentTimeMapping_(e, e.timingInfo, t), r = e.segment;
    s && (this.saveDiscontinuitySyncInfo_(e), e.playlist.syncInfo || (e.playlist.syncInfo = {
      mediaSequence: e.playlist.mediaSequence + e.mediaIndex,
      time: r.start
    }));
    const n = r.dateTimeObject;
    r.discontinuity && t && n && (this.timelineToDatetimeMappings[r.timeline] = -(n.getTime() / 1e3));
  }
  timestampOffsetForTimeline(e) {
    return typeof this.timelines[e] > "u" ? null : this.timelines[e].time;
  }
  mappingForTimeline(e) {
    return typeof this.timelines[e] > "u" ? null : this.timelines[e].mapping;
  }
  /**
   * Use the "media time" for a segment to generate a mapping to "display time" and
   * save that display time to the segment.
   *
   * @private
   * @param {SegmentInfo} segmentInfo
   *        The current active request information
   * @param {Object} timingInfo
   *        The start and end time of the current segment in "media time"
   * @param {boolean} shouldSaveTimelineMapping
   *        If there's a timeline change, determines if the timeline mapping should be
   *        saved in timelines.
   * @return {boolean}
   *          Returns false if segment time mapping could not be calculated
   */
  calculateSegmentTimeMapping_(e, t, s) {
    const r = e.segment, n = e.part;
    let a = this.timelines[e.timeline], l, u;
    if (typeof e.timestampOffset == "number")
      a = {
        time: e.startOfSegment,
        mapping: e.startOfSegment - t.start
      }, s && (this.timelines[e.timeline] = a, this.trigger("timestampoffset"), this.logger_(`time mapping for timeline ${e.timeline}: [time: ${a.time}] [mapping: ${a.mapping}]`)), l = e.startOfSegment, u = t.end + a.mapping;
    else if (a)
      l = t.start + a.mapping, u = t.end + a.mapping;
    else
      return !1;
    return n && (n.start = l, n.end = u), (!r.start || l < r.start) && (r.start = l), r.end = u, !0;
  }
  /**
   * Each time we have discontinuity in the playlist, attempt to calculate the location
   * in display of the start of the discontinuity and save that. We also save an accuracy
   * value so that we save values with the most accuracy (closest to 0.)
   *
   * @private
   * @param {SegmentInfo} segmentInfo - The current active request information
   */
  saveDiscontinuitySyncInfo_(e) {
    const t = e.playlist, s = e.segment;
    if (s.discontinuity)
      this.discontinuities[s.timeline] = {
        time: s.start,
        accuracy: 0
      };
    else if (t.discontinuityStarts && t.discontinuityStarts.length)
      for (let r = 0; r < t.discontinuityStarts.length; r++) {
        const n = t.discontinuityStarts[r], a = t.discontinuitySequence + r + 1, l = n - e.mediaIndex, u = Math.abs(l);
        if (!this.discontinuities[a] || this.discontinuities[a].accuracy > u) {
          let f;
          l < 0 ? f = s.start - Bs({
            defaultDuration: t.targetDuration,
            durationList: t.segments,
            startIndex: e.mediaIndex,
            endIndex: n
          }) : f = s.end + Bs({
            defaultDuration: t.targetDuration,
            durationList: t.segments,
            startIndex: e.mediaIndex + 1,
            endIndex: n
          }), this.discontinuities[a] = {
            time: f,
            accuracy: u
          };
        }
      }
  }
  dispose() {
    this.trigger("dispose"), this.off();
  }
}
class iT extends L.EventTarget {
  constructor() {
    super(), this.pendingTimelineChanges_ = {}, this.lastTimelineChanges_ = {};
  }
  clearPendingTimelineChange(e) {
    this.pendingTimelineChanges_[e] = null, this.trigger("pendingtimelinechange");
  }
  pendingTimelineChange({
    type: e,
    from: t,
    to: s
  }) {
    return typeof t == "number" && typeof s == "number" && (this.pendingTimelineChanges_[e] = {
      type: e,
      from: t,
      to: s
    }, this.trigger("pendingtimelinechange")), this.pendingTimelineChanges_[e];
  }
  lastTimelineChange({
    type: e,
    from: t,
    to: s
  }) {
    return typeof t == "number" && typeof s == "number" && (this.lastTimelineChanges_[e] = {
      type: e,
      from: t,
      to: s
    }, delete this.pendingTimelineChanges_[e], this.trigger("timelinechange")), this.lastTimelineChanges_[e];
  }
  dispose() {
    this.trigger("dispose"), this.pendingTimelineChanges_ = {}, this.lastTimelineChanges_ = {}, this.off();
  }
}
const sT = If(Pf(function() {
  var i = /* @__PURE__ */ function() {
    function A() {
      this.listeners = {};
    }
    var w = A.prototype;
    return w.on = function(D, R) {
      this.listeners[D] || (this.listeners[D] = []), this.listeners[D].push(R);
    }, w.off = function(D, R) {
      if (!this.listeners[D])
        return !1;
      var j = this.listeners[D].indexOf(R);
      return this.listeners[D] = this.listeners[D].slice(0), this.listeners[D].splice(j, 1), j > -1;
    }, w.trigger = function(D) {
      var R = this.listeners[D];
      if (R)
        if (arguments.length === 2)
          for (var j = R.length, P = 0; P < j; ++P)
            R[P].call(this, arguments[1]);
        else
          for (var F = Array.prototype.slice.call(arguments, 1), $ = R.length, Q = 0; Q < $; ++Q)
            R[Q].apply(this, F);
    }, w.dispose = function() {
      this.listeners = {};
    }, w.pipe = function(D) {
      this.on("data", function(R) {
        D.push(R);
      });
    }, A;
  }();
  /*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */
  function e(A) {
    return A.subarray(0, A.byteLength - A[A.byteLength - 1]);
  }
  /*! @name aes-decrypter @version 4.0.1 @license Apache-2.0 */
  const t = function() {
    const A = [[[], [], [], [], []], [[], [], [], [], []]], w = A[0], k = A[1], D = w[4], R = k[4];
    let j, P, F;
    const $ = [], Q = [];
    let K, oe, Z, ce, V, ee;
    for (j = 0; j < 256; j++)
      Q[($[j] = j << 1 ^ (j >> 7) * 283) ^ j] = j;
    for (P = F = 0; !D[P]; P ^= K || 1, F = Q[F] || 1)
      for (ce = F ^ F << 1 ^ F << 2 ^ F << 3 ^ F << 4, ce = ce >> 8 ^ ce & 255 ^ 99, D[P] = ce, R[ce] = P, Z = $[oe = $[K = $[P]]], ee = Z * 16843009 ^ oe * 65537 ^ K * 257 ^ P * 16843008, V = $[ce] * 257 ^ ce * 16843008, j = 0; j < 4; j++)
        w[j][P] = V = V << 24 ^ V >>> 8, k[j][ce] = ee = ee << 24 ^ ee >>> 8;
    for (j = 0; j < 5; j++)
      w[j] = w[j].slice(0), k[j] = k[j].slice(0);
    return A;
  };
  let s = null;
  class r {
    constructor(w) {
      s || (s = t()), this._tables = [[s[0][0].slice(), s[0][1].slice(), s[0][2].slice(), s[0][3].slice(), s[0][4].slice()], [s[1][0].slice(), s[1][1].slice(), s[1][2].slice(), s[1][3].slice(), s[1][4].slice()]];
      let k, D, R;
      const j = this._tables[0][4], P = this._tables[1], F = w.length;
      let $ = 1;
      if (F !== 4 && F !== 6 && F !== 8)
        throw new Error("Invalid aes key size");
      const Q = w.slice(0), K = [];
      for (this._key = [Q, K], k = F; k < 4 * F + 28; k++)
        R = Q[k - 1], (k % F === 0 || F === 8 && k % F === 4) && (R = j[R >>> 24] << 24 ^ j[R >> 16 & 255] << 16 ^ j[R >> 8 & 255] << 8 ^ j[R & 255], k % F === 0 && (R = R << 8 ^ R >>> 24 ^ $ << 24, $ = $ << 1 ^ ($ >> 7) * 283)), Q[k] = Q[k - F] ^ R;
      for (D = 0; k; D++, k--)
        R = Q[D & 3 ? k : k - 4], k <= 4 || D < 4 ? K[D] = R : K[D] = P[0][j[R >>> 24]] ^ P[1][j[R >> 16 & 255]] ^ P[2][j[R >> 8 & 255]] ^ P[3][j[R & 255]];
    }
    /**
     * Decrypt 16 bytes, specified as four 32-bit words.
     *
     * @param {number} encrypted0 the first word to decrypt
     * @param {number} encrypted1 the second word to decrypt
     * @param {number} encrypted2 the third word to decrypt
     * @param {number} encrypted3 the fourth word to decrypt
     * @param {Int32Array} out the array to write the decrypted words
     * into
     * @param {number} offset the offset into the output array to start
     * writing results
     * @return {Array} The plaintext.
     */
    decrypt(w, k, D, R, j, P) {
      const F = this._key[1];
      let $ = w ^ F[0], Q = R ^ F[1], K = D ^ F[2], oe = k ^ F[3], Z, ce, V;
      const ee = F.length / 4 - 2;
      let We, te = 4;
      const _e = this._tables[1], kt = _e[0], ti = _e[1], ii = _e[2], si = _e[3], ri = _e[4];
      for (We = 0; We < ee; We++)
        Z = kt[$ >>> 24] ^ ti[Q >> 16 & 255] ^ ii[K >> 8 & 255] ^ si[oe & 255] ^ F[te], ce = kt[Q >>> 24] ^ ti[K >> 16 & 255] ^ ii[oe >> 8 & 255] ^ si[$ & 255] ^ F[te + 1], V = kt[K >>> 24] ^ ti[oe >> 16 & 255] ^ ii[$ >> 8 & 255] ^ si[Q & 255] ^ F[te + 2], oe = kt[oe >>> 24] ^ ti[$ >> 16 & 255] ^ ii[Q >> 8 & 255] ^ si[K & 255] ^ F[te + 3], te += 4, $ = Z, Q = ce, K = V;
      for (We = 0; We < 4; We++)
        j[(3 & -We) + P] = ri[$ >>> 24] << 24 ^ ri[Q >> 16 & 255] << 16 ^ ri[K >> 8 & 255] << 8 ^ ri[oe & 255] ^ F[te++], Z = $, $ = Q, Q = K, K = oe, oe = Z;
    }
  }
  class n extends i {
    constructor() {
      super(i), this.jobs = [], this.delay = 1, this.timeout_ = null;
    }
    /**
     * process an async job
     *
     * @private
     */
    processJob_() {
      this.jobs.shift()(), this.jobs.length ? this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay) : this.timeout_ = null;
    }
    /**
     * push a job into the stream
     *
     * @param {Function} job the job to push into the stream
     */
    push(w) {
      this.jobs.push(w), this.timeout_ || (this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay));
    }
  }
  const a = function(A) {
    return A << 24 | (A & 65280) << 8 | (A & 16711680) >> 8 | A >>> 24;
  }, l = function(A, w, k) {
    const D = new Int32Array(A.buffer, A.byteOffset, A.byteLength >> 2), R = new r(Array.prototype.slice.call(w)), j = new Uint8Array(A.byteLength), P = new Int32Array(j.buffer);
    let F, $, Q, K, oe, Z, ce, V, ee;
    for (F = k[0], $ = k[1], Q = k[2], K = k[3], ee = 0; ee < D.length; ee += 4)
      oe = a(D[ee]), Z = a(D[ee + 1]), ce = a(D[ee + 2]), V = a(D[ee + 3]), R.decrypt(oe, Z, ce, V, P, ee), P[ee] = a(P[ee] ^ F), P[ee + 1] = a(P[ee + 1] ^ $), P[ee + 2] = a(P[ee + 2] ^ Q), P[ee + 3] = a(P[ee + 3] ^ K), F = oe, $ = Z, Q = ce, K = V;
    return j;
  };
  class u {
    constructor(w, k, D, R) {
      const j = u.STEP, P = new Int32Array(w.buffer), F = new Uint8Array(w.byteLength);
      let $ = 0;
      for (this.asyncStream_ = new n(), this.asyncStream_.push(this.decryptChunk_(P.subarray($, $ + j), k, D, F)), $ = j; $ < P.length; $ += j)
        D = new Uint32Array([a(P[$ - 4]), a(P[$ - 3]), a(P[$ - 2]), a(P[$ - 1])]), this.asyncStream_.push(this.decryptChunk_(P.subarray($, $ + j), k, D, F));
      this.asyncStream_.push(function() {
        R(null, e(F));
      });
    }
    /**
     * a getter for step the maximum number of bytes to process at one time
     *
     * @return {number} the value of step 32000
     */
    static get STEP() {
      return 32e3;
    }
    /**
     * @private
     */
    decryptChunk_(w, k, D, R) {
      return function() {
        const j = l(w, k, D);
        R.set(j, w.byteOffset);
      };
    }
  }
  var f = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {}, m;
  typeof window < "u" ? m = window : typeof f < "u" ? m = f : typeof self < "u" ? m = self : m = {};
  var v = m, b = function(w) {
    return ArrayBuffer.isView === "function" ? ArrayBuffer.isView(w) : w && w.buffer instanceof ArrayBuffer;
  }, S = v.BigInt || Number;
  S("0x1"), S("0x100"), S("0x10000"), S("0x1000000"), S("0x100000000"), S("0x10000000000"), S("0x1000000000000"), S("0x100000000000000"), S("0x10000000000000000"), function() {
    var A = new Uint16Array([65484]), w = new Uint8Array(A.buffer, A.byteOffset, A.byteLength);
    return w[0] === 255 ? "big" : w[0] === 204 ? "little" : "unknown";
  }();
  const y = function(A) {
    const w = {};
    return Object.keys(A).forEach((k) => {
      const D = A[k];
      b(D) ? w[k] = {
        bytes: D.buffer,
        byteOffset: D.byteOffset,
        byteLength: D.byteLength
      } : w[k] = D;
    }), w;
  };
  self.onmessage = function(A) {
    const w = A.data, k = new Uint8Array(w.encrypted.bytes, w.encrypted.byteOffset, w.encrypted.byteLength), D = new Uint32Array(w.key.bytes, w.key.byteOffset, w.key.byteLength / 4), R = new Uint32Array(w.iv.bytes, w.iv.byteOffset, w.iv.byteLength / 4);
    new u(k, D, R, function(j, P) {
      self.postMessage(y({
        source: w.source,
        decrypted: P
      }), [P.buffer]);
    });
  };
}));
var rT = kf(sT);
const nT = (i) => {
  let e = i.default ? "main" : "alternative";
  return i.characteristics && i.characteristics.indexOf("public.accessibility.describes-video") >= 0 && (e = "main-desc"), e;
}, Gf = (i, e) => {
  i.abort(), i.pause(), e && e.activePlaylistLoader && (e.activePlaylistLoader.pause(), e.activePlaylistLoader = null);
}, co = (i, e) => {
  e.activePlaylistLoader = i, i.load();
}, aT = (i, e) => () => {
  const {
    segmentLoaders: {
      [i]: t,
      main: s
    },
    mediaTypes: {
      [i]: r
    }
  } = e, n = r.activeTrack(), a = r.getActiveGroup(), l = r.activePlaylistLoader, u = r.lastGroup_;
  if (!(a && u && a.id === u.id) && (r.lastGroup_ = a, r.lastTrack_ = n, Gf(t, r), !(!a || a.isMainPlaylist))) {
    if (!a.playlistLoader) {
      l && s.resetEverything();
      return;
    }
    t.resyncLoader(), co(a.playlistLoader, r);
  }
}, oT = (i, e) => () => {
  const {
    segmentLoaders: {
      [i]: t
    },
    mediaTypes: {
      [i]: s
    }
  } = e;
  s.lastGroup_ = null, t.abort(), t.pause();
}, lT = (i, e) => () => {
  const {
    mainPlaylistLoader: t,
    segmentLoaders: {
      [i]: s,
      main: r
    },
    mediaTypes: {
      [i]: n
    }
  } = e, a = n.activeTrack(), l = n.getActiveGroup(), u = n.activePlaylistLoader, f = n.lastTrack_;
  if (!(f && a && f.id === a.id) && (n.lastGroup_ = l, n.lastTrack_ = a, Gf(s, n), !!l)) {
    if (l.isMainPlaylist) {
      if (!a || !f || a.id === f.id)
        return;
      const m = e.vhs.playlistController_, v = m.selectPlaylist();
      if (m.media() === v)
        return;
      n.logger_(`track change. Switching main audio from ${f.id} to ${a.id}`), t.pause(), r.resetEverything(), m.fastQualityChange_(v);
      return;
    }
    if (i === "AUDIO") {
      if (!l.playlistLoader) {
        r.setAudio(!0), r.resetEverything();
        return;
      }
      s.setAudio(!0), r.setAudio(!1);
    }
    if (u === l.playlistLoader) {
      co(l.playlistLoader, n);
      return;
    }
    s.track && s.track(a), s.resetEverything(), co(l.playlistLoader, n);
  }
}, hn = {
  /**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning (or error if the playlist is excluded) to
   *         console and switches back to default audio track.
   * @function onError.AUDIO
   */
  AUDIO: (i, e) => () => {
    const {
      mediaTypes: {
        [i]: t
      },
      excludePlaylist: s
    } = e, r = t.activeTrack(), n = t.activeGroup(), a = (n.filter((u) => u.default)[0] || n[0]).id, l = t.tracks[a];
    if (r === l) {
      s({
        error: {
          message: "Problem encountered loading the default audio track."
        }
      });
      return;
    }
    L.log.warn("Problem encountered loading the alternate audio track.Switching back to default.");
    for (const u in t.tracks)
      t.tracks[u].enabled = t.tracks[u] === l;
    t.onTrackChanged();
  },
  /**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning to console and disables the active subtitle track
   * @function onError.SUBTITLES
   */
  SUBTITLES: (i, e) => () => {
    const {
      mediaTypes: {
        [i]: t
      }
    } = e;
    L.log.warn("Problem encountered loading the subtitle track.Disabling subtitle track.");
    const s = t.activeTrack();
    s && (s.mode = "disabled"), t.onTrackChanged();
  }
}, jc = {
  /**
   * Setup event listeners for audio playlist loader
   *
   * @param {string} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.AUDIO
   */
  AUDIO: (i, e, t) => {
    if (!e)
      return;
    const {
      tech: s,
      requestOptions: r,
      segmentLoaders: {
        [i]: n
      }
    } = t;
    e.on("loadedmetadata", () => {
      const a = e.media();
      n.playlist(a, r), (!s.paused() || a.endList && s.preload() !== "none") && n.load();
    }), e.on("loadedplaylist", () => {
      n.playlist(e.media(), r), s.paused() || n.load();
    }), e.on("error", hn[i](i, t));
  },
  /**
   * Setup event listeners for subtitle playlist loader
   *
   * @param {string} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.SUBTITLES
   */
  SUBTITLES: (i, e, t) => {
    const {
      tech: s,
      requestOptions: r,
      segmentLoaders: {
        [i]: n
      },
      mediaTypes: {
        [i]: a
      }
    } = t;
    e.on("loadedmetadata", () => {
      const l = e.media();
      n.playlist(l, r), n.track(a.activeTrack()), (!s.paused() || l.endList && s.preload() !== "none") && n.load();
    }), e.on("loadedplaylist", () => {
      n.playlist(e.media(), r), s.paused() || n.load();
    }), e.on("error", hn[i](i, t));
  }
}, uT = {
  /**
   * Setup PlaylistLoaders and AudioTracks for the audio groups
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.AUDIO
   */
  AUDIO: (i, e) => {
    const {
      vhs: t,
      sourceType: s,
      segmentLoaders: {
        [i]: r
      },
      requestOptions: n,
      main: {
        mediaGroups: a
      },
      mediaTypes: {
        [i]: {
          groups: l,
          tracks: u,
          logger_: f
        }
      },
      mainPlaylistLoader: m
    } = e, v = rr(m.main);
    (!a[i] || Object.keys(a[i]).length === 0) && (a[i] = {
      main: {
        default: {
          default: !0
        }
      }
    }, v && (a[i].main.default.playlists = m.main.playlists));
    for (const b in a[i]) {
      l[b] || (l[b] = []);
      for (const S in a[i][b]) {
        let y = a[i][b][S], A;
        if (v ? (f(`AUDIO group '${b}' label '${S}' is a main playlist`), y.isMainPlaylist = !0, A = null) : s === "vhs-json" && y.playlists ? A = new ji(y.playlists[0], t, n) : y.resolvedUri ? A = new ji(y.resolvedUri, t, n) : y.playlists && s === "dash" ? A = new ao(y.playlists[0], t, n, m) : A = null, y = ie({
          id: S,
          playlistLoader: A
        }, y), jc[i](i, y.playlistLoader, e), l[b].push(y), typeof u[S] > "u") {
          const w = new L.AudioTrack({
            id: S,
            kind: nT(y),
            enabled: !1,
            language: y.language,
            default: y.default,
            label: S
          });
          u[S] = w;
        }
      }
    }
    r.on("error", hn[i](i, e));
  },
  /**
   * Setup PlaylistLoaders and TextTracks for the subtitle groups
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.SUBTITLES
   */
  SUBTITLES: (i, e) => {
    const {
      tech: t,
      vhs: s,
      sourceType: r,
      segmentLoaders: {
        [i]: n
      },
      requestOptions: a,
      main: {
        mediaGroups: l
      },
      mediaTypes: {
        [i]: {
          groups: u,
          tracks: f
        }
      },
      mainPlaylistLoader: m
    } = e;
    for (const v in l[i]) {
      u[v] || (u[v] = []);
      for (const b in l[i][v]) {
        if (!s.options_.useForcedSubtitles && l[i][v][b].forced)
          continue;
        let S = l[i][v][b], y;
        if (r === "hls")
          y = new ji(S.resolvedUri, s, a);
        else if (r === "dash") {
          if (!S.playlists.filter((w) => w.excludeUntil !== 1 / 0).length)
            return;
          y = new ao(S.playlists[0], s, a, m);
        } else
          r === "vhs-json" && (y = new ji(
            // if the vhs-json object included the media playlist, use the media playlist
            // as provided, otherwise use the resolved URI to load the playlist
            S.playlists ? S.playlists[0] : S.resolvedUri,
            s,
            a
          ));
        if (S = ie({
          id: b,
          playlistLoader: y
        }, S), jc[i](i, S.playlistLoader, e), u[v].push(S), typeof f[b] > "u") {
          const A = t.addRemoteTextTrack({
            id: b,
            kind: "subtitles",
            default: S.default && S.autoselect,
            language: S.language,
            label: b
          }, !1).track;
          f[b] = A;
        }
      }
    }
    n.on("error", hn[i](i, e));
  },
  /**
   * Setup TextTracks for the closed-caption groups
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize['CLOSED-CAPTIONS']
   */
  "CLOSED-CAPTIONS": (i, e) => {
    const {
      tech: t,
      main: {
        mediaGroups: s
      },
      mediaTypes: {
        [i]: {
          groups: r,
          tracks: n
        }
      }
    } = e;
    for (const a in s[i]) {
      r[a] || (r[a] = []);
      for (const l in s[i][a]) {
        const u = s[i][a][l];
        if (!/^(?:CC|SERVICE)/.test(u.instreamId))
          continue;
        const f = t.options_.vhs && t.options_.vhs.captionServices || {};
        let m = {
          label: l,
          language: u.language,
          instreamId: u.instreamId,
          default: u.default && u.autoselect
        };
        if (f[m.instreamId] && (m = ie(m, f[m.instreamId])), m.default === void 0 && delete m.default, r[a].push(ie({
          id: l
        }, u)), typeof n[l] > "u") {
          const v = t.addRemoteTextTrack({
            id: m.instreamId,
            kind: "captions",
            default: m.default,
            language: m.language,
            label: m.label
          }, !1).track;
          n[l] = v;
        }
      }
    }
  }
}, Wf = (i, e) => {
  for (let t = 0; t < i.length; t++)
    if (cl(e, i[t]) || i[t].playlists && Wf(i[t].playlists, e))
      return !0;
  return !1;
}, cT = (i, e) => (t) => {
  const {
    mainPlaylistLoader: s,
    mediaTypes: {
      [i]: {
        groups: r
      }
    }
  } = e, n = s.media();
  if (!n)
    return null;
  let a = null;
  n.attributes[i] && (a = r[n.attributes[i]]);
  const l = Object.keys(r);
  if (!a)
    if (i === "AUDIO" && l.length > 1 && rr(e.main))
      for (let u = 0; u < l.length; u++) {
        const f = r[l[u]];
        if (Wf(f, n)) {
          a = f;
          break;
        }
      }
    else
      r.main ? a = r.main : l.length === 1 && (a = r[l[0]]);
  return typeof t > "u" ? a : t === null || !a ? null : a.filter((u) => u.id === t.id)[0] || null;
}, dT = {
  /**
   * Returns a function used to get the active track of type provided
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.AUDIO
   */
  AUDIO: (i, e) => () => {
    const {
      mediaTypes: {
        [i]: {
          tracks: t
        }
      }
    } = e;
    for (const s in t)
      if (t[s].enabled)
        return t[s];
    return null;
  },
  /**
   * Returns a function used to get the active track of type provided
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.SUBTITLES
   */
  SUBTITLES: (i, e) => () => {
    const {
      mediaTypes: {
        [i]: {
          tracks: t
        }
      }
    } = e;
    for (const s in t)
      if (t[s].mode === "showing" || t[s].mode === "hidden")
        return t[s];
    return null;
  }
}, hT = (i, {
  mediaTypes: e
}) => () => {
  const t = e[i].activeTrack();
  return t ? e[i].activeGroup(t) : null;
}, fT = (i) => {
  ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach((f) => {
    uT[f](f, i);
  });
  const {
    mediaTypes: e,
    mainPlaylistLoader: t,
    tech: s,
    vhs: r,
    segmentLoaders: {
      ["AUDIO"]: n,
      main: a
    }
  } = i;
  ["AUDIO", "SUBTITLES"].forEach((f) => {
    e[f].activeGroup = cT(f, i), e[f].activeTrack = dT[f](f, i), e[f].onGroupChanged = aT(f, i), e[f].onGroupChanging = oT(f, i), e[f].onTrackChanged = lT(f, i), e[f].getActiveGroup = hT(f, i);
  });
  const l = e.AUDIO.activeGroup();
  if (l) {
    const f = (l.filter((v) => v.default)[0] || l[0]).id;
    e.AUDIO.tracks[f].enabled = !0, e.AUDIO.onGroupChanged(), e.AUDIO.onTrackChanged(), e.AUDIO.getActiveGroup().playlistLoader ? (a.setAudio(!1), n.setAudio(!0)) : a.setAudio(!0);
  }
  t.on("mediachange", () => {
    ["AUDIO", "SUBTITLES"].forEach((f) => e[f].onGroupChanged());
  }), t.on("mediachanging", () => {
    ["AUDIO", "SUBTITLES"].forEach((f) => e[f].onGroupChanging());
  });
  const u = () => {
    e.AUDIO.onTrackChanged(), s.trigger({
      type: "usage",
      name: "vhs-audio-change"
    });
  };
  s.audioTracks().addEventListener("change", u), s.remoteTextTracks().addEventListener("change", e.SUBTITLES.onTrackChanged), r.on("dispose", () => {
    s.audioTracks().removeEventListener("change", u), s.remoteTextTracks().removeEventListener("change", e.SUBTITLES.onTrackChanged);
  }), s.clearTracks("audio");
  for (const f in e.AUDIO.tracks)
    s.audioTracks().addTrack(e.AUDIO.tracks[f]);
}, pT = () => {
  const i = {};
  return ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach((e) => {
    i[e] = {
      groups: {},
      tracks: {},
      activePlaylistLoader: null,
      activeGroup: jt,
      activeTrack: jt,
      getActiveGroup: jt,
      onGroupChanged: jt,
      onTrackChanged: jt,
      lastTrack_: null,
      logger_: ot(`MediaGroups[${e}]`)
    };
  }), i;
};
class Rc {
  constructor() {
    this.priority_ = [], this.pathwayClones_ = /* @__PURE__ */ new Map();
  }
  set version(e) {
    e === 1 && (this.version_ = e);
  }
  set ttl(e) {
    this.ttl_ = e || 300;
  }
  set reloadUri(e) {
    e && (this.reloadUri_ = $e(this.reloadUri_, e));
  }
  set priority(e) {
    e && e.length && (this.priority_ = e);
  }
  set pathwayClones(e) {
    e && e.length && (this.pathwayClones_ = new Map(e.map((t) => [t.ID, t])));
  }
  get version() {
    return this.version_;
  }
  get ttl() {
    return this.ttl_;
  }
  get reloadUri() {
    return this.reloadUri_;
  }
  get priority() {
    return this.priority_;
  }
  get pathwayClones() {
    return this.pathwayClones_;
  }
}
class mT extends L.EventTarget {
  constructor(e, t) {
    super(), this.currentPathway = null, this.defaultPathway = null, this.queryBeforeStart = !1, this.availablePathways_ = /* @__PURE__ */ new Set(), this.steeringManifest = new Rc(), this.proxyServerUrl_ = null, this.manifestType_ = null, this.ttlTimeout_ = null, this.request_ = null, this.currentPathwayClones = /* @__PURE__ */ new Map(), this.nextPathwayClones = /* @__PURE__ */ new Map(), this.excludedSteeringManifestURLs = /* @__PURE__ */ new Set(), this.logger_ = ot("Content Steering"), this.xhr_ = e, this.getBandwidth_ = t;
  }
  /**
   * Assigns the content steering tag properties to the steering controller
   *
   * @param {string} baseUrl the baseURL from the main manifest for resolving the steering manifest url
   * @param {Object} steeringTag the content steering tag from the main manifest
   */
  assignTagProperties(e, t) {
    this.manifestType_ = t.serverUri ? "HLS" : "DASH";
    const s = t.serverUri || t.serverURL;
    if (!s) {
      this.logger_(`steering manifest URL is ${s}, cannot request steering manifest.`), this.trigger("error");
      return;
    }
    if (s.startsWith("data:")) {
      this.decodeDataUriManifest_(s.substring(s.indexOf(",") + 1));
      return;
    }
    this.steeringManifest.reloadUri = $e(e, s), this.defaultPathway = t.pathwayId || t.defaultServiceLocation, this.queryBeforeStart = t.queryBeforeStart, this.proxyServerUrl_ = t.proxyServerURL, this.defaultPathway && !this.queryBeforeStart && this.trigger("content-steering");
  }
  /**
   * Requests the content steering manifest and parse the response. This should only be called after
   * assignTagProperties was called with a content steering tag.
   *
   * @param {string} initialUri The optional uri to make the request with.
   *    If set, the request should be made with exactly what is passed in this variable.
   *    This scenario should only happen once on initalization.
   */
  requestSteeringManifest(e) {
    const t = this.steeringManifest.reloadUri;
    if (!t)
      return;
    const s = e ? t : this.getRequestURI(t);
    if (!s) {
      this.logger_("No valid content steering manifest URIs. Stopping content steering."), this.trigger("error"), this.dispose();
      return;
    }
    this.request_ = this.xhr_({
      uri: s,
      requestType: "content-steering-manifest"
    }, (r, n) => {
      if (r) {
        if (n.status === 410) {
          this.logger_(`manifest request 410 ${r}.`), this.logger_(`There will be no more content steering requests to ${s} this session.`), this.excludedSteeringManifestURLs.add(s);
          return;
        }
        if (n.status === 429) {
          const l = n.responseHeaders["retry-after"];
          this.logger_(`manifest request 429 ${r}.`), this.logger_(`content steering will retry in ${l} seconds.`), this.startTTLTimeout_(parseInt(l, 10));
          return;
        }
        this.logger_(`manifest failed to load ${r}.`), this.startTTLTimeout_();
        return;
      }
      const a = JSON.parse(this.request_.responseText);
      this.assignSteeringProperties_(a), this.startTTLTimeout_();
    });
  }
  /**
   * Set the proxy server URL and add the steering manifest url as a URI encoded parameter.
   *
   * @param {string} steeringUrl the steering manifest url
   * @return the steering manifest url to a proxy server with all parameters set
   */
  setProxyServerUrl_(e) {
    const t = new E.URL(e), s = new E.URL(this.proxyServerUrl_);
    return s.searchParams.set("url", encodeURI(t.toString())), this.setSteeringParams_(s.toString());
  }
  /**
   * Decodes and parses the data uri encoded steering manifest
   *
   * @param {string} dataUri the data uri to be decoded and parsed.
   */
  decodeDataUriManifest_(e) {
    const t = JSON.parse(E.atob(e));
    this.assignSteeringProperties_(t);
  }
  /**
   * Set the HLS or DASH content steering manifest request query parameters. For example:
   * _HLS_pathway="<CURRENT-PATHWAY-ID>" and _HLS_throughput=<THROUGHPUT>
   * _DASH_pathway and _DASH_throughput
   *
   * @param {string} uri to add content steering server parameters to.
   * @return a new uri as a string with the added steering query parameters.
   */
  setSteeringParams_(e) {
    const t = new E.URL(e), s = this.getPathway(), r = this.getBandwidth_();
    if (s) {
      const n = `_${this.manifestType_}_pathway`;
      t.searchParams.set(n, s);
    }
    if (r) {
      const n = `_${this.manifestType_}_throughput`;
      t.searchParams.set(n, r);
    }
    return t.toString();
  }
  /**
   * Assigns the current steering manifest properties and to the SteeringManifest object
   *
   * @param {Object} steeringJson the raw JSON steering manifest
   */
  assignSteeringProperties_(e) {
    if (this.steeringManifest.version = e.VERSION, !this.steeringManifest.version) {
      this.logger_(`manifest version is ${e.VERSION}, which is not supported.`), this.trigger("error");
      return;
    }
    this.steeringManifest.ttl = e.TTL, this.steeringManifest.reloadUri = e["RELOAD-URI"], this.steeringManifest.priority = e["PATHWAY-PRIORITY"] || e["SERVICE-LOCATION-PRIORITY"], this.steeringManifest.pathwayClones = e["PATHWAY-CLONES"], this.nextPathwayClones = this.steeringManifest.pathwayClones, this.availablePathways_.size || (this.logger_("There are no available pathways for content steering. Ending content steering."), this.trigger("error"), this.dispose());
    const s = ((r) => {
      for (const n of r)
        if (this.availablePathways_.has(n))
          return n;
      return [...this.availablePathways_][0];
    })(this.steeringManifest.priority);
    this.currentPathway !== s && (this.currentPathway = s, this.trigger("content-steering"));
  }
  /**
   * Returns the pathway to use for steering decisions
   *
   * @return {string} returns the current pathway or the default
   */
  getPathway() {
    return this.currentPathway || this.defaultPathway;
  }
  /**
   * Chooses the manifest request URI based on proxy URIs and server URLs.
   * Also accounts for exclusion on certain manifest URIs.
   *
   * @param {string} reloadUri the base uri before parameters
   *
   * @return {string} the final URI for the request to the manifest server.
   */
  getRequestURI(e) {
    if (!e)
      return null;
    const t = (r) => this.excludedSteeringManifestURLs.has(r);
    if (this.proxyServerUrl_) {
      const r = this.setProxyServerUrl_(e);
      if (!t(r))
        return r;
    }
    const s = this.setSteeringParams_(e);
    return t(s) ? null : s;
  }
  /**
   * Start the timeout for re-requesting the steering manifest at the TTL interval.
   *
   * @param {number} ttl time in seconds of the timeout. Defaults to the
   *        ttl interval in the steering manifest
   */
  startTTLTimeout_(e = this.steeringManifest.ttl) {
    const t = e * 1e3;
    this.ttlTimeout_ = E.setTimeout(() => {
      this.requestSteeringManifest();
    }, t);
  }
  /**
   * Clear the TTL timeout if necessary.
   */
  clearTTLTimeout_() {
    E.clearTimeout(this.ttlTimeout_), this.ttlTimeout_ = null;
  }
  /**
   * aborts any current steering xhr and sets the current request object to null
   */
  abort() {
    this.request_ && this.request_.abort(), this.request_ = null;
  }
  /**
   * aborts steering requests clears the ttl timeout and resets all properties.
   */
  dispose() {
    this.off("content-steering"), this.off("error"), this.abort(), this.clearTTLTimeout_(), this.currentPathway = null, this.defaultPathway = null, this.queryBeforeStart = null, this.proxyServerUrl_ = null, this.manifestType_ = null, this.ttlTimeout_ = null, this.request_ = null, this.excludedSteeringManifestURLs = /* @__PURE__ */ new Set(), this.availablePathways_ = /* @__PURE__ */ new Set(), this.steeringManifest = new Rc();
  }
  /**
   * adds a pathway to the available pathways set
   *
   * @param {string} pathway the pathway string to add
   */
  addAvailablePathway(e) {
    e && this.availablePathways_.add(e);
  }
  /**
   * Clears all pathways from the available pathways set
   */
  clearAvailablePathways() {
    this.availablePathways_.clear();
  }
  /**
   * Removes a pathway from the available pathways set.
   */
  excludePathway(e) {
    return this.availablePathways_.delete(e);
  }
  /**
   * Checks the refreshed DASH manifest content steering tag for changes.
   *
   * @param {string} baseURL new steering tag on DASH manifest refresh
   * @param {Object} newTag the new tag to check for changes
   * @return a true or false whether the new tag has different values
   */
  didDASHTagChange(e, t) {
    return !t && this.steeringManifest.reloadUri || t && ($e(e, t.serverURL) !== this.steeringManifest.reloadUri || t.defaultServiceLocation !== this.defaultPathway || t.queryBeforeStart !== this.queryBeforeStart || t.proxyServerURL !== this.proxyServerUrl_);
  }
  getAvailablePathways() {
    return this.availablePathways_;
  }
}
const gT = 10;
let Lt;
const vT = ["mediaRequests", "mediaRequestsAborted", "mediaRequestsTimedout", "mediaRequestsErrored", "mediaTransferDuration", "mediaBytesTransferred", "mediaAppends"], yT = function(i) {
  return this.audioSegmentLoader_[i] + this.mainSegmentLoader_[i];
}, _T = function({
  currentPlaylist: i,
  buffered: e,
  currentTime: t,
  nextPlaylist: s,
  bufferLowWaterLine: r,
  bufferHighWaterLine: n,
  duration: a,
  bufferBasedABR: l,
  log: u
}) {
  if (!s)
    return L.log.warn("We received no playlist to switch to. Please check your stream."), !1;
  const f = `allowing switch ${i && i.id || "null"} -> ${s.id}`;
  if (!i)
    return u(`${f} as current playlist is not set`), !0;
  if (s.id === i.id)
    return !1;
  const m = !!Oi(e, t).length;
  if (!i.endList)
    return !m && typeof i.partTargetDuration == "number" ? (u(`not ${f} as current playlist is live llhls, but currentTime isn't in buffered.`), !1) : (u(`${f} as current playlist is live`), !0);
  const v = ol(e, t), b = l ? Ce.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : Ce.MAX_BUFFER_LOW_WATER_LINE;
  if (a < b)
    return u(`${f} as duration < max low water line (${a} < ${b})`), !0;
  const S = s.attributes.BANDWIDTH, y = i.attributes.BANDWIDTH;
  if (S < y && (!l || v < n)) {
    let A = `${f} as next bandwidth < current bandwidth (${S} < ${y})`;
    return l && (A += ` and forwardBuffer < bufferHighWaterLine (${v} < ${n})`), u(A), !0;
  }
  if ((!l || S > y) && v >= r) {
    let A = `${f} as forwardBuffer >= bufferLowWaterLine (${v} >= ${r})`;
    return l && (A += ` and next bandwidth > current bandwidth (${S} > ${y})`), u(A), !0;
  }
  return u(`not ${f} as no switching criteria met`), !1;
};
class TT extends L.EventTarget {
  constructor(e) {
    super();
    const {
      src: t,
      withCredentials: s,
      tech: r,
      bandwidth: n,
      externVhs: a,
      useCueTags: l,
      playlistExclusionDuration: u,
      enableLowInitialPlaylist: f,
      sourceType: m,
      cacheEncryptionKeys: v,
      bufferBasedABR: b,
      leastPixelDiffSelector: S,
      captionServices: y
    } = e;
    if (!t)
      throw new Error("A non-empty playlist URL or JSON manifest string is required");
    let {
      maxPlaylistRetries: A
    } = e;
    (A === null || typeof A > "u") && (A = 1 / 0), Lt = a, this.bufferBasedABR = !!b, this.leastPixelDiffSelector = !!S, this.withCredentials = s, this.tech_ = r, this.vhs_ = r.vhs, this.sourceType_ = m, this.useCueTags_ = l, this.playlistExclusionDuration = u, this.maxPlaylistRetries = A, this.enableLowInitialPlaylist = f, this.useCueTags_ && (this.cueTagsTrack_ = this.tech_.addTextTrack("metadata", "ad-cues"), this.cueTagsTrack_.inBandMetadataTrackDispatchType = ""), this.requestOptions_ = {
      withCredentials: s,
      maxPlaylistRetries: A,
      timeout: null
    }, this.on("error", this.pauseLoading), this.mediaTypes_ = pT(), this.mediaSource = new E.MediaSource(), this.handleDurationChange_ = this.handleDurationChange_.bind(this), this.handleSourceOpen_ = this.handleSourceOpen_.bind(this), this.handleSourceEnded_ = this.handleSourceEnded_.bind(this), this.mediaSource.addEventListener("durationchange", this.handleDurationChange_), this.mediaSource.addEventListener("sourceopen", this.handleSourceOpen_), this.mediaSource.addEventListener("sourceended", this.handleSourceEnded_), this.seekable_ = Ie(), this.hasPlayed_ = !1, this.syncController_ = new tT(e), this.segmentMetadataTrack_ = r.addRemoteTextTrack({
      kind: "metadata",
      label: "segment-metadata"
    }, !1).track, this.decrypter_ = new rT(), this.sourceUpdater_ = new zf(this.mediaSource), this.inbandTextTracks_ = {}, this.timelineChangeController_ = new iT(), this.keyStatusMap_ = /* @__PURE__ */ new Map();
    const w = {
      vhs: this.vhs_,
      parse708captions: e.parse708captions,
      useDtsForTimestampOffset: e.useDtsForTimestampOffset,
      captionServices: y,
      mediaSource: this.mediaSource,
      currentTime: this.tech_.currentTime.bind(this.tech_),
      seekable: () => this.seekable(),
      seeking: () => this.tech_.seeking(),
      duration: () => this.duration(),
      hasPlayed: () => this.hasPlayed_,
      goalBufferLength: () => this.goalBufferLength(),
      bandwidth: n,
      syncController: this.syncController_,
      decrypter: this.decrypter_,
      sourceType: this.sourceType_,
      inbandTextTracks: this.inbandTextTracks_,
      cacheEncryptionKeys: v,
      sourceUpdater: this.sourceUpdater_,
      timelineChangeController: this.timelineChangeController_,
      exactManifestTimings: e.exactManifestTimings,
      addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)
    };
    this.mainPlaylistLoader_ = this.sourceType_ === "dash" ? new ao(t, this.vhs_, ie(this.requestOptions_, {
      addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)
    })) : new ji(t, this.vhs_, ie(this.requestOptions_, {
      addDateRangesToTextTrack: this.addDateRangesToTextTrack_.bind(this)
    })), this.setupMainPlaylistLoaderListeners_(), this.mainSegmentLoader_ = new lo(ie(w, {
      segmentMetadataTrack: this.segmentMetadataTrack_,
      loaderType: "main"
    }), e), this.audioSegmentLoader_ = new lo(ie(w, {
      loaderType: "audio"
    }), e), this.subtitleSegmentLoader_ = new Y1(ie(w, {
      loaderType: "vtt",
      featuresNativeTextTracks: this.tech_.featuresNativeTextTracks,
      loadVttJs: () => new Promise((R, j) => {
        function P() {
          r.off("vttjserror", F), R();
        }
        function F() {
          r.off("vttjsloaded", P), j();
        }
        r.one("vttjsloaded", P), r.one("vttjserror", F), r.addWebVttScript_();
      })
    }), e);
    const k = () => this.mainSegmentLoader_.bandwidth;
    this.contentSteeringController_ = new mT(this.vhs_.xhr, k), this.setupSegmentLoaderListeners_(), this.bufferBasedABR && (this.mainPlaylistLoader_.one("loadedplaylist", () => this.startABRTimer_()), this.tech_.on("pause", () => this.stopABRTimer_()), this.tech_.on("play", () => this.startABRTimer_())), vT.forEach((R) => {
      this[R + "_"] = yT.bind(this, R);
    }), this.logger_ = ot("pc"), this.triggeredFmp4Usage = !1, this.tech_.preload() === "none" ? (this.loadOnPlay_ = () => {
      this.loadOnPlay_ = null, this.mainPlaylistLoader_.load();
    }, this.tech_.one("play", this.loadOnPlay_)) : this.mainPlaylistLoader_.load(), this.timeToLoadedData__ = -1, this.mainAppendsToLoadedData__ = -1, this.audioAppendsToLoadedData__ = -1;
    const D = this.tech_.preload() === "none" ? "play" : "loadstart";
    this.tech_.one(D, () => {
      const R = Date.now();
      this.tech_.one("loadeddata", () => {
        this.timeToLoadedData__ = Date.now() - R, this.mainAppendsToLoadedData__ = this.mainSegmentLoader_.mediaAppends, this.audioAppendsToLoadedData__ = this.audioSegmentLoader_.mediaAppends;
      });
    });
  }
  mainAppendsToLoadedData_() {
    return this.mainAppendsToLoadedData__;
  }
  audioAppendsToLoadedData_() {
    return this.audioAppendsToLoadedData__;
  }
  appendsToLoadedData_() {
    const e = this.mainAppendsToLoadedData_(), t = this.audioAppendsToLoadedData_();
    return e === -1 || t === -1 ? -1 : e + t;
  }
  timeToLoadedData_() {
    return this.timeToLoadedData__;
  }
  /**
   * Run selectPlaylist and switch to the new playlist if we should
   *
   * @param {string} [reason=abr] a reason for why the ABR check is made
   * @private
   */
  checkABR_(e = "abr") {
    const t = this.selectPlaylist();
    t && this.shouldSwitchToMedia_(t) && this.switchMedia_(t, e);
  }
  switchMedia_(e, t, s) {
    const r = this.media(), n = r && (r.id || r.uri), a = e && (e.id || e.uri);
    n && n !== a && (this.logger_(`switch media ${n} -> ${a} from ${t}`), this.tech_.trigger({
      type: "usage",
      name: `vhs-rendition-change-${t}`
    })), this.mainPlaylistLoader_.media(e, s);
  }
  /**
   * A function that ensures we switch our playlists inside of `mediaTypes`
   * to match the current `serviceLocation` provided by the contentSteering controller.
   * We want to check media types of `AUDIO`, `SUBTITLES`, and `CLOSED-CAPTIONS`.
   *
   * This should only be called on a DASH playback scenario while using content steering.
   * This is necessary due to differences in how media in HLS manifests are generally tied to
   * a video playlist, where in DASH that is not always the case.
   */
  switchMediaForDASHContentSteering_() {
    ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach((e) => {
      const t = this.mediaTypes_[e], s = t ? t.activeGroup() : null, r = this.contentSteeringController_.getPathway();
      if (s && r) {
        const a = (s.length ? s[0].playlists : s.playlists).filter((l) => l.attributes.serviceLocation === r);
        a.length && this.mediaTypes_[e].activePlaylistLoader.media(a[0]);
      }
    });
  }
  /**
   * Start a timer that periodically calls checkABR_
   *
   * @private
   */
  startABRTimer_() {
    this.stopABRTimer_(), this.abrTimer_ = E.setInterval(() => this.checkABR_(), 250);
  }
  /**
   * Stop the timer that periodically calls checkABR_
   *
   * @private
   */
  stopABRTimer_() {
    this.tech_.scrubbing && this.tech_.scrubbing() || (E.clearInterval(this.abrTimer_), this.abrTimer_ = null);
  }
  /**
   * Get a list of playlists for the currently selected audio playlist
   *
   * @return {Array} the array of audio playlists
   */
  getAudioTrackPlaylists_() {
    const e = this.main(), t = e && e.playlists || [];
    if (!e || !e.mediaGroups || !e.mediaGroups.AUDIO)
      return t;
    const s = e.mediaGroups.AUDIO, r = Object.keys(s);
    let n;
    if (Object.keys(this.mediaTypes_.AUDIO.groups).length)
      n = this.mediaTypes_.AUDIO.activeTrack();
    else {
      const l = s.main || r.length && s[r[0]];
      for (const u in l)
        if (l[u].default) {
          n = {
            label: u
          };
          break;
        }
    }
    if (!n)
      return t;
    const a = [];
    for (const l in s)
      if (s[l][n.label]) {
        const u = s[l][n.label];
        if (u.playlists && u.playlists.length)
          a.push.apply(a, u.playlists);
        else if (u.uri)
          a.push(u);
        else if (e.playlists.length)
          for (let f = 0; f < e.playlists.length; f++) {
            const m = e.playlists[f];
            m.attributes && m.attributes.AUDIO && m.attributes.AUDIO === l && a.push(m);
          }
      }
    return a.length ? a : t;
  }
  /**
   * Register event handlers on the main playlist loader. A helper
   * function for construction time.
   *
   * @private
   */
  setupMainPlaylistLoaderListeners_() {
    this.mainPlaylistLoader_.on("loadedmetadata", () => {
      const e = this.mainPlaylistLoader_.media(), t = e.targetDuration * 1.5 * 1e3;
      to(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media()) ? this.requestOptions_.timeout = 0 : this.requestOptions_.timeout = t, e.endList && this.tech_.preload() !== "none" && (this.mainSegmentLoader_.playlist(e, this.requestOptions_), this.mainSegmentLoader_.load()), fT({
        sourceType: this.sourceType_,
        segmentLoaders: {
          AUDIO: this.audioSegmentLoader_,
          SUBTITLES: this.subtitleSegmentLoader_,
          main: this.mainSegmentLoader_
        },
        tech: this.tech_,
        requestOptions: this.requestOptions_,
        mainPlaylistLoader: this.mainPlaylistLoader_,
        vhs: this.vhs_,
        main: this.main(),
        mediaTypes: this.mediaTypes_,
        excludePlaylist: this.excludePlaylist.bind(this)
      }), this.triggerPresenceUsage_(this.main(), e), this.setupFirstPlay(), !this.mediaTypes_.AUDIO.activePlaylistLoader || this.mediaTypes_.AUDIO.activePlaylistLoader.media() ? this.trigger("selectedinitialmedia") : this.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", () => {
        this.trigger("selectedinitialmedia");
      });
    }), this.mainPlaylistLoader_.on("loadedplaylist", () => {
      this.loadOnPlay_ && this.tech_.off("play", this.loadOnPlay_);
      let e = this.mainPlaylistLoader_.media();
      if (!e) {
        this.attachContentSteeringListeners_(), this.initContentSteeringController_(), this.excludeUnsupportedVariants_();
        let t;
        if (this.enableLowInitialPlaylist && (t = this.selectInitialPlaylist()), t || (t = this.selectPlaylist()), !t || !this.shouldSwitchToMedia_(t) || (this.initialMedia_ = t, this.switchMedia_(this.initialMedia_, "initial"), !(this.sourceType_ === "vhs-json" && this.initialMedia_.segments)))
          return;
        e = this.initialMedia_;
      }
      this.handleUpdatedMediaPlaylist(e);
    }), this.mainPlaylistLoader_.on("error", () => {
      const e = this.mainPlaylistLoader_.error;
      this.excludePlaylist({
        playlistToExclude: e.playlist,
        error: e
      });
    }), this.mainPlaylistLoader_.on("mediachanging", () => {
      this.mainSegmentLoader_.abort(), this.mainSegmentLoader_.pause();
    }), this.mainPlaylistLoader_.on("mediachange", () => {
      const e = this.mainPlaylistLoader_.media(), t = e.targetDuration * 1.5 * 1e3;
      to(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media()) ? this.requestOptions_.timeout = 0 : this.requestOptions_.timeout = t, this.sourceType_ === "dash" && this.mainPlaylistLoader_.load(), this.mainSegmentLoader_.pause(), this.mainSegmentLoader_.playlist(e, this.requestOptions_), this.waitingForFastQualityPlaylistReceived_ ? this.runFastQualitySwitch_() : this.mainSegmentLoader_.load(), this.tech_.trigger({
        type: "mediachange",
        bubbles: !0
      });
    }), this.mainPlaylistLoader_.on("playlistunchanged", () => {
      const e = this.mainPlaylistLoader_.media();
      if (e.lastExcludeReason_ === "playlist-unchanged")
        return;
      this.stuckAtPlaylistEnd_(e) && (this.excludePlaylist({
        error: {
          message: "Playlist no longer updating.",
          reason: "playlist-unchanged"
        }
      }), this.tech_.trigger("playliststuck"));
    }), this.mainPlaylistLoader_.on("renditiondisabled", () => {
      this.tech_.trigger({
        type: "usage",
        name: "vhs-rendition-disabled"
      });
    }), this.mainPlaylistLoader_.on("renditionenabled", () => {
      this.tech_.trigger({
        type: "usage",
        name: "vhs-rendition-enabled"
      });
    });
  }
  /**
   * Given an updated media playlist (whether it was loaded for the first time, or
   * refreshed for live playlists), update any relevant properties and state to reflect
   * changes in the media that should be accounted for (e.g., cues and duration).
   *
   * @param {Object} updatedPlaylist the updated media playlist object
   *
   * @private
   */
  handleUpdatedMediaPlaylist(e) {
    this.useCueTags_ && this.updateAdCues_(e), this.mainSegmentLoader_.pause(), this.mainSegmentLoader_.playlist(e, this.requestOptions_), this.waitingForFastQualityPlaylistReceived_ && this.runFastQualitySwitch_(), this.updateDuration(!e.endList), this.tech_.paused() || (this.mainSegmentLoader_.load(), this.audioSegmentLoader_ && this.audioSegmentLoader_.load());
  }
  /**
   * A helper function for triggerring presence usage events once per source
   *
   * @private
   */
  triggerPresenceUsage_(e, t) {
    const s = e.mediaGroups || {};
    let r = !0;
    const n = Object.keys(s.AUDIO);
    for (const a in s.AUDIO)
      for (const l in s.AUDIO[a])
        s.AUDIO[a][l].uri || (r = !1);
    r && this.tech_.trigger({
      type: "usage",
      name: "vhs-demuxed"
    }), Object.keys(s.SUBTITLES).length && this.tech_.trigger({
      type: "usage",
      name: "vhs-webvtt"
    }), Lt.Playlist.isAes(t) && this.tech_.trigger({
      type: "usage",
      name: "vhs-aes"
    }), n.length && Object.keys(s.AUDIO[n[0]]).length > 1 && this.tech_.trigger({
      type: "usage",
      name: "vhs-alternate-audio"
    }), this.useCueTags_ && this.tech_.trigger({
      type: "usage",
      name: "vhs-playlist-cue-tags"
    });
  }
  shouldSwitchToMedia_(e) {
    const t = this.mainPlaylistLoader_.media() || this.mainPlaylistLoader_.pendingMedia_, s = this.tech_.currentTime(), r = this.bufferLowWaterLine(), n = this.bufferHighWaterLine(), a = this.tech_.buffered();
    return _T({
      buffered: a,
      currentTime: s,
      currentPlaylist: t,
      nextPlaylist: e,
      bufferLowWaterLine: r,
      bufferHighWaterLine: n,
      duration: this.duration(),
      bufferBasedABR: this.bufferBasedABR,
      log: this.logger_
    });
  }
  /**
   * Register event handlers on the segment loaders. A helper function
   * for construction time.
   *
   * @private
   */
  setupSegmentLoaderListeners_() {
    this.mainSegmentLoader_.on("bandwidthupdate", () => {
      this.checkABR_("bandwidthupdate"), this.tech_.trigger("bandwidthupdate");
    }), this.mainSegmentLoader_.on("timeout", () => {
      this.bufferBasedABR && this.mainSegmentLoader_.load();
    }), this.bufferBasedABR || this.mainSegmentLoader_.on("progress", () => {
      this.trigger("progress");
    }), this.mainSegmentLoader_.on("error", () => {
      const t = this.mainSegmentLoader_.error();
      this.excludePlaylist({
        playlistToExclude: t.playlist,
        error: t
      });
    }), this.mainSegmentLoader_.on("appenderror", () => {
      this.error = this.mainSegmentLoader_.error_, this.trigger("error");
    }), this.mainSegmentLoader_.on("syncinfoupdate", () => {
      this.onSyncInfoUpdate_();
    }), this.mainSegmentLoader_.on("timestampoffset", () => {
      this.tech_.trigger({
        type: "usage",
        name: "vhs-timestamp-offset"
      });
    }), this.audioSegmentLoader_.on("syncinfoupdate", () => {
      this.onSyncInfoUpdate_();
    }), this.audioSegmentLoader_.on("appenderror", () => {
      this.error = this.audioSegmentLoader_.error_, this.trigger("error");
    }), this.mainSegmentLoader_.on("ended", () => {
      this.logger_("main segment loader ended"), this.onEndOfStream();
    }), this.mainSegmentLoader_.on("earlyabort", (t) => {
      this.bufferBasedABR || (this.delegateLoaders_("all", ["abort"]), this.excludePlaylist({
        error: {
          message: "Aborted early because there isn't enough bandwidth to complete the request without rebuffering."
        },
        playlistExclusionDuration: gT
      }));
    });
    const e = () => {
      if (!this.sourceUpdater_.hasCreatedSourceBuffers())
        return this.tryToCreateSourceBuffers_();
      const t = this.getCodecsOrExclude_();
      t && this.sourceUpdater_.addOrChangeSourceBuffers(t);
    };
    this.mainSegmentLoader_.on("trackinfo", e), this.audioSegmentLoader_.on("trackinfo", e), this.mainSegmentLoader_.on("fmp4", () => {
      this.triggeredFmp4Usage || (this.tech_.trigger({
        type: "usage",
        name: "vhs-fmp4"
      }), this.triggeredFmp4Usage = !0);
    }), this.audioSegmentLoader_.on("fmp4", () => {
      this.triggeredFmp4Usage || (this.tech_.trigger({
        type: "usage",
        name: "vhs-fmp4"
      }), this.triggeredFmp4Usage = !0);
    }), this.audioSegmentLoader_.on("ended", () => {
      this.logger_("audioSegmentLoader ended"), this.onEndOfStream();
    });
  }
  mediaSecondsLoaded_() {
    return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
  }
  /**
   * Call load on our SegmentLoaders
   */
  load() {
    this.mainSegmentLoader_.load(), this.mediaTypes_.AUDIO.activePlaylistLoader && this.audioSegmentLoader_.load(), this.mediaTypes_.SUBTITLES.activePlaylistLoader && this.subtitleSegmentLoader_.load();
  }
  /**
   * Re-tune playback quality level for the current player
   * conditions. This method will perform destructive actions like removing
   * already buffered content in order to readjust the currently active
   * playlist quickly. This is good for manual quality changes
   *
   * @private
   */
  fastQualityChange_(e = this.selectPlaylist()) {
    if (e && e === this.mainPlaylistLoader_.media()) {
      this.logger_("skipping fastQualityChange because new media is same as old");
      return;
    }
    this.switchMedia_(e, "fast-quality"), this.waitingForFastQualityPlaylistReceived_ = !0;
  }
  runFastQualitySwitch_() {
    this.waitingForFastQualityPlaylistReceived_ = !1, this.mainSegmentLoader_.pause(), this.mainSegmentLoader_.resetEverything(() => {
      this.tech_.setCurrentTime(this.tech_.currentTime());
    });
  }
  /**
   * Begin playback.
   */
  play() {
    if (this.setupFirstPlay())
      return;
    this.tech_.ended() && this.tech_.setCurrentTime(0), this.hasPlayed_ && this.load();
    const e = this.tech_.seekable();
    if (this.tech_.duration() === 1 / 0 && this.tech_.currentTime() < e.start(0))
      return this.tech_.setCurrentTime(e.end(e.length - 1));
  }
  /**
   * Seek to the latest media position if this is a live video and the
   * player and video are loaded and initialized.
   */
  setupFirstPlay() {
    const e = this.mainPlaylistLoader_.media();
    if (!e || this.tech_.paused() || this.hasPlayed_)
      return !1;
    if (!e.endList || e.start) {
      const t = this.seekable();
      if (!t.length)
        return !1;
      const s = t.end(0);
      let r = s;
      if (e.start) {
        const n = e.start.timeOffset;
        n < 0 ? r = Math.max(s + n, t.start(0)) : r = Math.min(s, n);
      }
      this.trigger("firstplay"), this.tech_.setCurrentTime(r);
    }
    return this.hasPlayed_ = !0, this.load(), !0;
  }
  /**
   * handle the sourceopen event on the MediaSource
   *
   * @private
   */
  handleSourceOpen_() {
    if (this.tryToCreateSourceBuffers_(), this.tech_.autoplay()) {
      const e = this.tech_.play();
      typeof e < "u" && typeof e.then == "function" && e.then(null, (t) => {
      });
    }
    this.trigger("sourceopen");
  }
  /**
   * handle the sourceended event on the MediaSource
   *
   * @private
   */
  handleSourceEnded_() {
    if (!this.inbandTextTracks_.metadataTrack_)
      return;
    const e = this.inbandTextTracks_.metadataTrack_.cues;
    if (!e || !e.length)
      return;
    const t = this.duration();
    e[e.length - 1].endTime = isNaN(t) || Math.abs(t) === 1 / 0 ? Number.MAX_VALUE : t;
  }
  /**
   * handle the durationchange event on the MediaSource
   *
   * @private
   */
  handleDurationChange_() {
    this.tech_.trigger("durationchange");
  }
  /**
   * Calls endOfStream on the media source when all active stream types have called
   * endOfStream
   *
   * @param {string} streamType
   *        Stream type of the segment loader that called endOfStream
   * @private
   */
  onEndOfStream() {
    let e = this.mainSegmentLoader_.ended_;
    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
      const t = this.mainSegmentLoader_.getCurrentMediaInfo_();
      !t || t.hasVideo ? e = e && this.audioSegmentLoader_.ended_ : e = this.audioSegmentLoader_.ended_;
    }
    e && (this.stopABRTimer_(), this.sourceUpdater_.endOfStream());
  }
  /**
   * Check if a playlist has stopped being updated
   *
   * @param {Object} playlist the media playlist object
   * @return {boolean} whether the playlist has stopped being updated or not
   */
  stuckAtPlaylistEnd_(e) {
    if (!this.seekable().length)
      return !1;
    const s = this.syncController_.getExpiredTime(e, this.duration());
    if (s === null)
      return !1;
    const r = Lt.Playlist.playlistEnd(e, s), n = this.tech_.currentTime(), a = this.tech_.buffered();
    if (!a.length)
      return r - n <= _t;
    const l = a.end(a.length - 1);
    return l - n <= _t && r - l <= _t;
  }
  /**
   * Exclude a playlist for a set amount of time, making it unavailable for selection by
   * the rendition selection algorithm, then force a new playlist (rendition) selection.
   *
   * @param {Object=} playlistToExclude
   *                  the playlist to exclude, defaults to the currently selected playlist
   * @param {Object=} error
   *                  an optional error
   * @param {number=} playlistExclusionDuration
   *                  an optional number of seconds to exclude the playlist
   */
  excludePlaylist({
    playlistToExclude: e = this.mainPlaylistLoader_.media(),
    error: t = {},
    playlistExclusionDuration: s
  }) {
    if (e = e || this.mainPlaylistLoader_.media(), s = s || t.playlistExclusionDuration || this.playlistExclusionDuration, !e) {
      this.error = t, this.mediaSource.readyState !== "open" ? this.trigger("error") : this.sourceUpdater_.endOfStream("network");
      return;
    }
    e.playlistErrors_++;
    const r = this.mainPlaylistLoader_.main.playlists, n = r.filter(Bn), a = n.length === 1 && n[0] === e;
    if (r.length === 1 && s !== 1 / 0)
      return L.log.warn(`Problem encountered with playlist ${e.id}. Trying again since it is the only playlist.`), this.tech_.trigger("retryplaylist"), this.mainPlaylistLoader_.load(a);
    if (a) {
      if (this.main().contentSteering) {
        const y = this.pathwayAttribute_(e), A = this.contentSteeringController_.steeringManifest.ttl * 1e3;
        this.contentSteeringController_.excludePathway(y), this.excludeThenChangePathway_(), setTimeout(() => {
          this.contentSteeringController_.addAvailablePathway(y);
        }, A);
        return;
      }
      let S = !1;
      r.forEach((y) => {
        if (y === e)
          return;
        const A = y.excludeUntil;
        typeof A < "u" && A !== 1 / 0 && (S = !0, delete y.excludeUntil);
      }), S && (L.log.warn("Removing other playlists from the exclusion list because the last rendition is about to be excluded."), this.tech_.trigger("retryplaylist"));
    }
    let l;
    e.playlistErrors_ > this.maxPlaylistRetries ? l = 1 / 0 : l = Date.now() + s * 1e3, e.excludeUntil = l, t.reason && (e.lastExcludeReason_ = t.reason), this.tech_.trigger("excludeplaylist"), this.tech_.trigger({
      type: "usage",
      name: "vhs-rendition-excluded"
    });
    const u = this.selectPlaylist();
    if (!u) {
      this.error = "Playback cannot continue. No available working or supported playlists.", this.trigger("error");
      return;
    }
    const f = t.internal ? this.logger_ : L.log.warn, m = t.message ? " " + t.message : "";
    f(`${t.internal ? "Internal problem" : "Problem"} encountered with playlist ${e.id}.${m} Switching to playlist ${u.id}.`), u.attributes.AUDIO !== e.attributes.AUDIO && this.delegateLoaders_("audio", ["abort", "pause"]), u.attributes.SUBTITLES !== e.attributes.SUBTITLES && this.delegateLoaders_("subtitle", ["abort", "pause"]), this.delegateLoaders_("main", ["abort", "pause"]);
    const v = u.targetDuration / 2 * 1e3 || 5 * 1e3, b = typeof u.lastRequest == "number" && Date.now() - u.lastRequest <= v;
    return this.switchMedia_(u, "exclude", a || b);
  }
  /**
   * Pause all segment/playlist loaders
   */
  pauseLoading() {
    this.delegateLoaders_("all", ["abort", "pause"]), this.stopABRTimer_();
  }
  /**
   * Call a set of functions in order on playlist loaders, segment loaders,
   * or both types of loaders.
   *
   * @param {string} filter
   *        Filter loaders that should call fnNames using a string. Can be:
   *        * all - run on all loaders
   *        * audio - run on all audio loaders
   *        * subtitle - run on all subtitle loaders
   *        * main - run on the main loaders
   *
   * @param {Array|string} fnNames
   *        A string or array of function names to call.
   */
  delegateLoaders_(e, t) {
    const s = [], r = e === "all";
    (r || e === "main") && s.push(this.mainPlaylistLoader_);
    const n = [];
    (r || e === "audio") && n.push("AUDIO"), (r || e === "subtitle") && (n.push("CLOSED-CAPTIONS"), n.push("SUBTITLES")), n.forEach((a) => {
      const l = this.mediaTypes_[a] && this.mediaTypes_[a].activePlaylistLoader;
      l && s.push(l);
    }), ["main", "audio", "subtitle"].forEach((a) => {
      const l = this[`${a}SegmentLoader_`];
      l && (e === a || e === "all") && s.push(l);
    }), s.forEach((a) => t.forEach((l) => {
      typeof a[l] == "function" && a[l]();
    }));
  }
  /**
   * set the current time on all segment loaders
   *
   * @param {TimeRange} currentTime the current time to set
   * @return {TimeRange} the current time
   */
  setCurrentTime(e) {
    const t = Oi(this.tech_.buffered(), e);
    if (!(this.mainPlaylistLoader_ && this.mainPlaylistLoader_.media()) || !this.mainPlaylistLoader_.media().segments)
      return 0;
    if (t && t.length)
      return e;
    this.mainSegmentLoader_.pause(), this.mainSegmentLoader_.resetEverything(), this.mediaTypes_.AUDIO.activePlaylistLoader && (this.audioSegmentLoader_.pause(), this.audioSegmentLoader_.resetEverything()), this.mediaTypes_.SUBTITLES.activePlaylistLoader && (this.subtitleSegmentLoader_.pause(), this.subtitleSegmentLoader_.resetEverything()), this.load();
  }
  /**
   * get the current duration
   *
   * @return {TimeRange} the duration
   */
  duration() {
    if (!this.mainPlaylistLoader_)
      return 0;
    const e = this.mainPlaylistLoader_.media();
    return e ? e.endList ? this.mediaSource ? this.mediaSource.duration : Lt.Playlist.duration(e) : 1 / 0 : 0;
  }
  /**
   * check the seekable range
   *
   * @return {TimeRange} the seekable range
   */
  seekable() {
    return this.seekable_;
  }
  onSyncInfoUpdate_() {
    let e;
    if (!this.mainPlaylistLoader_)
      return;
    let t = this.mainPlaylistLoader_.media();
    if (!t)
      return;
    let s = this.syncController_.getExpiredTime(t, this.duration());
    if (s === null)
      return;
    const r = this.mainPlaylistLoader_.main, n = Lt.Playlist.seekable(t, s, Lt.Playlist.liveEdgeDelay(r, t));
    if (n.length === 0 || this.mediaTypes_.AUDIO.activePlaylistLoader && (t = this.mediaTypes_.AUDIO.activePlaylistLoader.media(), s = this.syncController_.getExpiredTime(t, this.duration()), s === null || (e = Lt.Playlist.seekable(t, s, Lt.Playlist.liveEdgeDelay(r, t)), e.length === 0)))
      return;
    let a, l;
    this.seekable_ && this.seekable_.length && (a = this.seekable_.end(0), l = this.seekable_.start(0)), e ? e.start(0) > n.end(0) || n.start(0) > e.end(0) ? this.seekable_ = n : this.seekable_ = Ie([[e.start(0) > n.start(0) ? e.start(0) : n.start(0), e.end(0) < n.end(0) ? e.end(0) : n.end(0)]]) : this.seekable_ = n, !(this.seekable_ && this.seekable_.length && this.seekable_.end(0) === a && this.seekable_.start(0) === l) && (this.logger_(`seekable updated [${af(this.seekable_)}]`), this.tech_.trigger("seekablechanged"));
  }
  /**
   * Update the player duration
   */
  updateDuration(e) {
    if (this.updateDuration_ && (this.mediaSource.removeEventListener("sourceopen", this.updateDuration_), this.updateDuration_ = null), this.mediaSource.readyState !== "open") {
      this.updateDuration_ = this.updateDuration.bind(this, e), this.mediaSource.addEventListener("sourceopen", this.updateDuration_);
      return;
    }
    if (e) {
      const r = this.seekable();
      if (!r.length)
        return;
      (isNaN(this.mediaSource.duration) || this.mediaSource.duration < r.end(r.length - 1)) && this.sourceUpdater_.setDuration(r.end(r.length - 1));
      return;
    }
    const t = this.tech_.buffered();
    let s = Lt.Playlist.duration(this.mainPlaylistLoader_.media());
    t.length > 0 && (s = Math.max(s, t.end(t.length - 1))), this.mediaSource.duration !== s && this.sourceUpdater_.setDuration(s);
  }
  /**
   * dispose of the PlaylistController and everything
   * that it controls
   */
  dispose() {
    this.trigger("dispose"), this.decrypter_.terminate(), this.mainPlaylistLoader_.dispose(), this.mainSegmentLoader_.dispose(), this.contentSteeringController_.dispose(), this.keyStatusMap_.clear(), this.loadOnPlay_ && this.tech_.off("play", this.loadOnPlay_), ["AUDIO", "SUBTITLES"].forEach((e) => {
      const t = this.mediaTypes_[e].groups;
      for (const s in t)
        t[s].forEach((r) => {
          r.playlistLoader && r.playlistLoader.dispose();
        });
    }), this.audioSegmentLoader_.dispose(), this.subtitleSegmentLoader_.dispose(), this.sourceUpdater_.dispose(), this.timelineChangeController_.dispose(), this.stopABRTimer_(), this.updateDuration_ && this.mediaSource.removeEventListener("sourceopen", this.updateDuration_), this.mediaSource.removeEventListener("durationchange", this.handleDurationChange_), this.mediaSource.removeEventListener("sourceopen", this.handleSourceOpen_), this.mediaSource.removeEventListener("sourceended", this.handleSourceEnded_), this.off();
  }
  /**
   * return the main playlist object if we have one
   *
   * @return {Object} the main playlist object that we parsed
   */
  main() {
    return this.mainPlaylistLoader_.main;
  }
  /**
   * return the currently selected playlist
   *
   * @return {Object} the currently selected playlist object that we parsed
   */
  media() {
    return this.mainPlaylistLoader_.media() || this.initialMedia_;
  }
  areMediaTypesKnown_() {
    const e = !!this.mediaTypes_.AUDIO.activePlaylistLoader, t = !!this.mainSegmentLoader_.getCurrentMediaInfo_(), s = e ? !!this.audioSegmentLoader_.getCurrentMediaInfo_() : !0;
    return !(!t || !s);
  }
  getCodecsOrExclude_() {
    const e = {
      main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},
      audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}
    }, t = this.mainSegmentLoader_.getPendingSegmentPlaylist() || this.media();
    e.video = e.main;
    const s = Us(this.main(), t), r = {}, n = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
    if (e.main.hasVideo && (r.video = s.video || e.main.videoCodec || $0), e.main.isMuxed && (r.video += `,${s.audio || e.main.audioCodec || _u}`), (e.main.hasAudio && !e.main.isMuxed || e.audio.hasAudio || n) && (r.audio = s.audio || e.main.audioCodec || e.audio.audioCodec || _u, e.audio.isFmp4 = e.main.hasAudio && !e.main.isMuxed ? e.main.isFmp4 : e.audio.isFmp4), !r.audio && !r.video) {
      this.excludePlaylist({
        playlistToExclude: t,
        error: {
          message: "Could not determine codecs for playlist."
        },
        playlistExclusionDuration: 1 / 0
      });
      return;
    }
    const a = (f, m) => f ? Fr(m) : fa(m), l = {};
    let u;
    if (["video", "audio"].forEach(function(f) {
      if (r.hasOwnProperty(f) && !a(e[f].isFmp4, r[f])) {
        const m = e[f].isFmp4 ? "browser" : "muxer";
        l[m] = l[m] || [], l[m].push(r[f]), f === "audio" && (u = m);
      }
    }), n && u && t.attributes.AUDIO) {
      const f = t.attributes.AUDIO;
      this.main().playlists.forEach((m) => {
        (m.attributes && m.attributes.AUDIO) === f && m !== t && (m.excludeUntil = 1 / 0);
      }), this.logger_(`excluding audio group ${f} as ${u} does not support codec(s): "${r.audio}"`);
    }
    if (Object.keys(l).length) {
      const f = Object.keys(l).reduce((m, v) => (m && (m += ", "), m += `${v} does not support codec(s): "${l[v].join(",")}"`, m), "") + ".";
      this.excludePlaylist({
        playlistToExclude: t,
        error: {
          internal: !0,
          message: f
        },
        playlistExclusionDuration: 1 / 0
      });
      return;
    }
    if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {
      const f = [];
      if (["video", "audio"].forEach((m) => {
        const v = (mt(this.sourceUpdater_.codecs[m] || "")[0] || {}).type, b = (mt(r[m] || "")[0] || {}).type;
        v && b && v.toLowerCase() !== b.toLowerCase() && f.push(`"${this.sourceUpdater_.codecs[m]}" -> "${r[m]}"`);
      }), f.length) {
        this.excludePlaylist({
          playlistToExclude: t,
          error: {
            message: `Codec switching not supported: ${f.join(", ")}.`,
            internal: !0
          },
          playlistExclusionDuration: 1 / 0
        });
        return;
      }
    }
    return r;
  }
  /**
   * Create source buffers and exlude any incompatible renditions.
   *
   * @private
   */
  tryToCreateSourceBuffers_() {
    if (this.mediaSource.readyState !== "open" || this.sourceUpdater_.hasCreatedSourceBuffers() || !this.areMediaTypesKnown_())
      return;
    const e = this.getCodecsOrExclude_();
    if (!e)
      return;
    this.sourceUpdater_.createSourceBuffers(e);
    const t = [e.video, e.audio].filter(Boolean).join(",");
    this.excludeIncompatibleVariants_(t);
  }
  /**
   * Excludes playlists with codecs that are unsupported by the muxer and browser.
   */
  excludeUnsupportedVariants_() {
    const e = this.main().playlists, t = [];
    Object.keys(e).forEach((s) => {
      const r = e[s];
      if (t.indexOf(r.id) !== -1)
        return;
      t.push(r.id);
      const n = Us(this.main, r), a = [];
      n.audio && !fa(n.audio) && !Fr(n.audio) && a.push(`audio codec ${n.audio}`), n.video && !fa(n.video) && !Fr(n.video) && a.push(`video codec ${n.video}`), n.text && n.text === "stpp.ttml.im1t" && a.push(`text codec ${n.text}`), a.length && (r.excludeUntil = 1 / 0, this.logger_(`excluding ${r.id} for unsupported: ${a.join(", ")}`));
    });
  }
  /**
   * Exclude playlists that are known to be codec or
   * stream-incompatible with the SourceBuffer configuration. For
   * instance, Media Source Extensions would cause the video element to
   * stall waiting for video data if you switched from a variant with
   * video and audio to an audio-only one.
   *
   * @param {Object} media a media playlist compatible with the current
   * set of SourceBuffers. Variants in the current main playlist that
   * do not appear to have compatible codec or stream configurations
   * will be excluded from the default playlist selection algorithm
   * indefinitely.
   * @private
   */
  excludeIncompatibleVariants_(e) {
    const t = [], s = this.main().playlists, r = cn(mt(e)), n = xc(r), a = r.video && mt(r.video)[0] || null, l = r.audio && mt(r.audio)[0] || null;
    Object.keys(s).forEach((u) => {
      const f = s[u];
      if (t.indexOf(f.id) !== -1 || f.excludeUntil === 1 / 0)
        return;
      t.push(f.id);
      const m = [], v = Us(this.mainPlaylistLoader_.main, f), b = xc(v);
      if (!(!v.audio && !v.video)) {
        if (b !== n && m.push(`codec count "${b}" !== "${n}"`), !this.sourceUpdater_.canChangeType()) {
          const S = v.video && mt(v.video)[0] || null, y = v.audio && mt(v.audio)[0] || null;
          S && a && S.type.toLowerCase() !== a.type.toLowerCase() && m.push(`video codec "${S.type}" !== "${a.type}"`), y && l && y.type.toLowerCase() !== l.type.toLowerCase() && m.push(`audio codec "${y.type}" !== "${l.type}"`);
        }
        m.length && (f.excludeUntil = 1 / 0, this.logger_(`excluding ${f.id}: ${m.join(" && ")}`));
      }
    });
  }
  updateAdCues_(e) {
    let t = 0;
    const s = this.seekable();
    s.length && (t = s.start(0)), J1(e, this.cueTagsTrack_, t);
  }
  /**
   * Calculates the desired forward buffer length based on current time
   *
   * @return {number} Desired forward buffer length in seconds
   */
  goalBufferLength() {
    const e = this.tech_.currentTime(), t = Ce.GOAL_BUFFER_LENGTH, s = Ce.GOAL_BUFFER_LENGTH_RATE, r = Math.max(t, Ce.MAX_GOAL_BUFFER_LENGTH);
    return Math.min(t + e * s, r);
  }
  /**
   * Calculates the desired buffer low water line based on current time
   *
   * @return {number} Desired buffer low water line in seconds
   */
  bufferLowWaterLine() {
    const e = this.tech_.currentTime(), t = Ce.BUFFER_LOW_WATER_LINE, s = Ce.BUFFER_LOW_WATER_LINE_RATE, r = Math.max(t, Ce.MAX_BUFFER_LOW_WATER_LINE), n = Math.max(t, Ce.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);
    return Math.min(t + e * s, this.bufferBasedABR ? n : r);
  }
  bufferHighWaterLine() {
    return Ce.BUFFER_HIGH_WATER_LINE;
  }
  addDateRangesToTextTrack_(e) {
    Cc(this.inbandTextTracks_, "com.apple.streaming", this.tech_), O1({
      inbandTextTracks: this.inbandTextTracks_,
      dateRanges: e
    });
  }
  addMetadataToTextTrack(e, t, s) {
    const r = this.sourceUpdater_.videoBuffer ? this.sourceUpdater_.videoTimestampOffset() : this.sourceUpdater_.audioTimestampOffset();
    Cc(this.inbandTextTracks_, e, this.tech_), I1({
      inbandTextTracks: this.inbandTextTracks_,
      metadataArray: t,
      timestampOffset: r,
      videoDuration: s
    });
  }
  /**
   * Utility for getting the pathway or service location from an HLS or DASH playlist.
   *
   * @param {Object} playlist for getting pathway from.
   * @return the pathway attribute of a playlist
   */
  pathwayAttribute_(e) {
    return e.attributes["PATHWAY-ID"] || e.attributes.serviceLocation;
  }
  /**
   * Initialize available pathways and apply the tag properties.
   */
  initContentSteeringController_() {
    const e = this.main();
    if (e.contentSteering) {
      for (const t of e.playlists)
        this.contentSteeringController_.addAvailablePathway(this.pathwayAttribute_(t));
      if (this.contentSteeringController_.assignTagProperties(e.uri, e.contentSteering), this.contentSteeringController_.queryBeforeStart) {
        this.contentSteeringController_.requestSteeringManifest(!0);
        return;
      }
      this.tech_.one("canplay", () => {
        this.contentSteeringController_.requestSteeringManifest();
      });
    }
  }
  /**
   * Reset the content steering controller and re-init.
   */
  resetContentSteeringController_() {
    this.contentSteeringController_.clearAvailablePathways(), this.contentSteeringController_.dispose(), this.initContentSteeringController_();
  }
  /**
   * Attaches the listeners for content steering.
   */
  attachContentSteeringListeners_() {
    this.contentSteeringController_.on("content-steering", this.excludeThenChangePathway_.bind(this)), this.sourceType_ === "dash" && this.mainPlaylistLoader_.on("loadedplaylist", () => {
      const e = this.main();
      (this.contentSteeringController_.didDASHTagChange(e.uri, e.contentSteering) || (() => {
        const r = this.contentSteeringController_.getAvailablePathways(), n = [];
        for (const a of e.playlists) {
          const l = a.attributes.serviceLocation;
          if (l && (n.push(l), !r.has(l)))
            return !0;
        }
        return !!(!n.length && r.size);
      })()) && this.resetContentSteeringController_();
    });
  }
  /**
   * Simple exclude and change playlist logic for content steering.
   */
  excludeThenChangePathway_() {
    const e = this.contentSteeringController_.getPathway();
    if (!e)
      return;
    this.handlePathwayClones_();
    const s = this.main().playlists, r = /* @__PURE__ */ new Set();
    let n = !1;
    Object.keys(s).forEach((a) => {
      const l = s[a], u = this.pathwayAttribute_(l), f = u && e !== u;
      l.excludeUntil === 1 / 0 && l.lastExcludeReason_ === "content-steering" && !f && (delete l.excludeUntil, delete l.lastExcludeReason_, n = !0);
      const v = !l.excludeUntil && l.excludeUntil !== 1 / 0;
      !r.has(l.id) && f && v && (r.add(l.id), l.excludeUntil = 1 / 0, l.lastExcludeReason_ = "content-steering", this.logger_(`excluding ${l.id} for ${l.lastExcludeReason_}`));
    }), this.contentSteeringController_.manifestType_ === "DASH" && Object.keys(this.mediaTypes_).forEach((a) => {
      const l = this.mediaTypes_[a];
      if (l.activePlaylistLoader) {
        const u = l.activePlaylistLoader.media_;
        u && u.attributes.serviceLocation !== e && (n = !0);
      }
    }), n && this.changeSegmentPathway_();
  }
  /**
   * Add, update, or delete playlists and media groups for
   * the pathway clones for HLS Content Steering.
   *
   * See https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/
   *
   * NOTE: Pathway cloning does not currently support the `PER_VARIANT_URIS` and
   * `PER_RENDITION_URIS` as we do not handle `STABLE-VARIANT-ID` or
   * `STABLE-RENDITION-ID` values.
   */
  handlePathwayClones_() {
    const t = this.main().playlists, s = this.contentSteeringController_.currentPathwayClones, r = this.contentSteeringController_.nextPathwayClones;
    if (s && s.size || r && r.size) {
      for (const [a, l] of s.entries())
        r.get(a) || (this.mainPlaylistLoader_.updateOrDeleteClone(l), this.contentSteeringController_.excludePathway(a));
      for (const [a, l] of r.entries()) {
        const u = s.get(a);
        if (!u) {
          t.filter((m) => m.attributes["PATHWAY-ID"] === l["BASE-ID"]).forEach((m) => {
            this.mainPlaylistLoader_.addClonePathway(l, m);
          }), this.contentSteeringController_.addAvailablePathway(a);
          continue;
        }
        this.equalPathwayClones_(u, l) || (this.mainPlaylistLoader_.updateOrDeleteClone(l, !0), this.contentSteeringController_.addAvailablePathway(a));
      }
      this.contentSteeringController_.currentPathwayClones = new Map(JSON.parse(JSON.stringify([...r])));
    }
  }
  /**
   * Determines whether two pathway clone objects are equivalent.
   *
   * @param {Object} a The first pathway clone object.
   * @param {Object} b The second pathway clone object.
   * @return {boolean} True if the pathway clone objects are equal, false otherwise.
   */
  equalPathwayClones_(e, t) {
    if (e["BASE-ID"] !== t["BASE-ID"] || e.ID !== t.ID || e["URI-REPLACEMENT"].HOST !== t["URI-REPLACEMENT"].HOST)
      return !1;
    const s = e["URI-REPLACEMENT"].PARAMS, r = t["URI-REPLACEMENT"].PARAMS;
    for (const n in s)
      if (s[n] !== r[n])
        return !1;
    for (const n in r)
      if (s[n] !== r[n])
        return !1;
    return !0;
  }
  /**
   * Changes the current playlists for audio, video and subtitles after a new pathway
   * is chosen from content steering.
   */
  changeSegmentPathway_() {
    const e = this.selectPlaylist();
    this.pauseLoading(), this.contentSteeringController_.manifestType_ === "DASH" && this.switchMediaForDASHContentSteering_(), this.switchMedia_(e, "content-steering");
  }
  /**
   * Iterates through playlists and check their keyId set and compare with the
   * keyStatusMap, only enable playlists that have a usable key. If the playlist
   * has no keyId leave it enabled by default.
   */
  excludeNonUsablePlaylistsByKeyId_() {
    if (!this.mainPlaylistLoader_ || !this.mainPlaylistLoader_.main)
      return;
    let e = 0;
    const t = "non-usable";
    this.mainPlaylistLoader_.main.playlists.forEach((s) => {
      const r = this.mainPlaylistLoader_.getKeyIdSet(s);
      !r || !r.size || r.forEach((n) => {
        const a = "usable", l = this.keyStatusMap_.has(n) && this.keyStatusMap_.get(n) === a, u = s.lastExcludeReason_ === t && s.excludeUntil === 1 / 0;
        l ? l && u && (delete s.excludeUntil, delete s.lastExcludeReason_, this.logger_(`enabling playlist ${s.id} because key ID ${n} is ${a}`)) : (s.excludeUntil !== 1 / 0 && s.lastExcludeReason_ !== t && (s.excludeUntil = 1 / 0, s.lastExcludeReason_ = t, this.logger_(`excluding playlist ${s.id} because the key ID ${n} doesn't exist in the keyStatusMap or is not ${a}`)), e++);
      });
    }), e >= this.mainPlaylistLoader_.main.playlists.length && this.mainPlaylistLoader_.main.playlists.forEach((s) => {
      const r = s && s.attributes && s.attributes.RESOLUTION && s.attributes.RESOLUTION.height < 720, n = s.excludeUntil === 1 / 0 && s.lastExcludeReason_ === t;
      r && n && (delete s.excludeUntil, L.log.warn(`enabling non-HD playlist ${s.id} because all playlists were excluded due to ${t} key IDs`));
    });
  }
  /**
   * Adds a keystatus to the keystatus map, tries to convert to string if necessary.
   *
   * @param {any} keyId the keyId to add a status for
   * @param {string} status the status of the keyId
   */
  addKeyStatus_(e, t) {
    const n = (typeof e == "string" ? e : X1(e)).slice(0, 32).toLowerCase();
    this.logger_(`KeyStatus '${t}' with key ID ${n} added to the keyStatusMap`), this.keyStatusMap_.set(n, t);
  }
  /**
   * Utility function for adding key status to the keyStatusMap and filtering usable encrypted playlists.
   *
   * @param {any} keyId the keyId from the keystatuschange event
   * @param {string} status the key status string
   */
  updatePlaylistByKeyStatus(e, t) {
    this.addKeyStatus_(e, t), this.waitingForFastQualityPlaylistReceived_ || this.excludeNonUsableThenChangePlaylist_(), this.mainPlaylistLoader_.off("loadedplaylist", this.excludeNonUsableThenChangePlaylist_.bind(this)), this.mainPlaylistLoader_.on("loadedplaylist", this.excludeNonUsableThenChangePlaylist_.bind(this));
  }
  excludeNonUsableThenChangePlaylist_() {
    this.excludeNonUsablePlaylistsByKeyId_(), this.fastQualityChange_();
  }
}
const bT = (i, e, t) => (s) => {
  const r = i.main.playlists[e], n = ul(r), a = Bn(r);
  return typeof s > "u" ? a : (s ? delete r.disabled : r.disabled = !0, s !== a && !n && (t(r), s ? i.trigger("renditionenabled") : i.trigger("renditiondisabled")), s);
};
class xT {
  constructor(e, t, s) {
    const {
      playlistController_: r
    } = e, n = r.fastQualityChange_.bind(r);
    if (t.attributes) {
      const a = t.attributes.RESOLUTION;
      this.width = a && a.width, this.height = a && a.height, this.bandwidth = t.attributes.BANDWIDTH, this.frameRate = t.attributes["FRAME-RATE"];
    }
    this.codecs = Us(r.main(), t), this.playlist = t, this.id = s, this.enabled = bT(e.playlists, t.id, n);
  }
}
const ST = function(i) {
  i.representations = () => {
    const e = i.playlistController_.main(), t = rr(e) ? i.playlistController_.getAudioTrackPlaylists_() : e.playlists;
    return t ? t.filter((s) => !ul(s)).map((s, r) => new xT(i, s, s.id)) : [];
  };
}, Nc = ["seeking", "seeked", "pause", "playing", "error"];
class ET {
  /**
   * Represents an PlaybackWatcher object.
   *
   * @class
   * @param {Object} options an object that includes the tech and settings
   */
  constructor(e) {
    this.playlistController_ = e.playlistController, this.tech_ = e.tech, this.seekable = e.seekable, this.allowSeeksWithinUnsafeLiveWindow = e.allowSeeksWithinUnsafeLiveWindow, this.liveRangeSafeTimeDelta = e.liveRangeSafeTimeDelta, this.media = e.media, this.consecutiveUpdates = 0, this.lastRecordedTime = null, this.checkCurrentTimeTimeout_ = null, this.logger_ = ot("PlaybackWatcher"), this.logger_("initialize");
    const t = () => this.monitorCurrentTime_(), s = () => this.monitorCurrentTime_(), r = () => this.techWaiting_(), n = () => this.resetTimeUpdate_(), a = this.playlistController_, l = ["main", "subtitle", "audio"], u = {};
    l.forEach((m) => {
      u[m] = {
        reset: () => this.resetSegmentDownloads_(m),
        updateend: () => this.checkSegmentDownloads_(m)
      }, a[`${m}SegmentLoader_`].on("appendsdone", u[m].updateend), a[`${m}SegmentLoader_`].on("playlistupdate", u[m].reset), this.tech_.on(["seeked", "seeking"], u[m].reset);
    });
    const f = (m) => {
      ["main", "audio"].forEach((v) => {
        a[`${v}SegmentLoader_`][m]("appended", this.seekingAppendCheck_);
      });
    };
    this.seekingAppendCheck_ = () => {
      this.fixesBadSeeks_() && (this.consecutiveUpdates = 0, this.lastRecordedTime = this.tech_.currentTime(), f("off"));
    }, this.clearSeekingAppendCheck_ = () => f("off"), this.watchForBadSeeking_ = () => {
      this.clearSeekingAppendCheck_(), f("on");
    }, this.tech_.on("seeked", this.clearSeekingAppendCheck_), this.tech_.on("seeking", this.watchForBadSeeking_), this.tech_.on("waiting", r), this.tech_.on(Nc, n), this.tech_.on("canplay", s), this.tech_.one("play", t), this.dispose = () => {
      this.clearSeekingAppendCheck_(), this.logger_("dispose"), this.tech_.off("waiting", r), this.tech_.off(Nc, n), this.tech_.off("canplay", s), this.tech_.off("play", t), this.tech_.off("seeking", this.watchForBadSeeking_), this.tech_.off("seeked", this.clearSeekingAppendCheck_), l.forEach((m) => {
        a[`${m}SegmentLoader_`].off("appendsdone", u[m].updateend), a[`${m}SegmentLoader_`].off("playlistupdate", u[m].reset), this.tech_.off(["seeked", "seeking"], u[m].reset);
      }), this.checkCurrentTimeTimeout_ && E.clearTimeout(this.checkCurrentTimeTimeout_), this.resetTimeUpdate_();
    };
  }
  /**
   * Periodically check current time to see if playback stopped
   *
   * @private
   */
  monitorCurrentTime_() {
    this.checkCurrentTime_(), this.checkCurrentTimeTimeout_ && E.clearTimeout(this.checkCurrentTimeTimeout_), this.checkCurrentTimeTimeout_ = E.setTimeout(this.monitorCurrentTime_.bind(this), 250);
  }
  /**
   * Reset stalled download stats for a specific type of loader
   *
   * @param {string} type
   *        The segment loader type to check.
   *
   * @listens SegmentLoader#playlistupdate
   * @listens Tech#seeking
   * @listens Tech#seeked
   */
  resetSegmentDownloads_(e) {
    const t = this.playlistController_[`${e}SegmentLoader_`];
    this[`${e}StalledDownloads_`] > 0 && this.logger_(`resetting possible stalled download count for ${e} loader`), this[`${e}StalledDownloads_`] = 0, this[`${e}Buffered_`] = t.buffered_();
  }
  /**
   * Checks on every segment `appendsdone` to see
   * if segment appends are making progress. If they are not
   * and we are still downloading bytes. We exclude the playlist.
   *
   * @param {string} type
   *        The segment loader type to check.
   *
   * @listens SegmentLoader#appendsdone
   */
  checkSegmentDownloads_(e) {
    const t = this.playlistController_, s = t[`${e}SegmentLoader_`], r = s.buffered_(), n = f2(this[`${e}Buffered_`], r);
    if (this[`${e}Buffered_`] = r, n) {
      this.resetSegmentDownloads_(e);
      return;
    }
    this[`${e}StalledDownloads_`]++, this.logger_(`found #${this[`${e}StalledDownloads_`]} ${e} appends that did not increase buffer (possible stalled download)`, {
      playlistId: s.playlist_ && s.playlist_.id,
      buffered: pi(r)
    }), !(this[`${e}StalledDownloads_`] < 10) && (this.logger_(`${e} loader stalled download exclusion`), this.resetSegmentDownloads_(e), this.tech_.trigger({
      type: "usage",
      name: `vhs-${e}-download-exclusion`
    }), e !== "subtitle" && t.excludePlaylist({
      error: {
        message: `Excessive ${e} segment downloading detected.`
      },
      playlistExclusionDuration: 1 / 0
    }));
  }
  /**
   * The purpose of this function is to emulate the "waiting" event on
   * browsers that do not emit it when they are waiting for more
   * data to continue playback
   *
   * @private
   */
  checkCurrentTime_() {
    if (this.tech_.paused() || this.tech_.seeking())
      return;
    const e = this.tech_.currentTime(), t = this.tech_.buffered();
    if (this.lastRecordedTime === e && (!t.length || e + _t >= t.end(t.length - 1)))
      return this.techWaiting_();
    this.consecutiveUpdates >= 5 && e === this.lastRecordedTime ? (this.consecutiveUpdates++, this.waiting_()) : e === this.lastRecordedTime ? this.consecutiveUpdates++ : (this.consecutiveUpdates = 0, this.lastRecordedTime = e);
  }
  /**
   * Resets the 'timeupdate' mechanism designed to detect that we are stalled
   *
   * @private
   */
  resetTimeUpdate_() {
    this.consecutiveUpdates = 0;
  }
  /**
   * Fixes situations where there's a bad seek
   *
   * @return {boolean} whether an action was taken to fix the seek
   * @private
   */
  fixesBadSeeks_() {
    if (!this.tech_.seeking())
      return !1;
    const t = this.seekable(), s = this.tech_.currentTime(), r = this.afterSeekableWindow_(t, s, this.media(), this.allowSeeksWithinUnsafeLiveWindow);
    let n;
    if (r && (n = t.end(t.length - 1)), this.beforeSeekableWindow_(t, s)) {
      const y = t.start(0);
      n = y + // if the playlist is too short and the seekable range is an exact time (can
      // happen in live with a 3 segment playlist), then don't use a time delta
      (y === t.end(0) ? 0 : _t);
    }
    if (typeof n < "u")
      return this.logger_(`Trying to seek outside of seekable at time ${s} with seekable range ${af(t)}. Seeking to ${n}.`), this.tech_.setCurrentTime(n), !0;
    const a = this.playlistController_.sourceUpdater_, l = this.tech_.buffered(), u = a.audioBuffer ? a.audioBuffered() : null, f = a.videoBuffer ? a.videoBuffered() : null, m = this.media(), v = m.partTargetDuration ? m.partTargetDuration : (m.targetDuration - yt) * 2, b = [u, f];
    for (let y = 0; y < b.length; y++) {
      if (!b[y])
        continue;
      if (ol(b[y], s) < v)
        return !1;
    }
    const S = Nr(l, s);
    return S.length === 0 ? !1 : (n = S.start(0) + _t, this.logger_(`Buffered region starts (${S.start(0)})  just beyond seek point (${s}). Seeking to ${n}.`), this.tech_.setCurrentTime(n), !0);
  }
  /**
   * Handler for situations when we determine the player is waiting.
   *
   * @private
   */
  waiting_() {
    if (this.techWaiting_())
      return;
    const e = this.tech_.currentTime(), t = this.tech_.buffered(), s = Oi(t, e);
    if (s.length && e + 3 <= s.end(0)) {
      this.resetTimeUpdate_(), this.tech_.setCurrentTime(e), this.logger_(`Stopped at ${e} while inside a buffered region [${s.start(0)} -> ${s.end(0)}]. Attempting to resume playback by seeking to the current time.`), this.tech_.trigger({
        type: "usage",
        name: "vhs-unknown-waiting"
      });
      return;
    }
  }
  /**
   * Handler for situations when the tech fires a `waiting` event
   *
   * @return {boolean}
   *         True if an action (or none) was needed to correct the waiting. False if no
   *         checks passed
   * @private
   */
  techWaiting_() {
    const e = this.seekable(), t = this.tech_.currentTime();
    if (this.tech_.seeking())
      return !0;
    if (this.beforeSeekableWindow_(e, t)) {
      const l = e.end(e.length - 1);
      return this.logger_(`Fell out of live window at time ${t}. Seeking to live point (seekable end) ${l}`), this.resetTimeUpdate_(), this.tech_.setCurrentTime(l), this.tech_.trigger({
        type: "usage",
        name: "vhs-live-resync"
      }), !0;
    }
    const s = this.tech_.vhs.playlistController_.sourceUpdater_, r = this.tech_.buffered();
    if (this.videoUnderflow_({
      audioBuffered: s.audioBuffered(),
      videoBuffered: s.videoBuffered(),
      currentTime: t
    }))
      return this.resetTimeUpdate_(), this.tech_.setCurrentTime(t), this.tech_.trigger({
        type: "usage",
        name: "vhs-video-underflow"
      }), !0;
    const a = Nr(r, t);
    return a.length > 0 ? (this.logger_(`Stopped at ${t} and seeking to ${a.start(0)}`), this.resetTimeUpdate_(), this.skipTheGap_(t), !0) : !1;
  }
  afterSeekableWindow_(e, t, s, r = !1) {
    if (!e.length)
      return !1;
    let n = e.end(e.length - 1) + _t;
    const a = !s.endList, l = typeof s.partTargetDuration == "number";
    return a && (l || r) && (n = e.end(e.length - 1) + s.targetDuration * 3), t > n;
  }
  beforeSeekableWindow_(e, t) {
    return !!(e.length && // can't fall before 0 and 0 seekable start identifies VOD stream
    e.start(0) > 0 && t < e.start(0) - this.liveRangeSafeTimeDelta);
  }
  videoUnderflow_({
    videoBuffered: e,
    audioBuffered: t,
    currentTime: s
  }) {
    if (!e)
      return;
    let r;
    if (e.length && t.length) {
      const n = Oi(e, s - 3), a = Oi(e, s), l = Oi(t, s);
      l.length && !a.length && n.length && (r = {
        start: n.end(0),
        end: l.end(0)
      });
    } else
      Nr(e, s).length || (r = this.gapFromVideoUnderflow_(e, s));
    return r ? (this.logger_(`Encountered a gap in video from ${r.start} to ${r.end}. Seeking to current time ${s}`), !0) : !1;
  }
  /**
   * Timer callback. If playback still has not proceeded, then we seek
   * to the start of the next buffered region.
   *
   * @private
   */
  skipTheGap_(e) {
    const t = this.tech_.buffered(), s = this.tech_.currentTime(), r = Nr(t, s);
    this.resetTimeUpdate_(), !(r.length === 0 || s !== e) && (this.logger_("skipTheGap_:", "currentTime:", s, "scheduled currentTime:", e, "nextRange start:", r.start(0)), this.tech_.setCurrentTime(r.start(0) + yt), this.tech_.trigger({
      type: "usage",
      name: "vhs-gap-skip"
    }));
  }
  gapFromVideoUnderflow_(e, t) {
    const s = c2(e);
    for (let r = 0; r < s.length; r++) {
      const n = s.start(r), a = s.end(r);
      if (t - n < 4 && t - n > 2)
        return {
          start: n,
          end: a
        };
    }
    return null;
  }
}
const CT = {
  errorInterval: 30,
  getSource(i) {
    const t = this.tech({
      IWillNotUseThisInPlugins: !0
    }).currentSource_ || this.currentSource();
    return i(t);
  }
}, Xf = function(i, e) {
  let t = 0, s = 0;
  const r = ie(CT, e);
  i.ready(() => {
    i.trigger({
      type: "usage",
      name: "vhs-error-reload-initialized"
    });
  });
  const n = function() {
    s && i.currentTime(s);
  }, a = function(m) {
    m != null && (s = i.duration() !== 1 / 0 && i.currentTime() || 0, i.one("loadedmetadata", n), i.src(m), i.trigger({
      type: "usage",
      name: "vhs-error-reload"
    }), i.play());
  }, l = function() {
    if (Date.now() - t < r.errorInterval * 1e3) {
      i.trigger({
        type: "usage",
        name: "vhs-error-reload-canceled"
      });
      return;
    }
    if (!r.getSource || typeof r.getSource != "function") {
      L.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
      return;
    }
    return t = Date.now(), r.getSource.call(i, a);
  }, u = function() {
    i.off("loadedmetadata", n), i.off("error", l), i.off("dispose", u);
  }, f = function(m) {
    u(), Xf(i, m);
  };
  i.on("error", l), i.on("dispose", u), i.reloadSourceOnError = f;
}, wT = function(i) {
  Xf(this, i);
};
var Kf = "3.12.1", AT = "7.0.3", DT = "1.3.0", kT = "7.1.0", IT = "4.0.1";
const ge = {
  PlaylistLoader: ji,
  Playlist: Ve,
  utils: M2,
  STANDARD_PLAYLIST_SELECTOR: Ec,
  INITIAL_PLAYLIST_SELECTOR: C1,
  lastBandwidthSelector: Ec,
  movingAverageBandwidthSelector: S1,
  comparePlaylistBandwidth: hl,
  comparePlaylistResolution: x1,
  xhr: xf()
};
Object.keys(Ce).forEach((i) => {
  Object.defineProperty(ge, i, {
    get() {
      return L.log.warn(`using Vhs.${i} is UNSAFE be sure you know what you are doing`), Ce[i];
    },
    set(e) {
      if (L.log.warn(`using Vhs.${i} is UNSAFE be sure you know what you are doing`), typeof e != "number" || e < 0) {
        L.log.warn(`value of Vhs.${i} must be greater than or equal to 0`);
        return;
      }
      Ce[i] = e;
    }
  });
});
const Yf = "videojs-vhs", Qf = function(i, e) {
  const t = e.media();
  let s = -1;
  for (let r = 0; r < i.length; r++)
    if (i[r].id === t.id) {
      s = r;
      break;
    }
  i.selectedIndex_ = s, i.trigger({
    selectedIndex: s,
    type: "change"
  });
}, PT = function(i, e) {
  e.representations().forEach((t) => {
    i.addQualityLevel(t);
  }), Qf(i, e.playlists);
};
ge.canPlaySource = function() {
  return L.log.warn("VHS is no longer a tech. Please remove it from your player's techOrder.");
};
const LT = (i, e, t) => {
  if (!i)
    return i;
  let s = {};
  e && e.attributes && e.attributes.CODECS && (s = cn(mt(e.attributes.CODECS))), t && t.attributes && t.attributes.CODECS && (s.audio = t.attributes.CODECS);
  const r = qs(s.video), n = qs(s.audio), a = {};
  for (const l in i)
    a[l] = {}, n && (a[l].audioContentType = n), r && (a[l].videoContentType = r), e.contentProtection && e.contentProtection[l] && e.contentProtection[l].pssh && (a[l].pssh = e.contentProtection[l].pssh), typeof i[l] == "string" && (a[l].url = i[l]);
  return ie(i, a);
}, OT = (i, e) => i.reduce((t, s) => {
  if (!s.contentProtection)
    return t;
  const r = e.reduce((n, a) => {
    const l = s.contentProtection[a];
    return l && l.pssh && (n[a] = {
      pssh: l.pssh
    }), n;
  }, {});
  return Object.keys(r).length && t.push(r), t;
}, []), jT = ({
  player: i,
  sourceKeySystems: e,
  audioMedia: t,
  mainPlaylists: s
}) => {
  if (!i.eme.initializeMediaKeys)
    return Promise.resolve();
  const r = t ? s.concat([t]) : s, n = OT(r, Object.keys(e)), a = [], l = [];
  return n.forEach((u) => {
    l.push(new Promise((f, m) => {
      i.tech_.one("keysessioncreated", f);
    })), a.push(new Promise((f, m) => {
      i.eme.initializeMediaKeys({
        keySystems: u
      }, (v) => {
        if (v) {
          m(v);
          return;
        }
        f();
      });
    }));
  }), Promise.race([
    // If a session was previously created, these will all finish resolving without
    // creating a new session, otherwise it will take until the end of all license
    // requests, which is why the key session check is used (to make setup much faster).
    Promise.all(a),
    // Once a single session is created, the browser knows DRM will be used.
    Promise.race(l)
  ]);
}, RT = ({
  player: i,
  sourceKeySystems: e,
  media: t,
  audioMedia: s
}) => {
  const r = LT(e, t, s);
  return r ? (i.currentSource().keySystems = r, r && !i.eme ? (L.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin"), !1) : !0) : !1;
}, Jf = () => {
  if (!E.localStorage)
    return null;
  const i = E.localStorage.getItem(Yf);
  if (!i)
    return null;
  try {
    return JSON.parse(i);
  } catch {
    return null;
  }
}, NT = (i) => {
  if (!E.localStorage)
    return !1;
  let e = Jf();
  e = e ? ie(e, i) : i;
  try {
    E.localStorage.setItem(Yf, JSON.stringify(e));
  } catch {
    return !1;
  }
  return e;
}, MT = (i) => i.toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,") === 0 ? JSON.parse(i.substring(i.indexOf(",") + 1)) : i, Zf = (i, e) => {
  i._requestCallbackSet || (i._requestCallbackSet = /* @__PURE__ */ new Set()), i._requestCallbackSet.add(e);
}, ep = (i, e) => {
  i._responseCallbackSet || (i._responseCallbackSet = /* @__PURE__ */ new Set()), i._responseCallbackSet.add(e);
}, tp = (i, e) => {
  i._requestCallbackSet && (i._requestCallbackSet.delete(e), i._requestCallbackSet.size || delete i._requestCallbackSet);
}, ip = (i, e) => {
  i._responseCallbackSet && (i._responseCallbackSet.delete(e), i._responseCallbackSet.size || delete i._responseCallbackSet);
};
ge.supportsNativeHls = function() {
  if (!B || !B.createElement)
    return !1;
  const i = B.createElement("video");
  return L.getTech("Html5").isSupported() ? [
    // Apple santioned
    "application/vnd.apple.mpegurl",
    // Apple sanctioned for backwards compatibility
    "audio/mpegurl",
    // Very common
    "audio/x-mpegurl",
    // Very common
    "application/x-mpegurl",
    // Included for completeness
    "video/x-mpegurl",
    "video/mpegurl",
    "application/mpegurl"
  ].some(function(t) {
    return /maybe|probably/i.test(i.canPlayType(t));
  }) : !1;
}();
ge.supportsNativeDash = function() {
  return !B || !B.createElement || !L.getTech("Html5").isSupported() ? !1 : /maybe|probably/i.test(B.createElement("video").canPlayType("application/dash+xml"));
}();
ge.supportsTypeNatively = (i) => i === "hls" ? ge.supportsNativeHls : i === "dash" ? ge.supportsNativeDash : !1;
ge.isSupported = function() {
  return L.log.warn("VHS is no longer a tech. Please remove it from your player's techOrder.");
};
ge.xhr.onRequest = function(i) {
  Zf(ge.xhr, i);
};
ge.xhr.onResponse = function(i) {
  ep(ge.xhr, i);
};
ge.xhr.offRequest = function(i) {
  tp(ge.xhr, i);
};
ge.xhr.offResponse = function(i) {
  ip(ge.xhr, i);
};
const BT = L.getComponent("Component");
class sp extends BT {
  constructor(e, t, s) {
    if (super(t, s.vhs), typeof s.initialBandwidth == "number" && (this.options_.bandwidth = s.initialBandwidth), this.logger_ = ot("VhsHandler"), t.options_ && t.options_.playerId) {
      const r = L.getPlayer(t.options_.playerId);
      this.player_ = r;
    }
    if (this.tech_ = t, this.source_ = e, this.stats = {}, this.ignoreNextSeekingEvent_ = !1, this.setOptions_(), this.options_.overrideNative && t.overrideNativeAudioTracks && t.overrideNativeVideoTracks)
      t.overrideNativeAudioTracks(!0), t.overrideNativeVideoTracks(!0);
    else if (this.options_.overrideNative && (t.featuresNativeVideoTracks || t.featuresNativeAudioTracks))
      throw new Error("Overriding native VHS requires emulated tracks. See https://git.io/vMpjB");
    this.on(B, ["fullscreenchange", "webkitfullscreenchange", "mozfullscreenchange", "MSFullscreenChange"], (r) => {
      const n = B.fullscreenElement || B.webkitFullscreenElement || B.mozFullScreenElement || B.msFullscreenElement;
      n && n.contains(this.tech_.el()) ? this.playlistController_.fastQualityChange_() : this.playlistController_.checkABR_();
    }), this.on(this.tech_, "seeking", function() {
      if (this.ignoreNextSeekingEvent_) {
        this.ignoreNextSeekingEvent_ = !1;
        return;
      }
      this.setCurrentTime(this.tech_.currentTime());
    }), this.on(this.tech_, "error", function() {
      this.tech_.error() && this.playlistController_ && this.playlistController_.pauseLoading();
    }), this.on(this.tech_, "play", this.play);
  }
  /**
   * Set VHS options based on options from configuration, as well as partial
   * options to be passed at a later time.
   *
   * @param {Object} options A partial chunk of config options
   */
  setOptions_(e = {}) {
    if (this.options_ = ie(this.options_, e), this.options_.withCredentials = this.options_.withCredentials || !1, this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions !== !1, this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || !1, this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage < "u" ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || !1, this.options_.useForcedSubtitles = this.options_.useForcedSubtitles || !1, this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || !1, this.options_.useDtsForTimestampOffset = this.options_.useDtsForTimestampOffset || !1, this.options_.customTagParsers = this.options_.customTagParsers || [], this.options_.customTagMappers = this.options_.customTagMappers || [], this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || !1, this.options_.llhls = this.options_.llhls !== !1, this.options_.bufferBasedABR = this.options_.bufferBasedABR || !1, typeof this.options_.playlistExclusionDuration != "number" && (this.options_.playlistExclusionDuration = 60), typeof this.options_.bandwidth != "number" && this.options_.useBandwidthFromLocalStorage) {
      const s = Jf();
      s && s.bandwidth && (this.options_.bandwidth = s.bandwidth, this.tech_.trigger({
        type: "usage",
        name: "vhs-bandwidth-from-local-storage"
      })), s && s.throughput && (this.options_.throughput = s.throughput, this.tech_.trigger({
        type: "usage",
        name: "vhs-throughput-from-local-storage"
      }));
    }
    typeof this.options_.bandwidth != "number" && (this.options_.bandwidth = Ce.INITIAL_BANDWIDTH), this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Ce.INITIAL_BANDWIDTH, ["withCredentials", "useDevicePixelRatio", "customPixelRatio", "limitRenditionByPlayerDimensions", "bandwidth", "customTagParsers", "customTagMappers", "cacheEncryptionKeys", "playlistSelector", "initialPlaylistSelector", "bufferBasedABR", "liveRangeSafeTimeDelta", "llhls", "useForcedSubtitles", "useNetworkInformationApi", "useDtsForTimestampOffset", "exactManifestTimings", "leastPixelDiffSelector"].forEach((s) => {
      typeof this.source_[s] < "u" && (this.options_[s] = this.source_[s]);
    }), this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions, this.useDevicePixelRatio = this.options_.useDevicePixelRatio;
    const t = this.options_.customPixelRatio;
    typeof t == "number" && t >= 0 && (this.customPixelRatio = t);
  }
  // alias for public method to set options
  setOptions(e = {}) {
    this.setOptions_(e);
  }
  /**
   * called when player.src gets called, handle a new source
   *
   * @param {Object} src the source object to handle
   */
  src(e, t) {
    if (!e)
      return;
    this.setOptions_(), this.options_.src = MT(this.source_.src), this.options_.tech = this.tech_, this.options_.externVhs = ge, this.options_.sourceType = Zc(t), this.options_.seekTo = (n) => {
      this.tech_.setCurrentTime(n);
    }, this.playlistController_ = new TT(this.options_);
    const s = ie({
      liveRangeSafeTimeDelta: _t
    }, this.options_, {
      seekable: () => this.seekable(),
      media: () => this.playlistController_.media(),
      playlistController: this.playlistController_
    });
    this.playbackWatcher_ = new ET(s), this.playlistController_.on("error", () => {
      const n = L.players[this.tech_.options_.playerId];
      let a = this.playlistController_.error;
      typeof a == "object" && !a.code ? a.code = 3 : typeof a == "string" && (a = {
        message: a,
        code: 3
      }), n.error(a);
    });
    const r = this.options_.bufferBasedABR ? ge.movingAverageBandwidthSelector(0.55) : ge.STANDARD_PLAYLIST_SELECTOR;
    this.playlistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : r.bind(this), this.playlistController_.selectInitialPlaylist = ge.INITIAL_PLAYLIST_SELECTOR.bind(this), this.playlists = this.playlistController_.mainPlaylistLoader_, this.mediaSource = this.playlistController_.mediaSource, Object.defineProperties(this, {
      selectPlaylist: {
        get() {
          return this.playlistController_.selectPlaylist;
        },
        set(n) {
          this.playlistController_.selectPlaylist = n.bind(this);
        }
      },
      throughput: {
        get() {
          return this.playlistController_.mainSegmentLoader_.throughput.rate;
        },
        set(n) {
          this.playlistController_.mainSegmentLoader_.throughput.rate = n, this.playlistController_.mainSegmentLoader_.throughput.count = 1;
        }
      },
      bandwidth: {
        get() {
          let n = this.playlistController_.mainSegmentLoader_.bandwidth;
          const a = E.navigator.connection || E.navigator.mozConnection || E.navigator.webkitConnection, l = 1e7;
          if (this.options_.useNetworkInformationApi && a) {
            const u = a.downlink * 1e3 * 1e3;
            u >= l && n >= l ? n = Math.max(n, u) : n = u;
          }
          return n;
        },
        set(n) {
          this.playlistController_.mainSegmentLoader_.bandwidth = n, this.playlistController_.mainSegmentLoader_.throughput = {
            rate: 0,
            count: 0
          };
        }
      },
      /**
       * `systemBandwidth` is a combination of two serial processes bit-rates. The first
       * is the network bitrate provided by `bandwidth` and the second is the bitrate of
       * the entire process after that - decryption, transmuxing, and appending - provided
       * by `throughput`.
       *
       * Since the two process are serial, the overall system bandwidth is given by:
       *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)
       */
      systemBandwidth: {
        get() {
          const n = 1 / (this.bandwidth || 1);
          let a;
          return this.throughput > 0 ? a = 1 / this.throughput : a = 0, Math.floor(1 / (n + a));
        },
        set() {
          L.log.error('The "systemBandwidth" property is read-only');
        }
      }
    }), this.options_.bandwidth && (this.bandwidth = this.options_.bandwidth), this.options_.throughput && (this.throughput = this.options_.throughput), Object.defineProperties(this.stats, {
      bandwidth: {
        get: () => this.bandwidth || 0,
        enumerable: !0
      },
      mediaRequests: {
        get: () => this.playlistController_.mediaRequests_() || 0,
        enumerable: !0
      },
      mediaRequestsAborted: {
        get: () => this.playlistController_.mediaRequestsAborted_() || 0,
        enumerable: !0
      },
      mediaRequestsTimedout: {
        get: () => this.playlistController_.mediaRequestsTimedout_() || 0,
        enumerable: !0
      },
      mediaRequestsErrored: {
        get: () => this.playlistController_.mediaRequestsErrored_() || 0,
        enumerable: !0
      },
      mediaTransferDuration: {
        get: () => this.playlistController_.mediaTransferDuration_() || 0,
        enumerable: !0
      },
      mediaBytesTransferred: {
        get: () => this.playlistController_.mediaBytesTransferred_() || 0,
        enumerable: !0
      },
      mediaSecondsLoaded: {
        get: () => this.playlistController_.mediaSecondsLoaded_() || 0,
        enumerable: !0
      },
      mediaAppends: {
        get: () => this.playlistController_.mediaAppends_() || 0,
        enumerable: !0
      },
      mainAppendsToLoadedData: {
        get: () => this.playlistController_.mainAppendsToLoadedData_() || 0,
        enumerable: !0
      },
      audioAppendsToLoadedData: {
        get: () => this.playlistController_.audioAppendsToLoadedData_() || 0,
        enumerable: !0
      },
      appendsToLoadedData: {
        get: () => this.playlistController_.appendsToLoadedData_() || 0,
        enumerable: !0
      },
      timeToLoadedData: {
        get: () => this.playlistController_.timeToLoadedData_() || 0,
        enumerable: !0
      },
      buffered: {
        get: () => pi(this.tech_.buffered()),
        enumerable: !0
      },
      currentTime: {
        get: () => this.tech_.currentTime(),
        enumerable: !0
      },
      currentSource: {
        get: () => this.tech_.currentSource_,
        enumerable: !0
      },
      currentTech: {
        get: () => this.tech_.name_,
        enumerable: !0
      },
      duration: {
        get: () => this.tech_.duration(),
        enumerable: !0
      },
      main: {
        get: () => this.playlists.main,
        enumerable: !0
      },
      playerDimensions: {
        get: () => this.tech_.currentDimensions(),
        enumerable: !0
      },
      seekable: {
        get: () => pi(this.tech_.seekable()),
        enumerable: !0
      },
      timestamp: {
        get: () => Date.now(),
        enumerable: !0
      },
      videoPlaybackQuality: {
        get: () => this.tech_.getVideoPlaybackQuality(),
        enumerable: !0
      }
    }), this.tech_.one("canplay", this.playlistController_.setupFirstPlay.bind(this.playlistController_)), this.tech_.on("bandwidthupdate", () => {
      this.options_.useBandwidthFromLocalStorage && NT({
        bandwidth: this.bandwidth,
        throughput: Math.round(this.throughput)
      });
    }), this.playlistController_.on("selectedinitialmedia", () => {
      ST(this);
    }), this.playlistController_.sourceUpdater_.on("createdsourcebuffers", () => {
      this.setupEme_();
    }), this.on(this.playlistController_, "progress", function() {
      this.tech_.trigger("progress");
    }), this.on(this.playlistController_, "firstplay", function() {
      this.ignoreNextSeekingEvent_ = !0;
    }), this.setupQualityLevels_(), this.tech_.el() && (this.mediaSourceUrl_ = E.URL.createObjectURL(this.playlistController_.mediaSource), this.tech_.src(this.mediaSourceUrl_));
  }
  createKeySessions_() {
    const e = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;
    this.logger_("waiting for EME key session creation"), jT({
      player: this.player_,
      sourceKeySystems: this.source_.keySystems,
      audioMedia: e && e.media(),
      mainPlaylists: this.playlists.main.playlists
    }).then(() => {
      this.logger_("created EME key session"), this.playlistController_.sourceUpdater_.initializedEme();
    }).catch((t) => {
      this.logger_("error while creating EME key session", t), this.player_.error({
        message: "Failed to initialize media keys for EME",
        code: 3,
        metadata: {
          errorType: L.Error.EMEKeySessionCreationError
        }
      });
    });
  }
  handleWaitingForKey_() {
    this.logger_("waitingforkey fired, attempting to create any new key sessions"), this.createKeySessions_();
  }
  /**
   * If necessary and EME is available, sets up EME options and waits for key session
   * creation.
   *
   * This function also updates the source updater so taht it can be used, as for some
   * browsers, EME must be configured before content is appended (if appending unencrypted
   * content before encrypted content).
   */
  setupEme_() {
    const e = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader, t = RT({
      player: this.player_,
      sourceKeySystems: this.source_.keySystems,
      media: this.playlists.media(),
      audioMedia: e && e.media()
    });
    if (this.player_.tech_.on("keystatuschange", (s) => {
      this.playlistController_.updatePlaylistByKeyStatus(s.keyId, s.status);
    }), this.handleWaitingForKey_ = this.handleWaitingForKey_.bind(this), this.player_.tech_.on("waitingforkey", this.handleWaitingForKey_), !t) {
      this.playlistController_.sourceUpdater_.initializedEme();
      return;
    }
    this.createKeySessions_();
  }
  /**
   * Initializes the quality levels and sets listeners to update them.
   *
   * @method setupQualityLevels_
   * @private
   */
  setupQualityLevels_() {
    const e = L.players[this.tech_.options_.playerId];
    !e || !e.qualityLevels || this.qualityLevels_ || (this.qualityLevels_ = e.qualityLevels(), this.playlistController_.on("selectedinitialmedia", () => {
      PT(this.qualityLevels_, this);
    }), this.playlists.on("mediachange", () => {
      Qf(this.qualityLevels_, this.playlists);
    }));
  }
  /**
   * return the version
   */
  static version() {
    return {
      "@videojs/http-streaming": Kf,
      "mux.js": AT,
      "mpd-parser": DT,
      "m3u8-parser": kT,
      "aes-decrypter": IT
    };
  }
  /**
   * return the version
   */
  version() {
    return this.constructor.version();
  }
  canChangeType() {
    return zf.canChangeType();
  }
  /**
   * Begin playing the video.
   */
  play() {
    this.playlistController_.play();
  }
  /**
   * a wrapper around the function in PlaylistController
   */
  setCurrentTime(e) {
    this.playlistController_.setCurrentTime(e);
  }
  /**
   * a wrapper around the function in PlaylistController
   */
  duration() {
    return this.playlistController_.duration();
  }
  /**
   * a wrapper around the function in PlaylistController
   */
  seekable() {
    return this.playlistController_.seekable();
  }
  /**
   * Abort all outstanding work and cleanup.
   */
  dispose() {
    this.playbackWatcher_ && this.playbackWatcher_.dispose(), this.playlistController_ && this.playlistController_.dispose(), this.qualityLevels_ && this.qualityLevels_.dispose(), this.tech_ && this.tech_.vhs && delete this.tech_.vhs, this.mediaSourceUrl_ && E.URL.revokeObjectURL && (E.URL.revokeObjectURL(this.mediaSourceUrl_), this.mediaSourceUrl_ = null), this.tech_ && this.tech_.off("waitingforkey", this.handleWaitingForKey_), super.dispose();
  }
  convertToProgramTime(e, t) {
    return H2({
      playlist: this.playlistController_.media(),
      time: e,
      callback: t
    });
  }
  // the player must be playing before calling this
  seekToProgramTime(e, t, s = !0, r = 2) {
    return Af({
      programTime: e,
      playlist: this.playlistController_.media(),
      retryCount: r,
      pauseAfterSeek: s,
      seekTo: this.options_.seekTo,
      tech: this.options_.tech,
      callback: t
    });
  }
  /**
   * Adds the onRequest, onResponse, offRequest and offResponse functions
   * to the VhsHandler xhr Object.
   */
  setupXhrHooks_() {
    this.xhr.onRequest = (e) => {
      Zf(this.xhr, e);
    }, this.xhr.onResponse = (e) => {
      ep(this.xhr, e);
    }, this.xhr.offRequest = (e) => {
      tp(this.xhr, e);
    }, this.xhr.offResponse = (e) => {
      ip(this.xhr, e);
    }, this.player_.trigger("xhr-hooks-ready");
  }
}
const fn = {
  name: "videojs-http-streaming",
  VERSION: Kf,
  canHandleSource(i, e = {}) {
    const t = ie(L.options, e);
    return fn.canPlayType(i.type, t);
  },
  handleSource(i, e, t = {}) {
    const s = ie(L.options, t);
    return e.vhs = new sp(i, e, s), e.vhs.xhr = xf(), e.vhs.setupXhrHooks_(), e.vhs.src(i.src, i.type), e.vhs;
  },
  canPlayType(i, e) {
    const t = Zc(i);
    if (!t)
      return "";
    const s = fn.getOverrideNative(e);
    return !ge.supportsTypeNatively(t) || s ? "maybe" : "";
  },
  getOverrideNative(i = {}) {
    const {
      vhs: e = {}
    } = i, t = !(L.browser.IS_ANY_SAFARI || L.browser.IS_IOS), {
      overrideNative: s = t
    } = e;
    return s;
  }
}, FT = () => Fr("avc1.4d400d,mp4a.40.2");
FT() && L.getTech("Html5").registerSourceHandler(fn, 0);
L.VhsHandler = sp;
L.VhsSourceHandler = fn;
L.Vhs = ge;
L.use || L.registerComponent("Vhs", ge);
L.options.vhs = L.options.vhs || {};
(!L.getPlugin || !L.getPlugin("reloadSourceOnError")) && L.registerPlugin("reloadSourceOnError", wT);
function UT(i, e, t) {
  return Yt`${this.audioOnly ? qT.call(this, i, e, t) : $T.call(this, i, e, t)} `;
}
function qT(i, e, t) {
  return Yt`<audio id="audio_example" class="udex-media-player__video  video-js ${ke(this.aspectRatioClass)}" controls preload="auto" data-setup="{}"><source src="${ke(this.source)}" type="${ke(this.type)}" /></audio>`;
}
function $T(i, e, t) {
  return Yt`${this._youtubeSrc ? VT.call(this, i, e, t) : HT.call(this, i, e, t)}`;
}
function VT(i, e, t) {
  return Yt`<iframe width="${ke(this.width)}" height="${ke(this.height)}" title="${ke(this.title)}" src="${ke(this.source)}" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>`;
}
function HT(i, e, t) {
  return Yt`${this._vimeoSrc ? zT.call(this, i, e, t) : GT.call(this, i, e, t)}`;
}
function zT(i, e, t) {
  return Yt`<iframe src="${ke(this.source)}" width="${ke(this.width)}" height="${ke(this.height)}" title="${ke(this.title)}"  frameborder="0" allow="autoplay; fullscreen;" allowfullscreen=""></iframe>`;
}
function GT(i, e, t) {
  return Yt`<video id="udex-media-player" class="udex-media-player__video video-js ${ke(this.aspectRatioClass)}" controls data-setup='{ "playbackRates": [1, 1.5, 2]  }'><source src="${ke(this.source)}" type="${ke(this.type)}">${Eg(this._tracks, (s, r) => s._id || r, (s, r) => WT.call(this, i, e, t, s, r))}</video>`;
}
function WT(i, e, t, s, r) {
  return Yt`<track kind='captions' src='${ke(s.src)}' srclang='${ke(s.srclang)}' label='${ke(s.label)}' ?default="${s.default}"/>`;
}
Mc("@ui5/webcomponents-theming", "sap_horizon", async () => yg);
Mc("@udex/web-components", "sap_horizon", async () => _g);
const XT = { packageName: "@udex/web-components", fileName: "themes/MediaPlayer.css.ts", content: `:host{--udex-media-player-height: 500px;--udex-media-player-width: 100%;--udex-media-player-controls-bar-height: 48px;--udex-media-player-controls-bar-small-height: 34px;--udex-media-player-pause-icon: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="white"><path d="M358 480h-33q-11 0-18.5-7.5T299 454V58q0-11 7.5-18.5T325 32h33q11 0 18.5 7.5T384 58v396q0 11-7.5 18.5T358 480zm-171 0h-33q-11 0-18.5-7.5T128 454V58q0-11 7.5-18.5T154 32h33q11 0 18.5 7.5T213 58v396q0 11-7.5 18.5T187 480z"></path></svg>');--udex-media-player-play-icon: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="white"><path d="M122 480q-11 0-18.5-7.5T96 454V58q0-11 7.5-18.5T122 32q7 0 15 5l269 198q10 8 10 21t-10 21L137 475q-8 5-15 5zm25-372v296l200-148z"></path></svg>');--udex-media-player-volume-icon: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="white"><path d="M427 63q40 38 62.5 88T512 256t-22.5 105-62.5 88q-9 7-17 7-11 0-18.5-7.5T384 430t8-19q32-30 50.5-70t18.5-85-18.5-85-50.5-70q-8-8-8-19t7.5-18.5T410 56q8 0 17 7zm-179 6q5-5 14-5 11 0 18.5 7t7.5 19v332q0 11-7.5 18.5T262 448q-7 0-14-5l-128-91H26q-11 0-18.5-7.5T0 326V186q0-11 7.5-18.5T26 160h94zm92 49q17 0 30.5 16.5t24 39 16 46T416 256t-5.5 36-16 45.5-24 39T340 393q-11 0-18.5-6.5T314 370q0-14 15-27 15-14 25.5-37.5T365 256t-10.5-49.5T329 169t-15-27q0-10 7.5-17t18.5-7zm-103 21-94 67q-5 5-15 5H51v90h77q10 0 15 5l94 67V139z"></path></svg>');--udex-media-player-volume-muted-icon: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="white"><path d="M262 64q11 0 18.5 7.5T288 90v332q0 11-7.5 18.5T262 448q-7 0-14-5l-128-91H26q-11 0-18.5-7.5T0 326V186q0-11 7.5-18.5T26 160h94l128-91q7-5 14-5zm-25 75-94 67q-7 5-15 5H51v90h77q10 0 15 5l94 67V139zm268 172q7 7 7 17 0 11-7.5 18.5T486 354q-10 0-18-8l-51-53-53 55q-8 8-18 8-11 0-18.5-7.5T320 330q0-10 7-17l55-57-55-57q-7-7-7-17 0-11 7.5-18.5T346 156q10 0 18 8l53 55 51-53q8-8 18-8 11 0 18.5 7.5T512 184q0 10-7 17l-53 55z"></path></svg>');--udex-media-player-fullscreen-icon: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="white"><path d="M486 0q11 0 18.5 7.5T512 26v108q0 11-7.5 18.5T486 160t-18-7.5-7-18.5V87l-97 97q-8 8-18 8-11 0-18.5-7.5T320 166q0-10 8-18l97-97h-47q-11 0-18.5-7T352 26t7.5-18.5T378 0h108zM230 32q11 0 18.5 7.5T256 58t-7.5 18-18.5 7H90q-7 0-7 7v140q0 11-7 18.5T58 256t-18.5-7.5T32 230V90q0-24 17-41t41-17h140zm224 224q11 0 18.5 7.5T480 282v140q0 24-17 41t-41 17H282q-11 0-18.5-7.5T256 454t7.5-18 18.5-7h140q7 0 7-7V282q0-11 7-18.5t18-7.5zm-306 71q7-7 18-7t18.5 7.5T192 346t-7 18l-98 97h47q11 0 18.5 7t7.5 18-7.5 18.5T134 512H26q-11 0-18.5-7.5T0 486V378q0-11 7.5-18.5T26 352t18 7.5 7 18.5v47z"></path></svg>');--udex-media-player-exit-fullscreen-icon: url('data:image/svg+xml;utf8,<svg width="24" height="24" viewBox="0 0 24 24" fill="white" xmlns="http://www.w3.org/2000/svg"><path d="M8.53125 14.1562C8.875 14.1562 9.15625 14.2812 9.375 14.5312C9.625 14.75 9.75 15.0312 9.75 15.375V21.375C9.75 21.7188 9.625 22 9.375 22.2188C9.15625 22.4375 8.875 22.5469 8.53125 22.5469C8.1875 22.5469 7.90625 22.4375 7.6875 22.2188C7.46875 22 7.35938 21.7188 7.35938 21.375V18.2812L4.03125 21.5625C3.8125 21.7812 3.53125 21.8906 3.1875 21.8906C2.84375 21.8906 2.5625 21.7812 2.34375 21.5625C2.09375 21.3125 1.96875 21.0312 1.96875 20.7188C1.96875 20.4062 2.09375 20.125 2.34375 19.875L5.625 16.5938H2.53125C2.1875 16.5938 1.90625 16.4844 1.6875 16.2656C1.46875 16.0156 1.35938 15.7188 1.35938 15.375C1.35938 15.0312 1.46875 14.75 1.6875 14.5312C1.90625 14.2812 2.1875 14.1562 2.53125 14.1562H8.53125ZM21.7031 6.98438C22.0469 6.98438 22.3281 7.10938 22.5469 7.35938C22.7969 7.57812 22.9219 7.85938 22.9219 8.20312C22.9219 8.54688 22.7969 8.82812 22.5469 9.04688C22.3281 9.26562 22.0469 9.375 21.7031 9.375H15.75C15.4062 9.375 15.1094 9.26562 14.8594 9.04688C14.6406 8.82812 14.5312 8.54688 14.5312 8.20312V2.20312C14.5312 1.85938 14.6406 1.57812 14.8594 1.35938C15.1094 1.10937 15.4062 0.984375 15.75 0.984375C16.0938 0.984375 16.375 1.10937 16.5938 1.35938C16.8125 1.57812 16.9219 1.85938 16.9219 2.20312V5.29688L20.2031 2.01562C20.4531 1.76562 20.7344 1.64062 21.0469 1.64062C21.3906 1.64062 21.6875 1.76562 21.9375 2.01562C22.1562 2.26562 22.2656 2.54688 22.2656 2.85938C22.2656 3.17188 22.1562 3.45312 21.9375 3.70312L18.6094 6.98438H21.7031ZM4.92188 10.5C4.54688 10.5 4.23438 10.3906 3.98438 10.1719C3.76562 9.95312 3.65625 9.65625 3.65625 9.28125V6.75C3.65625 5.6875 4.01562 4.79688 4.73438 4.07812C5.45312 3.35938 6.34375 3 7.40625 3H9.89062C10.2656 3 10.5625 3.125 10.7812 3.375C11.0312 3.59375 11.1562 3.89062 11.1562 4.26562C11.1562 4.64062 11.0312 4.95312 10.7812 5.20312C10.5625 5.42188 10.2656 5.53125 9.89062 5.53125H7.40625C6.59375 5.53125 6.1875 5.9375 6.1875 6.75V9.28125C6.1875 9.65625 6.0625 9.95312 5.8125 10.1719C5.59375 10.3906 5.29688 10.5 4.92188 10.5ZM20.5312 13.4531C20.9062 13.4531 21.2031 13.5781 21.4219 13.8281C21.6406 14.0469 21.75 14.3438 21.75 14.7188V17.2031C21.75 18.2656 21.3906 19.1562 20.6719 19.875C19.9844 20.5938 19.0938 20.9531 18 20.9531H15.5156C15.1406 20.9531 14.8438 20.8438 14.625 20.625C14.4062 20.375 14.2969 20.0625 14.2969 19.6875C14.2969 19.3125 14.4062 19.0156 14.625 18.7969C14.8438 18.5469 15.1406 18.4219 15.5156 18.4219H18.0469C18.3906 18.4219 18.6719 18.3125 18.8906 18.0938C19.1406 17.875 19.2656 17.5781 19.2656 17.2031V14.6719C19.2656 14.2969 19.375 14 19.5938 13.7812C19.8438 13.5625 20.1562 13.4531 20.5312 13.4531Z" fill="white"/></svg>');--udex-media-player-close-icon: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="white"><path d="m292 256 117 116q7 7 7 18 0 12-7.5 19t-18.5 7q-10 0-18-8L256 292 140 408q-8 8-18 8-11 0-18.5-7.5T96 390q0-10 8-18l116-116-116-116q-8-8-8-18 0-11 7.5-18.5T122 96t18 7l116 117 116-117q7-7 18-7t18.5 7.5T416 122t-7 18z"></path></svg>')}.udex-media-player__container{display:flex;align-items:center;justify-content:center}.udex-media-player__video{width:var(--udex-media-player-width);height:var(--udex-media-player-height)}.vjs-svg-icon{fill:currentColor;background-position:50%;background-repeat:no-repeat;display:inline-block;height:1.8em;width:1.8em}.vjs-svg-icon:before{content:none!important}.vjs-control:focus .vjs-svg-icon,.vjs-svg-icon:hover{filter:drop-shadow(0 0 .25em #fff)}.video-js .vjs-big-play-button .vjs-icon-placeholder:before,.video-js .vjs-modal-dialog,.vjs-button>.vjs-icon-placeholder:before,.vjs-modal-dialog .vjs-modal-dialog-content{height:100%;left:0;position:absolute;top:0;width:100%}.video-js .vjs-big-play-button .vjs-icon-placeholder:before,.vjs-button>.vjs-icon-placeholder:before{text-align:center}.video-js{background-color:#000;box-sizing:border-box;color:#fff;display:inline-block;font-family:Arial,Helvetica,sans-serif;font-size:10px;font-style:normal;font-weight:400;line-height:1;padding:0;position:relative;vertical-align:top;word-break:normal}.video-js:-webkit-full-screen{height:100%!important;width:100%!important}.video-js *,.video-js :after,.video-js :before{box-sizing:inherit}.video-js .vjs-tech,.video-js.vjs-fill:not(.vjs-audio-only-mode){height:100%;width:100%}.video-js.vjs-audio-only-mode .vjs-tech{display:none}.vjs-lock-showing{display:block!important;opacity:1!important;visibility:visible!important}.vjs-no-js{background-color:#000;color:#fff;font-family:Arial,Helvetica,sans-serif;font-size:18px;height:150px;margin:0 auto;padding:20px;text-align:center;width:300px}.vjs-no-js a,.vjs-no-js a:visited{color:#66a8cc}.vjs-big-play-button .vjs-svg-icon{height:1em;left:50%;line-height:1;position:absolute;top:50%;transform:translate(-50%,-50%);width:1em}.vjs-controls-disabled .vjs-big-play-button,.vjs-error .vjs-big-play-button,.vjs-has-started .vjs-big-play-button,.vjs-using-native-controls .vjs-big-play-button{display:none}.js-focus-visible .vjs-menu :not(.vjs-selected):focus:not(.focus-visible),.video-js .vjs-menu :not(.vjs-selected):focus:not(:focus-visible){background:none}.vjs-audio-only-mode .vjs-control-bar,.vjs-has-started .vjs-control-bar{display:flex;opacity:1;transition:visibility .1s,opacity .1s;visibility:visible}.video-js .vjs-control:focus,.video-js .vjs-control:focus:before,.video-js .vjs-control:hover:before{text-shadow:0 0 1em #fff}@keyframes vjs-spinner-show{to{visibility:visible}}@keyframes vjs-spinner-spin{to{transform:rotate(1turn)}}@keyframes vjs-spinner-fade{0%{border-top-color:#73859f}20%{border-top-color:#73859f}35%{border-top-color:#fff}60%{border-top-color:#73859f}to{border-top-color:#73859f}}.video-js.vjs-audio-only-mode .vjs-captions-button{display:none}.video-js.vjs-audio-only-mode .vjs-descriptions-button{display:none}@supports (display: grid){.vjs-text-track-settings .vjs-modal-dialog-content{display:grid;grid-template-columns:1fr 1fr;grid-template-rows:1fr;padding:20px 24px 0}.vjs-track-settings-controls .vjs-default-button{margin-bottom:20px}.vjs-text-track-settings .vjs-track-settings-controls{grid-column:1/-1}.vjs-layout-small .vjs-text-track-settings .vjs-modal-dialog-content,.vjs-layout-tiny .vjs-text-track-settings .vjs-modal-dialog-content,.vjs-layout-x-small .vjs-text-track-settings .vjs-modal-dialog-content{grid-template-columns:1fr}}@media print{.video-js>:not(.vjs-tech):not(.vjs-poster){visibility:hidden}}.vjs-mouse.vjs-playlist{font-size:15px}.vjs-mouse.vjs-playlist .vjs-playlist-description{height:30px;line-height:23px}@media (min-width: 600px){.vjs-mouse.vjs-playlist{font-size:17px}.vjs-mouse.vjs-playlist .vjs-playlist-description{height:34px;line-height:26px}.vjs-playlist .vjs-playlist-name{line-height:22px}}@media (max-width: 520px){.vjs-mouse.vjs-playlist .vjs-selected .vjs-playlist-now-playing-text,.vjs-mouse.vjs-playlist .vjs-up-next .vjs-up-next-text,.vjs-playlist .vjs-selected .vjs-playlist-now-playing-text,.vjs-playlist .vjs-up-next .vjs-up-next-text{display:none}}@media (min-width: 521px){.vjs-playlist img{min-height:85px}}@media (max-width: 750px){.vjs-playlist .vjs-playlist-duration{display:none}}.vjs-modal-dialog .vjs-modal-dialog-content,.video-js .vjs-modal-dialog{position:absolute;top:0;left:0;width:100%;height:100%}.video-js{display:inline-block;vertical-align:top;box-sizing:border-box;color:#fff;background-color:#000;position:relative;padding:0;font-size:10px;line-height:1;word-break:initial;font-family:var(--sapFontFamily);--sapContent_IconColor: #fff}.video-js:-moz-full-screen{position:absolute}.video-js:-webkit-full-screen{width:100%!important;height:100%!important}.video-js[tabindex="-1"]{outline:none}.video-js *,.video-js *:before,.video-js *:after{box-sizing:inherit}.video-js ul{font-family:inherit;font-size:inherit;line-height:inherit;list-style-position:outside;margin:0}.video-js.vjs-fluid,.video-js.vjs-16-9,.video-js.vjs-4-3,.video-js.vjs-9-16,.video-js.vjs-1-1{width:100%;max-width:100%}.video-js.vjs-1-1,.video-js.vjs-16-9,.video-js.vjs-4-3,.video-js.vjs-9-16,.video-js.vjs-fluid{max-width:100%;width:100%}.video-js.vjs-1-1:not(.vjs-audio-only-mode),.video-js.vjs-16-9:not(.vjs-audio-only-mode),.video-js.vjs-4-3:not(.vjs-audio-only-mode),.video-js.vjs-9-16:not(.vjs-audio-only-mode),.video-js.vjs-fluid:not(.vjs-audio-only-mode){height:0}.video-js.vjs-16-9:not(.vjs-audio-only-mode){padding-top:56.25%}.video-js.vjs-4-3:not(.vjs-audio-only-mode){padding-top:75%}.video-js.vjs-9-16:not(.vjs-audio-only-mode){padding-top:177.7777777778%}.video-js.vjs-1-1:not(.vjs-audio-only-mode){padding-top:100%}.video-js .vjs-tech{position:absolute;top:0;left:0;width:100%;height:100%}body.vjs-full-window,body.vjs-pip-window{padding:0;margin:0;height:100%}.vjs-full-window .video-js.vjs-fullscreen,body.vjs-pip-window .video-js{position:fixed;overflow:hidden;z-index:1000;inset:0}.video-js.vjs-fullscreen:not(.vjs-ios-native-fs),body.vjs-pip-window .video-js{width:100%!important;height:100%!important;padding-top:0!important;display:block}.video-js.vjs-fullscreen.vjs-user-inactive{cursor:none}.vjs-pip-container .vjs-pip-text{position:absolute;bottom:10%;font-size:2em;background-color:#000000b3;padding:.5em;text-align:center;width:100%}.vjs-layout-tiny.vjs-pip-container .vjs-pip-text,.vjs-layout-x-small.vjs-pip-container .vjs-pip-text,.vjs-layout-small.vjs-pip-container .vjs-pip-text{bottom:0;font-size:1.4em}.vjs-hidden{display:none!important}.vjs-disabled{opacity:.5;cursor:default}.video-js .vjs-offscreen{height:1px;left:-9999px;position:absolute;top:0;width:1px}.video-js .vjs-big-play-button{font-size:3em;line-height:100px;height:100px;width:100px;display:block;position:absolute;top:50%;left:50%;padding:0;margin-top:-50px;margin-left:-1.5em;cursor:pointer;opacity:1;background-color:#0006;border-radius:50%;transition:all .4s}.video-js .vjs-big-play-button>.vjs-icon-placeholder:before{content:" ";height:100px;width:100px}.video-js .vjs-big-play-button [ui5-icon]{height:100px;width:100px}.video-js:hover .vjs-big-play-button,.video-js .vjs-big-play-button:focus{transition:all 0s}.vjs-controls-disabled .vjs-big-play-button,.vjs-has-started .vjs-big-play-button,.vjs-using-native-controls .vjs-big-play-button,.vjs-error .vjs-big-play-button{display:none}.vjs-has-started.vjs-paused.vjs-show-big-play-button-on-pause:not(.vjs-seeking,.vjs-scrubbing,.vjs-error) .vjs-big-play-button{display:block}.video-js button{background:none;border:none;color:inherit;display:inline-block;font-size:inherit;line-height:inherit;text-transform:none;text-decoration:none;transition:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}.vjs-control .vjs-button{width:100%;height:100%}.video-js .vjs-control.vjs-close-button{cursor:pointer;height:3em;position:absolute;right:0;top:.5em;z-index:2}.video-js .vjs-modal-dialog{background:rgba(0,0,0,.8);background:linear-gradient(180deg,rgba(0,0,0,.8),rgba(255,255,255,0));overflow:auto}.video-js .vjs-modal-dialog>*{box-sizing:border-box}.vjs-modal-dialog .vjs-modal-dialog-content{font-size:1.2em;line-height:1.5;padding:20px 24px;z-index:1}.vjs-menu-button{cursor:pointer}.vjs-menu-button.vjs-disabled{cursor:default}.vjs-workinghover .vjs-menu-button.vjs-disabled:hover .vjs-menu{display:none}.vjs-menu .vjs-menu-content{display:block;padding:0;margin:0;overflow:auto}.vjs-menu .vjs-menu-content>*{box-sizing:border-box}.vjs-scrubbing .vjs-control.vjs-menu-button:hover .vjs-menu{display:none}.vjs-menu li{display:flex;justify-content:center;list-style:none;margin:0;padding:3px 6px;line-height:18px;font-size:12px;text-align:center}.vjs-menu li.vjs-menu-item:focus,.vjs-menu li.vjs-menu-item:hover,.js-focus-visible .vjs-menu li.vjs-menu-item:hover{background-color:var(--udexColorGrey7, #475E75);color:#fff}.vjs-menu li.vjs-selected,.vjs-menu li.vjs-selected:focus,.vjs-menu li.vjs-selected:hover,.js-focus-visible .vjs-menu li.vjs-selected:hover{background-color:var(--udexColorGrey2, #EAECEE);color:var(--udexColorGrey9, #223548)}.video-js .vjs-menu *:not(.vjs-selected):focus:not(:focus-visible),.js-focus-visible .vjs-menu *:not(.vjs-selected):focus:not(.focus-visible){background:none}.vjs-menu li.vjs-menu-title{text-align:center;text-transform:uppercase;font-size:1em;line-height:2em;padding:0;margin:0 0 .3em;font-weight:700;cursor:default}.vjs-menu-button-popup .vjs-menu{display:none;position:absolute;bottom:0;width:10em;left:-3em;height:0em;border-top-color:#2b333fb3}.vjs-pip-window .vjs-menu-button-popup .vjs-menu{left:unset;right:1em}.vjs-menu-button-popup .vjs-menu .vjs-menu-content{background-color:var(--udexColorGrey10, #1A2733);position:absolute;width:100%;bottom:var(--udex-media-player-controls-bar-height);max-height:15em;text-transform:capitalize}.vjs-subs-caps-button .vjs-menu .vjs-menu-content{min-width:105px}.vjs-layout-tiny .vjs-menu-button-popup .vjs-menu .vjs-menu-content,.vjs-layout-x-small .vjs-menu-button-popup .vjs-menu .vjs-menu-content{max-height:5em}.vjs-layout-small .vjs-menu-button-popup .vjs-menu .vjs-menu-content{max-height:10em}.vjs-layout-medium .vjs-menu-button-popup .vjs-menu .vjs-menu-content{max-height:14em}.vjs-layout-large .vjs-menu-button-popup .vjs-menu .vjs-menu-content,.vjs-layout-x-large .vjs-menu-button-popup .vjs-menu .vjs-menu-content,.vjs-layout-huge .vjs-menu-button-popup .vjs-menu .vjs-menu-content{max-height:25em}.vjs-workinghover .vjs-menu-button-popup.vjs-hover .vjs-menu,.vjs-menu-button-popup .vjs-menu.vjs-lock-showing{display:block}.video-js .vjs-menu-button-inline{transition:all .4s;overflow:hidden}.video-js .vjs-menu-button-inline:before{width:2.222222222em}.video-js .vjs-menu-button-inline:hover,.video-js .vjs-menu-button-inline:focus,.video-js .vjs-menu-button-inline.vjs-slider-active{width:12em}.vjs-menu-button-inline .vjs-menu{opacity:0;height:100%;width:auto;position:absolute;left:4em;top:0;padding:0;margin:0;transition:all .4s}.vjs-menu-button-inline:hover .vjs-menu,.vjs-menu-button-inline:focus .vjs-menu,.vjs-menu-button-inline.vjs-slider-active .vjs-menu{display:block;opacity:1}.vjs-menu-button-inline .vjs-menu-content{width:auto;height:100%;margin:0;overflow:hidden}.video-js .vjs-control-bar{display:none;width:100%;position:absolute;bottom:0;left:0;right:0;height:var(--udex-media-player-controls-bar-height);background-color:var(--udexColorGrey10, #1A2733)}.video-js:not(.vjs-controls-disabled,.vjs-using-native-controls,.vjs-error) .vjs-control-bar.vjs-lock-showing{display:flex!important}.vjs-has-started .vjs-control-bar{display:flex;visibility:visible;opacity:1;transition:visibility .1s,opacity .1s}.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar{visibility:visible;opacity:0;pointer-events:none;transition:visibility 1s,opacity 1s}.vjs-controls-disabled .vjs-control-bar,.vjs-using-native-controls .vjs-control-bar,.vjs-error .vjs-control-bar{display:none!important}.vjs-audio.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar{opacity:1;visibility:visible;pointer-events:auto}.video-js .vjs-control{position:relative;text-align:center;margin:0 16px 0 0;padding:0;height:100%;width:24px;flex:none}.video-js .vjs-control.vjs-fullscreen-control{margin-right:12px}.video-js .vjs-control.vjs-play-control{margin-left:12px}.video-js .vjs-control.vjs-remaining-time,.video-js .vjs-control.vjs-progress-control{margin:0}.video-js .vjs-control.vjs-time-control{margin:0 16px}.video-js .vjs-control.vjs-visible-text{width:auto;padding-left:1em;padding-right:1em}.vjs-button>.vjs-icon-placeholder:before{content:"";font-size:1.8em;line-height:var(--udex-media-player-controls-bar-height);display:block;height:var(--udex-media-player-controls-bar-height);width:100%;background-size:24px 24px;background-repeat:no-repeat;background-position:center}.vjs-play-control.vjs-playing>.vjs-icon-placeholder:before{background-image:var(--udex-media-player-pause-icon)}.vjs-play-control.vjs-paused>.vjs-icon-placeholder:before{background-image:var(--udex-media-player-play-icon)}.vjs-mute-control>.vjs-icon-placeholder:before{background-image:var(--udex-media-player-volume-icon)}.vjs-mute-control.vjs-vol-0>.vjs-icon-placeholder:before{background-image:var(--udex-media-player-volume-muted-icon)}.vjs-subs-caps-button>.vjs-icon-placeholder:before{content:"CC";font-family:var(--sapFontFamily);font-size:14px;font-weight:700}.video-js .vjs-fullscreen-control .vjs-icon-placeholder:before,.vjs-icon-fullscreen-enter:before{background-image:var(--udex-media-player-fullscreen-icon)}.video-js.vjs-fullscreen .vjs-fullscreen-control .vjs-icon-placeholder:before,.vjs-icon-fullscreen-exit:before{background-image:var(--udex-media-player-exit-fullscreen-icon)}.vjs-close-button>.vjs-icon-placeholder:before{background-image:var(--udex-media-player-close-icon)}body.vjs-full-window.vjs-fullscreen .vjs-fullscreen-control>.vjs-icon-placeholder:before{background-image:var(--udex-media-player-close-icon)}.vjs-playback-rate>.vjs-icon-placeholder:before{display:none}.vjs-button>.vjs-icon-placeholder{display:block}.vjs-button>.vjs-svg-icon{display:inline-block}.video-js .vjs-control:focus:before,.video-js .vjs-control:hover:before,.video-js .vjs-control:focus{text-shadow:0em 0em 1em white}.video-js *:not(.vjs-visible-text)>.vjs-control-text{border:0;clip:rect(0 0 0 0);height:1px;overflow:hidden;padding:0;position:absolute;width:1px}.video-js .vjs-custom-control-spacer{display:none}.video-js .vjs-progress-control{cursor:pointer;flex:auto;display:flex;align-items:center;min-width:4em;touch-action:none}.video-js .vjs-progress-control.disabled{cursor:default}.vjs-live .vjs-progress-control{display:none}.vjs-liveui .vjs-progress-control{display:flex;align-items:center}.video-js .vjs-progress-holder{flex:auto;transition:all .2s;height:4px}.video-js .vjs-progress-control .vjs-progress-holder{margin:0}.video-js .vjs-progress-control:hover .vjs-progress-holder{font-size:1.6666666667em}.video-js .vjs-progress-control:hover .vjs-progress-holder.disabled{font-size:1em}.video-js .vjs-progress-holder .vjs-play-progress,.video-js .vjs-progress-holder .vjs-load-progress,.video-js .vjs-progress-holder .vjs-load-progress div{position:absolute;display:block;height:100%;margin:0;padding:0;width:0}.video-js .vjs-play-progress{background-color:#fff}.video-js .vjs-play-progress:before{content:"";position:absolute;right:-4px;line-height:8px;z-index:1;height:8px;width:8px;background-color:#fff;border-radius:8px;bottom:-2px}.vjs-svg-icons-enabled .vjs-play-progress:before{content:none!important}.vjs-play-progress .vjs-svg-icon{position:absolute;top:-.35em;right:-.4em;width:.9em;height:.9em;pointer-events:none;line-height:.15em;z-index:1}.video-js .vjs-load-progress,.video-js .vjs-load-progress div{background:var(--udexColorGrey4 ,#A9B4BE)}.video-js .vjs-time-tooltip{background-color:#fffc;border-radius:.3em;color:#000;float:right;font-family:Arial,Helvetica,sans-serif;font-size:1em;padding:6px 8px 8px;pointer-events:none;position:absolute;top:-3.4em;visibility:hidden;z-index:1}.video-js .vjs-progress-holder:focus .vjs-time-tooltip{display:none}.video-js .vjs-progress-control:hover .vjs-time-tooltip,.video-js .vjs-progress-control:hover .vjs-progress-holder:focus .vjs-time-tooltip{display:block;font-size:.6em;visibility:visible}.video-js .vjs-progress-control.disabled:hover .vjs-time-tooltip{font-size:1em}.video-js .vjs-progress-control .vjs-mouse-display{display:none;position:absolute;width:1px;height:100%;background-color:#000;z-index:1}.video-js .vjs-progress-control:hover .vjs-mouse-display{display:block}.video-js.vjs-user-inactive .vjs-progress-control .vjs-mouse-display{visibility:hidden;opacity:0;transition:visibility 1s,opacity 1s}.vjs-mouse-display .vjs-time-tooltip{color:#fff;background-color:#000;background-color:#000c}.video-js .vjs-slider{position:relative;cursor:pointer;padding:0;margin:0 .45em;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;background-color:var(--udexColorGrey6,#5B738B)}.video-js .vjs-slider.disabled{cursor:default}.video-js .vjs-slider:focus{text-shadow:0em 0em 1em white;box-shadow:0 0 1em #fff}.video-js .vjs-mute-control{cursor:pointer;flex:none}.video-js .vjs-volume-control{cursor:pointer;margin-right:1em;display:flex}.video-js .vjs-volume-control.vjs-volume-horizontal{width:5em}.video-js .vjs-volume-panel .vjs-volume-control{visibility:visible;opacity:0;width:1px;height:1px;margin-left:-1px}.video-js .vjs-volume-panel{transition:width 1s}.video-js .vjs-volume-panel.vjs-hover .vjs-volume-control,.video-js .vjs-volume-panel:active .vjs-volume-control,.video-js .vjs-volume-panel:focus .vjs-volume-control,.video-js .vjs-volume-panel .vjs-volume-control:active,.video-js .vjs-volume-panel.vjs-hover .vjs-mute-control~.vjs-volume-control,.video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active{visibility:visible;opacity:1;position:relative;transition:visibility .1s,opacity .1s,height .1s,width .1s,left 0s,top 0s}.video-js .vjs-volume-panel.vjs-hover .vjs-volume-control.vjs-volume-horizontal,.video-js .vjs-volume-panel:active .vjs-volume-control.vjs-volume-horizontal,.video-js .vjs-volume-panel:focus .vjs-volume-control.vjs-volume-horizontal,.video-js .vjs-volume-panel .vjs-volume-control:active.vjs-volume-horizontal,.video-js .vjs-volume-panel.vjs-hover .vjs-mute-control~.vjs-volume-control.vjs-volume-horizontal,.video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active.vjs-volume-horizontal{width:60px;height:3em;margin-right:0}.video-js .vjs-volume-panel.vjs-hover .vjs-volume-control.vjs-volume-vertical,.video-js .vjs-volume-panel:active .vjs-volume-control.vjs-volume-vertical,.video-js .vjs-volume-panel:focus .vjs-volume-control.vjs-volume-vertical,.video-js .vjs-volume-panel .vjs-volume-control:active.vjs-volume-vertical,.video-js .vjs-volume-panel.vjs-hover .vjs-mute-control~.vjs-volume-control.vjs-volume-vertical,.video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active.vjs-volume-vertical{left:-3.5em;transition:left 0s}.video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover,.video-js .vjs-volume-panel.vjs-volume-panel-horizontal:active,.video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active{width:100px;transition:width .1s}.video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-mute-toggle-only{width:4em}.video-js .vjs-volume-panel .vjs-volume-control.vjs-volume-vertical{height:8em;width:3em;left:-3000em;transition:visibility 1s,opacity 1s,height 1s 1s,width 1s 1s,left 1s 1s,top 1s 1s}.video-js .vjs-volume-panel .vjs-volume-control.vjs-volume-horizontal{transition:visibility 1s,opacity 1s,height 1s 1s,width 1s,left 1s 1s,top 1s 1s}.video-js .vjs-volume-panel{display:flex;align-items:center}.video-js .vjs-volume-bar{margin:1.35em .45em}.vjs-volume-bar.vjs-slider-horizontal{width:5em;height:4px}.vjs-volume-bar.vjs-slider-vertical{width:4px;height:5em;margin:1.35em auto}.video-js .vjs-volume-level{position:absolute;bottom:0;left:0;background-color:#fff}.video-js .vjs-volume-level:before{position:absolute;font-size:.9em;z-index:1}.vjs-slider-vertical .vjs-volume-level{width:.3em}.vjs-slider-vertical .vjs-volume-level:before{top:-.5em;left:-.3em;z-index:1}.vjs-svg-icons-enabled .vjs-volume-level:before{content:none}.vjs-volume-level .vjs-svg-icon{position:absolute;width:.9em;height:.9em;pointer-events:none;z-index:1}.vjs-slider-horizontal .vjs-volume-level{height:.3em}.vjs-slider-horizontal .vjs-volume-level:before{line-height:.35em;right:-.5em}.vjs-slider-horizontal .vjs-volume-level .vjs-svg-icon{right:-.3em;transform:translateY(-50%)}.vjs-slider-vertical .vjs-volume-level .vjs-svg-icon{top:-.55em;transform:translate(-50%)}.video-js .vjs-volume-panel.vjs-volume-panel-vertical{width:4em}.vjs-volume-bar.vjs-slider-vertical .vjs-volume-level{height:100%}.vjs-volume-bar.vjs-slider-horizontal .vjs-volume-level{width:100%}.video-js .vjs-volume-vertical{width:3em;height:8em;bottom:8em;background-color:#a9b4be}.video-js .vjs-volume-horizontal .vjs-menu{left:-2em}.video-js .vjs-volume-tooltip{background-color:#fff;background-color:#fffc;border-radius:.3em;color:#000;float:right;font-family:Arial,Helvetica,sans-serif;font-size:1em;padding:6px 8px 8px;pointer-events:none;position:absolute;top:-3.4em;visibility:hidden;z-index:1}.video-js .vjs-volume-control:hover .vjs-volume-tooltip,.video-js .vjs-volume-control:hover .vjs-progress-holder:focus .vjs-volume-tooltip{display:block;font-size:1em;visibility:visible}.video-js .vjs-volume-vertical:hover .vjs-volume-tooltip,.video-js .vjs-volume-vertical:hover .vjs-progress-holder:focus .vjs-volume-tooltip{left:1em;top:-12px}.video-js .vjs-volume-control.disabled:hover .vjs-volume-tooltip{font-size:1em}.video-js .vjs-volume-control .vjs-mouse-display{display:none;position:absolute;width:100%;height:1px;background-color:#000;z-index:1}.video-js .vjs-volume-horizontal .vjs-mouse-display{width:1px;height:100%}.video-js .vjs-volume-control:hover .vjs-mouse-display{display:block}.video-js.vjs-user-inactive .vjs-volume-control .vjs-mouse-display{visibility:hidden;opacity:0;transition:visibility 1s,opacity 1s}.vjs-mouse-display .vjs-volume-tooltip{color:#fff;background-color:#000;background-color:#000c}.vjs-poster{display:inline-block;vertical-align:middle;cursor:pointer;margin:0;padding:0;position:absolute;inset:0;height:100%}.vjs-has-started .vjs-poster,.vjs-using-native-controls .vjs-poster{display:none}.vjs-audio.vjs-has-started .vjs-poster,.vjs-has-started.vjs-audio-poster-mode .vjs-poster,.vjs-pip-container.vjs-has-started .vjs-poster{display:block}.vjs-poster img{width:100%;height:100%;-o-object-fit:contain;object-fit:contain}.video-js .vjs-live-control{display:flex;align-items:flex-start;flex:auto;font-size:1em;line-height:3em}.video-js:not(.vjs-live) .vjs-live-control,.video-js.vjs-liveui .vjs-live-control{display:none}.video-js .vjs-seek-to-live-control{align-items:center;cursor:pointer;flex:none;display:inline-flex;height:100%;padding-left:.5em;padding-right:.5em;font-size:1em;line-height:3em;width:auto;min-width:4em}.video-js.vjs-live:not(.vjs-liveui) .vjs-seek-to-live-control,.video-js:not(.vjs-live) .vjs-seek-to-live-control{display:none}.vjs-seek-to-live-control.vjs-control.vjs-at-live-edge{cursor:auto}.vjs-seek-to-live-control .vjs-icon-placeholder{margin-right:.5em;color:#888}.vjs-svg-icons-enabled .vjs-seek-to-live-control{line-height:0}.vjs-seek-to-live-control .vjs-svg-icon{width:1em;height:1em;pointer-events:none;fill:#888}.vjs-seek-to-live-control.vjs-control.vjs-at-live-edge .vjs-icon-placeholder{color:red}.vjs-seek-to-live-control.vjs-control.vjs-at-live-edge .vjs-svg-icon{fill:red}.video-js .vjs-time-control{flex:none;font-size:var(--udexTypographyBodyXXSFontSize, 12px);line-height:var(--udex-media-player-controls-bar-height);min-width:2em;width:auto}.vjs-live .vjs-time-control,.vjs-live .vjs-time-divider,.video-js .vjs-current-time,.video-js .vjs-duration{display:none}.vjs-time-divider{display:none;line-height:3em}.video-js .vjs-play-control{cursor:pointer}.video-js .vjs-play-control .vjs-icon-placeholder{flex:none}.vjs-text-track-display{position:absolute;bottom:var(--udex-media-player-controls-bar-height);left:0;right:0;top:0;pointer-events:none}.vjs-error .vjs-text-track-display{display:none}.video-js.vjs-controls-disabled .vjs-text-track-display,.video-js.vjs-user-inactive.vjs-playing .vjs-text-track-display{bottom:1em}.video-js .vjs-text-track{font-size:1.4em;text-align:center;margin-bottom:.1em}.vjs-subtitles{color:#fff}.vjs-captions{color:#fc6}.vjs-tt-cue{display:block}video::-webkit-media-text-track-display{transform:translateY(-3em)}.video-js.vjs-controls-disabled video::-webkit-media-text-track-display,.video-js.vjs-user-inactive.vjs-playing video::-webkit-media-text-track-display{transform:translateY(-1.5em)}.video-js .vjs-picture-in-picture-control{display:none;cursor:pointer;flex:none}.vjs-pip-window .vjs-picture-in-picture-control{display:none}.video-js .vjs-fullscreen-control{cursor:pointer;flex:none}.vjs-pip-window .vjs-fullscreen-control{display:none}.vjs-playback-rate>.vjs-menu-button,.vjs-playback-rate .vjs-playback-rate-value{position:absolute;top:0;left:0;width:100%;height:100%}.vjs-playback-rate .vjs-playback-rate-value{pointer-events:none;font-size:14px;font-weight:700;line-height:var(--udex-media-player-controls-bar-height);text-align:center}.vjs-playback-rate .vjs-menu{width:4em;left:0}.vjs-error .vjs-error-display .vjs-modal-dialog-content{font-size:1.4em;text-align:center}.vjs-loading-spinner{display:none;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);opacity:.85;text-align:left;border:.6em solid rgba(43,51,63,.7);box-sizing:border-box;background-clip:padding-box;width:5em;height:5em;border-radius:50%;visibility:hidden}.vjs-error .vjs-loading-spinner{display:none}.vjs-seeking .vjs-loading-spinner:before,.vjs-waiting .vjs-loading-spinner:before{border-top-color:#fff}.vjs-seeking .vjs-loading-spinner:after,.vjs-waiting .vjs-loading-spinner:after{border-top-color:#fff;animation-delay:.44s}.vjs-chapters-button .vjs-menu ul{width:24em}.vjs-subs-caps-button+.vjs-menu .vjs-captions-menu-item .vjs-svg-icon{width:1.5em;height:1.5em}.video-js .vjs-subs-caps-button+.vjs-menu .vjs-captions-menu-item .vjs-menu-item-text .vjs-icon-placeholder{vertical-align:middle;display:inline-block;margin-bottom:-.1em}.video-js .vjs-audio-button+.vjs-menu .vjs-description-menu-item .vjs-menu-item-text .vjs-icon-placeholder,.video-js .vjs-audio-button+.vjs-menu .vjs-main-desc-menu-item .vjs-menu-item-text .vjs-icon-placeholder{vertical-align:middle;display:inline-block;margin-bottom:-.1em}.video-js.vjs-layout-small .vjs-current-time,.video-js.vjs-layout-small .vjs-time-divider,.video-js.vjs-layout-small .vjs-duration,.video-js.vjs-layout-small .vjs-remaining-time,.video-js.vjs-layout-small .vjs-playback-rate,.video-js.vjs-layout-small .vjs-volume-control,.video-js.vjs-layout-x-small .vjs-current-time,.video-js.vjs-layout-x-small .vjs-time-divider,.video-js.vjs-layout-x-small .vjs-duration,.video-js.vjs-layout-x-small .vjs-remaining-time,.video-js.vjs-layout-x-small .vjs-playback-rate,.video-js.vjs-layout-x-small .vjs-volume-control,.video-js.vjs-layout-tiny .vjs-current-time,.video-js.vjs-layout-tiny .vjs-time-divider,.video-js.vjs-layout-tiny .vjs-duration,.video-js.vjs-layout-tiny .vjs-remaining-time,.video-js.vjs-layout-tiny .vjs-playback-rate,.video-js.vjs-layout-tiny .vjs-volume-control{display:none}.video-js.vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal:hover,.video-js.vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal:active,.video-js.vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active,.video-js.vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover,.video-js.vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal:hover,.video-js.vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal:active,.video-js.vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active,.video-js.vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover,.video-js.vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal:hover,.video-js.vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal:active,.video-js.vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active,.video-js.vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover{width:auto;width:initial}.video-js.vjs-layout-x-small .vjs-progress-control,.video-js.vjs-layout-tiny .vjs-progress-control{display:none}.video-js.vjs-layout-x-small .vjs-custom-control-spacer{flex:auto;display:block}.vjs-modal-dialog.vjs-text-track-settings{background-color:#2b333f;background-color:#2b333fbf;color:#fff;height:70%}.vjs-error .vjs-text-track-settings{display:none}.vjs-text-track-settings .vjs-modal-dialog-content{display:table}.vjs-text-track-settings .vjs-track-settings-colors,.vjs-text-track-settings .vjs-track-settings-font,.vjs-text-track-settings .vjs-track-settings-controls{display:table-cell}.vjs-text-track-settings .vjs-track-settings-controls{text-align:right;vertical-align:bottom}.vjs-text-track-settings select{font-size:inherit}.vjs-track-setting>select{margin-right:1em;margin-bottom:.5em}.vjs-text-track-settings fieldset{margin:10px;border:none}.vjs-text-track-settings fieldset span{display:inline-block;padding:0 .6em .8em}.vjs-text-track-settings fieldset span>select{max-width:7.3em}.vjs-text-track-settings legend{color:#fff;font-weight:700;font-size:1.2em}.vjs-text-track-settings .vjs-label{margin:0 .5em .5em 0}.vjs-track-settings-controls button:focus,.vjs-track-settings-controls button:active{outline-style:solid;outline-width:medium;background-image:linear-gradient(0deg,#fff 88%,#73859f 100%)}.vjs-track-settings-controls button:hover{color:#2b333fbf}.vjs-track-settings-controls button{background-color:#fff;background-image:linear-gradient(-180deg,#fff 88%,#73859f 100%);color:#2b333f;cursor:pointer;border-radius:2px}.vjs-track-settings-controls .vjs-default-button{margin-right:1em}.vjs-title-bar{background:rgba(0,0,0,.9);background:linear-gradient(180deg,rgba(0,0,0,.9) 0%,rgba(0,0,0,.7) 60%,rgba(0,0,0,0) 100%);font-size:1.2em;line-height:1.5;transition:opacity .1s;padding:.666em 1.333em 4em;pointer-events:none;position:absolute;top:0;width:100%}.vjs-error .vjs-title-bar{display:none}.vjs-title-bar-title,.vjs-title-bar-description{margin:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.vjs-title-bar-title{font-weight:700;margin-bottom:.333em}.vjs-playing.vjs-user-inactive .vjs-title-bar{opacity:0;transition:opacity 1s}.video-js .vjs-skip-forward-5,.video-js .vjs-skip-forward-10,.video-js .vjs-skip-forward-30,.video-js .vjs-skip-backward-5,.video-js .vjs-skip-backward-10,.video-js .vjs-skip-backward-30{cursor:pointer}.vjs-resize-manager{position:absolute;top:0;left:0;width:100%;height:100%;border:none;z-index:-1000}.js-focus-visible .video-js *:focus:not(.focus-visible){outline:none}.video-js *:focus:not(:focus-visible){outline:none}@media (max-width: 980px){.video-js .vjs-control{width:18px}.vjs-button>.vjs-icon-placeholder:before{background-size:18px 18px}.vjs-button>.vjs-icon-placeholder:before{line-height:var(--udex-media-player-controls-bar-small-height);height:var(--udex-media-player-controls-bar-small-height)}.video-js .vjs-control-bar{height:var(--udex-media-player-controls-bar-small-height)}.vjs-text-track-display,.vjs-menu-button-popup .vjs-menu .vjs-menu-content{bottom:var(--udex-media-player-controls-bar-small-height)}.vjs-playback-rate .vjs-playback-rate-value,.video-js .vjs-time-control{line-height:var(--udex-media-player-controls-bar-small-height)}}
` };
var Dt = function(i, e, t, s) {
  var r = arguments.length, n = r < 3 ? e : s === null ? s = Object.getOwnPropertyDescriptor(e, t) : s, a;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    n = Reflect.decorate(i, e, t, s);
  else
    for (var l = i.length - 1; l >= 0; l--)
      (a = i[l]) && (n = (r < 3 ? a(n) : r > 3 ? a(e, t, n) : a(e, t)) || n);
  return r > 3 && n && Object.defineProperty(e, t, n), n;
};
let at = class extends xg {
  onEnterDOM() {
    var r, n;
    if (this._youtubeSrc || this._vimeoSrc)
      return;
    const e = L(((r = this.shadowRoot) == null ? void 0 : r.querySelector(".udex-media-player__video")) || "");
    this.poster && e.poster(this.poster);
    const t = (n = e.getChild("BigPlayButton")) == null ? void 0 : n.el_, s = new Cg();
    s.name = "play", t.appendChild(s), !this.audioOnly && e.options({
      controlBar: {
        pictureInPictureToggle: !1,
        subtitlesButton: !0,
        remainingTimeDisplay: !0
      }
    });
  }
  get _tracks() {
    return this.getSlottedNodes("caption");
  }
  get _vimeoSrc() {
    return this.source.includes("vimeo");
  }
  get _youtubeSrc() {
    return this.source.includes("youtube");
  }
  get aspectRatioClass() {
    switch (this.aspectRatio) {
      case "16:9":
        return "vjs-16-9";
      case "9:16":
        return "vjs-9-16";
      case "4:3":
        return "vjs-4-3";
      case "1:1":
        return "vjs-1-1";
      default:
        return "";
    }
  }
};
Dt([
  Qt({ type: String, defaultValue: "" })
], at.prototype, "source", void 0);
Dt([
  Qt({ type: String, defaultValue: "video/mp4" })
], at.prototype, "type", void 0);
Dt([
  Qt({ type: String, defaultValue: "" })
], at.prototype, "title", void 0);
Dt([
  Qt({ type: Boolean, defaultValue: !1 })
], at.prototype, "audioOnly", void 0);
Dt([
  Qt({ type: String, defaultValue: "" })
], at.prototype, "poster", void 0);
Dt([
  Tg({ type: HTMLElement, default: !0, individualSlots: !0 })
], at.prototype, "caption", void 0);
Dt([
  Qt({ type: String, defaultValue: "" })
], at.prototype, "width", void 0);
Dt([
  Qt({ type: String, defaultValue: "" })
], at.prototype, "height", void 0);
Dt([
  Qt({ type: String, defaultValue: "16:9" })
], at.prototype, "aspectRatio", void 0);
at = Dt([
  bg({
    tag: "udex-media-player",
    renderer: Sg,
    styles: XT,
    template: UT
  })
], at);
at.define();
